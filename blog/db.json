{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/livemylife/source/dist/APlayer.min.css","path":"dist/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/dist/APlayer.min.css.map","path":"dist/APlayer.min.css.map","modified":1,"renderable":1},{"_id":"themes/livemylife/source/dist/APlayer.min.js","path":"dist/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/dist/APlayer.min.js.map","path":"dist/APlayer.min.js.map","modified":1,"renderable":1},{"_id":"themes/livemylife/source/dist/music.js","path":"dist/music.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/APlayer.min.css","path":"js/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/APlayer.min.css.map","path":"js/APlayer.min.css.map","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/APlayer.min.js","path":"js/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/APlayer.min.js.map","path":"js/APlayer.min.js.map","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/catalog.js","path":"js/catalog.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/langselect.js","path":"js/langselect.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/line.js","path":"js/line.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/mouseclick.js","path":"js/mouseclick.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","path":"js/ribbonDynamic.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/ziploader.js","path":"js/ziploader.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/catalog.styl","path":"css/catalog.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/livemylife.css","path":"css/livemylife.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/scroll.css","path":"css/scroll.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/themecolor.css","path":"css/themecolor.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/top.css","path":"css/top.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/wave.css","path":"css/wave.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/viewer.min.css","path":"css/viewer.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk.js","path":"js/comment/gitalk.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","path":"js/viewer/pic-viewer.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","path":"js/viewer/viewer.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","path":"js/comment/gitalk_.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up.png","path":"css/images/beside_up.png","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up2.png","path":"css/images/beside_up2.png","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","path":"css/images/beside_up_white.png","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","path":"css/images/beside_up_white2.png","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/LICENSE","path":"LICENSE","modified":1,"renderable":0},{"_id":"source/music/music.mp3","path":"music/music.mp3","modified":1,"renderable":0},{"_id":"source/img/220926_smailsdk/smail_bg.webp","path":"img/220926_smailsdk/smail_bg.webp","modified":1,"renderable":0},{"_id":"source/img/220928/aboutme_bg.png","path":"img/220928/aboutme_bg.png","modified":1,"renderable":0},{"_id":"source/img/220928/aboutme_bg_sz.jpeg","path":"img/220928/aboutme_bg_sz.jpeg","modified":1,"renderable":0},{"_id":"source/img/220928/android_init_bg.png","path":"img/220928/android_init_bg.png","modified":1,"renderable":0},{"_id":"source/img/220928/android_sysserver_bg.png","path":"img/220928/android_sysserver_bg.png","modified":1,"renderable":0},{"_id":"source/img/220928/android_zygot_bg.png","path":"img/220928/android_zygot_bg.png","modified":1,"renderable":0},{"_id":"source/img/220928/main_index_bg.webp","path":"img/220928/main_index_bg.webp","modified":1,"renderable":0},{"_id":"source/img/220928/tag_bg.webp","path":"img/220928/tag_bg.webp","modified":1,"renderable":0},{"_id":"source/img/220928/total_bg.png","path":"img/220928/total_bg.png","modified":1,"renderable":0},{"_id":"source/img/220928/wuaipojie.jpeg","path":"img/220928/wuaipojie.jpeg","modified":1,"renderable":0},{"_id":"source/img/220928/xposted_bg.png","path":"img/220928/xposted_bg.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404_bg.png","path":"img/header_img/404_bg.png","modified":1,"renderable":0},{"_id":"source/img/header_img/categories_bg.png","path":"img/header_img/categories_bg.png","modified":1,"renderable":0},{"_id":"source/img/header_img/index_new_bg.png","path":"img/header_img/index_new_bg.png","modified":1,"renderable":0},{"_id":"source/img/header_img/lml_bg8.png","path":"img/header_img/lml_bg8.png","modified":1,"renderable":0},{"_id":"source/img/header_img/main_sea_bg.png","path":"img/header_img/main_sea_bg.png","modified":1,"renderable":0},{"_id":"source/img/header_img/tag_new_bg.png","path":"img/header_img/tag_new_bg.png","modified":1,"renderable":0},{"_id":"source/img/index/index_bg.webp","path":"img/index/index_bg.webp","modified":1,"renderable":0},{"_id":"source/img/other/bottom2top.png","path":"img/other/bottom2top.png","modified":1,"renderable":0},{"_id":"source/img/scenery/about_bg4.png","path":"img/scenery/about_bg4.png","modified":1,"renderable":0},{"_id":"source/img/scenery/treat_me_to_coffee.png","path":"img/scenery/treat_me_to_coffee.png","modified":1,"renderable":0},{"_id":"source/img/2210/about-me.jpg","path":"img/2210/about-me.jpg","modified":1,"renderable":0},{"_id":"source/img/2210/divider-fenlei.jpg","path":"img/2210/divider-fenlei.jpg","modified":1,"renderable":0},{"_id":"source/img/2210/mine-englishbook.jpg","path":"img/2210/mine-englishbook.jpg","modified":1,"renderable":0},{"_id":"source/img/2210/mine_bookmark.jpg","path":"img/2210/mine_bookmark.jpg","modified":1,"renderable":0},{"_id":"source/img/2210/page-native.jpg","path":"img/2210/page-native.jpg","modified":1,"renderable":0},{"_id":"source/img/2210/tag-map.jpg","path":"img/2210/tag-map.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/nick-name.png","path":"img/signature/nick-name.png","modified":1,"renderable":0},{"_id":"source/img/220923_classmodify/class_bg.webp","path":"img/220923_classmodify/class_bg.webp","modified":1,"renderable":0},{"_id":"source/img/220923_classmodify/ymclass_bg.png","path":"img/220923_classmodify/ymclass_bg.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"3bdf0ec6214c65c8e924c8f716fe73f13471ae3c","modified":1665409099145},{"_id":"source/CNAME","hash":"3a509ddb0fb53de725c6a840d7fad5b072251535","modified":1665409099145},{"_id":"source/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1665409099145},{"_id":"source/_posts/page- 咋们一起修改 class 文件.md","hash":"e2b6beb4712a28c3fef81ee940439c72cf205984","modified":1665409099146},{"_id":"source/_posts/page-Native信号表.md","hash":"329f40f379dca2396086913a5d73bf4cfdde64c3","modified":1665409099146},{"_id":"source/about/index.md","hash":"a3fc5d2604cf88ba4406a458cff55cb78ce284d9","modified":1665839550696},{"_id":"source/categories/index.md","hash":"74b2a570ce9d2ae889b5df96e828c0230c0df9af","modified":1665810398242},{"_id":"source/archive/index.md","hash":"208b675a24ebce3c19596c4630a3eb24c1dd4d4b","modified":1665409099150},{"_id":"source/tags/index.md","hash":"410664ae1eff6d2f91a4ec68ab2a0a199322f712","modified":1665837022833},{"_id":"source/img/.DS_Store","hash":"a3c1970ed2d253b8db6fea9b054f8d5f46031f23","modified":1665897207667},{"_id":"source/.DS_Store","hash":"454f5e69a0d70a036ef1728eb37ae25416f2db26","modified":1665893549542},{"_id":"source/_posts/undefined/Android系统启动systemserver进程.md","hash":"7e6d2a4c8d73d985320d7a69c861351d99705e8d","modified":1665409099147},{"_id":"source/_posts/undefined/Android-Framework目录.md","hash":"f857da3cfaa6c038ae736a3276219972285adfce","modified":1666490419276},{"_id":"source/_posts/undefined/Android系统启动init进程.md","hash":"b95df51e0765484d109c2a448342686df67f9ce2","modified":1665409099147},{"_id":"source/_posts/undefined/Android系统启动zgote进程.md","hash":"c2a5405e2ac9e4c02b38ab7bbc3358bac3c67ffd","modified":1665409099147},{"_id":"source/_posts/undefined/android-pm.md","hash":"e3ee75a58825658aee50c1b03f625a7b1cfbeddc","modified":1666533696656},{"_id":"source/_posts/undefined/Android目录.md","hash":"5b0e886e57c38ad585df4076e8c2a0af495b4b54","modified":1666278128973},{"_id":"source/_posts/undefined/Android系统桌面启动二.md","hash":"b83136c614df092542a0d994cb93af72b45d2682","modified":1665409099148},{"_id":"source/_posts/undefined/class和dalvik字节码.md","hash":"571741256ff55f67dd18ca6275043d47ea1d4987","modified":1666098829592},{"_id":"source/_posts/undefined/了解插桩.md","hash":"7d0b2e29bec1d015c13c0c9970ee98e8982f7821","modified":1665900579052},{"_id":"source/_posts/undefined/Android系统桌面启动一.md","hash":"3a1bdc330c768f4ec08ba5d7fa4190682b33c3c3","modified":1665409099148},{"_id":"source/_posts/undefined/你我字节码.md","hash":"6f662dc19a80a5bcb5390b3ef773715528edd67f","modified":1665409099149},{"_id":"source/_posts/undefined/从smail接入第三方.md","hash":"48e946f86651e83e8574762bbaca09cff99eacb4","modified":1665409099149},{"_id":"source/_posts/undefined/吾爱破解.md","hash":"d7483385ad32e0106064845b3cf55c4c0f0b7682","modified":1665810510504},{"_id":"source/_posts/undefined/字节码Dalvik.md","hash":"8330d27dcfd5edcaaa4ca3b83bb5ef8da9dd2ce7","modified":1666012734570},{"_id":"source/_posts/undefined/我的单词本.md","hash":"ec3610a5dc68981d09c6e042cc6fca965db15dd1","modified":1666499718634},{"_id":"source/_posts/undefined/我的工具.md","hash":"bc7686efe7bcd3f149f0269f37fdcb2577fdb378","modified":1665900941246},{"_id":"source/_posts/undefined/解决不完的Native崩溃.md","hash":"0e1835f4c9008e361272ee67a7640817c25e67b7","modified":1665897893990},{"_id":"source/_posts/undefined/毕业一年.md","hash":"265fed782331931cecdc248ffb8b9731903c959d","modified":1665897748999},{"_id":"source/_posts/undefined/设备信息获取检测.md","hash":"bc086513a68a92c76ae963b665f3c8ae8266d9eb","modified":1665409099150},{"_id":"source/img/220926_smailsdk/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1664198119837},{"_id":"source/img/220928/wuaipojie.jpeg","hash":"b7ec8e12e40a6583632a895de9be4e32c55df4d0","modified":1665409594026},{"_id":"source/img/other/bottom2top.png","hash":"35dbb5fa18be3c15a8027c81a41aa267226e8230","modified":1665409099170},{"_id":"source/img/scenery/treat_me_to_coffee.png","hash":"83619ac3af6e3463a3cb462cb6e31a38543b06e6","modified":1665409099170},{"_id":"source/img/2210/.DS_Store","hash":"b0ba021771aba822bd777672a8b19f4ea13a4310","modified":1665897207668},{"_id":"source/img/220923_classmodify/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1664110705365},{"_id":"themes/livemylife/layout/_partial/comment.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1665409099202},{"_id":"source/img/220928/main_index_bg.webp","hash":"7da131e67e4b18d0c1917823621662c781d3afc2","modified":1665409099160},{"_id":"source/img/scenery/about_bg4.png","hash":"559928668f158e2117a47049ea23caec99387b15","modified":1665409099170},{"_id":"source/img/signature/nick-name.png","hash":"621bb5f186dbaa4b4e7cd6753b3cd4fe0ef812a3","modified":1665409099171},{"_id":"source/img/220923_classmodify/class_bg.webp","hash":"a37f0bb77fbcbf74d400e44a9250f606799b6c2f","modified":1665409099151},{"_id":"themes/livemylife/.DS_Store","hash":"e61b62aad7e2eefcf1fecc80adb981decddf61ed","modified":1665893521494},{"_id":"themes/livemylife/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1665409099200},{"_id":"themes/livemylife/_config.yml","hash":"7638a858e59f075c4066eb9ca880f3bce75ccd04","modified":1665409099200},{"_id":"themes/livemylife/languages/cn.yml","hash":"000466cb7c925e03986b8149235c05822f77e868","modified":1665409099201},{"_id":"themes/livemylife/languages/default.yml","hash":"9f7c6711fdee2cf67277baf810c551723be21c22","modified":1665409099201},{"_id":"themes/livemylife/layout/404.ejs","hash":"007f4b206b68a000b891115100a0a2992b0732f4","modified":1665409099201},{"_id":"themes/livemylife/languages/en.yml","hash":"9f7c6711fdee2cf67277baf810c551723be21c22","modified":1665409099201},{"_id":"themes/livemylife/layout/_layout.swig","hash":"1831f3852bb3545e630530318e2be42e5c23aff7","modified":1665409099201},{"_id":"themes/livemylife/layout/archive.ejs","hash":"c09dd7bb49a28ec5ac65ef2b4d9f4e0e2c4e31a4","modified":1665409099206},{"_id":"themes/livemylife/layout/about.ejs","hash":"145d53bf1ed755cdcff669eed2c1a1862eb9fb98","modified":1665409099206},{"_id":"themes/livemylife/layout/categories.ejs","hash":"3b074215b4880c6c5fcc428f586587f8c92d78a2","modified":1665409099206},{"_id":"themes/livemylife/layout/index.ejs","hash":"aca8ba8a3c52e3497fcf71ab8ad3ec7d2fa13058","modified":1665409099206},{"_id":"themes/livemylife/layout/keynote.ejs","hash":"a919348ff0eea1e3df368dcb082d2fb5a2d0aca0","modified":1665409099206},{"_id":"themes/livemylife/layout/page.ejs","hash":"205c90e8111e6f7388015fccc7f91d015158a2db","modified":1665409099207},{"_id":"themes/livemylife/layout/layout.ejs","hash":"8be005bb924af5b7fe604ef2c5ff7c903b8e4f69","modified":1665409099207},{"_id":"themes/livemylife/layout/_partial/anchorjs.ejs","hash":"9a9ff58f3767c7d23c029fcb2030ea353824f79a","modified":1665409099201},{"_id":"themes/livemylife/layout/post.ejs","hash":"49344f40ae0b386eb14d245d07c3378a06d1a651","modified":1665409099207},{"_id":"themes/livemylife/layout/_partial/catalog.ejs","hash":"11db668dce21b88b0648478ad82e053f50f06919","modified":1665409099202},{"_id":"themes/livemylife/layout/_partial/gitter.ejs","hash":"348193932983df5196a3bc49e8b59276d978b09f","modified":1665409099202},{"_id":"themes/livemylife/layout/_partial/header.ejs","hash":"b053ba8e43345e34e33dab9f948fc6075f46dbef","modified":1665409099203},{"_id":"themes/livemylife/layout/_partial/footer.ejs","hash":"ad43ec694f8f59bee8edf53fc812f36864bbb6a8","modified":1665409099202},{"_id":"themes/livemylife/layout/_partial/head.ejs","hash":"76889b25d50a38617ccd7474b987f5e38218911d","modified":1665409099202},{"_id":"themes/livemylife/layout/_partial/music.ejs","hash":"5acec22a2e417185da0d62290f7581e1f21b7ca4","modified":1665409099203},{"_id":"themes/livemylife/layout/_partial/langselect.ejs","hash":"6ead51e4f41fd08eb086edcf7964431dcb8ded8e","modified":1665409099203},{"_id":"themes/livemylife/layout/_partial/nav.ejs","hash":"a6e6860aa1aae1c9a3a0fd9760f04955b834c333","modified":1665409099203},{"_id":"themes/livemylife/layout/tags.ejs","hash":"3bb8d1c43fd018cafd049e9cd2af6586e9596e38","modified":1665409099207},{"_id":"themes/livemylife/layout/_partial/pagination.ejs","hash":"1c3f390b60dba1da3d57fb7fa95c0dd96efa99b8","modified":1665409099203},{"_id":"themes/livemylife/layout/_partial/sidebar.ejs","hash":"693e7199e6cbdd3d1fea8d6726786a43c548bd78","modified":1665409099204},{"_id":"themes/livemylife/layout/_partial/search.ejs","hash":"6f297d6bff4bc50bb88802c11fe1fd1368200bad","modified":1665409099204},{"_id":"themes/livemylife/layout/_partial/socialshare.ejs","hash":"55f93924d5b876ff35d59f27f12d0934d8209806","modified":1665409099204},{"_id":"themes/livemylife/layout/_partial/themecolor.ejs","hash":"c0da1e6af0e15dd1eb4a07fa8be93fa637fca8e8","modified":1665409099204},{"_id":"themes/livemylife/layout/_partial/tip.ejs","hash":"d535578b4629e830a2518695e9002f4aca115fc3","modified":1665409099204},{"_id":"themes/livemylife/layout/_widget/category.ejs","hash":"b80bc8197ad14393ef4d0c47dcf744d666327e65","modified":1665409099205},{"_id":"themes/livemylife/layout/_widget/featured-tags.ejs","hash":"fa33001a4d3a451d8c68ba1a80f92d049f8dd5a2","modified":1665409099205},{"_id":"themes/livemylife/layout/_widget/friends-blog.ejs","hash":"d4050312c5dbec1d5d92881a54367176fea4f955","modified":1665409099205},{"_id":"themes/livemylife/source/dist/APlayer.min.css","hash":"fd1d253594e71700e185a9841664e3cbc85501d2","modified":1665409099210},{"_id":"themes/livemylife/layout/_widget/visitor.ejs","hash":"eae7005b1b62019a08286d7ccf555e9c8d1626ee","modified":1665409099206},{"_id":"themes/livemylife/layout/_widget/archive.ejs","hash":"f943d9b3ab48506a290b02aaff9560675588d495","modified":1665409099204},{"_id":"themes/livemylife/source/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1665409099211},{"_id":"themes/livemylife/layout/_widget/recent-posts.ejs","hash":"4420ebcb7cfd6e4abc09fb29c63e76a6c5598f14","modified":1665409099205},{"_id":"themes/livemylife/source/dist/music.js","hash":"3eddc21b70a147c96059e2120eb21ec5511b86ca","modified":1665409099212},{"_id":"themes/livemylife/layout/_widget/short-about.ejs","hash":"4555fad1914f034c8f95e3b1b39fbd8f9bbffe9f","modified":1665837773777},{"_id":"themes/livemylife/source/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1665409099211},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1665409099212},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1665409099212},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1665409099213},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1665409099213},{"_id":"themes/livemylife/source/js/APlayer.min.css","hash":"fd1d253594e71700e185a9841664e3cbc85501d2","modified":1665409099213},{"_id":"themes/livemylife/source/js/catalog.js","hash":"059f3f31492e5b1a9dddf422a48c32969d247415","modified":1665409099215},{"_id":"themes/livemylife/source/js/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1665409099213},{"_id":"themes/livemylife/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1665409099219},{"_id":"themes/livemylife/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1665409099214},{"_id":"themes/livemylife/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1665409099218},{"_id":"themes/livemylife/source/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1665409099213},{"_id":"themes/livemylife/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1665409099220},{"_id":"themes/livemylife/source/js/langselect.js","hash":"52ca6e30814272bc329868944f528f89630404e4","modified":1665409099220},{"_id":"themes/livemylife/source/js/mouseclick.js","hash":"b27fb5ae779a855a93b85c923f1ac927ba52dc86","modified":1665409099220},{"_id":"themes/livemylife/source/js/scroll.js","hash":"265a4c4fc33b5b44b620db64ff31d2bc05d233e9","modified":1665409099220},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","hash":"576f0ce237c87738277868489af30b6538681201","modified":1665409099220},{"_id":"themes/livemylife/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1665409099220},{"_id":"themes/livemylife/source/js/ziploader.js","hash":"9c25324caf53b56cb68839dcfb34e61e5a6a63f3","modified":1665409099221},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1665409099220},{"_id":"themes/livemylife/source/css/beantech.min.css","hash":"53f4e22f888b8842884f7243392f3a02fc81d2c9","modified":1665809096887},{"_id":"themes/livemylife/source/js/line.js","hash":"d69576bfe75048345a137c148ffca1d9985811dc","modified":1665409099220},{"_id":"themes/livemylife/source/css/catalog.styl","hash":"b4b4b71b20d8b6bce185b962c2feb79314b7813c","modified":1665409099209},{"_id":"themes/livemylife/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1665409099208},{"_id":"themes/livemylife/source/css/gitalk.css","hash":"51783fd60dff05e8e339ff83b41504538662f6ca","modified":1665409099209},{"_id":"themes/livemylife/source/css/livemylife.css","hash":"1901c580d1f80f02e266ff371dc15d4e5e824a2d","modified":1665409099209},{"_id":"themes/livemylife/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1665409099209},{"_id":"themes/livemylife/source/css/rocket.styl","hash":"d81a811f3b7149b519f8cebf9a9b5719dd4870c0","modified":1665409099209},{"_id":"themes/livemylife/source/css/search.css","hash":"3ff388d8da7e2c5aac7071f2dccda767ec9c5647","modified":1665409099210},{"_id":"themes/livemylife/source/css/signature.styl","hash":"afc37961c8fc8ddb1a31aae16dcaa3ced58b4633","modified":1665409099210},{"_id":"themes/livemylife/source/css/scroll.css","hash":"ba16b97532dd6aaec66a82f3c33cc989d361fa7a","modified":1665409099209},{"_id":"themes/livemylife/source/css/top.css","hash":"0303375fbe2ca942cd3d86f31d12fef9bf5785af","modified":1665409099210},{"_id":"themes/livemylife/source/css/themecolor.css","hash":"2b1c2095577d95dfe92f3e7b924ea3db50e61fab","modified":1665409099210},{"_id":"themes/livemylife/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1665409099210},{"_id":"themes/livemylife/source/css/wave.css","hash":"041f3b4a78e2840ba17679cea05fb14bb646722f","modified":1665409099210},{"_id":"themes/livemylife/source/css/viewer.min.css","hash":"0e045aa3df1be7d138caa701ec3aa623ccc7a52d","modified":1665409099210},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","hash":"9bf7c37cce781628346803ed7ce8f02623c2d013","modified":1665409099220},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","hash":"ae5380974b6fb8b0e15356c8418186c6c0821222","modified":1665409099221},{"_id":"themes/livemylife/source/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1665409099209},{"_id":"themes/livemylife/source/css/beantech.css","hash":"f0869d21e3b5cadf6c3b69fa41c6562e2ab945c6","modified":1665809092303},{"_id":"themes/livemylife/source/css/hux-blog.min.css","hash":"4a48dc3ab8d64a73c8b830027c47474a6828b81d","modified":1665409099209},{"_id":"themes/livemylife/source/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1665409099209},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1665409099209},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1665409099209},{"_id":"source/img/header_img/main_sea_bg.png","hash":"d87fb98fd15e51e63d8f153bfe9f61ab7898002b","modified":1665409099169},{"_id":"source/img/2210/page-native.jpg","hash":"dfdff38d5d160d1a5a3d9965a07ef623e883f67a","modified":1665895072038},{"_id":"source/img/2210/about-me.jpg","hash":"af166874495eb9942acc4cd0dc3be7311e3ad159","modified":1665835603407},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1665409099212},{"_id":"themes/livemylife/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1665409099214},{"_id":"themes/livemylife/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1665409099220},{"_id":"themes/livemylife/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1665409099208},{"_id":"source/img/header_img/categories_bg.png","hash":"310b37816ecac824175fd171a92308a9453c2723","modified":1665409099167},{"_id":"source/img/2210/mine-englishbook.jpg","hash":"788b3017d0c36a8c874349cfbede0698ae6365c7","modified":1665893178506},{"_id":"source/img/2210/tag-map.jpg","hash":"d8023a6bbe7426c8f122b31d53c47c24e5cafffc","modified":1665836959597},{"_id":"themes/livemylife/source/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1665409099212},{"_id":"themes/livemylife/source/js/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1665409099214},{"_id":"themes/livemylife/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1665409099208},{"_id":"source/img/220928/aboutme_bg_sz.jpeg","hash":"ab8019795ce9d633d87ee18255c45f857fc9c4a7","modified":1665409099156},{"_id":"themes/livemylife/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1665409099219},{"_id":"source/img/220926_smailsdk/smail_bg.webp","hash":"3c42495df222245998b7213c8159c4db72319b3c","modified":1665409099153},{"_id":"source/img/220928/android_init_bg.png","hash":"2affcb6364172fdd77cb4d752d4bd6f136ce054a","modified":1665409099157},{"_id":"source/img/2210/divider-fenlei.jpg","hash":"8b557c7f74cff6e2bd592fc1f74748559a328363","modified":1665812251188},{"_id":"source/img/header_img/index_new_bg.png","hash":"3c86eb37698141a99011441c07af47df90fc65d8","modified":1665409099167},{"_id":"source/img/index/index_bg.webp","hash":"0372176f6f7861ba80b37a00a04ad1a2e4e1938e","modified":1665409099170},{"_id":"source/img/header_img/tag_new_bg.png","hash":"79c939b5c212d539e6bf9b09b65a9e34dbaf1833","modified":1665409099169},{"_id":"source/img/2210/mine_bookmark.jpg","hash":"0a529951dfb36dd60237e0b80626257f11da7183","modified":1665803447448},{"_id":"source/img/220928/aboutme_bg.png","hash":"0a1c3cb03800db1cc0cdd1d13cec5c3be6fc440e","modified":1665409099156},{"_id":"source/img/220928/android_zygot_bg.png","hash":"bcda2e95c6cf4058d8dca41e330f76c2246b6c4b","modified":1665409099160},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","hash":"559bde41e7fca7fc58f0b9a740875f5f4650a763","modified":1665409099218},{"_id":"themes/livemylife/source/js/comment/gitalk.js","hash":"e5c1b7f8a2803765cff831793af377a9f81fb385","modified":1665409099216},{"_id":"source/img/220928/xposted_bg.png","hash":"4a63ec286a98f1e274912463c4340524e29c08e9","modified":1665409099164},{"_id":"source/img/220928/android_sysserver_bg.png","hash":"0369a23b5a681cf4ed7c3daa8d306ddd0f1a76c1","modified":1665409099158},{"_id":"source/img/header_img/lml_bg8.png","hash":"0369a23b5a681cf4ed7c3daa8d306ddd0f1a76c1","modified":1665409099169},{"_id":"source/img/220928/tag_bg.webp","hash":"1aaf79191c3117b7e12d29d0bed65cb112c3f5a4","modified":1665409099161},{"_id":"source/img/220928/total_bg.png","hash":"237b680e4247256a1f9dbb63ccfc0d6c05f115a4","modified":1665409099163},{"_id":"source/img/220923_classmodify/ymclass_bg.png","hash":"237b680e4247256a1f9dbb63ccfc0d6c05f115a4","modified":1665409099153},{"_id":"source/img/header_img/404_bg.png","hash":"120f7a1cbd02d7bf19428ac5019fad91089c3c2f","modified":1665409099166},{"_id":"source/music/music.mp3","hash":"9769b60bed684884921f6f4128be60ea56a6f49b","modified":1665409099183},{"_id":"public/baidusitemap.xml","hash":"09beef217a0dad8c3eb32a551ed1064ae6d9b869","modified":1666533712718},{"_id":"public/sitemap.xml","hash":"1e138d1e770e8e79386ad96c72c065f7a672bbec","modified":1666533712718},{"_id":"public/searchVersion.json","hash":"47696b3a983735ce023dfd562a25679aebc345e3","modified":1666533712718},{"_id":"public/404.html","hash":"126d14b0102cc7d14b5b2367baedb6f9fb9f5839","modified":1666533712718},{"_id":"public/categories/index.html","hash":"0f814f8338861846f4bc593dea56b66e36f8e210","modified":1666533712718},{"_id":"public/tags/index.html","hash":"501abbe602b956db3c906ac803ba6fcd4af6b693","modified":1666533712718},{"_id":"public/undefined/android-pm/index.html","hash":"519bb606364c34dde70cd3515c14cb6c21b88964","modified":1666533712718},{"_id":"public/undefined/Android-Framework目录/index.html","hash":"51f10c5630aa698838e6ae5c257a9148dda04c6a","modified":1666533712718},{"_id":"public/undefined/Android目录/index.html","hash":"2ffe507140cbc7af760928417cb685fd414b35cf","modified":1666533712718},{"_id":"public/undefined/字节码Dalvik/index.html","hash":"bd75466491bf83a712545157f7e51311a4a652b3","modified":1666533712718},{"_id":"public/undefined/class和dalvik字节码/index.html","hash":"68669f001a840b46ade9d6a2d3b816c11d73e60f","modified":1666533712718},{"_id":"public/undefined/了解插桩/index.html","hash":"abd18e608475bd86448d2477f23e969e729b6126","modified":1666533712718},{"_id":"public/undefined/解决不完的Native崩溃/index.html","hash":"e67b40743bb9f199a143f040dd279db894da9b80","modified":1666533712718},{"_id":"public/undefined/我的单词本/index.html","hash":"fa7123d7ac4d67e0dec0a8d80bb527e2bdd2c9df","modified":1666533712718},{"_id":"public/undefined/毕业一年/index.html","hash":"67071e5849603f21e5fd2277365d1f6009aa772a","modified":1666533712718},{"_id":"public/undefined/吾爱破解/index.html","hash":"77941dd1e127fc9c4ea7c246556ed39527267ece","modified":1666533712718},{"_id":"public/undefined/我的工具/index.html","hash":"f2e3abe72721fffb9c50d8bba53a20d498c07672","modified":1666533712718},{"_id":"public/undefined/设备信息获取检测/index.html","hash":"43bc65838a355b40af69ca9d8213e4edfced207a","modified":1666533712718},{"_id":"public/undefined/Android系统桌面启动二/index.html","hash":"aa7ea8472edfb371c3f520618e9e645811ae7dcc","modified":1666533712718},{"_id":"public/undefined/Android系统启动systemserver进程/index.html","hash":"d4100f43746c9eb2f3418f0ee868b5892d45c84b","modified":1666533712718},{"_id":"public/undefined/Android系统桌面启动一/index.html","hash":"b9ee6c4bba169f090eed52dc4a6672719aee32f3","modified":1666533712718},{"_id":"public/undefined/Android系统启动zgote进程/index.html","hash":"a2e29becd0db4b33ba8aa9b95c8c7fc090570126","modified":1666533712718},{"_id":"public/undefined/Android系统启动init进程/index.html","hash":"fd22cfc01e57287697456cba137444e3e9cdf590","modified":1666533712718},{"_id":"public/undefined/从smail接入第三方/index.html","hash":"2b8e4b1f7ade10b04b1175366a017d586f24df43","modified":1666533712718},{"_id":"public/undefined/你我字节码/index.html","hash":"f25ac17f87cc6985787b64ae8289303e310b195a","modified":1666533712718},{"_id":"public/undefined/page-咋们一起修改-class-文件/index.html","hash":"297e27cf61499cd48585c9e7aad71b0339ac7bea","modified":1666533712718},{"_id":"public/undefined/page-Native信号表/index.html","hash":"acd8a0be7bd7c53ff23aac88a7c9e26af5959a3e","modified":1666533712718},{"_id":"public/about/index.html","hash":"b3031a58a57c3f38cb13af803998d11f43f86774","modified":1666533712718},{"_id":"public/archive/index.html","hash":"84eb2cb7e5d741cf49a141508c11e614f2f2f4be","modified":1666533712718},{"_id":"public/archives/archives/2/index.html","hash":"5e3a4818293b9be9b541fbd06f63a684bcfc8e3a","modified":1666533712718},{"_id":"public/archives/index.html","hash":"c9f917961a77a1a413cd70fe5dfcb9063a61cfc0","modified":1666533712718},{"_id":"public/archives/archives/3/index.html","hash":"599de5400d290b5dda526f81dce2eaef46573bdc","modified":1666533712718},{"_id":"public/archives/2022/index.html","hash":"33863a25f90375cb862ff81a78e51643ec9309da","modified":1666533712718},{"_id":"public/archives/2022/archives/2/index.html","hash":"364ea8588338fdda560d232bd04ec77beb3d6eba","modified":1666533712718},{"_id":"public/archives/2022/archives/3/index.html","hash":"fa7657eebe9da8152335ab98ede10ba48da42397","modified":1666533712718},{"_id":"public/archives/2022/09/index.html","hash":"46707be35e054a04e8c39f2fd6896385743fc909","modified":1666533712718},{"_id":"public/archives/2022/10/index.html","hash":"ea6704013db6a7ac2b0797c15876f2419d48f789","modified":1666533712718},{"_id":"public/archives/2022/10/archives/2/index.html","hash":"32801bd9ade6511bb56764a69595ede5f3c6c288","modified":1666533712718},{"_id":"public/index.html","hash":"ed150a7f5e3b2225ce10e59f0175a7b9e39bea19","modified":1666533712718},{"_id":"public/archives/2/index.html","hash":"af2fc760b0e19166454897bcbf78722806707e5b","modified":1666533712718},{"_id":"public/tags/字节码/index.html","hash":"d36b7fa058d0a1f49c0caa64afd1e820e2de4231","modified":1666533712718},{"_id":"public/tags/AOSP/index.html","hash":"af3d5a5571be50d0aa95f6b777a5ebe4e488b5d9","modified":1666533712718},{"_id":"public/tags/SDK/index.html","hash":"88af03809edf26586064d6f79181aed2d1340768","modified":1666533712718},{"_id":"public/archives/3/index.html","hash":"b19cd403908535b42ea308238ef1e27bf138c47e","modified":1666533712718},{"_id":"public/tags/工具/index.html","hash":"71d0517fcf5808ab3d5a76b7f8df0acd3adfed3f","modified":1666533712718},{"_id":"public/tags/刷机/index.html","hash":"29eb19dc7dfe90616a3f7b05f4765f7c88beeffe","modified":1666533712718},{"_id":"public/tags/Native/index.html","hash":"b37bc5e7e2a42c06b8e442b73cec3719d5e270e9","modified":1666533712718},{"_id":"public/tags/笔记/index.html","hash":"cab0323dc7320835697247ec5b5a05acb18f82b7","modified":1666533712718},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1666533712718},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1666533712718},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1666533712718},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1666533712718},{"_id":"public/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1666533712718},{"_id":"public/js/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1666533712718},{"_id":"public/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1666533712718},{"_id":"public/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1666533712718},{"_id":"public/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1666533712718},{"_id":"public/CNAME","hash":"3a509ddb0fb53de725c6a840d7fad5b072251535","modified":1666533712718},{"_id":"public/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1666533712718},{"_id":"public/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1666533712718},{"_id":"public/img/220928/wuaipojie.jpeg","hash":"b7ec8e12e40a6583632a895de9be4e32c55df4d0","modified":1666533712718},{"_id":"public/img/other/bottom2top.png","hash":"35dbb5fa18be3c15a8027c81a41aa267226e8230","modified":1666533712718},{"_id":"public/img/scenery/treat_me_to_coffee.png","hash":"83619ac3af6e3463a3cb462cb6e31a38543b06e6","modified":1666533712718},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1666533712718},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1666533712718},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1666533712718},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1666533712718},{"_id":"public/img/220928/main_index_bg.webp","hash":"7da131e67e4b18d0c1917823621662c781d3afc2","modified":1666533712718},{"_id":"public/img/scenery/about_bg4.png","hash":"559928668f158e2117a47049ea23caec99387b15","modified":1666533712718},{"_id":"public/img/signature/nick-name.png","hash":"621bb5f186dbaa4b4e7cd6753b3cd4fe0ef812a3","modified":1666533712718},{"_id":"public/img/220923_classmodify/class_bg.webp","hash":"a37f0bb77fbcbf74d400e44a9250f606799b6c2f","modified":1666533712718},{"_id":"public/dist/APlayer.min.css","hash":"fd1d253594e71700e185a9841664e3cbc85501d2","modified":1666533712718},{"_id":"public/dist/music.js","hash":"3eddc21b70a147c96059e2120eb21ec5511b86ca","modified":1666533712718},{"_id":"public/js/APlayer.min.css","hash":"fd1d253594e71700e185a9841664e3cbc85501d2","modified":1666533712718},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1666533712718},{"_id":"public/js/catalog.js","hash":"059f3f31492e5b1a9dddf422a48c32969d247415","modified":1666533712718},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1666533712718},{"_id":"public/js/line.js","hash":"d69576bfe75048345a137c148ffca1d9985811dc","modified":1666533712718},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1666533712718},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1666533712718},{"_id":"public/js/mouseclick.js","hash":"b27fb5ae779a855a93b85c923f1ac927ba52dc86","modified":1666533712718},{"_id":"public/js/ribbonDynamic.js","hash":"576f0ce237c87738277868489af30b6538681201","modified":1666533712718},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1666533712718},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1666533712718},{"_id":"public/js/scroll.js","hash":"265a4c4fc33b5b44b620db64ff31d2bc05d233e9","modified":1666533712718},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1666533712718},{"_id":"public/js/langselect.js","hash":"52ca6e30814272bc329868944f528f89630404e4","modified":1666533712718},{"_id":"public/css/catalog.css","hash":"6e63e8902ec9ba5ef6256a0c2ef93934c56d612c","modified":1666533712718},{"_id":"public/css/rocket.css","hash":"1aa31deaf2c434e883a7b4d096d187244eb964d0","modified":1666533712718},{"_id":"public/css/livemylife.css","hash":"1901c580d1f80f02e266ff371dc15d4e5e824a2d","modified":1666533712718},{"_id":"public/css/search.css","hash":"3ff388d8da7e2c5aac7071f2dccda767ec9c5647","modified":1666533712718},{"_id":"public/css/signature.css","hash":"47d91f966a30d393aee44cec9bdba0a26e53dd35","modified":1666533712718},{"_id":"public/css/scroll.css","hash":"ba16b97532dd6aaec66a82f3c33cc989d361fa7a","modified":1666533712718},{"_id":"public/css/wave.css","hash":"041f3b4a78e2840ba17679cea05fb14bb646722f","modified":1666533712718},{"_id":"public/css/top.css","hash":"0303375fbe2ca942cd3d86f31d12fef9bf5785af","modified":1666533712718},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1666533712718},{"_id":"public/js/viewer/pic-viewer.js","hash":"9bf7c37cce781628346803ed7ce8f02623c2d013","modified":1666533712718},{"_id":"public/css/viewer.min.css","hash":"0e045aa3df1be7d138caa701ec3aa623ccc7a52d","modified":1666533712718},{"_id":"public/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1666533712718},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1666533712718},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1666533712718},{"_id":"public/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1666533712718},{"_id":"public/js/ziploader.js","hash":"9c25324caf53b56cb68839dcfb34e61e5a6a63f3","modified":1666533712718},{"_id":"public/css/beantech.css","hash":"f0869d21e3b5cadf6c3b69fa41c6562e2ab945c6","modified":1666533712718},{"_id":"public/css/beantech.min.css","hash":"53f4e22f888b8842884f7243392f3a02fc81d2c9","modified":1666533712718},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1666533712718},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1666533712718},{"_id":"public/css/gitalk.css","hash":"51783fd60dff05e8e339ff83b41504538662f6ca","modified":1666533712718},{"_id":"public/css/hux-blog.min.css","hash":"4a48dc3ab8d64a73c8b830027c47474a6828b81d","modified":1666533712718},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1666533712718},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1666533712718},{"_id":"public/css/themecolor.css","hash":"2b1c2095577d95dfe92f3e7b924ea3db50e61fab","modified":1666533712718},{"_id":"public/js/viewer/viewer.min.js","hash":"ae5380974b6fb8b0e15356c8418186c6c0821222","modified":1666533712718},{"_id":"public/js/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1666533712718},{"_id":"public/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1666533712718},{"_id":"public/img/header_img/main_sea_bg.png","hash":"d87fb98fd15e51e63d8f153bfe9f61ab7898002b","modified":1666533712718},{"_id":"public/img/2210/about-me.jpg","hash":"af166874495eb9942acc4cd0dc3be7311e3ad159","modified":1666533712718},{"_id":"public/img/2210/page-native.jpg","hash":"dfdff38d5d160d1a5a3d9965a07ef623e883f67a","modified":1666533712718},{"_id":"public/js/comment/gitalk_.js","hash":"559bde41e7fca7fc58f0b9a740875f5f4650a763","modified":1666533712718},{"_id":"public/js/comment/gitalk.js","hash":"e5c1b7f8a2803765cff831793af377a9f81fb385","modified":1666533712718},{"_id":"public/img/header_img/categories_bg.png","hash":"310b37816ecac824175fd171a92308a9453c2723","modified":1666533712718},{"_id":"public/img/2210/tag-map.jpg","hash":"d8023a6bbe7426c8f122b31d53c47c24e5cafffc","modified":1666533712718},{"_id":"public/img/2210/mine-englishbook.jpg","hash":"788b3017d0c36a8c874349cfbede0698ae6365c7","modified":1666533712718},{"_id":"public/img/220928/aboutme_bg_sz.jpeg","hash":"ab8019795ce9d633d87ee18255c45f857fc9c4a7","modified":1666533712718},{"_id":"public/img/220926_smailsdk/smail_bg.webp","hash":"3c42495df222245998b7213c8159c4db72319b3c","modified":1666533712718},{"_id":"public/img/220928/android_init_bg.png","hash":"2affcb6364172fdd77cb4d752d4bd6f136ce054a","modified":1666533712718},{"_id":"public/img/2210/divider-fenlei.jpg","hash":"8b557c7f74cff6e2bd592fc1f74748559a328363","modified":1666533712718},{"_id":"public/img/header_img/index_new_bg.png","hash":"3c86eb37698141a99011441c07af47df90fc65d8","modified":1666533712718},{"_id":"public/img/header_img/tag_new_bg.png","hash":"79c939b5c212d539e6bf9b09b65a9e34dbaf1833","modified":1666533712718},{"_id":"public/img/index/index_bg.webp","hash":"0372176f6f7861ba80b37a00a04ad1a2e4e1938e","modified":1666533712718},{"_id":"public/img/2210/mine_bookmark.jpg","hash":"0a529951dfb36dd60237e0b80626257f11da7183","modified":1666533712718},{"_id":"public/img/220928/aboutme_bg.png","hash":"0a1c3cb03800db1cc0cdd1d13cec5c3be6fc440e","modified":1666533712718},{"_id":"public/img/220928/android_zygot_bg.png","hash":"bcda2e95c6cf4058d8dca41e330f76c2246b6c4b","modified":1666533712718},{"_id":"public/img/220928/xposted_bg.png","hash":"4a63ec286a98f1e274912463c4340524e29c08e9","modified":1666533712718},{"_id":"public/img/220928/android_sysserver_bg.png","hash":"0369a23b5a681cf4ed7c3daa8d306ddd0f1a76c1","modified":1666533712718},{"_id":"public/img/header_img/lml_bg8.png","hash":"0369a23b5a681cf4ed7c3daa8d306ddd0f1a76c1","modified":1666533712718},{"_id":"public/img/220928/tag_bg.webp","hash":"1aaf79191c3117b7e12d29d0bed65cb112c3f5a4","modified":1666533712718},{"_id":"public/img/220923_classmodify/ymclass_bg.png","hash":"237b680e4247256a1f9dbb63ccfc0d6c05f115a4","modified":1666533712718},{"_id":"public/img/220928/total_bg.png","hash":"237b680e4247256a1f9dbb63ccfc0d6c05f115a4","modified":1666533712718},{"_id":"public/img/header_img/404_bg.png","hash":"120f7a1cbd02d7bf19428ac5019fad91089c3c2f","modified":1666533712718},{"_id":"public/music/music.mp3","hash":"9769b60bed684884921f6f4128be60ea56a6f49b","modified":1666533712718}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"i","date":"2016-04-20T20:48:33.000Z","description":"我","header-img":"img/2210/about-me.jpg","_content":"\n> 学习\n\n&emsp;&emsp;人这一辈子都在学习，然而时间是有限的，感兴趣的东西很多，能够深入的很少。钻研的越深，涉猎的范围就越窄，关于学习我认为重点是：如何平衡知识的深度和广度？随着年龄的增长，习惯于当下‘不思进取’，那么知识结构可能逐渐固化，知识的深度和广度对人生的不同阶段的影响是有差异的。开阔视野时如何兼顾深度？深入钻研时又如何兼顾广度？每个人或许都有他自己的方式。\n\n> 旅行\n\n&emsp;&emsp;有人问我，一个人独自旅行你难道不会孤独吗？我的答案是：有时会，有时不会。一人的时候，我会有一种不受约束的感觉，非常的放松，不需迎合什么，也不用回应什么，也总是会学习，自然也不会觉得孤单；但又有时候一个人漫无目的地走在大街上，这是一种很不好的感受。现在再想想，那些问我一个人出去是否会孤独的人，我想他们大概率都是一名外向者，他们可能更擅长和别人聊天，更喜好待在人群中，和每一个人都能聊得开。当然，我看待他们这种表现，也不会觉得羡慕，毕竟我一个人的时候，那种自我的安静，沉着，淡定，自如，与发自内心的快乐，我想他们也未必能体会的了。这或许就是人各有异吧。\n\n\n\n\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"i\"\ndate: 2016-04-21 04:48:33\ndescription: \"我\"\nheader-img: \"img/2210/about-me.jpg\"\n---\n\n> 学习\n\n&emsp;&emsp;人这一辈子都在学习，然而时间是有限的，感兴趣的东西很多，能够深入的很少。钻研的越深，涉猎的范围就越窄，关于学习我认为重点是：如何平衡知识的深度和广度？随着年龄的增长，习惯于当下‘不思进取’，那么知识结构可能逐渐固化，知识的深度和广度对人生的不同阶段的影响是有差异的。开阔视野时如何兼顾深度？深入钻研时又如何兼顾广度？每个人或许都有他自己的方式。\n\n> 旅行\n\n&emsp;&emsp;有人问我，一个人独自旅行你难道不会孤独吗？我的答案是：有时会，有时不会。一人的时候，我会有一种不受约束的感觉，非常的放松，不需迎合什么，也不用回应什么，也总是会学习，自然也不会觉得孤单；但又有时候一个人漫无目的地走在大街上，这是一种很不好的感受。现在再想想，那些问我一个人出去是否会孤独的人，我想他们大概率都是一名外向者，他们可能更擅长和别人聊天，更喜好待在人群中，和每一个人都能聊得开。当然，我看待他们这种表现，也不会觉得羡慕，毕竟我一个人的时候，那种自我的安静，沉着，淡定，自如，与发自内心的快乐，我想他们也未必能体会的了。这或许就是人各有异吧。\n\n\n\n\n\n","updated":"2016-04-20T20:48:33.000Z","path":"about/index.html","comments":1,"_id":"cl9lf56q000007tqp00dv96yq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>学习</p>\n</blockquote>\n<p>  人这一辈子都在学习，然而时间是有限的，感兴趣的东西很多，能够深入的很少。钻研的越深，涉猎的范围就越窄，关于学习我认为重点是：如何平衡知识的深度和广度？随着年龄的增长，习惯于当下‘不思进取’，那么知识结构可能逐渐固化，知识的深度和广度对人生的不同阶段的影响是有差异的。开阔视野时如何兼顾深度？深入钻研时又如何兼顾广度？每个人或许都有他自己的方式。</p>\n<blockquote>\n<p>旅行</p>\n</blockquote>\n<p>  有人问我，一个人独自旅行你难道不会孤独吗？我的答案是：有时会，有时不会。一人的时候，我会有一种不受约束的感觉，非常的放松，不需迎合什么，也不用回应什么，也总是会学习，自然也不会觉得孤单；但又有时候一个人漫无目的地走在大街上，这是一种很不好的感受。现在再想想，那些问我一个人出去是否会孤独的人，我想他们大概率都是一名外向者，他们可能更擅长和别人聊天，更喜好待在人群中，和每一个人都能聊得开。当然，我看待他们这种表现，也不会觉得羡慕，毕竟我一个人的时候，那种自我的安静，沉着，淡定，自如，与发自内心的快乐，我想他们也未必能体会的了。这或许就是人各有异吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>学习</p>\n</blockquote>\n<p>  人这一辈子都在学习，然而时间是有限的，感兴趣的东西很多，能够深入的很少。钻研的越深，涉猎的范围就越窄，关于学习我认为重点是：如何平衡知识的深度和广度？随着年龄的增长，习惯于当下‘不思进取’，那么知识结构可能逐渐固化，知识的深度和广度对人生的不同阶段的影响是有差异的。开阔视野时如何兼顾深度？深入钻研时又如何兼顾广度？每个人或许都有他自己的方式。</p>\n<blockquote>\n<p>旅行</p>\n</blockquote>\n<p>  有人问我，一个人独自旅行你难道不会孤独吗？我的答案是：有时会，有时不会。一人的时候，我会有一种不受约束的感觉，非常的放松，不需迎合什么，也不用回应什么，也总是会学习，自然也不会觉得孤单；但又有时候一个人漫无目的地走在大街上，这是一种很不好的感受。现在再想想，那些问我一个人出去是否会孤独的人，我想他们大概率都是一名外向者，他们可能更擅长和别人聊天，更喜好待在人群中，和每一个人都能聊得开。当然，我看待他们这种表现，也不会觉得羡慕，毕竟我一个人的时候，那种自我的安静，沉着，淡定，自如，与发自内心的快乐，我想他们也未必能体会的了。这或许就是人各有异吧。</p>\n"},{"layout":"404","description":"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...","header-img":"img/header_img/404_bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...\"\nheader-img: \"img/header_img/404_bg.jpg\"\n---\n","date":"2022-10-10T13:38:19.145Z","updated":"2022-10-10T13:38:19.145Z","path":"404.html","title":"","comments":1,"_id":"cl9lf56q300027tqpey6nc64n","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"文章存档","header-img":"img/header_img/archive_bg.png","date":"2017-03-20T12:49:56.000Z","description":"城市的柏油路太硬，踩不出足迹！","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"文章存档\"\nheader-img: \"img/header_img/archive_bg.png\"\ndate: 2017-03-20 20:49:56\ndescription: 城市的柏油路太硬，踩不出足迹！\n---\n","updated":"2017-03-20T12:49:56.000Z","path":"archive/index.html","comments":1,"_id":"cl9lf56q400057tqpefwb97z5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"layout":"categories","title":"敬请期待","description":"模块尚未开发 🤔","header-img":"img/220928/total_bg.png","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"敬请期待\"\ndescription: \"模块尚未开发 🤔\"\nheader-img: \"img/220928/total_bg.png\"\n---\n","date":"2022-10-15T05:06:38.242Z","updated":"2022-10-15T05:06:38.242Z","path":"categories/index.html","comments":1,"_id":"cl9lf56q500077tqpg95v0z2p","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":" ","description":"文章总是围绕重点展开，工作也有重点，生活也是。","header-img":"img/2210/tag-map.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \" \"\ndescription: \"文章总是围绕重点展开，工作也有重点，生活也是。\"\nheader-img: \"img/2210/tag-map.jpg\"\n---\n","date":"2022-10-15T12:30:22.833Z","updated":"2022-10-15T12:30:22.833Z","path":"tags/index.html","comments":1,"_id":"cl9lf56q600097tqp1hpse4jt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"咋们一起修改 class 文件","catalog":true,"date":"2022-09-25T12:45:24.000Z","subtitle":"修改第三方 jar 包满足当前需求，这是一种方式！","header-img":"/img/220923_classmodify/class_bg.webp","sticky":2,"_content":"\n# 你有遇到适用的场景吗\n\n![深大村长.jpg](https://img-blog.csdnimg.cn/img_convert/b489e163aa127c5f7eb59575079df4d6.png)\n\n你有没有遇到需要修改 class 文件重新打包的场景呢？巧得很，最近刚好遇到需要修改一个已存在的 jar 包以满足当前的需求，不过本次修改的是字符常量，尚未涉及到比较复杂的逻辑，记录下此刻，如何修改？如何快速修改完成需求？希望可以抛砖引玉，剩下的较为复杂的逻辑修改就交给你们了 :)\n\n**举个例子：**\n\n问题描述：\n    1、某弹窗文本显示不正确（文字冗余，格式不符合要求）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/39cb62ad15a8135fced9b45bb6e0b58e.png)\n\n关于描述：\n    1、此弹窗代码是某第三方 jar 包\n    2、文字显示要求应该是： `客服：QQ号`\n    3、但实际情况第三方 jar 包在显示内容前加了前缀 `客服`，不符合要求\n\n预期效果：\n    1、显示效果：`客服QQ：2464113103`\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/be9836c62729cd6fd5904c8ff4dbcfd5.png)\n\n\n预期需求很清晰，代码修改也跟清晰（去除第三方 jar 包内容前缀 `客服：`，实现内容灵活配置）\n\n\n# 温故 jar 命令使用\n\n1、命令查看使用帮助 jar -h\n```java\n用法: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...\\\n选项:\n    -c  创建新档案\n    -t  列出档案目录\n    -x  从档案中提取指定的 (或所有) 文件\n    -u  更新现有档案\n    -v  在标准输出中生成详细输出\n    -f  指定档案文件名\n    -m  包含指定清单文件中的清单信息\n    -n  创建新档案后执行 Pack200 规范化\n    -e  为捆绑到可执行 jar 文件的独立应用程序\n        指定应用程序入口点\n    -0  仅存储; 不使用任何 ZIP 压缩\n    -P  保留文件名中的前导 '/' (绝对路径) 和 \"..\" (父目录) 组件\n    -M  不创建条目的清单文件\n    -i  为指定的 jar 文件生成索引信息\n    -C  更改为指定的目录并包含以下文件\n\n如果任何文件为目录, 则对其进行递归处理。清单文件名, 档案文件名和入口点名称的指定顺序\n与 'm', 'f' 和 'e' 标记的指定顺序相同。\n```\n\n2、打包生成 jar\n将 class 文件打包为 jar 文件\n```java\njar cvf classes.jar Foo.class Bar.class\n```\n\n将 folder/ 目录下的所有 class 文件打包成 jar 文件\n```java\njar cvf classes.jar -C folder/ .\n```\n\n3、查看 jar 文件列表\n```java\njar -tvf classes.jar\n```\n\n4、解压 jar 文件\n```java\njar -xvf classes.jar\n```\n\n# 开始修改 jar\n\n方式一不推荐，只是想让你知道这种方式也是可行的。\n\n## 方式一：javac\n\n**1、使用 JD-GUI 打开 jar 文件并导出 java 代码**\n\n**2、使用 javac 命令把 .java 文件转换为 .class 文件**\n```java\njavac -classpath [待生成的文件名.jar] [已修改的文件.java]\n```\n\n实际操作过程中直接执行 javac 命令往往不是自己期望的那么顺利，遇到问题针对性处理。\n\n`2.1` 当遇到编码问题时：需要添加额外参数***-encoding utf-8***\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/49f46c79b1626bc9fa8f8a326a9efa6c.png)\n\n`2.2` 当遇到程序包找不到时：需要在***已修改.java文件同级目录下***放置缺失的 jar 包（可以使用分号分隔输入多个 jar 包参数）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/213dbc4980626c7aa6047fec3884f4a6.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/45f67a8f91ccdddbd528b08be84bb98c.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/4c096fedfc8e73d0a8f5fa17702a651f.png)\n\n\n`注意：`\n这里有个坑，如果打包过程有依赖 android jar，要求必须是 android sdk 目录下的 jar（官方的），不能随便找一个（阉割版），否则编译失败。\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/56247e2d3f5361ead4c49454c0a7a3bd.png)\n\n**3、最终命令（可能是这样，但不一定）**\n```java\njavac -encoding utf-8 -classpath [依赖的1.jar;依赖的2.jar;依赖的3.jar;...] [已修改的单个 .java 文件或者待转换的 .java 文件所在目录]\n```\n```java\njavac -encoding utf-8 -classpath android.jar;classes-dex2jar.jar GRAppStoreActivity.java\n```\n\n这就成功把 java 代码编译为 class 代码\n\n**4、替换旧的 class 文件并重新打包成 jar**\n```java\njar cvf [新文件名.jar] -C [待打包的class文件目录] [输出到指定目录]\n```\n```java\njar cvf jsonlili.jar -C primer/ .\n```\n\n到这里就打包成功了，如果遇到什么问题欢迎评论 :) 如果 jar 依赖的第三方包较多，这种方式是不适合操作的，而且步骤也很繁琐，繁琐的事情必须简化，重复的工作可以流程化，那么下面简明介绍利用工具实现修改。\n\n## 方式二：jclasslib\n**1、把 jar 包拖入工具中查看代码**\n\n或者打开某个 class 文件，对于某些简单、少量的修改也可以像方式一那样，修改、替换、重新打包生成目标 jar\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/a6fd42dda952836b3119dff2faa988bd.png)\n\n**2、代码定位并修改**\n\n我们以开头的客服弹窗提示为例，在原始 jar 文件中定位到`客服：`固定前缀，代码位于在 ***MyMainActivity*** 类的某个方法中\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/ff17b6d926a31e648c532263e6268792.png)\n\n我们知道匿名类经过编译后的 class 文件是一个单独的文件，且文件名往往带有`$`符号，我们解压 jar 文件可以缩小查找范围，一番查阅后定位到 `MyMainActivity$2$1.class` 文件中，Methods -> onClick -> Code（这里需要对 class 文件结构有一定的了解）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/b9d17fbc33b11fa541911cf6e3d21416.png)\n\n> ldc：是 JVM 指令，指从常量池中取出字符串常量并压入操作数堆栈中。\n>\n> 这里有两个动作，取出数据、把数据压入操作数栈（如果不了解操作数栈，建议略读字节码相关资料）\n\n\n关于 class 文件结构和字节码指令推荐官方文档： [字节码指令](https://docs.oracle.com/javase/specs/jls/se19/html/index.html)\n\n**3、修改并保存**\n从刚才的 `ldc #61 <客服：>` 中点击 `#61` 跳转到常量编辑处修改并保存\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/ec7700f218da9a6d8d57445909ea9f05.png)\n\n\n到这里，其实我们对 class 文件的修改已经完成了 :)\n\n# 最后\n\n我在想，如果想要修改更复杂的逻辑以满足更大的需求呢？怎么办？\n\n个人见解，那就是：**持续学习，实践输出**\n\n\n1、我对 JVM 指令不熟，对修改无从下手，那么我想你应该需要进一步了解 class 文件结构，JVM 指令说明；\n去哪学习？找官方资源、GitHub 学习资源、阅读大佬的文章。。。。。。\n\n2、工具使用的掌握，上面提到的 jclasslib 就是一个字节码查看、编辑工具，工具是往往有竞品存在，\n我今天使用的是 jclasslib，可随着自我视野的扩展，我明天可能在使用 Recaf（也是字节码编辑工具）\n\n\n**附加：**\n- [jclasslib bytecode editor](https://github.com/ingokegel/jclasslib) \n- [JD-GUI](https://github.com/java-decompiler/jd-gui/releases)\n- [在线破解工具包：](https://down.52pojie.cn/Tools/)\n\n\n","source":"_posts/page- 咋们一起修改 class 文件.md","raw":"---\ntitle: 咋们一起修改 class 文件\ncatalog: true\ndate: 2022-09-25 20:45:24\nsubtitle: 修改第三方 jar 包满足当前需求，这是一种方式！\nheader-img: /img/220923_classmodify/class_bg.webp\ntags: 字节码\ncategories:\nsticky: 2\n---\n\n# 你有遇到适用的场景吗\n\n![深大村长.jpg](https://img-blog.csdnimg.cn/img_convert/b489e163aa127c5f7eb59575079df4d6.png)\n\n你有没有遇到需要修改 class 文件重新打包的场景呢？巧得很，最近刚好遇到需要修改一个已存在的 jar 包以满足当前的需求，不过本次修改的是字符常量，尚未涉及到比较复杂的逻辑，记录下此刻，如何修改？如何快速修改完成需求？希望可以抛砖引玉，剩下的较为复杂的逻辑修改就交给你们了 :)\n\n**举个例子：**\n\n问题描述：\n    1、某弹窗文本显示不正确（文字冗余，格式不符合要求）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/39cb62ad15a8135fced9b45bb6e0b58e.png)\n\n关于描述：\n    1、此弹窗代码是某第三方 jar 包\n    2、文字显示要求应该是： `客服：QQ号`\n    3、但实际情况第三方 jar 包在显示内容前加了前缀 `客服`，不符合要求\n\n预期效果：\n    1、显示效果：`客服QQ：2464113103`\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/be9836c62729cd6fd5904c8ff4dbcfd5.png)\n\n\n预期需求很清晰，代码修改也跟清晰（去除第三方 jar 包内容前缀 `客服：`，实现内容灵活配置）\n\n\n# 温故 jar 命令使用\n\n1、命令查看使用帮助 jar -h\n```java\n用法: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...\\\n选项:\n    -c  创建新档案\n    -t  列出档案目录\n    -x  从档案中提取指定的 (或所有) 文件\n    -u  更新现有档案\n    -v  在标准输出中生成详细输出\n    -f  指定档案文件名\n    -m  包含指定清单文件中的清单信息\n    -n  创建新档案后执行 Pack200 规范化\n    -e  为捆绑到可执行 jar 文件的独立应用程序\n        指定应用程序入口点\n    -0  仅存储; 不使用任何 ZIP 压缩\n    -P  保留文件名中的前导 '/' (绝对路径) 和 \"..\" (父目录) 组件\n    -M  不创建条目的清单文件\n    -i  为指定的 jar 文件生成索引信息\n    -C  更改为指定的目录并包含以下文件\n\n如果任何文件为目录, 则对其进行递归处理。清单文件名, 档案文件名和入口点名称的指定顺序\n与 'm', 'f' 和 'e' 标记的指定顺序相同。\n```\n\n2、打包生成 jar\n将 class 文件打包为 jar 文件\n```java\njar cvf classes.jar Foo.class Bar.class\n```\n\n将 folder/ 目录下的所有 class 文件打包成 jar 文件\n```java\njar cvf classes.jar -C folder/ .\n```\n\n3、查看 jar 文件列表\n```java\njar -tvf classes.jar\n```\n\n4、解压 jar 文件\n```java\njar -xvf classes.jar\n```\n\n# 开始修改 jar\n\n方式一不推荐，只是想让你知道这种方式也是可行的。\n\n## 方式一：javac\n\n**1、使用 JD-GUI 打开 jar 文件并导出 java 代码**\n\n**2、使用 javac 命令把 .java 文件转换为 .class 文件**\n```java\njavac -classpath [待生成的文件名.jar] [已修改的文件.java]\n```\n\n实际操作过程中直接执行 javac 命令往往不是自己期望的那么顺利，遇到问题针对性处理。\n\n`2.1` 当遇到编码问题时：需要添加额外参数***-encoding utf-8***\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/49f46c79b1626bc9fa8f8a326a9efa6c.png)\n\n`2.2` 当遇到程序包找不到时：需要在***已修改.java文件同级目录下***放置缺失的 jar 包（可以使用分号分隔输入多个 jar 包参数）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/213dbc4980626c7aa6047fec3884f4a6.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/45f67a8f91ccdddbd528b08be84bb98c.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/4c096fedfc8e73d0a8f5fa17702a651f.png)\n\n\n`注意：`\n这里有个坑，如果打包过程有依赖 android jar，要求必须是 android sdk 目录下的 jar（官方的），不能随便找一个（阉割版），否则编译失败。\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/56247e2d3f5361ead4c49454c0a7a3bd.png)\n\n**3、最终命令（可能是这样，但不一定）**\n```java\njavac -encoding utf-8 -classpath [依赖的1.jar;依赖的2.jar;依赖的3.jar;...] [已修改的单个 .java 文件或者待转换的 .java 文件所在目录]\n```\n```java\njavac -encoding utf-8 -classpath android.jar;classes-dex2jar.jar GRAppStoreActivity.java\n```\n\n这就成功把 java 代码编译为 class 代码\n\n**4、替换旧的 class 文件并重新打包成 jar**\n```java\njar cvf [新文件名.jar] -C [待打包的class文件目录] [输出到指定目录]\n```\n```java\njar cvf jsonlili.jar -C primer/ .\n```\n\n到这里就打包成功了，如果遇到什么问题欢迎评论 :) 如果 jar 依赖的第三方包较多，这种方式是不适合操作的，而且步骤也很繁琐，繁琐的事情必须简化，重复的工作可以流程化，那么下面简明介绍利用工具实现修改。\n\n## 方式二：jclasslib\n**1、把 jar 包拖入工具中查看代码**\n\n或者打开某个 class 文件，对于某些简单、少量的修改也可以像方式一那样，修改、替换、重新打包生成目标 jar\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/a6fd42dda952836b3119dff2faa988bd.png)\n\n**2、代码定位并修改**\n\n我们以开头的客服弹窗提示为例，在原始 jar 文件中定位到`客服：`固定前缀，代码位于在 ***MyMainActivity*** 类的某个方法中\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/ff17b6d926a31e648c532263e6268792.png)\n\n我们知道匿名类经过编译后的 class 文件是一个单独的文件，且文件名往往带有`$`符号，我们解压 jar 文件可以缩小查找范围，一番查阅后定位到 `MyMainActivity$2$1.class` 文件中，Methods -> onClick -> Code（这里需要对 class 文件结构有一定的了解）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/b9d17fbc33b11fa541911cf6e3d21416.png)\n\n> ldc：是 JVM 指令，指从常量池中取出字符串常量并压入操作数堆栈中。\n>\n> 这里有两个动作，取出数据、把数据压入操作数栈（如果不了解操作数栈，建议略读字节码相关资料）\n\n\n关于 class 文件结构和字节码指令推荐官方文档： [字节码指令](https://docs.oracle.com/javase/specs/jls/se19/html/index.html)\n\n**3、修改并保存**\n从刚才的 `ldc #61 <客服：>` 中点击 `#61` 跳转到常量编辑处修改并保存\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/ec7700f218da9a6d8d57445909ea9f05.png)\n\n\n到这里，其实我们对 class 文件的修改已经完成了 :)\n\n# 最后\n\n我在想，如果想要修改更复杂的逻辑以满足更大的需求呢？怎么办？\n\n个人见解，那就是：**持续学习，实践输出**\n\n\n1、我对 JVM 指令不熟，对修改无从下手，那么我想你应该需要进一步了解 class 文件结构，JVM 指令说明；\n去哪学习？找官方资源、GitHub 学习资源、阅读大佬的文章。。。。。。\n\n2、工具使用的掌握，上面提到的 jclasslib 就是一个字节码查看、编辑工具，工具是往往有竞品存在，\n我今天使用的是 jclasslib，可随着自我视野的扩展，我明天可能在使用 Recaf（也是字节码编辑工具）\n\n\n**附加：**\n- [jclasslib bytecode editor](https://github.com/ingokegel/jclasslib) \n- [JD-GUI](https://github.com/java-decompiler/jd-gui/releases)\n- [在线破解工具包：](https://down.52pojie.cn/Tools/)\n\n\n","slug":"page-咋们一起修改-class-文件","published":1,"updated":"2022-09-25T12:45:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q100017tqpb3wjg5ry","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>你有遇到适用的场景吗</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b489e163aa127c5f7eb59575079df4d6.png\" alt=\"深大村长.jpg\"></p>\n<p>你有没有遇到需要修改 class 文件重新打包的场景呢？巧得很，最近刚好遇到需要修改一个已存在的 jar 包以满足当前的需求，不过本次修改的是字符常量，尚未涉及到比较复杂的逻辑，记录下此刻，如何修改？如何快速修改完成需求？希望可以抛砖引玉，剩下的较为复杂的逻辑修改就交给你们了 :)</p>\n<p><strong>举个例子：</strong></p>\n<p>问题描述：<br>\n1、某弹窗文本显示不正确（文字冗余，格式不符合要求）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/39cb62ad15a8135fced9b45bb6e0b58e.png\" alt=\"image.png\"></p>\n<p>关于描述：<br>\n1、此弹窗代码是某第三方 jar 包<br>\n2、文字显示要求应该是： <code>客服：QQ号</code><br>\n3、但实际情况第三方 jar 包在显示内容前加了前缀 <code>客服</code>，不符合要求</p>\n<p>预期效果：<br>\n1、显示效果：<code>客服QQ：2464113103</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/be9836c62729cd6fd5904c8ff4dbcfd5.png\" alt=\"image.png\"></p>\n<p>预期需求很清晰，代码修改也跟清晰（去除第三方 jar 包内容前缀 <code>客服：</code>，实现内容灵活配置）</p>\n<h1>温故 jar 命令使用</h1>\n<p>1、命令查看使用帮助 jar -h</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法: jar &#123;ctxui&#125;[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...\\</span><br><span class=\"line\">选项:</span><br><span class=\"line\">    -c  创建新档案</span><br><span class=\"line\">    -t  列出档案目录</span><br><span class=\"line\">    -x  从档案中提取指定的 (或所有) 文件</span><br><span class=\"line\">    -u  更新现有档案</span><br><span class=\"line\">    -v  在标准输出中生成详细输出</span><br><span class=\"line\">    -f  指定档案文件名</span><br><span class=\"line\">    -m  包含指定清单文件中的清单信息</span><br><span class=\"line\">    -n  创建新档案后执行 Pack200 规范化</span><br><span class=\"line\">    -e  为捆绑到可执行 jar 文件的独立应用程序</span><br><span class=\"line\">        指定应用程序入口点</span><br><span class=\"line\">    -<span class=\"number\">0</span>  仅存储; 不使用任何 ZIP 压缩</span><br><span class=\"line\">    -P  保留文件名中的前导 <span class=\"string\">&#x27;/&#x27;</span> (绝对路径) 和 <span class=\"string\">&quot;..&quot;</span> (父目录) 组件</span><br><span class=\"line\">    -M  不创建条目的清单文件</span><br><span class=\"line\">    -i  为指定的 jar 文件生成索引信息</span><br><span class=\"line\">    -C  更改为指定的目录并包含以下文件</span><br><span class=\"line\"></span><br><span class=\"line\">如果任何文件为目录, 则对其进行递归处理。清单文件名, 档案文件名和入口点名称的指定顺序</span><br><span class=\"line\">与 <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span> 和 <span class=\"string\">&#x27;e&#x27;</span> 标记的指定顺序相同。</span><br></pre></td></tr></table></figure>\n<p>2、打包生成 jar<br>\n将 class 文件打包为 jar 文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvf classes.jar Foo.class Bar.class</span><br></pre></td></tr></table></figure>\n<p>将 folder/ 目录下的所有 class 文件打包成 jar 文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvf classes.jar -C folder/ .</span><br></pre></td></tr></table></figure>\n<p>3、查看 jar 文件列表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -tvf classes.jar</span><br></pre></td></tr></table></figure>\n<p>4、解压 jar 文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -xvf classes.jar</span><br></pre></td></tr></table></figure>\n<h1>开始修改 jar</h1>\n<p>方式一不推荐，只是想让你知道这种方式也是可行的。</p>\n<h2 id=\"方式一：javac\">方式一：javac</h2>\n<p><strong>1、使用 JD-GUI 打开 jar 文件并导出 java 代码</strong></p>\n<p><strong>2、使用 javac 命令把 .java 文件转换为 .class 文件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -classpath [待生成的文件名.jar] [已修改的文件.java]</span><br></pre></td></tr></table></figure>\n<p>实际操作过程中直接执行 javac 命令往往不是自己期望的那么顺利，遇到问题针对性处理。</p>\n<p><code>2.1</code> 当遇到编码问题时：需要添加额外参数***-encoding utf-8***</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/49f46c79b1626bc9fa8f8a326a9efa6c.png\" alt=\"image.png\"></p>\n<p><code>2.2</code> 当遇到程序包找不到时：需要在<em><strong>已修改.java文件同级目录下</strong></em>放置缺失的 jar 包（可以使用分号分隔输入多个 jar 包参数）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/213dbc4980626c7aa6047fec3884f4a6.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/45f67a8f91ccdddbd528b08be84bb98c.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c096fedfc8e73d0a8f5fa17702a651f.png\" alt=\"image.png\"></p>\n<p><code>注意：</code><br>\n这里有个坑，如果打包过程有依赖 android jar，要求必须是 android sdk 目录下的 jar（官方的），不能随便找一个（阉割版），否则编译失败。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/56247e2d3f5361ead4c49454c0a7a3bd.png\" alt=\"image.png\"></p>\n<p><strong>3、最终命令（可能是这样，但不一定）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -encoding utf-<span class=\"number\">8</span> -classpath [依赖的<span class=\"number\">1.</span>jar;依赖的<span class=\"number\">2.</span>jar;依赖的<span class=\"number\">3.</span>jar;...] [已修改的单个 .java 文件或者待转换的 .java 文件所在目录]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -encoding utf-<span class=\"number\">8</span> -classpath android.jar;classes-dex2jar.jar GRAppStoreActivity.java</span><br></pre></td></tr></table></figure>\n<p>这就成功把 java 代码编译为 class 代码</p>\n<p><strong>4、替换旧的 class 文件并重新打包成 jar</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvf [新文件名.jar] -C [待打包的class文件目录] [输出到指定目录]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvf jsonlili.jar -C primer/ .</span><br></pre></td></tr></table></figure>\n<p>到这里就打包成功了，如果遇到什么问题欢迎评论 :) 如果 jar 依赖的第三方包较多，这种方式是不适合操作的，而且步骤也很繁琐，繁琐的事情必须简化，重复的工作可以流程化，那么下面简明介绍利用工具实现修改。</p>\n<h2 id=\"方式二：jclasslib\">方式二：jclasslib</h2>\n<p><strong>1、把 jar 包拖入工具中查看代码</strong></p>\n<p>或者打开某个 class 文件，对于某些简单、少量的修改也可以像方式一那样，修改、替换、重新打包生成目标 jar</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a6fd42dda952836b3119dff2faa988bd.png\" alt=\"image.png\"></p>\n<p><strong>2、代码定位并修改</strong></p>\n<p>我们以开头的客服弹窗提示为例，在原始 jar 文件中定位到<code>客服：</code>固定前缀，代码位于在 <em><strong>MyMainActivity</strong></em> 类的某个方法中</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ff17b6d926a31e648c532263e6268792.png\" alt=\"image.png\"></p>\n<p>我们知道匿名类经过编译后的 class 文件是一个单独的文件，且文件名往往带有<code>$</code>符号，我们解压 jar 文件可以缩小查找范围，一番查阅后定位到 <code>MyMainActivity$2$1.class</code> 文件中，Methods -&gt; onClick -&gt; Code（这里需要对 class 文件结构有一定的了解）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b9d17fbc33b11fa541911cf6e3d21416.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>ldc：是 JVM 指令，指从常量池中取出字符串常量并压入操作数堆栈中。</p>\n<p>这里有两个动作，取出数据、把数据压入操作数栈（如果不了解操作数栈，建议略读字节码相关资料）</p>\n</blockquote>\n<p>关于 class 文件结构和字节码指令推荐官方文档： <a href=\"https://docs.oracle.com/javase/specs/jls/se19/html/index.html\">字节码指令</a></p>\n<p><strong>3、修改并保存</strong><br>\n从刚才的 <code>ldc #61 &lt;客服：&gt;</code> 中点击 <code>#61</code> 跳转到常量编辑处修改并保存</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ec7700f218da9a6d8d57445909ea9f05.png\" alt=\"image.png\"></p>\n<p>到这里，其实我们对 class 文件的修改已经完成了 :)</p>\n<h1>最后</h1>\n<p>我在想，如果想要修改更复杂的逻辑以满足更大的需求呢？怎么办？</p>\n<p>个人见解，那就是：<strong>持续学习，实践输出</strong></p>\n<p>1、我对 JVM 指令不熟，对修改无从下手，那么我想你应该需要进一步了解 class 文件结构，JVM 指令说明；<br>\n去哪学习？找官方资源、GitHub 学习资源、阅读大佬的文章。。。。。。</p>\n<p>2、工具使用的掌握，上面提到的 jclasslib 就是一个字节码查看、编辑工具，工具是往往有竞品存在，<br>\n我今天使用的是 jclasslib，可随着自我视野的扩展，我明天可能在使用 Recaf（也是字节码编辑工具）</p>\n<p><strong>附加：</strong></p>\n<ul>\n<li><a href=\"https://github.com/ingokegel/jclasslib\">jclasslib bytecode editor</a></li>\n<li><a href=\"https://github.com/java-decompiler/jd-gui/releases\">JD-GUI</a></li>\n<li><a href=\"https://down.52pojie.cn/Tools/\">在线破解工具包：</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>你有遇到适用的场景吗</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b489e163aa127c5f7eb59575079df4d6.png\" alt=\"深大村长.jpg\"></p>\n<p>你有没有遇到需要修改 class 文件重新打包的场景呢？巧得很，最近刚好遇到需要修改一个已存在的 jar 包以满足当前的需求，不过本次修改的是字符常量，尚未涉及到比较复杂的逻辑，记录下此刻，如何修改？如何快速修改完成需求？希望可以抛砖引玉，剩下的较为复杂的逻辑修改就交给你们了 :)</p>\n<p><strong>举个例子：</strong></p>\n<p>问题描述：<br>\n1、某弹窗文本显示不正确（文字冗余，格式不符合要求）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/39cb62ad15a8135fced9b45bb6e0b58e.png\" alt=\"image.png\"></p>\n<p>关于描述：<br>\n1、此弹窗代码是某第三方 jar 包<br>\n2、文字显示要求应该是： <code>客服：QQ号</code><br>\n3、但实际情况第三方 jar 包在显示内容前加了前缀 <code>客服</code>，不符合要求</p>\n<p>预期效果：<br>\n1、显示效果：<code>客服QQ：2464113103</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/be9836c62729cd6fd5904c8ff4dbcfd5.png\" alt=\"image.png\"></p>\n<p>预期需求很清晰，代码修改也跟清晰（去除第三方 jar 包内容前缀 <code>客服：</code>，实现内容灵活配置）</p>\n<h1>温故 jar 命令使用</h1>\n<p>1、命令查看使用帮助 jar -h</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法: jar &#123;ctxui&#125;[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...\\</span><br><span class=\"line\">选项:</span><br><span class=\"line\">    -c  创建新档案</span><br><span class=\"line\">    -t  列出档案目录</span><br><span class=\"line\">    -x  从档案中提取指定的 (或所有) 文件</span><br><span class=\"line\">    -u  更新现有档案</span><br><span class=\"line\">    -v  在标准输出中生成详细输出</span><br><span class=\"line\">    -f  指定档案文件名</span><br><span class=\"line\">    -m  包含指定清单文件中的清单信息</span><br><span class=\"line\">    -n  创建新档案后执行 Pack200 规范化</span><br><span class=\"line\">    -e  为捆绑到可执行 jar 文件的独立应用程序</span><br><span class=\"line\">        指定应用程序入口点</span><br><span class=\"line\">    -<span class=\"number\">0</span>  仅存储; 不使用任何 ZIP 压缩</span><br><span class=\"line\">    -P  保留文件名中的前导 <span class=\"string\">&#x27;/&#x27;</span> (绝对路径) 和 <span class=\"string\">&quot;..&quot;</span> (父目录) 组件</span><br><span class=\"line\">    -M  不创建条目的清单文件</span><br><span class=\"line\">    -i  为指定的 jar 文件生成索引信息</span><br><span class=\"line\">    -C  更改为指定的目录并包含以下文件</span><br><span class=\"line\"></span><br><span class=\"line\">如果任何文件为目录, 则对其进行递归处理。清单文件名, 档案文件名和入口点名称的指定顺序</span><br><span class=\"line\">与 <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span> 和 <span class=\"string\">&#x27;e&#x27;</span> 标记的指定顺序相同。</span><br></pre></td></tr></table></figure>\n<p>2、打包生成 jar<br>\n将 class 文件打包为 jar 文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvf classes.jar Foo.class Bar.class</span><br></pre></td></tr></table></figure>\n<p>将 folder/ 目录下的所有 class 文件打包成 jar 文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvf classes.jar -C folder/ .</span><br></pre></td></tr></table></figure>\n<p>3、查看 jar 文件列表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -tvf classes.jar</span><br></pre></td></tr></table></figure>\n<p>4、解压 jar 文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -xvf classes.jar</span><br></pre></td></tr></table></figure>\n<h1>开始修改 jar</h1>\n<p>方式一不推荐，只是想让你知道这种方式也是可行的。</p>\n<h2 id=\"方式一：javac\">方式一：javac</h2>\n<p><strong>1、使用 JD-GUI 打开 jar 文件并导出 java 代码</strong></p>\n<p><strong>2、使用 javac 命令把 .java 文件转换为 .class 文件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -classpath [待生成的文件名.jar] [已修改的文件.java]</span><br></pre></td></tr></table></figure>\n<p>实际操作过程中直接执行 javac 命令往往不是自己期望的那么顺利，遇到问题针对性处理。</p>\n<p><code>2.1</code> 当遇到编码问题时：需要添加额外参数***-encoding utf-8***</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/49f46c79b1626bc9fa8f8a326a9efa6c.png\" alt=\"image.png\"></p>\n<p><code>2.2</code> 当遇到程序包找不到时：需要在<em><strong>已修改.java文件同级目录下</strong></em>放置缺失的 jar 包（可以使用分号分隔输入多个 jar 包参数）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/213dbc4980626c7aa6047fec3884f4a6.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/45f67a8f91ccdddbd528b08be84bb98c.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c096fedfc8e73d0a8f5fa17702a651f.png\" alt=\"image.png\"></p>\n<p><code>注意：</code><br>\n这里有个坑，如果打包过程有依赖 android jar，要求必须是 android sdk 目录下的 jar（官方的），不能随便找一个（阉割版），否则编译失败。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/56247e2d3f5361ead4c49454c0a7a3bd.png\" alt=\"image.png\"></p>\n<p><strong>3、最终命令（可能是这样，但不一定）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -encoding utf-<span class=\"number\">8</span> -classpath [依赖的<span class=\"number\">1.</span>jar;依赖的<span class=\"number\">2.</span>jar;依赖的<span class=\"number\">3.</span>jar;...] [已修改的单个 .java 文件或者待转换的 .java 文件所在目录]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -encoding utf-<span class=\"number\">8</span> -classpath android.jar;classes-dex2jar.jar GRAppStoreActivity.java</span><br></pre></td></tr></table></figure>\n<p>这就成功把 java 代码编译为 class 代码</p>\n<p><strong>4、替换旧的 class 文件并重新打包成 jar</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvf [新文件名.jar] -C [待打包的class文件目录] [输出到指定目录]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvf jsonlili.jar -C primer/ .</span><br></pre></td></tr></table></figure>\n<p>到这里就打包成功了，如果遇到什么问题欢迎评论 :) 如果 jar 依赖的第三方包较多，这种方式是不适合操作的，而且步骤也很繁琐，繁琐的事情必须简化，重复的工作可以流程化，那么下面简明介绍利用工具实现修改。</p>\n<h2 id=\"方式二：jclasslib\">方式二：jclasslib</h2>\n<p><strong>1、把 jar 包拖入工具中查看代码</strong></p>\n<p>或者打开某个 class 文件，对于某些简单、少量的修改也可以像方式一那样，修改、替换、重新打包生成目标 jar</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a6fd42dda952836b3119dff2faa988bd.png\" alt=\"image.png\"></p>\n<p><strong>2、代码定位并修改</strong></p>\n<p>我们以开头的客服弹窗提示为例，在原始 jar 文件中定位到<code>客服：</code>固定前缀，代码位于在 <em><strong>MyMainActivity</strong></em> 类的某个方法中</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ff17b6d926a31e648c532263e6268792.png\" alt=\"image.png\"></p>\n<p>我们知道匿名类经过编译后的 class 文件是一个单独的文件，且文件名往往带有<code>$</code>符号，我们解压 jar 文件可以缩小查找范围，一番查阅后定位到 <code>MyMainActivity$2$1.class</code> 文件中，Methods -&gt; onClick -&gt; Code（这里需要对 class 文件结构有一定的了解）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b9d17fbc33b11fa541911cf6e3d21416.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>ldc：是 JVM 指令，指从常量池中取出字符串常量并压入操作数堆栈中。</p>\n<p>这里有两个动作，取出数据、把数据压入操作数栈（如果不了解操作数栈，建议略读字节码相关资料）</p>\n</blockquote>\n<p>关于 class 文件结构和字节码指令推荐官方文档： <a href=\"https://docs.oracle.com/javase/specs/jls/se19/html/index.html\">字节码指令</a></p>\n<p><strong>3、修改并保存</strong><br>\n从刚才的 <code>ldc #61 &lt;客服：&gt;</code> 中点击 <code>#61</code> 跳转到常量编辑处修改并保存</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ec7700f218da9a6d8d57445909ea9f05.png\" alt=\"image.png\"></p>\n<p>到这里，其实我们对 class 文件的修改已经完成了 :)</p>\n<h1>最后</h1>\n<p>我在想，如果想要修改更复杂的逻辑以满足更大的需求呢？怎么办？</p>\n<p>个人见解，那就是：<strong>持续学习，实践输出</strong></p>\n<p>1、我对 JVM 指令不熟，对修改无从下手，那么我想你应该需要进一步了解 class 文件结构，JVM 指令说明；<br>\n去哪学习？找官方资源、GitHub 学习资源、阅读大佬的文章。。。。。。</p>\n<p>2、工具使用的掌握，上面提到的 jclasslib 就是一个字节码查看、编辑工具，工具是往往有竞品存在，<br>\n我今天使用的是 jclasslib，可随着自我视野的扩展，我明天可能在使用 Recaf（也是字节码编辑工具）</p>\n<p><strong>附加：</strong></p>\n<ul>\n<li><a href=\"https://github.com/ingokegel/jclasslib\">jclasslib bytecode editor</a></li>\n<li><a href=\"https://github.com/java-decompiler/jd-gui/releases\">JD-GUI</a></li>\n<li><a href=\"https://down.52pojie.cn/Tools/\">在线破解工具包：</a></li>\n</ul>\n"},{"title":"Native 信号表（部分）","catalog":true,"date":"2022-09-24T07:35:36.000Z","subtitle":"描述对应信号代表的含义，协助问题排查","header-img":"/img/header_img/tag_bg.png","sticky":1,"_content":"\n# 常见信号\n\n|   signal  |   code    |   describe    |\n|   ---     |   ---     |   ---    |\n|   SIGILL  |   4   |   非法指令    |\n|   SIGTRAP |   5   |   断点调试异常 | \n|   SIGABRT |   6   |   异常退出    |\n|   SIGBUS  |   7   |   总线错误    |\n|   SIGFPE  |   8   |   浮点错误    |\n|   SIGEGV  |   11  |   无效引用    |\n|   SIGPIPE |   13  |   管道错误    |\n|   SIGTERM |   15  |   终止运行    |\n|   SIGSTKFLT|  16  |   栈异常      |\n|   SIGSYS  |   31  |   系统调用异常 |\n\n\n\n\n\n","source":"_posts/page-Native信号表.md","raw":"---\ntitle: Native 信号表（部分）\ncatalog: true\ndate: 2022-09-24 15:35:36\nsubtitle: 描述对应信号代表的含义，协助问题排查\nheader-img: /img/header_img/tag_bg.png\ntags: 笔记\ncategories: \nsticky: 1\n---\n\n# 常见信号\n\n|   signal  |   code    |   describe    |\n|   ---     |   ---     |   ---    |\n|   SIGILL  |   4   |   非法指令    |\n|   SIGTRAP |   5   |   断点调试异常 | \n|   SIGABRT |   6   |   异常退出    |\n|   SIGBUS  |   7   |   总线错误    |\n|   SIGFPE  |   8   |   浮点错误    |\n|   SIGEGV  |   11  |   无效引用    |\n|   SIGPIPE |   13  |   管道错误    |\n|   SIGTERM |   15  |   终止运行    |\n|   SIGSTKFLT|  16  |   栈异常      |\n|   SIGSYS  |   31  |   系统调用异常 |\n\n\n\n\n\n","slug":"page-Native信号表","published":1,"updated":"2022-09-24T07:35:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q300037tqp9zc449a9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>常见信号</h1>\n<table>\n<thead>\n<tr>\n<th>signal</th>\n<th>code</th>\n<th>describe</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SIGILL</td>\n<td>4</td>\n<td>非法指令</td>\n</tr>\n<tr>\n<td>SIGTRAP</td>\n<td>5</td>\n<td>断点调试异常</td>\n</tr>\n<tr>\n<td>SIGABRT</td>\n<td>6</td>\n<td>异常退出</td>\n</tr>\n<tr>\n<td>SIGBUS</td>\n<td>7</td>\n<td>总线错误</td>\n</tr>\n<tr>\n<td>SIGFPE</td>\n<td>8</td>\n<td>浮点错误</td>\n</tr>\n<tr>\n<td>SIGEGV</td>\n<td>11</td>\n<td>无效引用</td>\n</tr>\n<tr>\n<td>SIGPIPE</td>\n<td>13</td>\n<td>管道错误</td>\n</tr>\n<tr>\n<td>SIGTERM</td>\n<td>15</td>\n<td>终止运行</td>\n</tr>\n<tr>\n<td>SIGSTKFLT</td>\n<td>16</td>\n<td>栈异常</td>\n</tr>\n<tr>\n<td>SIGSYS</td>\n<td>31</td>\n<td>系统调用异常</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1>常见信号</h1>\n<table>\n<thead>\n<tr>\n<th>signal</th>\n<th>code</th>\n<th>describe</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SIGILL</td>\n<td>4</td>\n<td>非法指令</td>\n</tr>\n<tr>\n<td>SIGTRAP</td>\n<td>5</td>\n<td>断点调试异常</td>\n</tr>\n<tr>\n<td>SIGABRT</td>\n<td>6</td>\n<td>异常退出</td>\n</tr>\n<tr>\n<td>SIGBUS</td>\n<td>7</td>\n<td>总线错误</td>\n</tr>\n<tr>\n<td>SIGFPE</td>\n<td>8</td>\n<td>浮点错误</td>\n</tr>\n<tr>\n<td>SIGEGV</td>\n<td>11</td>\n<td>无效引用</td>\n</tr>\n<tr>\n<td>SIGPIPE</td>\n<td>13</td>\n<td>管道错误</td>\n</tr>\n<tr>\n<td>SIGTERM</td>\n<td>15</td>\n<td>终止运行</td>\n</tr>\n<tr>\n<td>SIGSTKFLT</td>\n<td>16</td>\n<td>栈异常</td>\n</tr>\n<tr>\n<td>SIGSYS</td>\n<td>31</td>\n<td>系统调用异常</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"了解 framework base（二）","catalog":true,"date":"2022-10-20T15:00:41.000Z","subtitle":"基于 android-11-r21","header-img":"/img/2210/page-native.jpg","_content":"\n# Framework Base\n\n- apex\n    - blobstore【应用程序之间的数据存储】\n        - framework\n        - service\n    - jobscheduler【将作业调度到主线模块】\n- api【略】\n- boot\n    - hiddenapi【限制外部程序访问的接口】\n    - preloaded-class【由 zygote 进行初始化的类】\n        - android.accessibilityservice\n        - android.account\n        - android.animation\n        - android.annotation\n        - android.app\n        - android.appwidget\n        - android.bluetooth\n        - android.content\n        - android.database\n        - android.graphics\n        - android.hardware\n        - android.icu\n        - android.location\n        - android.media\n        - android.net\n        - android.nfc\n        - android.opengl\n        - android.os\n        - android.permission\n        - android.provider\n        - android.security\n        - android.service\n        - android.syspro\n        - android.telephone\n        - android.text\n        - android.transition\n        - android.util\n        - android.view\n        - android.widget\n- cmds\n    - abx【二进制转XML android binary xml】 \n    - am【am 命令activityManager&packageManager】\n    - app_process【?】\n    - appops【app opration 操作权限管理】\n    - appwidget【adb shell appwidget 命令，管理绑定应用的 widget】\n    - backup【备份】\n    - bmgr【备份，adb shell bmgr 命令】\n    - bootanimation【开机动画】\n        - audioplay 【开机音频】\n        - bootanim.rc【服务启动配置】\n    - bu【备份】\n    - content【内容提供者CURD，adb shell content】\n    - hid【设备输入】\n    - idmap2【ID 映射工具】\n    - ime【输入法】[参考](https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn)\n    - incident【解析文本数据到 protobuf】\n    - input【模拟外设用户事件触发】\n    - pm【软件包工具 packageManager】\n    - screencap【截屏】\n    - sm【存储命令，storageManager】\n    - svc【nfc\\power\\usb 等功能开关切换】\n    - telecom【电话账号相关】\n    - uiautomator【界面布局工具】\n        - instrumentation【内部使用，处于测试阶段】\n    - uinput【输入】\n    - wm【windowManager】\n- config\n    - boot-image-profile.txt【dex2oat 编译字典】\n    - preloaded-classes-denylist【不应由 zygote 初始化的类】\n        - android.content.AsyncTaskLoader$LoadTask\n        - android.net.ConnectivityThread$Singleton\n        - android.os.FileObserver【监听文件访问、创建、修改、删除、移动】\n        - android.os.NullVibrator\n        - android.speech.tts.TextToSpeech$Connection$SetupConnectionAsyncTask\n        - android.widget.Magnifier【虚拟放大镜】[参考](https://developer.android.google.cn/guide/topics/text/magnifier?hl=zh-cn)\n        - gov.nist.core.net.DefaultNetworkLayer\n        - android.net.rtp.AudioGroup\n        - android.net.rtp.AudioStream\n        - android.net.rtp.RtpStream【rtp 数据传输协议】\n        - java.util.concurrent.ThreadLocalRandom【多线程下生成随机数】\n- core\n    - api\n        - removed【被移除的或过时的接口】\n    - java\n        - android【主要服务】\n        - com/android\n    - proto【属性】\n    - jni\n    - proto\n    - res\n    - sysprop\n    - xsd\n- data\n    - etc\n    - fonts\n    - keyboards\n    - sounds\n        - alarms【闹钟音频】\n        - notifications【通知音频】\n    - videos\n\n","source":"_posts/undefined/Android-Framework目录.md","raw":"---\ntitle: 了解 framework base（二）\ncatalog: true\ndate: 2022-10-20 23:00:41\nsubtitle: 基于 android-11-r21\nheader-img: /img/2210/page-native.jpg\ntags: AOSP\ncategories:\n---\n\n# Framework Base\n\n- apex\n    - blobstore【应用程序之间的数据存储】\n        - framework\n        - service\n    - jobscheduler【将作业调度到主线模块】\n- api【略】\n- boot\n    - hiddenapi【限制外部程序访问的接口】\n    - preloaded-class【由 zygote 进行初始化的类】\n        - android.accessibilityservice\n        - android.account\n        - android.animation\n        - android.annotation\n        - android.app\n        - android.appwidget\n        - android.bluetooth\n        - android.content\n        - android.database\n        - android.graphics\n        - android.hardware\n        - android.icu\n        - android.location\n        - android.media\n        - android.net\n        - android.nfc\n        - android.opengl\n        - android.os\n        - android.permission\n        - android.provider\n        - android.security\n        - android.service\n        - android.syspro\n        - android.telephone\n        - android.text\n        - android.transition\n        - android.util\n        - android.view\n        - android.widget\n- cmds\n    - abx【二进制转XML android binary xml】 \n    - am【am 命令activityManager&packageManager】\n    - app_process【?】\n    - appops【app opration 操作权限管理】\n    - appwidget【adb shell appwidget 命令，管理绑定应用的 widget】\n    - backup【备份】\n    - bmgr【备份，adb shell bmgr 命令】\n    - bootanimation【开机动画】\n        - audioplay 【开机音频】\n        - bootanim.rc【服务启动配置】\n    - bu【备份】\n    - content【内容提供者CURD，adb shell content】\n    - hid【设备输入】\n    - idmap2【ID 映射工具】\n    - ime【输入法】[参考](https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn)\n    - incident【解析文本数据到 protobuf】\n    - input【模拟外设用户事件触发】\n    - pm【软件包工具 packageManager】\n    - screencap【截屏】\n    - sm【存储命令，storageManager】\n    - svc【nfc\\power\\usb 等功能开关切换】\n    - telecom【电话账号相关】\n    - uiautomator【界面布局工具】\n        - instrumentation【内部使用，处于测试阶段】\n    - uinput【输入】\n    - wm【windowManager】\n- config\n    - boot-image-profile.txt【dex2oat 编译字典】\n    - preloaded-classes-denylist【不应由 zygote 初始化的类】\n        - android.content.AsyncTaskLoader$LoadTask\n        - android.net.ConnectivityThread$Singleton\n        - android.os.FileObserver【监听文件访问、创建、修改、删除、移动】\n        - android.os.NullVibrator\n        - android.speech.tts.TextToSpeech$Connection$SetupConnectionAsyncTask\n        - android.widget.Magnifier【虚拟放大镜】[参考](https://developer.android.google.cn/guide/topics/text/magnifier?hl=zh-cn)\n        - gov.nist.core.net.DefaultNetworkLayer\n        - android.net.rtp.AudioGroup\n        - android.net.rtp.AudioStream\n        - android.net.rtp.RtpStream【rtp 数据传输协议】\n        - java.util.concurrent.ThreadLocalRandom【多线程下生成随机数】\n- core\n    - api\n        - removed【被移除的或过时的接口】\n    - java\n        - android【主要服务】\n        - com/android\n    - proto【属性】\n    - jni\n    - proto\n    - res\n    - sysprop\n    - xsd\n- data\n    - etc\n    - fonts\n    - keyboards\n    - sounds\n        - alarms【闹钟音频】\n        - notifications【通知音频】\n    - videos\n\n","slug":"Android-Framework目录","published":1,"lang":"undefined","updated":"2022-10-20T15:00:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q500067tqp4acp48se","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>Framework Base</h1>\n<ul>\n<li>apex\n<ul>\n<li>blobstore【应用程序之间的数据存储】\n<ul>\n<li>framework</li>\n<li>service</li>\n</ul>\n</li>\n<li>jobscheduler【将作业调度到主线模块】</li>\n</ul>\n</li>\n<li>api【略】</li>\n<li>boot\n<ul>\n<li>hiddenapi【限制外部程序访问的接口】</li>\n<li>preloaded-class【由 zygote 进行初始化的类】\n<ul>\n<li>android.accessibilityservice</li>\n<li>android.account</li>\n<li>android.animation</li>\n<li>android.annotation</li>\n<li>android.app</li>\n<li>android.appwidget</li>\n<li>android.bluetooth</li>\n<li>android.content</li>\n<li>android.database</li>\n<li>android.graphics</li>\n<li>android.hardware</li>\n<li>android.icu</li>\n<li>android.location</li>\n<li>android.media</li>\n<li><a href=\"http://android.net\">android.net</a></li>\n<li>android.nfc</li>\n<li>android.opengl</li>\n<li>android.os</li>\n<li>android.permission</li>\n<li>android.provider</li>\n<li>android.security</li>\n<li>android.service</li>\n<li>android.syspro</li>\n<li>android.telephone</li>\n<li>android.text</li>\n<li>android.transition</li>\n<li>android.util</li>\n<li>android.view</li>\n<li>android.widget</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cmds\n<ul>\n<li>abx【二进制转XML android binary xml】</li>\n<li>am【am 命令activityManager&amp;packageManager】</li>\n<li>app_process【?】</li>\n<li>appops【app opration 操作权限管理】</li>\n<li>appwidget【adb shell appwidget 命令，管理绑定应用的 widget】</li>\n<li>backup【备份】</li>\n<li>bmgr【备份，adb shell bmgr 命令】</li>\n<li>bootanimation【开机动画】\n<ul>\n<li>audioplay 【开机音频】</li>\n<li>bootanim.rc【服务启动配置】</li>\n</ul>\n</li>\n<li>bu【备份】</li>\n<li>content【内容提供者CURD，adb shell content】</li>\n<li>hid【设备输入】</li>\n<li>idmap2【ID 映射工具】</li>\n<li>ime【输入法】<a href=\"https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn\">参考</a></li>\n<li>incident【解析文本数据到 protobuf】</li>\n<li>input【模拟外设用户事件触发】</li>\n<li>pm【软件包工具 packageManager】</li>\n<li>screencap【截屏】</li>\n<li>sm【存储命令，storageManager】</li>\n<li>svc【nfc\\power\\usb 等功能开关切换】</li>\n<li>telecom【电话账号相关】</li>\n<li>uiautomator【界面布局工具】\n<ul>\n<li>instrumentation【内部使用，处于测试阶段】</li>\n</ul>\n</li>\n<li>uinput【输入】</li>\n<li>wm【windowManager】</li>\n</ul>\n</li>\n<li>config\n<ul>\n<li>boot-image-profile.txt【dex2oat 编译字典】</li>\n<li>preloaded-classes-denylist【不应由 zygote 初始化的类】\n<ul>\n<li>android.content.AsyncTaskLoader$LoadTask</li>\n<li>android.net.ConnectivityThread$Singleton</li>\n<li>android.os.FileObserver【监听文件访问、创建、修改、删除、移动】</li>\n<li>android.os.NullVibrator</li>\n<li>android.speech.tts.TextToSpeech$Connection$SetupConnectionAsyncTask</li>\n<li>android.widget.Magnifier【虚拟放大镜】<a href=\"https://developer.android.google.cn/guide/topics/text/magnifier?hl=zh-cn\">参考</a></li>\n<li>gov.nist.core.net.DefaultNetworkLayer</li>\n<li>android.net.rtp.AudioGroup</li>\n<li>android.net.rtp.AudioStream</li>\n<li>android.net.rtp.RtpStream【rtp 数据传输协议】</li>\n<li>java.util.concurrent.ThreadLocalRandom【多线程下生成随机数】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>core\n<ul>\n<li>api\n<ul>\n<li>removed【被移除的或过时的接口】</li>\n</ul>\n</li>\n<li>java\n<ul>\n<li>android【主要服务】</li>\n<li>com/android</li>\n</ul>\n</li>\n<li>proto【属性】</li>\n<li>jni</li>\n<li>proto</li>\n<li>res</li>\n<li>sysprop</li>\n<li>xsd</li>\n</ul>\n</li>\n<li>data\n<ul>\n<li>etc</li>\n<li>fonts</li>\n<li>keyboards</li>\n<li>sounds\n<ul>\n<li>alarms【闹钟音频】</li>\n<li>notifications【通知音频】</li>\n</ul>\n</li>\n<li>videos</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>Framework Base</h1>\n<ul>\n<li>apex\n<ul>\n<li>blobstore【应用程序之间的数据存储】\n<ul>\n<li>framework</li>\n<li>service</li>\n</ul>\n</li>\n<li>jobscheduler【将作业调度到主线模块】</li>\n</ul>\n</li>\n<li>api【略】</li>\n<li>boot\n<ul>\n<li>hiddenapi【限制外部程序访问的接口】</li>\n<li>preloaded-class【由 zygote 进行初始化的类】\n<ul>\n<li>android.accessibilityservice</li>\n<li>android.account</li>\n<li>android.animation</li>\n<li>android.annotation</li>\n<li>android.app</li>\n<li>android.appwidget</li>\n<li>android.bluetooth</li>\n<li>android.content</li>\n<li>android.database</li>\n<li>android.graphics</li>\n<li>android.hardware</li>\n<li>android.icu</li>\n<li>android.location</li>\n<li>android.media</li>\n<li><a href=\"http://android.net\">android.net</a></li>\n<li>android.nfc</li>\n<li>android.opengl</li>\n<li>android.os</li>\n<li>android.permission</li>\n<li>android.provider</li>\n<li>android.security</li>\n<li>android.service</li>\n<li>android.syspro</li>\n<li>android.telephone</li>\n<li>android.text</li>\n<li>android.transition</li>\n<li>android.util</li>\n<li>android.view</li>\n<li>android.widget</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cmds\n<ul>\n<li>abx【二进制转XML android binary xml】</li>\n<li>am【am 命令activityManager&amp;packageManager】</li>\n<li>app_process【?】</li>\n<li>appops【app opration 操作权限管理】</li>\n<li>appwidget【adb shell appwidget 命令，管理绑定应用的 widget】</li>\n<li>backup【备份】</li>\n<li>bmgr【备份，adb shell bmgr 命令】</li>\n<li>bootanimation【开机动画】\n<ul>\n<li>audioplay 【开机音频】</li>\n<li>bootanim.rc【服务启动配置】</li>\n</ul>\n</li>\n<li>bu【备份】</li>\n<li>content【内容提供者CURD，adb shell content】</li>\n<li>hid【设备输入】</li>\n<li>idmap2【ID 映射工具】</li>\n<li>ime【输入法】<a href=\"https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn\">参考</a></li>\n<li>incident【解析文本数据到 protobuf】</li>\n<li>input【模拟外设用户事件触发】</li>\n<li>pm【软件包工具 packageManager】</li>\n<li>screencap【截屏】</li>\n<li>sm【存储命令，storageManager】</li>\n<li>svc【nfc\\power\\usb 等功能开关切换】</li>\n<li>telecom【电话账号相关】</li>\n<li>uiautomator【界面布局工具】\n<ul>\n<li>instrumentation【内部使用，处于测试阶段】</li>\n</ul>\n</li>\n<li>uinput【输入】</li>\n<li>wm【windowManager】</li>\n</ul>\n</li>\n<li>config\n<ul>\n<li>boot-image-profile.txt【dex2oat 编译字典】</li>\n<li>preloaded-classes-denylist【不应由 zygote 初始化的类】\n<ul>\n<li>android.content.AsyncTaskLoader$LoadTask</li>\n<li>android.net.ConnectivityThread$Singleton</li>\n<li>android.os.FileObserver【监听文件访问、创建、修改、删除、移动】</li>\n<li>android.os.NullVibrator</li>\n<li>android.speech.tts.TextToSpeech$Connection$SetupConnectionAsyncTask</li>\n<li>android.widget.Magnifier【虚拟放大镜】<a href=\"https://developer.android.google.cn/guide/topics/text/magnifier?hl=zh-cn\">参考</a></li>\n<li>gov.nist.core.net.DefaultNetworkLayer</li>\n<li>android.net.rtp.AudioGroup</li>\n<li>android.net.rtp.AudioStream</li>\n<li>android.net.rtp.RtpStream【rtp 数据传输协议】</li>\n<li>java.util.concurrent.ThreadLocalRandom【多线程下生成随机数】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>core\n<ul>\n<li>api\n<ul>\n<li>removed【被移除的或过时的接口】</li>\n</ul>\n</li>\n<li>java\n<ul>\n<li>android【主要服务】</li>\n<li>com/android</li>\n</ul>\n</li>\n<li>proto【属性】</li>\n<li>jni</li>\n<li>proto</li>\n<li>res</li>\n<li>sysprop</li>\n<li>xsd</li>\n</ul>\n</li>\n<li>data\n<ul>\n<li>etc</li>\n<li>fonts</li>\n<li>keyboards</li>\n<li>sounds\n<ul>\n<li>alarms【闹钟音频】</li>\n<li>notifications【通知音频】</li>\n</ul>\n</li>\n<li>videos</li>\n</ul>\n</li>\n</ul>\n"},{"title":"了解 AOSP 工程目录（一）","catalog":true,"date":"2022-10-18T13:20:48.000Z","subtitle":"基于 android-11-r21","header-img":"/img/2210/page-native.jpg","_content":"\n# AOSP\n\n不知道该从哪下手，那就先了解了解。\nframework 是我们重点关注的，因为其他的看不懂。\n\n- art【Android runtime】\n    - adbconnection【adb 连接】\n    - artd【?】\n    - benchmark【衡量代码性能基准】[参考](https://developer.android.google.cn/jetpack/androidx/releases/benchmark?hl=zh-cn)\n    - build【?】\n    - cmdline【命令行】\n    - complier【编译，elf】\n        - dex【字节码，内敛方法】\n        - jit【即时编译，arm/arm64/x86/x86_64转换】\n        - linker【链接】\n        - optimizing【优化】\n        - trampolines【?】\n    - dalvikvm【dalvik 虚拟机启动】\n    - dex2oat【字节码转 oat 文件，elf】\n    - dexdump【分析 dex】\n    - dexlayout【dex 分析】[参考](https://source.android.google.cn/docs/core/runtime/improvements?hl=zh-cn)\n    - dexlist【分析 dex】\n    - dexoptanalyzer【dex 优化分析】\n    - disassembler【反汇编】\n    - imgdiag【?】\n    - libartbase【?】\n    - libartpalette【?】\n    - libservice【?】\n    - libarttools【?】\n    - libdexfile【dex 文件】\n    - libelffile【elf 文件】\n        - dwarf【调试？】\n    - libnativebridge【桥接】\n    - libnativeloader【加载】\n    - libprofile【性能分析】[参考](https://developer.android.google.cn/studio/profile/android-profiler?hl=zh-cn)\n    - oatdump【反编译 oat 文件】\n    - odrefresh【?】\n    - openjdkjvm【?】\n    - openjdkjvmti【内存动态监测】\n    - prefetto_hprof【性能分析】[参考](https://developer.android.google.cn/studio/command-line/perfetto?hl=zh-cn)\n    - profman【hprof 相关】\n    - runtime 【运行环境】\n        - arch【指令集】\n        - gc【垃圾回收】\n            - allocator【内存分配】\n            - collector【内存回收】\n            - space【内存块】\n        - jit【即时编译】\n        - verifier【校验】\n    - sigchainlib【信号?】\n    - simulator【模拟器?】\n\n- bionic【仿生的 Linux】\n    - apex【一种容器格式】[参考](https://source.android.google.cn/docs/core/ota/apex?hl=zh-cn)\n    - benchmarks【性能测试准则】[参考](https://developer.android.google.cn/jetpack/androidx/releases/benchmark?hl=zh-cn)\n    - libc\n        - bionic\n        - dns\n    - libdl\n    - libfdtrack【fd 句柄跟踪】\n    - libm\n    - libstdc++【cpp 标准库】\n    - linker【连接器】\n\n- bootable【启动引导】\n    - recovery【恢复】\n        - applypatch【补丁工具】\n        - edify【刷机脚本】\n        - fastboot【刷机模式】\n        - fuse_sideload【文件传输】[参考](https://source.android.google.cn/docs/core/storage/fuse-passthrough?hl=zh-cn)\n        - install 【adb 安装、fuse 安装】\n        - minadbd【最小化 adb 服务端】\n        - minui【?】\n        - otautil【无线下载更新】[参考](https://source.android.google.cn/docs/core/ota?hl=zh-cn)\n        - recovery_ui【恢复模式界面】\n        - updater【系统更新】\n- build【略】\n- compatibility【兼容性计划】[参考](https://source.android.google.cn/docs/compatibility/overview?hl=zh-cn)\n    - cdd【兼容性限制文档】\n        - 设备类型【手机、手表】\n        - 应用程序【web 接口、native 接口、runtime 相关等】\n        - 硬件【显示、相机、USB、音频等】t\n        - 多媒体【音视频编码等】\n        - 安全【权限、文件系统、隐私等】\n- cts【兼容性测试】[参考](https://source.android.google.cn/docs/compatibility/cts?hl=zh-cn)\n    - 略\n\n- dalvik【字节码】\n    - dexgen【dex 生成】\n    - dx【dx 工具】\n        - dx\n        - dex\n        - multidex\n- developers【应用 demo?】\n    - demos【?】\n    - samples【应用例子】\n- development【?】\n- device【很底层吧】\n    - amlogic【开发版】\n        - yukawa\n    - common\n    - generic\n    - google\n    - linaro\n    - mediatek\n    - ti\n- external\n- frameworks\n    - av\n    - base\n    - compile\n    - ex\n    - hardware\n    - layoutlib\n    - libs\n    - minikin\n    - ml\n    - multidex\n    - native\n    - opt\n    - rs\n    - wilhelm\n- hardware\n    - broadcom【Wi-Fi驱动？】\n- kernel\n- libcore\n- libnativehelper\n- manifest\n- packages\n    - app【系统软件】\n        - bluetooth\n        - browser\n        - calendar\n        ... \n    - inputmethod【输入法】\n    - provider【系统软件数据提供者】\n    - service\n    - wallpapers【壁纸】\n- pdk\n- platform_testing\n- prebuilts\n    - 略\n- sdk\n    - 略\n- system\n    - apex【文件容器格式，更新】[参考](https://source.android.google.cn/docs/core/ota/apex?hl=zh-cn)\n    - bpf【内核扩展，EBPF】[参考](https://source.android.google.cn/docs/core/architecture/kernel/bpf?hl=zh-cn)\n    - bt【蓝牙，已迁移】\n    - ca-certificates【打包证书】\n    - chre【?】\n    - connectivity【Wi-Fi】\n    - core\n        - bootstat【启动】\n        - debuggerd【运行时信息记录】\n        - diagonse_usb\n        - fastboot【刷机】\n        - init【初始化，解析】\n        - libappfuse【存储相关】[参考](https://source.android.google.cn/docs/core/storage/fuse-passthrough?hl=zh-cn)\n        - libpackagelistparser【安装包解析】\n        - libprocessgroup【进程组】\n        - llkd【内核死锁监测】[参考](https://source.android.google.cn/docs/core/architecture/kernel/llkd?hl=zh-cn)\n        - rootdir【系统用户目录】\n            - init.rc\n            - init.usb.rc\n            - init.zygote32.rc\n            - init.zygote64_32.rc\n            - init.zygote64.rc\n        - run-as【权限】\n        - sdcard【SD存储】\n        - storaged【外部存储】\n        - trusty【安全环境】[参考](https://source.android.google.cn/docs/security/trusty?hl=zh-cn)\n        - watchdogd【监控】\n    - extras\n    - gatekeeper【设备解锁】[参考](https://source.android.google.cn/docs/security/features/authentication/gatekeeper?hl=zh-cn)\n    - hardware【硬件接口 hal】\n        - keystore\n        - net\n        - wifi\n        - suspend【?】\n    - libhwbinder【binder?】\n    - sysprop【系统属性】[参考](https://source.android.google.cn/docs/core/architecture/sysprops-apis?hl=zh-cn)\n    - media【媒体】\n        - audio\n        - camera\n        - radio\n    - memory\n    - nfc\n    - timezone【时区】\n    - update_engine【系统更新】\n    - void【存储管理服务】\n- test\n    - 略\n- toolchain【工具链】\n    - 略\n- tools\n    - acloud【云存储?】\n    - adt【eclipse 插件】\n    - apifinder【抓包?】\n    - apksig【签名】\n    - apkzlib\n    - asuite\n    - dexter\n    - loganalysis【日志】\n    - metalava【元数据生成】\n    - swt【看门狗】 \n        - ddms【性能分析】\n        - chimpchat 【自动化测试】\n        - hierarchyviewers【布局分析】\n        - monkeyrunner【自动化测试】\n        - traceview【布局分析】\n        - uiautomatorviewer【布局分析】\n    - treble【版本更新?】[参考](https://source.android.google.cn/docs/core/architecture/treble?hl=zh-cn)","source":"_posts/undefined/Android目录.md","raw":"---\ntitle: 了解 AOSP 工程目录（一）\ncatalog: true\ndate: 2022-10-18 21:20:48\nsubtitle: 基于 android-11-r21\nheader-img: /img/2210/page-native.jpg\ntags: AOSP\ncategories:\n---\n\n# AOSP\n\n不知道该从哪下手，那就先了解了解。\nframework 是我们重点关注的，因为其他的看不懂。\n\n- art【Android runtime】\n    - adbconnection【adb 连接】\n    - artd【?】\n    - benchmark【衡量代码性能基准】[参考](https://developer.android.google.cn/jetpack/androidx/releases/benchmark?hl=zh-cn)\n    - build【?】\n    - cmdline【命令行】\n    - complier【编译，elf】\n        - dex【字节码，内敛方法】\n        - jit【即时编译，arm/arm64/x86/x86_64转换】\n        - linker【链接】\n        - optimizing【优化】\n        - trampolines【?】\n    - dalvikvm【dalvik 虚拟机启动】\n    - dex2oat【字节码转 oat 文件，elf】\n    - dexdump【分析 dex】\n    - dexlayout【dex 分析】[参考](https://source.android.google.cn/docs/core/runtime/improvements?hl=zh-cn)\n    - dexlist【分析 dex】\n    - dexoptanalyzer【dex 优化分析】\n    - disassembler【反汇编】\n    - imgdiag【?】\n    - libartbase【?】\n    - libartpalette【?】\n    - libservice【?】\n    - libarttools【?】\n    - libdexfile【dex 文件】\n    - libelffile【elf 文件】\n        - dwarf【调试？】\n    - libnativebridge【桥接】\n    - libnativeloader【加载】\n    - libprofile【性能分析】[参考](https://developer.android.google.cn/studio/profile/android-profiler?hl=zh-cn)\n    - oatdump【反编译 oat 文件】\n    - odrefresh【?】\n    - openjdkjvm【?】\n    - openjdkjvmti【内存动态监测】\n    - prefetto_hprof【性能分析】[参考](https://developer.android.google.cn/studio/command-line/perfetto?hl=zh-cn)\n    - profman【hprof 相关】\n    - runtime 【运行环境】\n        - arch【指令集】\n        - gc【垃圾回收】\n            - allocator【内存分配】\n            - collector【内存回收】\n            - space【内存块】\n        - jit【即时编译】\n        - verifier【校验】\n    - sigchainlib【信号?】\n    - simulator【模拟器?】\n\n- bionic【仿生的 Linux】\n    - apex【一种容器格式】[参考](https://source.android.google.cn/docs/core/ota/apex?hl=zh-cn)\n    - benchmarks【性能测试准则】[参考](https://developer.android.google.cn/jetpack/androidx/releases/benchmark?hl=zh-cn)\n    - libc\n        - bionic\n        - dns\n    - libdl\n    - libfdtrack【fd 句柄跟踪】\n    - libm\n    - libstdc++【cpp 标准库】\n    - linker【连接器】\n\n- bootable【启动引导】\n    - recovery【恢复】\n        - applypatch【补丁工具】\n        - edify【刷机脚本】\n        - fastboot【刷机模式】\n        - fuse_sideload【文件传输】[参考](https://source.android.google.cn/docs/core/storage/fuse-passthrough?hl=zh-cn)\n        - install 【adb 安装、fuse 安装】\n        - minadbd【最小化 adb 服务端】\n        - minui【?】\n        - otautil【无线下载更新】[参考](https://source.android.google.cn/docs/core/ota?hl=zh-cn)\n        - recovery_ui【恢复模式界面】\n        - updater【系统更新】\n- build【略】\n- compatibility【兼容性计划】[参考](https://source.android.google.cn/docs/compatibility/overview?hl=zh-cn)\n    - cdd【兼容性限制文档】\n        - 设备类型【手机、手表】\n        - 应用程序【web 接口、native 接口、runtime 相关等】\n        - 硬件【显示、相机、USB、音频等】t\n        - 多媒体【音视频编码等】\n        - 安全【权限、文件系统、隐私等】\n- cts【兼容性测试】[参考](https://source.android.google.cn/docs/compatibility/cts?hl=zh-cn)\n    - 略\n\n- dalvik【字节码】\n    - dexgen【dex 生成】\n    - dx【dx 工具】\n        - dx\n        - dex\n        - multidex\n- developers【应用 demo?】\n    - demos【?】\n    - samples【应用例子】\n- development【?】\n- device【很底层吧】\n    - amlogic【开发版】\n        - yukawa\n    - common\n    - generic\n    - google\n    - linaro\n    - mediatek\n    - ti\n- external\n- frameworks\n    - av\n    - base\n    - compile\n    - ex\n    - hardware\n    - layoutlib\n    - libs\n    - minikin\n    - ml\n    - multidex\n    - native\n    - opt\n    - rs\n    - wilhelm\n- hardware\n    - broadcom【Wi-Fi驱动？】\n- kernel\n- libcore\n- libnativehelper\n- manifest\n- packages\n    - app【系统软件】\n        - bluetooth\n        - browser\n        - calendar\n        ... \n    - inputmethod【输入法】\n    - provider【系统软件数据提供者】\n    - service\n    - wallpapers【壁纸】\n- pdk\n- platform_testing\n- prebuilts\n    - 略\n- sdk\n    - 略\n- system\n    - apex【文件容器格式，更新】[参考](https://source.android.google.cn/docs/core/ota/apex?hl=zh-cn)\n    - bpf【内核扩展，EBPF】[参考](https://source.android.google.cn/docs/core/architecture/kernel/bpf?hl=zh-cn)\n    - bt【蓝牙，已迁移】\n    - ca-certificates【打包证书】\n    - chre【?】\n    - connectivity【Wi-Fi】\n    - core\n        - bootstat【启动】\n        - debuggerd【运行时信息记录】\n        - diagonse_usb\n        - fastboot【刷机】\n        - init【初始化，解析】\n        - libappfuse【存储相关】[参考](https://source.android.google.cn/docs/core/storage/fuse-passthrough?hl=zh-cn)\n        - libpackagelistparser【安装包解析】\n        - libprocessgroup【进程组】\n        - llkd【内核死锁监测】[参考](https://source.android.google.cn/docs/core/architecture/kernel/llkd?hl=zh-cn)\n        - rootdir【系统用户目录】\n            - init.rc\n            - init.usb.rc\n            - init.zygote32.rc\n            - init.zygote64_32.rc\n            - init.zygote64.rc\n        - run-as【权限】\n        - sdcard【SD存储】\n        - storaged【外部存储】\n        - trusty【安全环境】[参考](https://source.android.google.cn/docs/security/trusty?hl=zh-cn)\n        - watchdogd【监控】\n    - extras\n    - gatekeeper【设备解锁】[参考](https://source.android.google.cn/docs/security/features/authentication/gatekeeper?hl=zh-cn)\n    - hardware【硬件接口 hal】\n        - keystore\n        - net\n        - wifi\n        - suspend【?】\n    - libhwbinder【binder?】\n    - sysprop【系统属性】[参考](https://source.android.google.cn/docs/core/architecture/sysprops-apis?hl=zh-cn)\n    - media【媒体】\n        - audio\n        - camera\n        - radio\n    - memory\n    - nfc\n    - timezone【时区】\n    - update_engine【系统更新】\n    - void【存储管理服务】\n- test\n    - 略\n- toolchain【工具链】\n    - 略\n- tools\n    - acloud【云存储?】\n    - adt【eclipse 插件】\n    - apifinder【抓包?】\n    - apksig【签名】\n    - apkzlib\n    - asuite\n    - dexter\n    - loganalysis【日志】\n    - metalava【元数据生成】\n    - swt【看门狗】 \n        - ddms【性能分析】\n        - chimpchat 【自动化测试】\n        - hierarchyviewers【布局分析】\n        - monkeyrunner【自动化测试】\n        - traceview【布局分析】\n        - uiautomatorviewer【布局分析】\n    - treble【版本更新?】[参考](https://source.android.google.cn/docs/core/architecture/treble?hl=zh-cn)","slug":"Android目录","published":1,"lang":"undefined","updated":"2022-10-18T13:20:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q500087tqp4kvffhm4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>AOSP</h1>\n<p>不知道该从哪下手，那就先了解了解。<br>\nframework 是我们重点关注的，因为其他的看不懂。</p>\n<ul>\n<li>\n<p>art【Android runtime】</p>\n<ul>\n<li>adbconnection【adb 连接】</li>\n<li>artd【?】</li>\n<li>benchmark【衡量代码性能基准】<a href=\"https://developer.android.google.cn/jetpack/androidx/releases/benchmark?hl=zh-cn\">参考</a></li>\n<li>build【?】</li>\n<li>cmdline【命令行】</li>\n<li>complier【编译，elf】\n<ul>\n<li>dex【字节码，内敛方法】</li>\n<li>jit【即时编译，arm/arm64/x86/x86_64转换】</li>\n<li>linker【链接】</li>\n<li>optimizing【优化】</li>\n<li>trampolines【?】</li>\n</ul>\n</li>\n<li>dalvikvm【dalvik 虚拟机启动】</li>\n<li>dex2oat【字节码转 oat 文件，elf】</li>\n<li>dexdump【分析 dex】</li>\n<li>dexlayout【dex 分析】<a href=\"https://source.android.google.cn/docs/core/runtime/improvements?hl=zh-cn\">参考</a></li>\n<li>dexlist【分析 dex】</li>\n<li>dexoptanalyzer【dex 优化分析】</li>\n<li>disassembler【反汇编】</li>\n<li>imgdiag【?】</li>\n<li>libartbase【?】</li>\n<li>libartpalette【?】</li>\n<li>libservice【?】</li>\n<li>libarttools【?】</li>\n<li>libdexfile【dex 文件】</li>\n<li>libelffile【elf 文件】\n<ul>\n<li>dwarf【调试？】</li>\n</ul>\n</li>\n<li>libnativebridge【桥接】</li>\n<li>libnativeloader【加载】</li>\n<li>libprofile【性能分析】<a href=\"https://developer.android.google.cn/studio/profile/android-profiler?hl=zh-cn\">参考</a></li>\n<li>oatdump【反编译 oat 文件】</li>\n<li>odrefresh【?】</li>\n<li>openjdkjvm【?】</li>\n<li>openjdkjvmti【内存动态监测】</li>\n<li>prefetto_hprof【性能分析】<a href=\"https://developer.android.google.cn/studio/command-line/perfetto?hl=zh-cn\">参考</a></li>\n<li>profman【hprof 相关】</li>\n<li>runtime 【运行环境】\n<ul>\n<li>arch【指令集】</li>\n<li>gc【垃圾回收】\n<ul>\n<li>allocator【内存分配】</li>\n<li>collector【内存回收】</li>\n<li>space【内存块】</li>\n</ul>\n</li>\n<li>jit【即时编译】</li>\n<li>verifier【校验】</li>\n</ul>\n</li>\n<li>sigchainlib【信号?】</li>\n<li>simulator【模拟器?】</li>\n</ul>\n</li>\n<li>\n<p>bionic【仿生的 Linux】</p>\n<ul>\n<li>apex【一种容器格式】<a href=\"https://source.android.google.cn/docs/core/ota/apex?hl=zh-cn\">参考</a></li>\n<li>benchmarks【性能测试准则】<a href=\"https://developer.android.google.cn/jetpack/androidx/releases/benchmark?hl=zh-cn\">参考</a></li>\n<li>libc\n<ul>\n<li>bionic</li>\n<li>dns</li>\n</ul>\n</li>\n<li>libdl</li>\n<li>libfdtrack【fd 句柄跟踪】</li>\n<li>libm</li>\n<li>libstdc++【cpp 标准库】</li>\n<li>linker【连接器】</li>\n</ul>\n</li>\n<li>\n<p>bootable【启动引导】</p>\n<ul>\n<li>recovery【恢复】\n<ul>\n<li>applypatch【补丁工具】</li>\n<li>edify【刷机脚本】</li>\n<li>fastboot【刷机模式】</li>\n<li>fuse_sideload【文件传输】<a href=\"https://source.android.google.cn/docs/core/storage/fuse-passthrough?hl=zh-cn\">参考</a></li>\n<li>install 【adb 安装、fuse 安装】</li>\n<li>minadbd【最小化 adb 服务端】</li>\n<li>minui【?】</li>\n<li>otautil【无线下载更新】<a href=\"https://source.android.google.cn/docs/core/ota?hl=zh-cn\">参考</a></li>\n<li>recovery_ui【恢复模式界面】</li>\n<li>updater【系统更新】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>build【略】</p>\n</li>\n<li>\n<p>compatibility【兼容性计划】<a href=\"https://source.android.google.cn/docs/compatibility/overview?hl=zh-cn\">参考</a></p>\n<ul>\n<li>cdd【兼容性限制文档】\n<ul>\n<li>设备类型【手机、手表】</li>\n<li>应用程序【web 接口、native 接口、runtime 相关等】</li>\n<li>硬件【显示、相机、USB、音频等】t</li>\n<li>多媒体【音视频编码等】</li>\n<li>安全【权限、文件系统、隐私等】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>cts【兼容性测试】<a href=\"https://source.android.google.cn/docs/compatibility/cts?hl=zh-cn\">参考</a></p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>dalvik【字节码】</p>\n<ul>\n<li>dexgen【dex 生成】</li>\n<li>dx【dx 工具】\n<ul>\n<li>dx</li>\n<li>dex</li>\n<li>multidex</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>developers【应用 demo?】</p>\n<ul>\n<li>demos【?】</li>\n<li>samples【应用例子】</li>\n</ul>\n</li>\n<li>\n<p>development【?】</p>\n</li>\n<li>\n<p>device【很底层吧】</p>\n<ul>\n<li>amlogic【开发版】\n<ul>\n<li>yukawa</li>\n</ul>\n</li>\n<li>common</li>\n<li>generic</li>\n<li>google</li>\n<li>linaro</li>\n<li>mediatek</li>\n<li>ti</li>\n</ul>\n</li>\n<li>\n<p>external</p>\n</li>\n<li>\n<p>frameworks</p>\n<ul>\n<li>av</li>\n<li>base</li>\n<li>compile</li>\n<li>ex</li>\n<li>hardware</li>\n<li>layoutlib</li>\n<li>libs</li>\n<li>minikin</li>\n<li>ml</li>\n<li>multidex</li>\n<li>native</li>\n<li>opt</li>\n<li>rs</li>\n<li>wilhelm</li>\n</ul>\n</li>\n<li>\n<p>hardware</p>\n<ul>\n<li>broadcom【Wi-Fi驱动？】</li>\n</ul>\n</li>\n<li>\n<p>kernel</p>\n</li>\n<li>\n<p>libcore</p>\n</li>\n<li>\n<p>libnativehelper</p>\n</li>\n<li>\n<p>manifest</p>\n</li>\n<li>\n<p>packages</p>\n<ul>\n<li>app【系统软件】\n<ul>\n<li>bluetooth</li>\n<li>browser</li>\n<li>calendar<br>\n…</li>\n</ul>\n</li>\n<li>inputmethod【输入法】</li>\n<li>provider【系统软件数据提供者】</li>\n<li>service</li>\n<li>wallpapers【壁纸】</li>\n</ul>\n</li>\n<li>\n<p>pdk</p>\n</li>\n<li>\n<p>platform_testing</p>\n</li>\n<li>\n<p>prebuilts</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>sdk</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>system</p>\n<ul>\n<li>apex【文件容器格式，更新】<a href=\"https://source.android.google.cn/docs/core/ota/apex?hl=zh-cn\">参考</a></li>\n<li>bpf【内核扩展，EBPF】<a href=\"https://source.android.google.cn/docs/core/architecture/kernel/bpf?hl=zh-cn\">参考</a></li>\n<li>bt【蓝牙，已迁移】</li>\n<li>ca-certificates【打包证书】</li>\n<li>chre【?】</li>\n<li>connectivity【Wi-Fi】</li>\n<li>core\n<ul>\n<li>bootstat【启动】</li>\n<li>debuggerd【运行时信息记录】</li>\n<li>diagonse_usb</li>\n<li>fastboot【刷机】</li>\n<li>init【初始化，解析】</li>\n<li>libappfuse【存储相关】<a href=\"https://source.android.google.cn/docs/core/storage/fuse-passthrough?hl=zh-cn\">参考</a></li>\n<li>libpackagelistparser【安装包解析】</li>\n<li>libprocessgroup【进程组】</li>\n<li>llkd【内核死锁监测】<a href=\"https://source.android.google.cn/docs/core/architecture/kernel/llkd?hl=zh-cn\">参考</a></li>\n<li>rootdir【系统用户目录】\n<ul>\n<li>init.rc</li>\n<li>init.usb.rc</li>\n<li>init.zygote32.rc</li>\n<li>init.zygote64_32.rc</li>\n<li>init.zygote64.rc</li>\n</ul>\n</li>\n<li>run-as【权限】</li>\n<li>sdcard【SD存储】</li>\n<li>storaged【外部存储】</li>\n<li>trusty【安全环境】<a href=\"https://source.android.google.cn/docs/security/trusty?hl=zh-cn\">参考</a></li>\n<li>watchdogd【监控】</li>\n</ul>\n</li>\n<li>extras</li>\n<li>gatekeeper【设备解锁】<a href=\"https://source.android.google.cn/docs/security/features/authentication/gatekeeper?hl=zh-cn\">参考</a></li>\n<li>hardware【硬件接口 hal】\n<ul>\n<li>keystore</li>\n<li>net</li>\n<li>wifi</li>\n<li>suspend【?】</li>\n</ul>\n</li>\n<li>libhwbinder【binder?】</li>\n<li>sysprop【系统属性】<a href=\"https://source.android.google.cn/docs/core/architecture/sysprops-apis?hl=zh-cn\">参考</a></li>\n<li>media【媒体】\n<ul>\n<li>audio</li>\n<li>camera</li>\n<li>radio</li>\n</ul>\n</li>\n<li>memory</li>\n<li>nfc</li>\n<li>timezone【时区】</li>\n<li>update_engine【系统更新】</li>\n<li>void【存储管理服务】</li>\n</ul>\n</li>\n<li>\n<p>test</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>toolchain【工具链】</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>tools</p>\n<ul>\n<li>acloud【云存储?】</li>\n<li>adt【eclipse 插件】</li>\n<li>apifinder【抓包?】</li>\n<li>apksig【签名】</li>\n<li>apkzlib</li>\n<li>asuite</li>\n<li>dexter</li>\n<li>loganalysis【日志】</li>\n<li>metalava【元数据生成】</li>\n<li>swt【看门狗】\n<ul>\n<li>ddms【性能分析】</li>\n<li>chimpchat 【自动化测试】</li>\n<li>hierarchyviewers【布局分析】</li>\n<li>monkeyrunner【自动化测试】</li>\n<li>traceview【布局分析】</li>\n<li>uiautomatorviewer【布局分析】</li>\n</ul>\n</li>\n<li>treble【版本更新?】<a href=\"https://source.android.google.cn/docs/core/architecture/treble?hl=zh-cn\">参考</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>AOSP</h1>\n<p>不知道该从哪下手，那就先了解了解。<br>\nframework 是我们重点关注的，因为其他的看不懂。</p>\n<ul>\n<li>\n<p>art【Android runtime】</p>\n<ul>\n<li>adbconnection【adb 连接】</li>\n<li>artd【?】</li>\n<li>benchmark【衡量代码性能基准】<a href=\"https://developer.android.google.cn/jetpack/androidx/releases/benchmark?hl=zh-cn\">参考</a></li>\n<li>build【?】</li>\n<li>cmdline【命令行】</li>\n<li>complier【编译，elf】\n<ul>\n<li>dex【字节码，内敛方法】</li>\n<li>jit【即时编译，arm/arm64/x86/x86_64转换】</li>\n<li>linker【链接】</li>\n<li>optimizing【优化】</li>\n<li>trampolines【?】</li>\n</ul>\n</li>\n<li>dalvikvm【dalvik 虚拟机启动】</li>\n<li>dex2oat【字节码转 oat 文件，elf】</li>\n<li>dexdump【分析 dex】</li>\n<li>dexlayout【dex 分析】<a href=\"https://source.android.google.cn/docs/core/runtime/improvements?hl=zh-cn\">参考</a></li>\n<li>dexlist【分析 dex】</li>\n<li>dexoptanalyzer【dex 优化分析】</li>\n<li>disassembler【反汇编】</li>\n<li>imgdiag【?】</li>\n<li>libartbase【?】</li>\n<li>libartpalette【?】</li>\n<li>libservice【?】</li>\n<li>libarttools【?】</li>\n<li>libdexfile【dex 文件】</li>\n<li>libelffile【elf 文件】\n<ul>\n<li>dwarf【调试？】</li>\n</ul>\n</li>\n<li>libnativebridge【桥接】</li>\n<li>libnativeloader【加载】</li>\n<li>libprofile【性能分析】<a href=\"https://developer.android.google.cn/studio/profile/android-profiler?hl=zh-cn\">参考</a></li>\n<li>oatdump【反编译 oat 文件】</li>\n<li>odrefresh【?】</li>\n<li>openjdkjvm【?】</li>\n<li>openjdkjvmti【内存动态监测】</li>\n<li>prefetto_hprof【性能分析】<a href=\"https://developer.android.google.cn/studio/command-line/perfetto?hl=zh-cn\">参考</a></li>\n<li>profman【hprof 相关】</li>\n<li>runtime 【运行环境】\n<ul>\n<li>arch【指令集】</li>\n<li>gc【垃圾回收】\n<ul>\n<li>allocator【内存分配】</li>\n<li>collector【内存回收】</li>\n<li>space【内存块】</li>\n</ul>\n</li>\n<li>jit【即时编译】</li>\n<li>verifier【校验】</li>\n</ul>\n</li>\n<li>sigchainlib【信号?】</li>\n<li>simulator【模拟器?】</li>\n</ul>\n</li>\n<li>\n<p>bionic【仿生的 Linux】</p>\n<ul>\n<li>apex【一种容器格式】<a href=\"https://source.android.google.cn/docs/core/ota/apex?hl=zh-cn\">参考</a></li>\n<li>benchmarks【性能测试准则】<a href=\"https://developer.android.google.cn/jetpack/androidx/releases/benchmark?hl=zh-cn\">参考</a></li>\n<li>libc\n<ul>\n<li>bionic</li>\n<li>dns</li>\n</ul>\n</li>\n<li>libdl</li>\n<li>libfdtrack【fd 句柄跟踪】</li>\n<li>libm</li>\n<li>libstdc++【cpp 标准库】</li>\n<li>linker【连接器】</li>\n</ul>\n</li>\n<li>\n<p>bootable【启动引导】</p>\n<ul>\n<li>recovery【恢复】\n<ul>\n<li>applypatch【补丁工具】</li>\n<li>edify【刷机脚本】</li>\n<li>fastboot【刷机模式】</li>\n<li>fuse_sideload【文件传输】<a href=\"https://source.android.google.cn/docs/core/storage/fuse-passthrough?hl=zh-cn\">参考</a></li>\n<li>install 【adb 安装、fuse 安装】</li>\n<li>minadbd【最小化 adb 服务端】</li>\n<li>minui【?】</li>\n<li>otautil【无线下载更新】<a href=\"https://source.android.google.cn/docs/core/ota?hl=zh-cn\">参考</a></li>\n<li>recovery_ui【恢复模式界面】</li>\n<li>updater【系统更新】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>build【略】</p>\n</li>\n<li>\n<p>compatibility【兼容性计划】<a href=\"https://source.android.google.cn/docs/compatibility/overview?hl=zh-cn\">参考</a></p>\n<ul>\n<li>cdd【兼容性限制文档】\n<ul>\n<li>设备类型【手机、手表】</li>\n<li>应用程序【web 接口、native 接口、runtime 相关等】</li>\n<li>硬件【显示、相机、USB、音频等】t</li>\n<li>多媒体【音视频编码等】</li>\n<li>安全【权限、文件系统、隐私等】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>cts【兼容性测试】<a href=\"https://source.android.google.cn/docs/compatibility/cts?hl=zh-cn\">参考</a></p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>dalvik【字节码】</p>\n<ul>\n<li>dexgen【dex 生成】</li>\n<li>dx【dx 工具】\n<ul>\n<li>dx</li>\n<li>dex</li>\n<li>multidex</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>developers【应用 demo?】</p>\n<ul>\n<li>demos【?】</li>\n<li>samples【应用例子】</li>\n</ul>\n</li>\n<li>\n<p>development【?】</p>\n</li>\n<li>\n<p>device【很底层吧】</p>\n<ul>\n<li>amlogic【开发版】\n<ul>\n<li>yukawa</li>\n</ul>\n</li>\n<li>common</li>\n<li>generic</li>\n<li>google</li>\n<li>linaro</li>\n<li>mediatek</li>\n<li>ti</li>\n</ul>\n</li>\n<li>\n<p>external</p>\n</li>\n<li>\n<p>frameworks</p>\n<ul>\n<li>av</li>\n<li>base</li>\n<li>compile</li>\n<li>ex</li>\n<li>hardware</li>\n<li>layoutlib</li>\n<li>libs</li>\n<li>minikin</li>\n<li>ml</li>\n<li>multidex</li>\n<li>native</li>\n<li>opt</li>\n<li>rs</li>\n<li>wilhelm</li>\n</ul>\n</li>\n<li>\n<p>hardware</p>\n<ul>\n<li>broadcom【Wi-Fi驱动？】</li>\n</ul>\n</li>\n<li>\n<p>kernel</p>\n</li>\n<li>\n<p>libcore</p>\n</li>\n<li>\n<p>libnativehelper</p>\n</li>\n<li>\n<p>manifest</p>\n</li>\n<li>\n<p>packages</p>\n<ul>\n<li>app【系统软件】\n<ul>\n<li>bluetooth</li>\n<li>browser</li>\n<li>calendar<br>\n…</li>\n</ul>\n</li>\n<li>inputmethod【输入法】</li>\n<li>provider【系统软件数据提供者】</li>\n<li>service</li>\n<li>wallpapers【壁纸】</li>\n</ul>\n</li>\n<li>\n<p>pdk</p>\n</li>\n<li>\n<p>platform_testing</p>\n</li>\n<li>\n<p>prebuilts</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>sdk</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>system</p>\n<ul>\n<li>apex【文件容器格式，更新】<a href=\"https://source.android.google.cn/docs/core/ota/apex?hl=zh-cn\">参考</a></li>\n<li>bpf【内核扩展，EBPF】<a href=\"https://source.android.google.cn/docs/core/architecture/kernel/bpf?hl=zh-cn\">参考</a></li>\n<li>bt【蓝牙，已迁移】</li>\n<li>ca-certificates【打包证书】</li>\n<li>chre【?】</li>\n<li>connectivity【Wi-Fi】</li>\n<li>core\n<ul>\n<li>bootstat【启动】</li>\n<li>debuggerd【运行时信息记录】</li>\n<li>diagonse_usb</li>\n<li>fastboot【刷机】</li>\n<li>init【初始化，解析】</li>\n<li>libappfuse【存储相关】<a href=\"https://source.android.google.cn/docs/core/storage/fuse-passthrough?hl=zh-cn\">参考</a></li>\n<li>libpackagelistparser【安装包解析】</li>\n<li>libprocessgroup【进程组】</li>\n<li>llkd【内核死锁监测】<a href=\"https://source.android.google.cn/docs/core/architecture/kernel/llkd?hl=zh-cn\">参考</a></li>\n<li>rootdir【系统用户目录】\n<ul>\n<li>init.rc</li>\n<li>init.usb.rc</li>\n<li>init.zygote32.rc</li>\n<li>init.zygote64_32.rc</li>\n<li>init.zygote64.rc</li>\n</ul>\n</li>\n<li>run-as【权限】</li>\n<li>sdcard【SD存储】</li>\n<li>storaged【外部存储】</li>\n<li>trusty【安全环境】<a href=\"https://source.android.google.cn/docs/security/trusty?hl=zh-cn\">参考</a></li>\n<li>watchdogd【监控】</li>\n</ul>\n</li>\n<li>extras</li>\n<li>gatekeeper【设备解锁】<a href=\"https://source.android.google.cn/docs/security/features/authentication/gatekeeper?hl=zh-cn\">参考</a></li>\n<li>hardware【硬件接口 hal】\n<ul>\n<li>keystore</li>\n<li>net</li>\n<li>wifi</li>\n<li>suspend【?】</li>\n</ul>\n</li>\n<li>libhwbinder【binder?】</li>\n<li>sysprop【系统属性】<a href=\"https://source.android.google.cn/docs/core/architecture/sysprops-apis?hl=zh-cn\">参考</a></li>\n<li>media【媒体】\n<ul>\n<li>audio</li>\n<li>camera</li>\n<li>radio</li>\n</ul>\n</li>\n<li>memory</li>\n<li>nfc</li>\n<li>timezone【时区】</li>\n<li>update_engine【系统更新】</li>\n<li>void【存储管理服务】</li>\n</ul>\n</li>\n<li>\n<p>test</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>toolchain【工具链】</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>tools</p>\n<ul>\n<li>acloud【云存储?】</li>\n<li>adt【eclipse 插件】</li>\n<li>apifinder【抓包?】</li>\n<li>apksig【签名】</li>\n<li>apkzlib</li>\n<li>asuite</li>\n<li>dexter</li>\n<li>loganalysis【日志】</li>\n<li>metalava【元数据生成】</li>\n<li>swt【看门狗】\n<ul>\n<li>ddms【性能分析】</li>\n<li>chimpchat 【自动化测试】</li>\n<li>hierarchyviewers【布局分析】</li>\n<li>monkeyrunner【自动化测试】</li>\n<li>traceview【布局分析】</li>\n<li>uiautomatorviewer【布局分析】</li>\n</ul>\n</li>\n<li>treble【版本更新?】<a href=\"https://source.android.google.cn/docs/core/architecture/treble?hl=zh-cn\">参考</a></li>\n</ul>\n</li>\n</ul>\n"},{"layout":"android","catalog":true,"title":"Android 系统 Init","subtitle":"本系列文章基于 Android 11-r21 master","date":"2022-09-29T14:55:05.000Z","header-img":"/img/220928/android_init_bg.png","sticky":5,"_content":"\n\n# 设备启动简述\n\n**1、BIOS 加载**\n- 加电自检（基本输出/输入系统 stdio）\n    - 硬件自检`POST`\n- 外部存储设备`启动顺序排序`，下一个获得控制权的设备\n- 读取激活分区第一个扇区的 `主引导记录`（512 字节）\n    - 负责分区读写合法性判断\n    - 负责引导信息定位\n    - 数据存储\n        - 调用操作系统的机器码\n        - 分区表\n            - 主分区是激活的，激活分区的第一个扇区是`卷引导记录`（告诉计算机操作系统在分区的位置-系统盘分区）\n            - 当只有一个系统时候，控制权将交给某分区；否则将启动`启动管理器`让用户选择操作系统\n        - 主引导记录签名\n            - 最后两个字节是 `0x55、0xAA` 表示可启动设备\n\n**2、kernel 加载**\n\n- 确定操作系统之后获得控制权，接着加载内核到内存\n- Linux 系统内核位于`boot/kernel`\n- 运行第一个程序`sbin/init`\n- 解析配置文件`etc/initab`创建第一个用户进程，进程 `id 1`\n- 之后 init 进程分别加载系统各模块的进程\n\n\n# Android 启动\nAndroid 不存在 BIOS，但是有 `Bootloader`，Android 不存在硬盘，但是有`ROM`（类似硬盘，由不同区域划分）。\n\n**1、Bootloader**\n- 初始化硬件设备\n- 建立内存空间映射（为系统调用服务）\n\n**2、ROM**\n- /boot ：引导程序 —— 操作内核、内存的程序\n- /system ：相当于系统盘 —— 操作系统、系统程序\n- /recovery ： 恢复分区 —— 恢复操作系统（刷机）\n- /data ： 用户数据 —— 安装程序、外部数据\n- /cache ： 系统缓存\n- /scared ： 用户存储空间 —— 相册、音乐\n\n\n**3、Bootloader 加载**\n- 加电，引导芯片加载 ROM 预设代码执行\n- 芯片查找 Bootloader 代码并加载到内存\n- Bootloader 开始执行，查找操作系统、加载 Linux 内核到内存\n- Linux 内核开始执行，初始化硬件、加载驱动、挂载文件系统、创建并启动第一个用户空间 `init 进程`\n\n# Linux 内核加载\n\n**1、idle 进程（pid = 0）**\n- Linux 系统第一个进程\n- 进程名字`init_task`，退化后的`idle`\n- 不是通过`fork、kernel_thread`创建的进程\n- 主要负责进程调度工作，进入无限循环\n\n**2、init 进程（pid = 1）**\n- 用户空间第一个进程\n- 启动前部分：完成创建和内核初始化\n- 启动后部分：完成 Android 系统初始化\n- /system/core/init/init.cpp\n\n\n**3、kthreadd 进程（pid = 2）**\n- Linux 内核管理者，内核线程的父进程\n- 主要负责内核线程的调度和管理\n- 由 idle 通过`kernel_thead`创建\n\n# Android 系统启动\n\n相关文件：\n- /system/core/init/main.cpp\n- /system/core/init/first_state_main.cpp\n- /system/core/init/first_state_init.cpp\n- /system/core/init/main.cpp\n- /system/core/init/selinux.cpp\n- /system/core/init/main.cpp\n- /system/core/init/init.cpp\n- /system/core/init/property_service.cpp\n- /system/core/init/subcontext.h\n- /system/core/init/subcontext.cpp\n- /system/core/init/builtins.cpp\n- /system/core/init/action.cpp\n\n\n用户空间第一个进程（init 进程）启动意味着开始 Android 系统初始化开始，初始化被划分为几个不同的阶段，我们主要关注 main 函数的执行，主要负责准备和构建文件系统。\n\n```cpp\n//main.cpp\nint main(int argc, char** argv) {\n    \n    //略\n\n   if (argc > 1) {\n       if (!strcmp(argv[1], \"subcontext\")) {\n           //内核日志初始化，内核的源码在另外的仓库，暂时看不了\n           android::base::InitLogging(argv, &android::base::KernelLogger);\n           //函数映射，调用的可都是内核函数【参考builtins.cpp】\n           const BuiltinFunctionMap& function_map = GetBuiltinFunctionMap();\n           //4、还是进入 subcontext.cpp，开始上下文\n           return SubcontextMain(argc, argv, &function_map);\n        }\n\n        //2、执行第二阶段前，建立Linux安全机制\n        if (!strcmp(argv[1], \"selinux_setup\")) {\n            return SetupSelinux(argv);\n        }\n\n        if (!strcmp(argv[1], \"second_stage\")) {\n            //3、初始化第二阶段\n            return SecondStageMain(argc, argv);\n        }\n    }\n\n    //1、初始化第一阶段\n    return FirstStageMain(argc, argv);\n}\n```\n\n## 初始化（第一阶段）\n\n为文件系统准备和创建环境\n\n```cpp\n//first_state_init.cpp\nint FirstStageMain(int argc, char** argv) {\n    //准备文件系统\n    CHECKCALL(clearenv());\n    //Linux 下一切皆文件，socket 也就是一个特殊文件\n    CHECKCALL(mkdir(\"/dev/socket\", 0755));\n    //755 是不是很熟悉的 chmod 755 访问权限；7/5/5 —— 用户/用户组/其他用户（421组合）\n    CHECKCALL(chmod(\"/proc/cmdline\", 0440));\n    //重要的启动配置文件，更多请参考 https://www.kernel.org/doc/html/\n    android::base::ReadFileToString(\"/proc/bootconfig\", &bootconfig);\n        \n    //必不可少的日志\n    //经过前面的准备、检验工作，到这里第一阶段初始化工作就要开始\n    InitKernelLogging(argv);\n    \n    //检查虚拟内存是否释放、如未开启则需要重启\n    auto old_root_dir = std::unique_ptr<DIR, decltype(&closedir)>{opendir(\"/\"), closedir};\n    //加载内核模块，可能还记得 major（内核主版本）、 minor（内核次版本），版本信息在加载前都会去解析，\n    if (!LoadKernelModules(IsRecoveryMode() \n    && !ForceNormalBoot(cmdline, bootconfig), \n    want_console,want_parallel, module_count)) {\n       //略\n    }\n    \n    //在 recovery 模式下不允许创建设备啊\n    if (!IsRecoveryMode()) {\n        created_devices = DoCreateDevices();\n    }\n    \n    //为初始化第二阶段准备\n    ///second_stage_resource/system/etc/ramdisk/build.prop\n    std::string dest = GetRamdiskPropForSecondStage();\n    \n    //执行第一阶段的挂载\n    if (!DoFirstStageMount(!created_devices))\n    \n    //神奇的 execv 函数：使用一个新的进程替换当前进程映像继续执行，紧接着通过传入的 `selinux_setup`参数执行下一个函数\n    //更多 execv 参考：https://linux.die.net/man/3/execv\n    const char* path = \"/system/bin/init\";\n    const char* args[] = {path, \"selinux_setup\", nullptr};\n    execv(path, const_cast<char**>(args));\n    //第一阶段大致到此结束\n```\n\n准备系统调用函数映射。\n\n```cpp\n//builtins.cpp\n//这个内置函数映射是什么意思呢？\n// 比如  {\"start\",{1,1,{false,  do_start}}},\n// start 命令对应的执行的函数就是 buildins.cpp 里面定义的 do_start 函数\nconst BuiltinFunctionMap& GetBuiltinFunctionMap() {\n    constexpr std::size_t kMax = std::numeric_limits<std::size_t>::max();\n    static const BuiltinFunctionMap builtin_functions = {\n        {\"bootchart\",               {1,     1,    {false,  do_bootchart}}},\n        {\"chmod\",                   {2,     2,    {true,   do_chmod}}},\n        {\"chown\",                   {2,     3,    {true,   do_chown}}},\n        {\"class_reset\",             {1,     1,    {false,  do_class_reset}}},\n        {\"class_restart\",           {1,     2,    {false,  do_class_restart}}},\n        {\"class_start\",             {1,     1,    {false,  do_class_start}}},\n        {\"class_stop\",              {1,     1,    {false,  do_class_stop}}},\n        {\"copy\",                    {2,     2,    {true,   do_copy}}},\n        {\"copy_per_line\",           {2,     2,    {true,   do_copy_per_line}}},\n        {\"domainname\",              {1,     1,    {true,   do_domainname}}},\n        {\"enable\",                  {1,     1,    {false,  do_enable}}},\n        {\"exec\",                    {1,     kMax, {false,  do_exec}}},\n        {\"exec_background\",         {1,     kMax, {false,  do_exec_background}}},\n        {\"exec_start\",              {1,     1,    {false,  do_exec_start}}},\n        {\"export\",                  {2,     2,    {false,  do_export}}},\n        {\"hostname\",                {1,     1,    {true,   do_hostname}}},\n        {\"ifup\",                    {1,     1,    {true,   do_ifup}}},\n        {\"init_user0\",              {0,     0,    {false,  do_init_user0}}},\n        {\"insmod\",                  {1,     kMax, {true,   do_insmod}}},\n        {\"installkey\",              {1,     1,    {false,  do_installkey}}},\n        {\"interface_restart\",       {1,     1,    {false,  do_interface_restart}}},\n        {\"interface_start\",         {1,     1,    {false,  do_interface_start}}},\n        {\"interface_stop\",          {1,     1,    {false,  do_interface_stop}}},\n        {\"load_exports\",            {1,     1,    {false,  do_load_exports}}},\n        {\"load_persist_props\",      {0,     0,    {false,  do_load_persist_props}}},\n        {\"load_system_props\",       {0,     0,    {false,  do_load_system_props}}},\n        {\"loglevel\",                {1,     1,    {false,  do_loglevel}}},\n        {\"mark_post_data\",          {0,     0,    {false,  do_mark_post_data}}},\n        {\"mkdir\",                   {1,     6,    {true,   do_mkdir}}},\n        {\"mount_all\",               {0,     kMax, {false,  do_mount_all}}},\n        {\"mount\",                   {3,     kMax, {false,  do_mount}}},\n        {\"perform_apex_config\",     {0,     0,    {false,  do_perform_apex_config}}},\n        {\"umount\",                  {1,     1,    {false,  do_umount}}},\n        {\"umount_all\",              {0,     1,    {false,  do_umount_all}}},\n        {\"update_linker_config\",    {0,     0,    {false,  do_update_linker_config}}},\n        {\"readahead\",               {1,     2,    {true,   do_readahead}}},\n        {\"remount_userdata\",        {0,     0,    {false,  do_remount_userdata}}},\n        {\"restart\",                 {1,     2,    {false,  do_restart}}},\n        {\"restorecon\",              {1,     kMax, {true,   do_restorecon}}},\n        {\"restorecon_recursive\",    {1,     kMax, {true,   do_restorecon_recursive}}},\n        {\"rm\",                      {1,     1,    {true,   do_rm}}},\n        {\"rmdir\",                   {1,     1,    {true,   do_rmdir}}},\n        {\"setprop\",                 {2,     2,    {true,   do_setprop}}},\n        {\"setrlimit\",               {3,     3,    {false,  do_setrlimit}}},\n        {\"start\",                   {1,     1,    {false,  do_start}}},\n        {\"stop\",                    {1,     1,    {false,  do_stop}}},\n        {\"swapon_all\",              {0,     1,    {false,  do_swapon_all}}},\n        {\"enter_default_mount_ns\",  {0,     0,    {false,  do_enter_default_mount_ns}}},\n        {\"symlink\",                 {2,     2,    {true,   do_symlink}}},\n        {\"sysclktz\",                {1,     1,    {false,  do_sysclktz}}},\n        {\"trigger\",                 {1,     1,    {false,  do_trigger}}},\n        {\"verity_update_state\",     {0,     0,    {false,  do_verity_update_state}}},\n        {\"wait\",                    {1,     2,    {true,   do_wait}}},\n        {\"wait_for_prop\",           {2,     2,    {false,  do_wait_for_prop}}},\n        {\"write\",                   {2,     2,    {true,   do_write}}},\n    };\n    return builtin_functions;\n}\n```\n\n## 建立 SELinux\n\n第一阶段最后 execv 函数传入初始化参数 `selinux_setup`，执行流程回到 main.cpp，由 strcmp 函数判断进入下一个流程。\n\n```cpp\n//main.cpp\nif (!strcmp(argv[1], \"selinux_setup\")) {\n    return SetupSelinux(argv);\n}\n```\n\n```cpp\n//SetupSelinux.cpp\nint SetupSelinux(char** argv) {\n    //准备安全策略，某路径下的 SEPolicy.zip 文件\n    PrepareApexSepolicy();\n    //读取安全策略\n    ReadPolicy(&policy);\n    //加载安全策略\n    LoadSelinuxPolicy(policy);\n    //强制执行策略\n    SelinuxSetEnforcement();\n\n    //关键代码又来了，调用 execv，初始化参数 second_stage，准备执行初始化第二阶段\n    const char* path = \"/system/bin/init\";\n    const char* args[] = {path, \"second_stage\", nullptr};\n    execv(path, const_cast<char**>(args));\n}\n```\n\n## 初始化（第二阶段）\nexecv 调用又来了，本次传入初始化参数是 `second_stage`，执行流程再次回到 main.cpp，紧接着开始第二阶段的初始化。\n\n```cpp\n//main.cpp\nif (!strcmp(argv[1], \"second_stage\")) {\n    return SecondStageMain(argc, argv);\n}\n```\n```cpp\n//init.cpp\nint SecondStageMain(int argc, char** argv) {\n    //如果设备解锁 unlock，将允许 adb root 加载调试信息\n    const char* force_debuggable_env = getenv(\"INIT_FORCE_DEBUGGABLE\");\n    bool load_debug_prop = false;\n    if (force_debuggable_env && AvbHandle::IsDeviceUnlocked()) {\n        load_debug_prop = \"true\"s == force_debuggable_env;\n    }\n    \n    //属性初始化，创建属性信息并存储在 /dev/__properties__/property_info 文件中\n    //从其他多个文件读取数据，构造成 PropertyInf 属性集合\n    //还处理了几个重要的信息：这些被处理的信息将被 InitPropertySet(name,value) 函数写入 property_info 文件中\n    //    ProcessKernelDt();\n    //    ProcessKernelCmdline();\n    //    ProcessBootconfig();\n    //    ExportKernelBootProps();//遇到了陌生又熟悉的 ro.boot 键值对属性，例如 \"ro.boot.mode\"\n    \n    //PropertyLoadBootDefaults();//上述收集到的属性信息都将被加载，如果是恢复模式（刷机）IsRecoveryMode()，那么会加载默认的属性文件 /prop.default \n    //GetRamdiskPropForSecondStage(); //第二阶段需要的属性去哪里加载？/second_stage_resources/system/etc/ramdisk/build.prop\n    PropertyInit();\n    \n    //挂载一些其他的文件系统：apex、linkerconfig\n    MountExtraFilesystems();\n    \n    //注册 socket 监听\n    Epoll epoll;\n    InstallSignalFdHandler(&epoll);\n    InstallInitNotifier(&epoll);\n\n    //启动属性服务，通过 socket 通讯\n    StartPropertyService();\n    \n    //oem：刷机的同学可能会记得 ‘开发者选项’ 中就有个选项是 ‘OEM解锁’——是否允许解锁引导加载程序，刷机时候我们通常会打开此选项\n    export_oem_lock_status(); \n    \n    //原来 usb 对应的属性是 sys.usb.controller，所在文件 /sys/class/udc\n    SetUsbController();\n    \n    //内核版本 ro.kernel.version，包含主版本 major 和次版本 minor\n    SetKernelVersion();\n    \n    //初始化 subcontext 一个进程【请转到 subcontext.h】\n    InitializeSubcontext();\n    \n    //加载启动脚本\n    //首先通过 Property 加载 ro.boot.init_rc 属性值，如果为空则加载 /system/etc/init/hw/init.rc\n    //actionManager 添加一堆不知道是什么的 action 进入队列等待执行\n    //serviceList 通过解析一些 /init.rc、/system/etc/init、/vendor/etc/init 获取的服务\n    LoadBootScripts(actionManager, serviceList);\n\n    //准备进入无限循环，此前重置进程优先级\n    //prio 优先级范围 0～139，值越小优先级越高\n    setpriority(PRIO_PROCESS, 0, 0);\n    while (true) {\n        //epoll 负责事件处理，默认情况 epoll 会休眠，类似阻塞直到有事件到来；关于 epoll \n        //如果有事件需要处理，等待事件将被置为0，也就是需要马上处理事件\n        auto epoll_timeout = std::optional<std::chrono::milliseconds>{kDiagnosticTimeout};\n        \n        //每次都会检查是否关机\n        auto shutdown_command = shutdown_state.CheckShutdown();\n        \n        //还会检测如果进程需要重启，将立即启动\n        auto next_process_action_time = HandleProcessActions();\n    \n        //如果事件队列不为空，将 fron 第一个事件取出进行处理，递归进行，加锁同步进行\n        HandleControlMessage();\n        //至此，第二阶段完毕\n    }\n}\n```\n\n```cpp\n//subcontext.h\nclass Subcontext {\n  public:\n    Subcontext(std::vector<std::string> path_prefixes, std::string context, bool host = false)\n        : path_prefixes_(std::move(path_prefixes)), context_(std::move(context)), pid_(0) {\n        if (!host) {\n            //构造函数中直接 fork 一个进程\n            Fork();\n        }\n    }\n}\n\n```\n\n```cpp\n//subcontext.cpp\nvoid Subcontext::Fork() {\n    //创建一个对应上下文的 socket\n    unique_fd subcontext_socket;\n    if (!Socketpair(AF_UNIX, SOCK_SEQPACKET | SOCK_CLOEXEC, 0, &socket_, &subcontext_socket)) {\n        return;\n    }\n    \n#if defined(__ANDROID__)\n    //subcontext 的初始化需要在挂载 default 的空间下，为了能够访问 /apex\n    if (auto result = SwitchToMountNamespaceIfNeeded(NS_DEFAULT); !result.ok()) {\n        LOG(FATAL) << \"Could not switch to \\\"default\\\" mount namespace: \" << result.error();\n    }\n#endif\n\n   //获取下一阶段初始化的执行路径，至关重要啊兄弟们\n   //Android11 源码约450G，目前使用 vscode 搜索某关键字，\n   //搜索效果不是很好，搜索太慢了，似乎索引建立太慢？有什么更好的工具可以替换 vscode ???  \n   //工具 ———— https://github.com/oracle/opengrok  Oracle 开源的真是福利好。\n   // \n   //----- 假装我是分割线 -----\n   //\n   //那么 GetExecutablePath 实现在哪里？源码中没看到啊\n   //⚠️注意了：\n   // 1、调用 GetExecutablePath() 所在命名空间是 using android::base::GetExecutablePath;\n   // 2、看看引入的头文件 #include <android-base/properties.h>，注意咯，是尖括号<>引入方式，而不是双引号“”本地引入，说明本地项目下根本找不到，是通过系统连接进来的。\n   // 3、查阅官网，发现文件实现在内核仓库有一份可查阅。https://source.android.google.cn/devices/tech/config/kernel?hl=zh-cn\n   auto init_path = GetExecutablePath();\n   auto child_fd_string = std::to_string(child_fd);\n   //终于又等到了 execv 函数，注意传参 subcontext，是不是又回到了 main.cpp【或许你对 main.cpp 已没有了印象，毕竟学习就是一个不断重复的过程，反复的、反复的、反复的印象也就深刻了】\n   const char* args[] = {init_path.c_str(), \"subcontext\", context_.c_str(),child_fd_string.c_str(), nullptr};\n   execv(init_path.data(), const_cast<char**>(args));\n}\n```\n\n```cpp\n//main.cpp\n//有没有一种可能，地球是圆的，你在此处静候，我一直往北走，最后还能相遇不是吗？\nif (!strcmp(argv[1], \"subcontext\")) {\n    android::base::InitLogging(argv, &android::base::KernelLogger); \n    const BuiltinFunctionMap& function_map = GetBuiltinFunctionMap();\n    return SubcontextMain(argc, argv, &function_map);\n}\n```\n\n\n```cpp\n//subcontext.cpp\nint SubcontextMain(int argc, char** argv, const BuiltinFunctionMap* function_map) {\n    \n    //主要还是干两件事，创建上下文进程、并进入无限循环\n    auto subcontext_process = SubcontextProcess(function_map, context, init_fd);\n    // Restore prio before main loop\n    setpriority(PRIO_PROCESS, 0, 0);\n    subcontext_process.MainLoop();\n}\n```\n\n```cpp\n//subcontext.cpp\nclass SubcontextProcess {\n  public:\n    SubcontextProcess(const BuiltinFunctionMap* function_map, std::string context, int init_fd)\n        : function_map_(function_map), context_(std::move(context)), init_fd_(init_fd){};\n    void MainLoop();\n}\n\nvoid SubcontextProcess::MainLoop() {\n    pollfd ufd[1];\n    ufd[0].events = POLLIN;\n    ufd[0].fd = init_fd_;\n    \n    //进入无限循环，处理循环事件的还是 poll 具柄，使用 socket 通讯\n    while (true) {\n        //处理的消息类型有两种：执行型、数据解析型\n        auto subcontext_command = SubcontextCommand();\n        auto reply = SubcontextReply();\n        switch (subcontext_command.command_case()) {\n            case SubcontextCommand::kExecuteCommand: {\n                RunCommand(subcontext_command.execute_command(), &reply);\n                break;\n            }\n            case SubcontextCommand::kExpandArgsCommand: {\n                ExpandArgs(subcontext_command.expand_args_command(), &reply);\n                break;\n            }\n            default:\n                LOG(FATAL) << \"Unknown message type from init: \"\n                           << subcontext_command.command_case();\n        }\n        \n        //循环中干的事就是不断分发消息，到此第二阶段初始化节本结束\n        //？？？呵，一脸懵逼吧，消息发出去之后呢？之后又去执行哪里了🤔️\n        if (auto result = SendMessage(init_fd_, reply); !result.ok()) {\n            LOG(FATAL) << \"Failed to send message to init: \" << result.error();\n        } \n    }\n}\n```\n\n# 最后\nAndroid 系统启动由 Linux 创建 init 进程，init 进程通过解析 `init.rc` 等几个初始化配置文件，根据解析数据继续创建、启动其他的进程或服务，初始化第一阶段执行完紧接着建立 SELinux 机制，再执行初始化第二阶段。\n\n接下来会执行到哪了呢？`init.rc` 初始化配置文件的内容具体是什么？初始化配置文件是从哪里加载的，文件存放在哪里？不得不说，作为新手的我确实还有很多疑问，相信后续能够进一步了解。\n\n\n**其他知识**\n\n- Ramdisk: 将一块内存当作物理磁盘使用（虚拟内存）\n- signalfd: 信号抽象的文件描述符（一切皆文件），信号异步操作将转换问 I/O 操作\n- Epoll：多路复用、批量处理文件描述符，poll 升级版\n- GSI：generic system image（系统镜像）\n- opengrok：一个快速可用的源代码搜索和交叉引用引擎\n\n**参考链接**\n\n- Linux 内核文档：https://www.kernel.org/doc/html/\n- Linux 文档：https://linux.die.net/\n","source":"_posts/undefined/Android系统启动init进程.md","raw":"---\nlayout: android\ncatalog: true\ntitle: Android 系统 Init\nsubtitle: 本系列文章基于 Android 11-r21 master\ndate: 2022-09-29 22:55:05\ntags: AOSP\nheader-img: /img/220928/android_init_bg.png\nsticky: 5\n---\n\n\n# 设备启动简述\n\n**1、BIOS 加载**\n- 加电自检（基本输出/输入系统 stdio）\n    - 硬件自检`POST`\n- 外部存储设备`启动顺序排序`，下一个获得控制权的设备\n- 读取激活分区第一个扇区的 `主引导记录`（512 字节）\n    - 负责分区读写合法性判断\n    - 负责引导信息定位\n    - 数据存储\n        - 调用操作系统的机器码\n        - 分区表\n            - 主分区是激活的，激活分区的第一个扇区是`卷引导记录`（告诉计算机操作系统在分区的位置-系统盘分区）\n            - 当只有一个系统时候，控制权将交给某分区；否则将启动`启动管理器`让用户选择操作系统\n        - 主引导记录签名\n            - 最后两个字节是 `0x55、0xAA` 表示可启动设备\n\n**2、kernel 加载**\n\n- 确定操作系统之后获得控制权，接着加载内核到内存\n- Linux 系统内核位于`boot/kernel`\n- 运行第一个程序`sbin/init`\n- 解析配置文件`etc/initab`创建第一个用户进程，进程 `id 1`\n- 之后 init 进程分别加载系统各模块的进程\n\n\n# Android 启动\nAndroid 不存在 BIOS，但是有 `Bootloader`，Android 不存在硬盘，但是有`ROM`（类似硬盘，由不同区域划分）。\n\n**1、Bootloader**\n- 初始化硬件设备\n- 建立内存空间映射（为系统调用服务）\n\n**2、ROM**\n- /boot ：引导程序 —— 操作内核、内存的程序\n- /system ：相当于系统盘 —— 操作系统、系统程序\n- /recovery ： 恢复分区 —— 恢复操作系统（刷机）\n- /data ： 用户数据 —— 安装程序、外部数据\n- /cache ： 系统缓存\n- /scared ： 用户存储空间 —— 相册、音乐\n\n\n**3、Bootloader 加载**\n- 加电，引导芯片加载 ROM 预设代码执行\n- 芯片查找 Bootloader 代码并加载到内存\n- Bootloader 开始执行，查找操作系统、加载 Linux 内核到内存\n- Linux 内核开始执行，初始化硬件、加载驱动、挂载文件系统、创建并启动第一个用户空间 `init 进程`\n\n# Linux 内核加载\n\n**1、idle 进程（pid = 0）**\n- Linux 系统第一个进程\n- 进程名字`init_task`，退化后的`idle`\n- 不是通过`fork、kernel_thread`创建的进程\n- 主要负责进程调度工作，进入无限循环\n\n**2、init 进程（pid = 1）**\n- 用户空间第一个进程\n- 启动前部分：完成创建和内核初始化\n- 启动后部分：完成 Android 系统初始化\n- /system/core/init/init.cpp\n\n\n**3、kthreadd 进程（pid = 2）**\n- Linux 内核管理者，内核线程的父进程\n- 主要负责内核线程的调度和管理\n- 由 idle 通过`kernel_thead`创建\n\n# Android 系统启动\n\n相关文件：\n- /system/core/init/main.cpp\n- /system/core/init/first_state_main.cpp\n- /system/core/init/first_state_init.cpp\n- /system/core/init/main.cpp\n- /system/core/init/selinux.cpp\n- /system/core/init/main.cpp\n- /system/core/init/init.cpp\n- /system/core/init/property_service.cpp\n- /system/core/init/subcontext.h\n- /system/core/init/subcontext.cpp\n- /system/core/init/builtins.cpp\n- /system/core/init/action.cpp\n\n\n用户空间第一个进程（init 进程）启动意味着开始 Android 系统初始化开始，初始化被划分为几个不同的阶段，我们主要关注 main 函数的执行，主要负责准备和构建文件系统。\n\n```cpp\n//main.cpp\nint main(int argc, char** argv) {\n    \n    //略\n\n   if (argc > 1) {\n       if (!strcmp(argv[1], \"subcontext\")) {\n           //内核日志初始化，内核的源码在另外的仓库，暂时看不了\n           android::base::InitLogging(argv, &android::base::KernelLogger);\n           //函数映射，调用的可都是内核函数【参考builtins.cpp】\n           const BuiltinFunctionMap& function_map = GetBuiltinFunctionMap();\n           //4、还是进入 subcontext.cpp，开始上下文\n           return SubcontextMain(argc, argv, &function_map);\n        }\n\n        //2、执行第二阶段前，建立Linux安全机制\n        if (!strcmp(argv[1], \"selinux_setup\")) {\n            return SetupSelinux(argv);\n        }\n\n        if (!strcmp(argv[1], \"second_stage\")) {\n            //3、初始化第二阶段\n            return SecondStageMain(argc, argv);\n        }\n    }\n\n    //1、初始化第一阶段\n    return FirstStageMain(argc, argv);\n}\n```\n\n## 初始化（第一阶段）\n\n为文件系统准备和创建环境\n\n```cpp\n//first_state_init.cpp\nint FirstStageMain(int argc, char** argv) {\n    //准备文件系统\n    CHECKCALL(clearenv());\n    //Linux 下一切皆文件，socket 也就是一个特殊文件\n    CHECKCALL(mkdir(\"/dev/socket\", 0755));\n    //755 是不是很熟悉的 chmod 755 访问权限；7/5/5 —— 用户/用户组/其他用户（421组合）\n    CHECKCALL(chmod(\"/proc/cmdline\", 0440));\n    //重要的启动配置文件，更多请参考 https://www.kernel.org/doc/html/\n    android::base::ReadFileToString(\"/proc/bootconfig\", &bootconfig);\n        \n    //必不可少的日志\n    //经过前面的准备、检验工作，到这里第一阶段初始化工作就要开始\n    InitKernelLogging(argv);\n    \n    //检查虚拟内存是否释放、如未开启则需要重启\n    auto old_root_dir = std::unique_ptr<DIR, decltype(&closedir)>{opendir(\"/\"), closedir};\n    //加载内核模块，可能还记得 major（内核主版本）、 minor（内核次版本），版本信息在加载前都会去解析，\n    if (!LoadKernelModules(IsRecoveryMode() \n    && !ForceNormalBoot(cmdline, bootconfig), \n    want_console,want_parallel, module_count)) {\n       //略\n    }\n    \n    //在 recovery 模式下不允许创建设备啊\n    if (!IsRecoveryMode()) {\n        created_devices = DoCreateDevices();\n    }\n    \n    //为初始化第二阶段准备\n    ///second_stage_resource/system/etc/ramdisk/build.prop\n    std::string dest = GetRamdiskPropForSecondStage();\n    \n    //执行第一阶段的挂载\n    if (!DoFirstStageMount(!created_devices))\n    \n    //神奇的 execv 函数：使用一个新的进程替换当前进程映像继续执行，紧接着通过传入的 `selinux_setup`参数执行下一个函数\n    //更多 execv 参考：https://linux.die.net/man/3/execv\n    const char* path = \"/system/bin/init\";\n    const char* args[] = {path, \"selinux_setup\", nullptr};\n    execv(path, const_cast<char**>(args));\n    //第一阶段大致到此结束\n```\n\n准备系统调用函数映射。\n\n```cpp\n//builtins.cpp\n//这个内置函数映射是什么意思呢？\n// 比如  {\"start\",{1,1,{false,  do_start}}},\n// start 命令对应的执行的函数就是 buildins.cpp 里面定义的 do_start 函数\nconst BuiltinFunctionMap& GetBuiltinFunctionMap() {\n    constexpr std::size_t kMax = std::numeric_limits<std::size_t>::max();\n    static const BuiltinFunctionMap builtin_functions = {\n        {\"bootchart\",               {1,     1,    {false,  do_bootchart}}},\n        {\"chmod\",                   {2,     2,    {true,   do_chmod}}},\n        {\"chown\",                   {2,     3,    {true,   do_chown}}},\n        {\"class_reset\",             {1,     1,    {false,  do_class_reset}}},\n        {\"class_restart\",           {1,     2,    {false,  do_class_restart}}},\n        {\"class_start\",             {1,     1,    {false,  do_class_start}}},\n        {\"class_stop\",              {1,     1,    {false,  do_class_stop}}},\n        {\"copy\",                    {2,     2,    {true,   do_copy}}},\n        {\"copy_per_line\",           {2,     2,    {true,   do_copy_per_line}}},\n        {\"domainname\",              {1,     1,    {true,   do_domainname}}},\n        {\"enable\",                  {1,     1,    {false,  do_enable}}},\n        {\"exec\",                    {1,     kMax, {false,  do_exec}}},\n        {\"exec_background\",         {1,     kMax, {false,  do_exec_background}}},\n        {\"exec_start\",              {1,     1,    {false,  do_exec_start}}},\n        {\"export\",                  {2,     2,    {false,  do_export}}},\n        {\"hostname\",                {1,     1,    {true,   do_hostname}}},\n        {\"ifup\",                    {1,     1,    {true,   do_ifup}}},\n        {\"init_user0\",              {0,     0,    {false,  do_init_user0}}},\n        {\"insmod\",                  {1,     kMax, {true,   do_insmod}}},\n        {\"installkey\",              {1,     1,    {false,  do_installkey}}},\n        {\"interface_restart\",       {1,     1,    {false,  do_interface_restart}}},\n        {\"interface_start\",         {1,     1,    {false,  do_interface_start}}},\n        {\"interface_stop\",          {1,     1,    {false,  do_interface_stop}}},\n        {\"load_exports\",            {1,     1,    {false,  do_load_exports}}},\n        {\"load_persist_props\",      {0,     0,    {false,  do_load_persist_props}}},\n        {\"load_system_props\",       {0,     0,    {false,  do_load_system_props}}},\n        {\"loglevel\",                {1,     1,    {false,  do_loglevel}}},\n        {\"mark_post_data\",          {0,     0,    {false,  do_mark_post_data}}},\n        {\"mkdir\",                   {1,     6,    {true,   do_mkdir}}},\n        {\"mount_all\",               {0,     kMax, {false,  do_mount_all}}},\n        {\"mount\",                   {3,     kMax, {false,  do_mount}}},\n        {\"perform_apex_config\",     {0,     0,    {false,  do_perform_apex_config}}},\n        {\"umount\",                  {1,     1,    {false,  do_umount}}},\n        {\"umount_all\",              {0,     1,    {false,  do_umount_all}}},\n        {\"update_linker_config\",    {0,     0,    {false,  do_update_linker_config}}},\n        {\"readahead\",               {1,     2,    {true,   do_readahead}}},\n        {\"remount_userdata\",        {0,     0,    {false,  do_remount_userdata}}},\n        {\"restart\",                 {1,     2,    {false,  do_restart}}},\n        {\"restorecon\",              {1,     kMax, {true,   do_restorecon}}},\n        {\"restorecon_recursive\",    {1,     kMax, {true,   do_restorecon_recursive}}},\n        {\"rm\",                      {1,     1,    {true,   do_rm}}},\n        {\"rmdir\",                   {1,     1,    {true,   do_rmdir}}},\n        {\"setprop\",                 {2,     2,    {true,   do_setprop}}},\n        {\"setrlimit\",               {3,     3,    {false,  do_setrlimit}}},\n        {\"start\",                   {1,     1,    {false,  do_start}}},\n        {\"stop\",                    {1,     1,    {false,  do_stop}}},\n        {\"swapon_all\",              {0,     1,    {false,  do_swapon_all}}},\n        {\"enter_default_mount_ns\",  {0,     0,    {false,  do_enter_default_mount_ns}}},\n        {\"symlink\",                 {2,     2,    {true,   do_symlink}}},\n        {\"sysclktz\",                {1,     1,    {false,  do_sysclktz}}},\n        {\"trigger\",                 {1,     1,    {false,  do_trigger}}},\n        {\"verity_update_state\",     {0,     0,    {false,  do_verity_update_state}}},\n        {\"wait\",                    {1,     2,    {true,   do_wait}}},\n        {\"wait_for_prop\",           {2,     2,    {false,  do_wait_for_prop}}},\n        {\"write\",                   {2,     2,    {true,   do_write}}},\n    };\n    return builtin_functions;\n}\n```\n\n## 建立 SELinux\n\n第一阶段最后 execv 函数传入初始化参数 `selinux_setup`，执行流程回到 main.cpp，由 strcmp 函数判断进入下一个流程。\n\n```cpp\n//main.cpp\nif (!strcmp(argv[1], \"selinux_setup\")) {\n    return SetupSelinux(argv);\n}\n```\n\n```cpp\n//SetupSelinux.cpp\nint SetupSelinux(char** argv) {\n    //准备安全策略，某路径下的 SEPolicy.zip 文件\n    PrepareApexSepolicy();\n    //读取安全策略\n    ReadPolicy(&policy);\n    //加载安全策略\n    LoadSelinuxPolicy(policy);\n    //强制执行策略\n    SelinuxSetEnforcement();\n\n    //关键代码又来了，调用 execv，初始化参数 second_stage，准备执行初始化第二阶段\n    const char* path = \"/system/bin/init\";\n    const char* args[] = {path, \"second_stage\", nullptr};\n    execv(path, const_cast<char**>(args));\n}\n```\n\n## 初始化（第二阶段）\nexecv 调用又来了，本次传入初始化参数是 `second_stage`，执行流程再次回到 main.cpp，紧接着开始第二阶段的初始化。\n\n```cpp\n//main.cpp\nif (!strcmp(argv[1], \"second_stage\")) {\n    return SecondStageMain(argc, argv);\n}\n```\n```cpp\n//init.cpp\nint SecondStageMain(int argc, char** argv) {\n    //如果设备解锁 unlock，将允许 adb root 加载调试信息\n    const char* force_debuggable_env = getenv(\"INIT_FORCE_DEBUGGABLE\");\n    bool load_debug_prop = false;\n    if (force_debuggable_env && AvbHandle::IsDeviceUnlocked()) {\n        load_debug_prop = \"true\"s == force_debuggable_env;\n    }\n    \n    //属性初始化，创建属性信息并存储在 /dev/__properties__/property_info 文件中\n    //从其他多个文件读取数据，构造成 PropertyInf 属性集合\n    //还处理了几个重要的信息：这些被处理的信息将被 InitPropertySet(name,value) 函数写入 property_info 文件中\n    //    ProcessKernelDt();\n    //    ProcessKernelCmdline();\n    //    ProcessBootconfig();\n    //    ExportKernelBootProps();//遇到了陌生又熟悉的 ro.boot 键值对属性，例如 \"ro.boot.mode\"\n    \n    //PropertyLoadBootDefaults();//上述收集到的属性信息都将被加载，如果是恢复模式（刷机）IsRecoveryMode()，那么会加载默认的属性文件 /prop.default \n    //GetRamdiskPropForSecondStage(); //第二阶段需要的属性去哪里加载？/second_stage_resources/system/etc/ramdisk/build.prop\n    PropertyInit();\n    \n    //挂载一些其他的文件系统：apex、linkerconfig\n    MountExtraFilesystems();\n    \n    //注册 socket 监听\n    Epoll epoll;\n    InstallSignalFdHandler(&epoll);\n    InstallInitNotifier(&epoll);\n\n    //启动属性服务，通过 socket 通讯\n    StartPropertyService();\n    \n    //oem：刷机的同学可能会记得 ‘开发者选项’ 中就有个选项是 ‘OEM解锁’——是否允许解锁引导加载程序，刷机时候我们通常会打开此选项\n    export_oem_lock_status(); \n    \n    //原来 usb 对应的属性是 sys.usb.controller，所在文件 /sys/class/udc\n    SetUsbController();\n    \n    //内核版本 ro.kernel.version，包含主版本 major 和次版本 minor\n    SetKernelVersion();\n    \n    //初始化 subcontext 一个进程【请转到 subcontext.h】\n    InitializeSubcontext();\n    \n    //加载启动脚本\n    //首先通过 Property 加载 ro.boot.init_rc 属性值，如果为空则加载 /system/etc/init/hw/init.rc\n    //actionManager 添加一堆不知道是什么的 action 进入队列等待执行\n    //serviceList 通过解析一些 /init.rc、/system/etc/init、/vendor/etc/init 获取的服务\n    LoadBootScripts(actionManager, serviceList);\n\n    //准备进入无限循环，此前重置进程优先级\n    //prio 优先级范围 0～139，值越小优先级越高\n    setpriority(PRIO_PROCESS, 0, 0);\n    while (true) {\n        //epoll 负责事件处理，默认情况 epoll 会休眠，类似阻塞直到有事件到来；关于 epoll \n        //如果有事件需要处理，等待事件将被置为0，也就是需要马上处理事件\n        auto epoll_timeout = std::optional<std::chrono::milliseconds>{kDiagnosticTimeout};\n        \n        //每次都会检查是否关机\n        auto shutdown_command = shutdown_state.CheckShutdown();\n        \n        //还会检测如果进程需要重启，将立即启动\n        auto next_process_action_time = HandleProcessActions();\n    \n        //如果事件队列不为空，将 fron 第一个事件取出进行处理，递归进行，加锁同步进行\n        HandleControlMessage();\n        //至此，第二阶段完毕\n    }\n}\n```\n\n```cpp\n//subcontext.h\nclass Subcontext {\n  public:\n    Subcontext(std::vector<std::string> path_prefixes, std::string context, bool host = false)\n        : path_prefixes_(std::move(path_prefixes)), context_(std::move(context)), pid_(0) {\n        if (!host) {\n            //构造函数中直接 fork 一个进程\n            Fork();\n        }\n    }\n}\n\n```\n\n```cpp\n//subcontext.cpp\nvoid Subcontext::Fork() {\n    //创建一个对应上下文的 socket\n    unique_fd subcontext_socket;\n    if (!Socketpair(AF_UNIX, SOCK_SEQPACKET | SOCK_CLOEXEC, 0, &socket_, &subcontext_socket)) {\n        return;\n    }\n    \n#if defined(__ANDROID__)\n    //subcontext 的初始化需要在挂载 default 的空间下，为了能够访问 /apex\n    if (auto result = SwitchToMountNamespaceIfNeeded(NS_DEFAULT); !result.ok()) {\n        LOG(FATAL) << \"Could not switch to \\\"default\\\" mount namespace: \" << result.error();\n    }\n#endif\n\n   //获取下一阶段初始化的执行路径，至关重要啊兄弟们\n   //Android11 源码约450G，目前使用 vscode 搜索某关键字，\n   //搜索效果不是很好，搜索太慢了，似乎索引建立太慢？有什么更好的工具可以替换 vscode ???  \n   //工具 ———— https://github.com/oracle/opengrok  Oracle 开源的真是福利好。\n   // \n   //----- 假装我是分割线 -----\n   //\n   //那么 GetExecutablePath 实现在哪里？源码中没看到啊\n   //⚠️注意了：\n   // 1、调用 GetExecutablePath() 所在命名空间是 using android::base::GetExecutablePath;\n   // 2、看看引入的头文件 #include <android-base/properties.h>，注意咯，是尖括号<>引入方式，而不是双引号“”本地引入，说明本地项目下根本找不到，是通过系统连接进来的。\n   // 3、查阅官网，发现文件实现在内核仓库有一份可查阅。https://source.android.google.cn/devices/tech/config/kernel?hl=zh-cn\n   auto init_path = GetExecutablePath();\n   auto child_fd_string = std::to_string(child_fd);\n   //终于又等到了 execv 函数，注意传参 subcontext，是不是又回到了 main.cpp【或许你对 main.cpp 已没有了印象，毕竟学习就是一个不断重复的过程，反复的、反复的、反复的印象也就深刻了】\n   const char* args[] = {init_path.c_str(), \"subcontext\", context_.c_str(),child_fd_string.c_str(), nullptr};\n   execv(init_path.data(), const_cast<char**>(args));\n}\n```\n\n```cpp\n//main.cpp\n//有没有一种可能，地球是圆的，你在此处静候，我一直往北走，最后还能相遇不是吗？\nif (!strcmp(argv[1], \"subcontext\")) {\n    android::base::InitLogging(argv, &android::base::KernelLogger); \n    const BuiltinFunctionMap& function_map = GetBuiltinFunctionMap();\n    return SubcontextMain(argc, argv, &function_map);\n}\n```\n\n\n```cpp\n//subcontext.cpp\nint SubcontextMain(int argc, char** argv, const BuiltinFunctionMap* function_map) {\n    \n    //主要还是干两件事，创建上下文进程、并进入无限循环\n    auto subcontext_process = SubcontextProcess(function_map, context, init_fd);\n    // Restore prio before main loop\n    setpriority(PRIO_PROCESS, 0, 0);\n    subcontext_process.MainLoop();\n}\n```\n\n```cpp\n//subcontext.cpp\nclass SubcontextProcess {\n  public:\n    SubcontextProcess(const BuiltinFunctionMap* function_map, std::string context, int init_fd)\n        : function_map_(function_map), context_(std::move(context)), init_fd_(init_fd){};\n    void MainLoop();\n}\n\nvoid SubcontextProcess::MainLoop() {\n    pollfd ufd[1];\n    ufd[0].events = POLLIN;\n    ufd[0].fd = init_fd_;\n    \n    //进入无限循环，处理循环事件的还是 poll 具柄，使用 socket 通讯\n    while (true) {\n        //处理的消息类型有两种：执行型、数据解析型\n        auto subcontext_command = SubcontextCommand();\n        auto reply = SubcontextReply();\n        switch (subcontext_command.command_case()) {\n            case SubcontextCommand::kExecuteCommand: {\n                RunCommand(subcontext_command.execute_command(), &reply);\n                break;\n            }\n            case SubcontextCommand::kExpandArgsCommand: {\n                ExpandArgs(subcontext_command.expand_args_command(), &reply);\n                break;\n            }\n            default:\n                LOG(FATAL) << \"Unknown message type from init: \"\n                           << subcontext_command.command_case();\n        }\n        \n        //循环中干的事就是不断分发消息，到此第二阶段初始化节本结束\n        //？？？呵，一脸懵逼吧，消息发出去之后呢？之后又去执行哪里了🤔️\n        if (auto result = SendMessage(init_fd_, reply); !result.ok()) {\n            LOG(FATAL) << \"Failed to send message to init: \" << result.error();\n        } \n    }\n}\n```\n\n# 最后\nAndroid 系统启动由 Linux 创建 init 进程，init 进程通过解析 `init.rc` 等几个初始化配置文件，根据解析数据继续创建、启动其他的进程或服务，初始化第一阶段执行完紧接着建立 SELinux 机制，再执行初始化第二阶段。\n\n接下来会执行到哪了呢？`init.rc` 初始化配置文件的内容具体是什么？初始化配置文件是从哪里加载的，文件存放在哪里？不得不说，作为新手的我确实还有很多疑问，相信后续能够进一步了解。\n\n\n**其他知识**\n\n- Ramdisk: 将一块内存当作物理磁盘使用（虚拟内存）\n- signalfd: 信号抽象的文件描述符（一切皆文件），信号异步操作将转换问 I/O 操作\n- Epoll：多路复用、批量处理文件描述符，poll 升级版\n- GSI：generic system image（系统镜像）\n- opengrok：一个快速可用的源代码搜索和交叉引用引擎\n\n**参考链接**\n\n- Linux 内核文档：https://www.kernel.org/doc/html/\n- Linux 文档：https://linux.die.net/\n","slug":"Android系统启动init进程","published":1,"lang":"undefined","updated":"2022-09-29T14:55:05.000Z","comments":1,"photos":[],"link":"","_id":"cl9lf56q6000a7tqph9fg7har","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>设备启动简述</h1>\n<p><strong>1、BIOS 加载</strong></p>\n<ul>\n<li>加电自检（基本输出/输入系统 stdio）\n<ul>\n<li>硬件自检<code>POST</code></li>\n</ul>\n</li>\n<li>外部存储设备<code>启动顺序排序</code>，下一个获得控制权的设备</li>\n<li>读取激活分区第一个扇区的 <code>主引导记录</code>（512 字节）\n<ul>\n<li>负责分区读写合法性判断</li>\n<li>负责引导信息定位</li>\n<li>数据存储\n<ul>\n<li>调用操作系统的机器码</li>\n<li>分区表\n<ul>\n<li>主分区是激活的，激活分区的第一个扇区是<code>卷引导记录</code>（告诉计算机操作系统在分区的位置-系统盘分区）</li>\n<li>当只有一个系统时候，控制权将交给某分区；否则将启动<code>启动管理器</code>让用户选择操作系统</li>\n</ul>\n</li>\n<li>主引导记录签名\n<ul>\n<li>最后两个字节是 <code>0x55、0xAA</code> 表示可启动设备</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>2、kernel 加载</strong></p>\n<ul>\n<li>确定操作系统之后获得控制权，接着加载内核到内存</li>\n<li>Linux 系统内核位于<code>boot/kernel</code></li>\n<li>运行第一个程序<code>sbin/init</code></li>\n<li>解析配置文件<code>etc/initab</code>创建第一个用户进程，进程 <code>id 1</code></li>\n<li>之后 init 进程分别加载系统各模块的进程</li>\n</ul>\n<h1>Android 启动</h1>\n<p>Android 不存在 BIOS，但是有 <code>Bootloader</code>，Android 不存在硬盘，但是有<code>ROM</code>（类似硬盘，由不同区域划分）。</p>\n<p><strong>1、Bootloader</strong></p>\n<ul>\n<li>初始化硬件设备</li>\n<li>建立内存空间映射（为系统调用服务）</li>\n</ul>\n<p><strong>2、ROM</strong></p>\n<ul>\n<li>/boot ：引导程序 —— 操作内核、内存的程序</li>\n<li>/system ：相当于系统盘 —— 操作系统、系统程序</li>\n<li>/recovery ： 恢复分区 —— 恢复操作系统（刷机）</li>\n<li>/data ： 用户数据 —— 安装程序、外部数据</li>\n<li>/cache ： 系统缓存</li>\n<li>/scared ： 用户存储空间 —— 相册、音乐</li>\n</ul>\n<p><strong>3、Bootloader 加载</strong></p>\n<ul>\n<li>加电，引导芯片加载 ROM 预设代码执行</li>\n<li>芯片查找 Bootloader 代码并加载到内存</li>\n<li>Bootloader 开始执行，查找操作系统、加载 Linux 内核到内存</li>\n<li>Linux 内核开始执行，初始化硬件、加载驱动、挂载文件系统、创建并启动第一个用户空间 <code>init 进程</code></li>\n</ul>\n<h1>Linux 内核加载</h1>\n<p><strong>1、idle 进程（pid = 0）</strong></p>\n<ul>\n<li>Linux 系统第一个进程</li>\n<li>进程名字<code>init_task</code>，退化后的<code>idle</code></li>\n<li>不是通过<code>fork、kernel_thread</code>创建的进程</li>\n<li>主要负责进程调度工作，进入无限循环</li>\n</ul>\n<p><strong>2、init 进程（pid = 1）</strong></p>\n<ul>\n<li>用户空间第一个进程</li>\n<li>启动前部分：完成创建和内核初始化</li>\n<li>启动后部分：完成 Android 系统初始化</li>\n<li>/system/core/init/init.cpp</li>\n</ul>\n<p><strong>3、kthreadd 进程（pid = 2）</strong></p>\n<ul>\n<li>Linux 内核管理者，内核线程的父进程</li>\n<li>主要负责内核线程的调度和管理</li>\n<li>由 idle 通过<code>kernel_thead</code>创建</li>\n</ul>\n<h1>Android 系统启动</h1>\n<p>相关文件：</p>\n<ul>\n<li>/system/core/init/main.cpp</li>\n<li>/system/core/init/first_state_main.cpp</li>\n<li>/system/core/init/first_state_init.cpp</li>\n<li>/system/core/init/main.cpp</li>\n<li>/system/core/init/selinux.cpp</li>\n<li>/system/core/init/main.cpp</li>\n<li>/system/core/init/init.cpp</li>\n<li>/system/core/init/property_service.cpp</li>\n<li>/system/core/init/subcontext.h</li>\n<li>/system/core/init/subcontext.cpp</li>\n<li>/system/core/init/builtins.cpp</li>\n<li>/system/core/init/action.cpp</li>\n</ul>\n<p>用户空间第一个进程（init 进程）启动意味着开始 Android 系统初始化开始，初始化被划分为几个不同的阶段，我们主要关注 main 函数的执行，主要负责准备和构建文件系统。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//略</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;subcontext&quot;</span>)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//内核日志初始化，内核的源码在另外的仓库，暂时看不了</span></span><br><span class=\"line\">           android::base::<span class=\"built_in\">InitLogging</span>(argv, &amp;android::base::KernelLogger);</span><br><span class=\"line\">           <span class=\"comment\">//函数映射，调用的可都是内核函数【参考builtins.cpp】</span></span><br><span class=\"line\">           <span class=\"keyword\">const</span> BuiltinFunctionMap&amp; function_map = <span class=\"built_in\">GetBuiltinFunctionMap</span>();</span><br><span class=\"line\">           <span class=\"comment\">//4、还是进入 subcontext.cpp，开始上下文</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">SubcontextMain</span>(argc, argv, &amp;function_map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2、执行第二阶段前，建立Linux安全机制</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;selinux_setup&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetupSelinux</span>(argv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;second_stage&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//3、初始化第二阶段</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SecondStageMain</span>(argc, argv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1、初始化第一阶段</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">FirstStageMain</span>(argc, argv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化（第一阶段）\">初始化（第一阶段）</h2>\n<p>为文件系统准备和创建环境</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//first_state_init.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">FirstStageMain</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//准备文件系统</span></span><br><span class=\"line\">    <span class=\"built_in\">CHECKCALL</span>(<span class=\"built_in\">clearenv</span>());</span><br><span class=\"line\">    <span class=\"comment\">//Linux 下一切皆文件，socket 也就是一个特殊文件</span></span><br><span class=\"line\">    <span class=\"built_in\">CHECKCALL</span>(<span class=\"built_in\">mkdir</span>(<span class=\"string\">&quot;/dev/socket&quot;</span>, <span class=\"number\">0755</span>));</span><br><span class=\"line\">    <span class=\"comment\">//755 是不是很熟悉的 chmod 755 访问权限；7/5/5 —— 用户/用户组/其他用户（421组合）</span></span><br><span class=\"line\">    <span class=\"built_in\">CHECKCALL</span>(<span class=\"built_in\">chmod</span>(<span class=\"string\">&quot;/proc/cmdline&quot;</span>, <span class=\"number\">0440</span>));</span><br><span class=\"line\">    <span class=\"comment\">//重要的启动配置文件，更多请参考 https://www.kernel.org/doc/html/</span></span><br><span class=\"line\">    android::base::<span class=\"built_in\">ReadFileToString</span>(<span class=\"string\">&quot;/proc/bootconfig&quot;</span>, &amp;bootconfig);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//必不可少的日志</span></span><br><span class=\"line\">    <span class=\"comment\">//经过前面的准备、检验工作，到这里第一阶段初始化工作就要开始</span></span><br><span class=\"line\">    <span class=\"built_in\">InitKernelLogging</span>(argv);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//检查虚拟内存是否释放、如未开启则需要重启</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> old_root_dir = std::unique_ptr&lt;DIR, <span class=\"keyword\">decltype</span>(&amp;closedir)&gt;&#123;<span class=\"built_in\">opendir</span>(<span class=\"string\">&quot;/&quot;</span>), closedir&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//加载内核模块，可能还记得 major（内核主版本）、 minor（内核次版本），版本信息在加载前都会去解析，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">LoadKernelModules</span>(<span class=\"built_in\">IsRecoveryMode</span>() </span><br><span class=\"line\">    &amp;&amp; !<span class=\"built_in\">ForceNormalBoot</span>(cmdline, bootconfig), </span><br><span class=\"line\">    want_console,want_parallel, module_count)) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//在 recovery 模式下不允许创建设备啊</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">IsRecoveryMode</span>()) &#123;</span><br><span class=\"line\">        created_devices = <span class=\"built_in\">DoCreateDevices</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//为初始化第二阶段准备</span></span><br><span class=\"line\">    <span class=\"comment\">///second_stage_resource/system/etc/ramdisk/build.prop</span></span><br><span class=\"line\">    std::string dest = <span class=\"built_in\">GetRamdiskPropForSecondStage</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//执行第一阶段的挂载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">DoFirstStageMount</span>(!created_devices))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//神奇的 execv 函数：使用一个新的进程替换当前进程映像继续执行，紧接着通过传入的 `selinux_setup`参数执行下一个函数</span></span><br><span class=\"line\">    <span class=\"comment\">//更多 execv 参考：https://linux.die.net/man/3/execv</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path = <span class=\"string\">&quot;/system/bin/init&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* args[] = &#123;path, <span class=\"string\">&quot;selinux_setup&quot;</span>, <span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">execv</span>(path, <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span>**&gt;(args));</span><br><span class=\"line\">    <span class=\"comment\">//第一阶段大致到此结束</span></span><br></pre></td></tr></table></figure>\n<p>准备系统调用函数映射。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//builtins.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//这个内置函数映射是什么意思呢？</span></span><br><span class=\"line\"><span class=\"comment\">// 比如  &#123;&quot;start&quot;,&#123;1,1,&#123;false,  do_start&#125;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// start 命令对应的执行的函数就是 buildins.cpp 里面定义的 do_start 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> BuiltinFunctionMap&amp; <span class=\"title\">GetBuiltinFunctionMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> std::<span class=\"keyword\">size_t</span> kMax = std::numeric_limits&lt;std::<span class=\"keyword\">size_t</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> BuiltinFunctionMap builtin_functions = &#123;</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;bootchart&quot;</span>,               &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_bootchart&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;chmod&quot;</span>,                   &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_chmod&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;chown&quot;</span>,                   &#123;<span class=\"number\">2</span>,     <span class=\"number\">3</span>,    &#123;<span class=\"literal\">true</span>,   do_chown&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;class_reset&quot;</span>,             &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_class_reset&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;class_restart&quot;</span>,           &#123;<span class=\"number\">1</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">false</span>,  do_class_restart&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;class_start&quot;</span>,             &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_class_start&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;class_stop&quot;</span>,              &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_class_stop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;copy&quot;</span>,                    &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_copy&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;copy_per_line&quot;</span>,           &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_copy_per_line&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;domainname&quot;</span>,              &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_domainname&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;enable&quot;</span>,                  &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_enable&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;exec&quot;</span>,                    &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">false</span>,  do_exec&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;exec_background&quot;</span>,         &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">false</span>,  do_exec_background&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;exec_start&quot;</span>,              &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_exec_start&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;export&quot;</span>,                  &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">false</span>,  do_export&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;hostname&quot;</span>,                &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_hostname&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;ifup&quot;</span>,                    &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_ifup&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;init_user0&quot;</span>,              &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_init_user0&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;insmod&quot;</span>,                  &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">true</span>,   do_insmod&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;installkey&quot;</span>,              &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_installkey&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;interface_restart&quot;</span>,       &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_interface_restart&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;interface_start&quot;</span>,         &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_interface_start&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;interface_stop&quot;</span>,          &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_interface_stop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;load_exports&quot;</span>,            &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_load_exports&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;load_persist_props&quot;</span>,      &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_load_persist_props&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;load_system_props&quot;</span>,       &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_load_system_props&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;loglevel&quot;</span>,                &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_loglevel&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;mark_post_data&quot;</span>,          &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_mark_post_data&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;mkdir&quot;</span>,                   &#123;<span class=\"number\">1</span>,     <span class=\"number\">6</span>,    &#123;<span class=\"literal\">true</span>,   do_mkdir&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;mount_all&quot;</span>,               &#123;<span class=\"number\">0</span>,     kMax, &#123;<span class=\"literal\">false</span>,  do_mount_all&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;mount&quot;</span>,                   &#123;<span class=\"number\">3</span>,     kMax, &#123;<span class=\"literal\">false</span>,  do_mount&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;perform_apex_config&quot;</span>,     &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_perform_apex_config&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;umount&quot;</span>,                  &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_umount&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;umount_all&quot;</span>,              &#123;<span class=\"number\">0</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_umount_all&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;update_linker_config&quot;</span>,    &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_update_linker_config&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;readahead&quot;</span>,               &#123;<span class=\"number\">1</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_readahead&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;remount_userdata&quot;</span>,        &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_remount_userdata&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;restart&quot;</span>,                 &#123;<span class=\"number\">1</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">false</span>,  do_restart&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;restorecon&quot;</span>,              &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">true</span>,   do_restorecon&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;restorecon_recursive&quot;</span>,    &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">true</span>,   do_restorecon_recursive&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;rm&quot;</span>,                      &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_rm&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;rmdir&quot;</span>,                   &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_rmdir&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;setprop&quot;</span>,                 &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_setprop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;setrlimit&quot;</span>,               &#123;<span class=\"number\">3</span>,     <span class=\"number\">3</span>,    &#123;<span class=\"literal\">false</span>,  do_setrlimit&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;start&quot;</span>,                   &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_start&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;stop&quot;</span>,                    &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_stop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;swapon_all&quot;</span>,              &#123;<span class=\"number\">0</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_swapon_all&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;enter_default_mount_ns&quot;</span>,  &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_enter_default_mount_ns&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;symlink&quot;</span>,                 &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_symlink&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;sysclktz&quot;</span>,                &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_sysclktz&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;trigger&quot;</span>,                 &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_trigger&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;verity_update_state&quot;</span>,     &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_verity_update_state&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;wait&quot;</span>,                    &#123;<span class=\"number\">1</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_wait&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;wait_for_prop&quot;</span>,           &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">false</span>,  do_wait_for_prop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;write&quot;</span>,                   &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_write&#125;&#125;&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builtin_functions;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立-SELinux\">建立 SELinux</h2>\n<p>第一阶段最后 execv 函数传入初始化参数 <code>selinux_setup</code>，执行流程回到 main.cpp，由 strcmp 函数判断进入下一个流程。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;selinux_setup&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">SetupSelinux</span>(argv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SetupSelinux.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SetupSelinux</span><span class=\"params\">(<span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//准备安全策略，某路径下的 SEPolicy.zip 文件</span></span><br><span class=\"line\">    <span class=\"built_in\">PrepareApexSepolicy</span>();</span><br><span class=\"line\">    <span class=\"comment\">//读取安全策略</span></span><br><span class=\"line\">    <span class=\"built_in\">ReadPolicy</span>(&amp;policy);</span><br><span class=\"line\">    <span class=\"comment\">//加载安全策略</span></span><br><span class=\"line\">    <span class=\"built_in\">LoadSelinuxPolicy</span>(policy);</span><br><span class=\"line\">    <span class=\"comment\">//强制执行策略</span></span><br><span class=\"line\">    <span class=\"built_in\">SelinuxSetEnforcement</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关键代码又来了，调用 execv，初始化参数 second_stage，准备执行初始化第二阶段</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path = <span class=\"string\">&quot;/system/bin/init&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* args[] = &#123;path, <span class=\"string\">&quot;second_stage&quot;</span>, <span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">execv</span>(path, <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span>**&gt;(args));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化（第二阶段）\">初始化（第二阶段）</h2>\n<p>execv 调用又来了，本次传入初始化参数是 <code>second_stage</code>，执行流程再次回到 main.cpp，紧接着开始第二阶段的初始化。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;second_stage&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">SecondStageMain</span>(argc, argv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//init.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SecondStageMain</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果设备解锁 unlock，将允许 adb root 加载调试信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* force_debuggable_env = <span class=\"built_in\">getenv</span>(<span class=\"string\">&quot;INIT_FORCE_DEBUGGABLE&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> load_debug_prop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (force_debuggable_env &amp;&amp; AvbHandle::<span class=\"built_in\">IsDeviceUnlocked</span>()) &#123;</span><br><span class=\"line\">        load_debug_prop = <span class=\"string\">&quot;true&quot;</span>s == force_debuggable_env;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//属性初始化，创建属性信息并存储在 /dev/__properties__/property_info 文件中</span></span><br><span class=\"line\">    <span class=\"comment\">//从其他多个文件读取数据，构造成 PropertyInf 属性集合</span></span><br><span class=\"line\">    <span class=\"comment\">//还处理了几个重要的信息：这些被处理的信息将被 InitPropertySet(name,value) 函数写入 property_info 文件中</span></span><br><span class=\"line\">    <span class=\"comment\">//    ProcessKernelDt();</span></span><br><span class=\"line\">    <span class=\"comment\">//    ProcessKernelCmdline();</span></span><br><span class=\"line\">    <span class=\"comment\">//    ProcessBootconfig();</span></span><br><span class=\"line\">    <span class=\"comment\">//    ExportKernelBootProps();//遇到了陌生又熟悉的 ro.boot 键值对属性，例如 &quot;ro.boot.mode&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//PropertyLoadBootDefaults();//上述收集到的属性信息都将被加载，如果是恢复模式（刷机）IsRecoveryMode()，那么会加载默认的属性文件 /prop.default </span></span><br><span class=\"line\">    <span class=\"comment\">//GetRamdiskPropForSecondStage(); //第二阶段需要的属性去哪里加载？/second_stage_resources/system/etc/ramdisk/build.prop</span></span><br><span class=\"line\">    <span class=\"built_in\">PropertyInit</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//挂载一些其他的文件系统：apex、linkerconfig</span></span><br><span class=\"line\">    <span class=\"built_in\">MountExtraFilesystems</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//注册 socket 监听</span></span><br><span class=\"line\">    Epoll epoll;</span><br><span class=\"line\">    <span class=\"built_in\">InstallSignalFdHandler</span>(&amp;epoll);</span><br><span class=\"line\">    <span class=\"built_in\">InstallInitNotifier</span>(&amp;epoll);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动属性服务，通过 socket 通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">StartPropertyService</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//oem：刷机的同学可能会记得 ‘开发者选项’ 中就有个选项是 ‘OEM解锁’——是否允许解锁引导加载程序，刷机时候我们通常会打开此选项</span></span><br><span class=\"line\">    <span class=\"built_in\">export_oem_lock_status</span>(); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//原来 usb 对应的属性是 sys.usb.controller，所在文件 /sys/class/udc</span></span><br><span class=\"line\">    <span class=\"built_in\">SetUsbController</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//内核版本 ro.kernel.version，包含主版本 major 和次版本 minor</span></span><br><span class=\"line\">    <span class=\"built_in\">SetKernelVersion</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始化 subcontext 一个进程【请转到 subcontext.h】</span></span><br><span class=\"line\">    <span class=\"built_in\">InitializeSubcontext</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//加载启动脚本</span></span><br><span class=\"line\">    <span class=\"comment\">//首先通过 Property 加载 ro.boot.init_rc 属性值，如果为空则加载 /system/etc/init/hw/init.rc</span></span><br><span class=\"line\">    <span class=\"comment\">//actionManager 添加一堆不知道是什么的 action 进入队列等待执行</span></span><br><span class=\"line\">    <span class=\"comment\">//serviceList 通过解析一些 /init.rc、/system/etc/init、/vendor/etc/init 获取的服务</span></span><br><span class=\"line\">    <span class=\"built_in\">LoadBootScripts</span>(actionManager, serviceList);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//准备进入无限循环，此前重置进程优先级</span></span><br><span class=\"line\">    <span class=\"comment\">//prio 优先级范围 0～139，值越小优先级越高</span></span><br><span class=\"line\">    <span class=\"built_in\">setpriority</span>(PRIO_PROCESS, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//epoll 负责事件处理，默认情况 epoll 会休眠，类似阻塞直到有事件到来；关于 epoll </span></span><br><span class=\"line\">        <span class=\"comment\">//如果有事件需要处理，等待事件将被置为0，也就是需要马上处理事件</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> epoll_timeout = std::optional&lt;std::chrono::milliseconds&gt;&#123;kDiagnosticTimeout&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//每次都会检查是否关机</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> shutdown_command = shutdown_state.<span class=\"built_in\">CheckShutdown</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//还会检测如果进程需要重启，将立即启动</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> next_process_action_time = <span class=\"built_in\">HandleProcessActions</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//如果事件队列不为空，将 fron 第一个事件取出进行处理，递归进行，加锁同步进行</span></span><br><span class=\"line\">        <span class=\"built_in\">HandleControlMessage</span>();</span><br><span class=\"line\">        <span class=\"comment\">//至此，第二阶段完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//subcontext.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subcontext</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Subcontext</span>(std::vector&lt;std::string&gt; path_prefixes, std::string context, <span class=\"keyword\">bool</span> host = <span class=\"literal\">false</span>)</span><br><span class=\"line\">        : <span class=\"built_in\">path_prefixes_</span>(std::<span class=\"built_in\">move</span>(path_prefixes)), <span class=\"built_in\">context_</span>(std::<span class=\"built_in\">move</span>(context)), <span class=\"built_in\">pid_</span>(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!host) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//构造函数中直接 fork 一个进程</span></span><br><span class=\"line\">            <span class=\"built_in\">Fork</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Subcontext::Fork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个对应上下文的 socket</span></span><br><span class=\"line\">    unique_fd subcontext_socket;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Socketpair</span>(AF_UNIX, SOCK_SEQPACKET | SOCK_CLOEXEC, <span class=\"number\">0</span>, &amp;socket_, &amp;subcontext_socket)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(__ANDROID__)</span></span><br><span class=\"line\">    <span class=\"comment\">//subcontext 的初始化需要在挂载 default 的空间下，为了能够访问 /apex</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> result = <span class=\"built_in\">SwitchToMountNamespaceIfNeeded</span>(NS_DEFAULT); !result.<span class=\"built_in\">ok</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Could not switch to \\&quot;default\\&quot; mount namespace: &quot;</span> &lt;&lt; result.<span class=\"built_in\">error</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//获取下一阶段初始化的执行路径，至关重要啊兄弟们</span></span><br><span class=\"line\">   <span class=\"comment\">//Android11 源码约450G，目前使用 vscode 搜索某关键字，</span></span><br><span class=\"line\">   <span class=\"comment\">//搜索效果不是很好，搜索太慢了，似乎索引建立太慢？有什么更好的工具可以替换 vscode ???  </span></span><br><span class=\"line\">   <span class=\"comment\">//工具 ———— https://github.com/oracle/opengrok  Oracle 开源的真是福利好。</span></span><br><span class=\"line\">   <span class=\"comment\">// </span></span><br><span class=\"line\">   <span class=\"comment\">//----- 假装我是分割线 -----</span></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">//那么 GetExecutablePath 实现在哪里？源码中没看到啊</span></span><br><span class=\"line\">   <span class=\"comment\">//⚠️注意了：</span></span><br><span class=\"line\">   <span class=\"comment\">// 1、调用 GetExecutablePath() 所在命名空间是 using android::base::GetExecutablePath;</span></span><br><span class=\"line\">   <span class=\"comment\">// 2、看看引入的头文件 #include &lt;android-base/properties.h&gt;，注意咯，是尖括号&lt;&gt;引入方式，而不是双引号“”本地引入，说明本地项目下根本找不到，是通过系统连接进来的。</span></span><br><span class=\"line\">   <span class=\"comment\">// 3、查阅官网，发现文件实现在内核仓库有一份可查阅。https://source.android.google.cn/devices/tech/config/kernel?hl=zh-cn</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> init_path = <span class=\"built_in\">GetExecutablePath</span>();</span><br><span class=\"line\">   <span class=\"keyword\">auto</span> child_fd_string = std::<span class=\"built_in\">to_string</span>(child_fd);</span><br><span class=\"line\">   <span class=\"comment\">//终于又等到了 execv 函数，注意传参 subcontext，是不是又回到了 main.cpp【或许你对 main.cpp 已没有了印象，毕竟学习就是一个不断重复的过程，反复的、反复的、反复的印象也就深刻了】</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* args[] = &#123;init_path.<span class=\"built_in\">c_str</span>(), <span class=\"string\">&quot;subcontext&quot;</span>, context_.<span class=\"built_in\">c_str</span>(),child_fd_string.<span class=\"built_in\">c_str</span>(), <span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">   <span class=\"built_in\">execv</span>(init_path.<span class=\"built_in\">data</span>(), <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span>**&gt;(args));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//有没有一种可能，地球是圆的，你在此处静候，我一直往北走，最后还能相遇不是吗？</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;subcontext&quot;</span>)) &#123;</span><br><span class=\"line\">    android::base::<span class=\"built_in\">InitLogging</span>(argv, &amp;android::base::KernelLogger); </span><br><span class=\"line\">    <span class=\"keyword\">const</span> BuiltinFunctionMap&amp; function_map = <span class=\"built_in\">GetBuiltinFunctionMap</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">SubcontextMain</span>(argc, argv, &amp;function_map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SubcontextMain</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv, <span class=\"keyword\">const</span> BuiltinFunctionMap* function_map)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//主要还是干两件事，创建上下文进程、并进入无限循环</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> subcontext_process = <span class=\"built_in\">SubcontextProcess</span>(function_map, context, init_fd);</span><br><span class=\"line\">    <span class=\"comment\">// Restore prio before main loop</span></span><br><span class=\"line\">    <span class=\"built_in\">setpriority</span>(PRIO_PROCESS, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    subcontext_process.<span class=\"built_in\">MainLoop</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubcontextProcess</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">SubcontextProcess</span>(<span class=\"keyword\">const</span> BuiltinFunctionMap* function_map, std::string context, <span class=\"keyword\">int</span> init_fd)</span><br><span class=\"line\">        : <span class=\"built_in\">function_map_</span>(function_map), <span class=\"built_in\">context_</span>(std::<span class=\"built_in\">move</span>(context)), <span class=\"built_in\">init_fd_</span>(init_fd)&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainLoop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SubcontextProcess::MainLoop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    pollfd ufd[<span class=\"number\">1</span>];</span><br><span class=\"line\">    ufd[<span class=\"number\">0</span>].events = POLLIN;</span><br><span class=\"line\">    ufd[<span class=\"number\">0</span>].fd = init_fd_;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//进入无限循环，处理循环事件的还是 poll 具柄，使用 socket 通讯</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理的消息类型有两种：执行型、数据解析型</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> subcontext_command = <span class=\"built_in\">SubcontextCommand</span>();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> reply = <span class=\"built_in\">SubcontextReply</span>();</span><br><span class=\"line\">        <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (subcontext_command.<span class=\"built_in\">command_case</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SubcontextCommand::kExecuteCommand: &#123;</span><br><span class=\"line\">                <span class=\"built_in\">RunCommand</span>(subcontext_command.<span class=\"built_in\">execute_command</span>(), &amp;reply);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SubcontextCommand::kExpandArgsCommand: &#123;</span><br><span class=\"line\">                <span class=\"built_in\">ExpandArgs</span>(subcontext_command.<span class=\"built_in\">expand_args_command</span>(), &amp;reply);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Unknown message type from init: &quot;</span></span><br><span class=\"line\">                           &lt;&lt; subcontext_command.<span class=\"built_in\">command_case</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//循环中干的事就是不断分发消息，到此第二阶段初始化节本结束</span></span><br><span class=\"line\">        <span class=\"comment\">//？？？呵，一脸懵逼吧，消息发出去之后呢？之后又去执行哪里了🤔️</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> result = <span class=\"built_in\">SendMessage</span>(init_fd_, reply); !result.<span class=\"built_in\">ok</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Failed to send message to init: &quot;</span> &lt;&lt; result.<span class=\"built_in\">error</span>();</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>最后</h1>\n<p>Android 系统启动由 Linux 创建 init 进程，init 进程通过解析 <code>init.rc</code> 等几个初始化配置文件，根据解析数据继续创建、启动其他的进程或服务，初始化第一阶段执行完紧接着建立 SELinux 机制，再执行初始化第二阶段。</p>\n<p>接下来会执行到哪了呢？<code>init.rc</code> 初始化配置文件的内容具体是什么？初始化配置文件是从哪里加载的，文件存放在哪里？不得不说，作为新手的我确实还有很多疑问，相信后续能够进一步了解。</p>\n<p><strong>其他知识</strong></p>\n<ul>\n<li>Ramdisk: 将一块内存当作物理磁盘使用（虚拟内存）</li>\n<li>signalfd: 信号抽象的文件描述符（一切皆文件），信号异步操作将转换问 I/O 操作</li>\n<li>Epoll：多路复用、批量处理文件描述符，poll 升级版</li>\n<li>GSI：generic system image（系统镜像）</li>\n<li>opengrok：一个快速可用的源代码搜索和交叉引用引擎</li>\n</ul>\n<p><strong>参考链接</strong></p>\n<ul>\n<li>Linux 内核文档：<a href=\"https://www.kernel.org/doc/html/\">https://www.kernel.org/doc/html/</a></li>\n<li>Linux 文档：<a href=\"https://linux.die.net/\">https://linux.die.net/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>设备启动简述</h1>\n<p><strong>1、BIOS 加载</strong></p>\n<ul>\n<li>加电自检（基本输出/输入系统 stdio）\n<ul>\n<li>硬件自检<code>POST</code></li>\n</ul>\n</li>\n<li>外部存储设备<code>启动顺序排序</code>，下一个获得控制权的设备</li>\n<li>读取激活分区第一个扇区的 <code>主引导记录</code>（512 字节）\n<ul>\n<li>负责分区读写合法性判断</li>\n<li>负责引导信息定位</li>\n<li>数据存储\n<ul>\n<li>调用操作系统的机器码</li>\n<li>分区表\n<ul>\n<li>主分区是激活的，激活分区的第一个扇区是<code>卷引导记录</code>（告诉计算机操作系统在分区的位置-系统盘分区）</li>\n<li>当只有一个系统时候，控制权将交给某分区；否则将启动<code>启动管理器</code>让用户选择操作系统</li>\n</ul>\n</li>\n<li>主引导记录签名\n<ul>\n<li>最后两个字节是 <code>0x55、0xAA</code> 表示可启动设备</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>2、kernel 加载</strong></p>\n<ul>\n<li>确定操作系统之后获得控制权，接着加载内核到内存</li>\n<li>Linux 系统内核位于<code>boot/kernel</code></li>\n<li>运行第一个程序<code>sbin/init</code></li>\n<li>解析配置文件<code>etc/initab</code>创建第一个用户进程，进程 <code>id 1</code></li>\n<li>之后 init 进程分别加载系统各模块的进程</li>\n</ul>\n<h1>Android 启动</h1>\n<p>Android 不存在 BIOS，但是有 <code>Bootloader</code>，Android 不存在硬盘，但是有<code>ROM</code>（类似硬盘，由不同区域划分）。</p>\n<p><strong>1、Bootloader</strong></p>\n<ul>\n<li>初始化硬件设备</li>\n<li>建立内存空间映射（为系统调用服务）</li>\n</ul>\n<p><strong>2、ROM</strong></p>\n<ul>\n<li>/boot ：引导程序 —— 操作内核、内存的程序</li>\n<li>/system ：相当于系统盘 —— 操作系统、系统程序</li>\n<li>/recovery ： 恢复分区 —— 恢复操作系统（刷机）</li>\n<li>/data ： 用户数据 —— 安装程序、外部数据</li>\n<li>/cache ： 系统缓存</li>\n<li>/scared ： 用户存储空间 —— 相册、音乐</li>\n</ul>\n<p><strong>3、Bootloader 加载</strong></p>\n<ul>\n<li>加电，引导芯片加载 ROM 预设代码执行</li>\n<li>芯片查找 Bootloader 代码并加载到内存</li>\n<li>Bootloader 开始执行，查找操作系统、加载 Linux 内核到内存</li>\n<li>Linux 内核开始执行，初始化硬件、加载驱动、挂载文件系统、创建并启动第一个用户空间 <code>init 进程</code></li>\n</ul>\n<h1>Linux 内核加载</h1>\n<p><strong>1、idle 进程（pid = 0）</strong></p>\n<ul>\n<li>Linux 系统第一个进程</li>\n<li>进程名字<code>init_task</code>，退化后的<code>idle</code></li>\n<li>不是通过<code>fork、kernel_thread</code>创建的进程</li>\n<li>主要负责进程调度工作，进入无限循环</li>\n</ul>\n<p><strong>2、init 进程（pid = 1）</strong></p>\n<ul>\n<li>用户空间第一个进程</li>\n<li>启动前部分：完成创建和内核初始化</li>\n<li>启动后部分：完成 Android 系统初始化</li>\n<li>/system/core/init/init.cpp</li>\n</ul>\n<p><strong>3、kthreadd 进程（pid = 2）</strong></p>\n<ul>\n<li>Linux 内核管理者，内核线程的父进程</li>\n<li>主要负责内核线程的调度和管理</li>\n<li>由 idle 通过<code>kernel_thead</code>创建</li>\n</ul>\n<h1>Android 系统启动</h1>\n<p>相关文件：</p>\n<ul>\n<li>/system/core/init/main.cpp</li>\n<li>/system/core/init/first_state_main.cpp</li>\n<li>/system/core/init/first_state_init.cpp</li>\n<li>/system/core/init/main.cpp</li>\n<li>/system/core/init/selinux.cpp</li>\n<li>/system/core/init/main.cpp</li>\n<li>/system/core/init/init.cpp</li>\n<li>/system/core/init/property_service.cpp</li>\n<li>/system/core/init/subcontext.h</li>\n<li>/system/core/init/subcontext.cpp</li>\n<li>/system/core/init/builtins.cpp</li>\n<li>/system/core/init/action.cpp</li>\n</ul>\n<p>用户空间第一个进程（init 进程）启动意味着开始 Android 系统初始化开始，初始化被划分为几个不同的阶段，我们主要关注 main 函数的执行，主要负责准备和构建文件系统。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//略</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;subcontext&quot;</span>)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//内核日志初始化，内核的源码在另外的仓库，暂时看不了</span></span><br><span class=\"line\">           android::base::<span class=\"built_in\">InitLogging</span>(argv, &amp;android::base::KernelLogger);</span><br><span class=\"line\">           <span class=\"comment\">//函数映射，调用的可都是内核函数【参考builtins.cpp】</span></span><br><span class=\"line\">           <span class=\"keyword\">const</span> BuiltinFunctionMap&amp; function_map = <span class=\"built_in\">GetBuiltinFunctionMap</span>();</span><br><span class=\"line\">           <span class=\"comment\">//4、还是进入 subcontext.cpp，开始上下文</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">SubcontextMain</span>(argc, argv, &amp;function_map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2、执行第二阶段前，建立Linux安全机制</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;selinux_setup&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetupSelinux</span>(argv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;second_stage&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//3、初始化第二阶段</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SecondStageMain</span>(argc, argv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1、初始化第一阶段</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">FirstStageMain</span>(argc, argv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化（第一阶段）\">初始化（第一阶段）</h2>\n<p>为文件系统准备和创建环境</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//first_state_init.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">FirstStageMain</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//准备文件系统</span></span><br><span class=\"line\">    <span class=\"built_in\">CHECKCALL</span>(<span class=\"built_in\">clearenv</span>());</span><br><span class=\"line\">    <span class=\"comment\">//Linux 下一切皆文件，socket 也就是一个特殊文件</span></span><br><span class=\"line\">    <span class=\"built_in\">CHECKCALL</span>(<span class=\"built_in\">mkdir</span>(<span class=\"string\">&quot;/dev/socket&quot;</span>, <span class=\"number\">0755</span>));</span><br><span class=\"line\">    <span class=\"comment\">//755 是不是很熟悉的 chmod 755 访问权限；7/5/5 —— 用户/用户组/其他用户（421组合）</span></span><br><span class=\"line\">    <span class=\"built_in\">CHECKCALL</span>(<span class=\"built_in\">chmod</span>(<span class=\"string\">&quot;/proc/cmdline&quot;</span>, <span class=\"number\">0440</span>));</span><br><span class=\"line\">    <span class=\"comment\">//重要的启动配置文件，更多请参考 https://www.kernel.org/doc/html/</span></span><br><span class=\"line\">    android::base::<span class=\"built_in\">ReadFileToString</span>(<span class=\"string\">&quot;/proc/bootconfig&quot;</span>, &amp;bootconfig);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//必不可少的日志</span></span><br><span class=\"line\">    <span class=\"comment\">//经过前面的准备、检验工作，到这里第一阶段初始化工作就要开始</span></span><br><span class=\"line\">    <span class=\"built_in\">InitKernelLogging</span>(argv);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//检查虚拟内存是否释放、如未开启则需要重启</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> old_root_dir = std::unique_ptr&lt;DIR, <span class=\"keyword\">decltype</span>(&amp;closedir)&gt;&#123;<span class=\"built_in\">opendir</span>(<span class=\"string\">&quot;/&quot;</span>), closedir&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//加载内核模块，可能还记得 major（内核主版本）、 minor（内核次版本），版本信息在加载前都会去解析，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">LoadKernelModules</span>(<span class=\"built_in\">IsRecoveryMode</span>() </span><br><span class=\"line\">    &amp;&amp; !<span class=\"built_in\">ForceNormalBoot</span>(cmdline, bootconfig), </span><br><span class=\"line\">    want_console,want_parallel, module_count)) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//在 recovery 模式下不允许创建设备啊</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">IsRecoveryMode</span>()) &#123;</span><br><span class=\"line\">        created_devices = <span class=\"built_in\">DoCreateDevices</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//为初始化第二阶段准备</span></span><br><span class=\"line\">    <span class=\"comment\">///second_stage_resource/system/etc/ramdisk/build.prop</span></span><br><span class=\"line\">    std::string dest = <span class=\"built_in\">GetRamdiskPropForSecondStage</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//执行第一阶段的挂载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">DoFirstStageMount</span>(!created_devices))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//神奇的 execv 函数：使用一个新的进程替换当前进程映像继续执行，紧接着通过传入的 `selinux_setup`参数执行下一个函数</span></span><br><span class=\"line\">    <span class=\"comment\">//更多 execv 参考：https://linux.die.net/man/3/execv</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path = <span class=\"string\">&quot;/system/bin/init&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* args[] = &#123;path, <span class=\"string\">&quot;selinux_setup&quot;</span>, <span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">execv</span>(path, <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span>**&gt;(args));</span><br><span class=\"line\">    <span class=\"comment\">//第一阶段大致到此结束</span></span><br></pre></td></tr></table></figure>\n<p>准备系统调用函数映射。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//builtins.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//这个内置函数映射是什么意思呢？</span></span><br><span class=\"line\"><span class=\"comment\">// 比如  &#123;&quot;start&quot;,&#123;1,1,&#123;false,  do_start&#125;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// start 命令对应的执行的函数就是 buildins.cpp 里面定义的 do_start 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> BuiltinFunctionMap&amp; <span class=\"title\">GetBuiltinFunctionMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> std::<span class=\"keyword\">size_t</span> kMax = std::numeric_limits&lt;std::<span class=\"keyword\">size_t</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> BuiltinFunctionMap builtin_functions = &#123;</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;bootchart&quot;</span>,               &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_bootchart&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;chmod&quot;</span>,                   &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_chmod&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;chown&quot;</span>,                   &#123;<span class=\"number\">2</span>,     <span class=\"number\">3</span>,    &#123;<span class=\"literal\">true</span>,   do_chown&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;class_reset&quot;</span>,             &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_class_reset&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;class_restart&quot;</span>,           &#123;<span class=\"number\">1</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">false</span>,  do_class_restart&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;class_start&quot;</span>,             &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_class_start&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;class_stop&quot;</span>,              &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_class_stop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;copy&quot;</span>,                    &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_copy&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;copy_per_line&quot;</span>,           &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_copy_per_line&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;domainname&quot;</span>,              &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_domainname&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;enable&quot;</span>,                  &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_enable&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;exec&quot;</span>,                    &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">false</span>,  do_exec&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;exec_background&quot;</span>,         &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">false</span>,  do_exec_background&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;exec_start&quot;</span>,              &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_exec_start&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;export&quot;</span>,                  &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">false</span>,  do_export&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;hostname&quot;</span>,                &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_hostname&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;ifup&quot;</span>,                    &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_ifup&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;init_user0&quot;</span>,              &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_init_user0&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;insmod&quot;</span>,                  &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">true</span>,   do_insmod&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;installkey&quot;</span>,              &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_installkey&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;interface_restart&quot;</span>,       &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_interface_restart&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;interface_start&quot;</span>,         &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_interface_start&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;interface_stop&quot;</span>,          &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_interface_stop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;load_exports&quot;</span>,            &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_load_exports&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;load_persist_props&quot;</span>,      &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_load_persist_props&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;load_system_props&quot;</span>,       &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_load_system_props&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;loglevel&quot;</span>,                &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_loglevel&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;mark_post_data&quot;</span>,          &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_mark_post_data&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;mkdir&quot;</span>,                   &#123;<span class=\"number\">1</span>,     <span class=\"number\">6</span>,    &#123;<span class=\"literal\">true</span>,   do_mkdir&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;mount_all&quot;</span>,               &#123;<span class=\"number\">0</span>,     kMax, &#123;<span class=\"literal\">false</span>,  do_mount_all&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;mount&quot;</span>,                   &#123;<span class=\"number\">3</span>,     kMax, &#123;<span class=\"literal\">false</span>,  do_mount&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;perform_apex_config&quot;</span>,     &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_perform_apex_config&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;umount&quot;</span>,                  &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_umount&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;umount_all&quot;</span>,              &#123;<span class=\"number\">0</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_umount_all&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;update_linker_config&quot;</span>,    &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_update_linker_config&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;readahead&quot;</span>,               &#123;<span class=\"number\">1</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_readahead&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;remount_userdata&quot;</span>,        &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_remount_userdata&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;restart&quot;</span>,                 &#123;<span class=\"number\">1</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">false</span>,  do_restart&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;restorecon&quot;</span>,              &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">true</span>,   do_restorecon&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;restorecon_recursive&quot;</span>,    &#123;<span class=\"number\">1</span>,     kMax, &#123;<span class=\"literal\">true</span>,   do_restorecon_recursive&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;rm&quot;</span>,                      &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_rm&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;rmdir&quot;</span>,                   &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">true</span>,   do_rmdir&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;setprop&quot;</span>,                 &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_setprop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;setrlimit&quot;</span>,               &#123;<span class=\"number\">3</span>,     <span class=\"number\">3</span>,    &#123;<span class=\"literal\">false</span>,  do_setrlimit&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;start&quot;</span>,                   &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_start&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;stop&quot;</span>,                    &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_stop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;swapon_all&quot;</span>,              &#123;<span class=\"number\">0</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_swapon_all&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;enter_default_mount_ns&quot;</span>,  &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_enter_default_mount_ns&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;symlink&quot;</span>,                 &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_symlink&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;sysclktz&quot;</span>,                &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_sysclktz&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;trigger&quot;</span>,                 &#123;<span class=\"number\">1</span>,     <span class=\"number\">1</span>,    &#123;<span class=\"literal\">false</span>,  do_trigger&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;verity_update_state&quot;</span>,     &#123;<span class=\"number\">0</span>,     <span class=\"number\">0</span>,    &#123;<span class=\"literal\">false</span>,  do_verity_update_state&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;wait&quot;</span>,                    &#123;<span class=\"number\">1</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_wait&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;wait_for_prop&quot;</span>,           &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">false</span>,  do_wait_for_prop&#125;&#125;&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;write&quot;</span>,                   &#123;<span class=\"number\">2</span>,     <span class=\"number\">2</span>,    &#123;<span class=\"literal\">true</span>,   do_write&#125;&#125;&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builtin_functions;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立-SELinux\">建立 SELinux</h2>\n<p>第一阶段最后 execv 函数传入初始化参数 <code>selinux_setup</code>，执行流程回到 main.cpp，由 strcmp 函数判断进入下一个流程。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;selinux_setup&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">SetupSelinux</span>(argv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SetupSelinux.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SetupSelinux</span><span class=\"params\">(<span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//准备安全策略，某路径下的 SEPolicy.zip 文件</span></span><br><span class=\"line\">    <span class=\"built_in\">PrepareApexSepolicy</span>();</span><br><span class=\"line\">    <span class=\"comment\">//读取安全策略</span></span><br><span class=\"line\">    <span class=\"built_in\">ReadPolicy</span>(&amp;policy);</span><br><span class=\"line\">    <span class=\"comment\">//加载安全策略</span></span><br><span class=\"line\">    <span class=\"built_in\">LoadSelinuxPolicy</span>(policy);</span><br><span class=\"line\">    <span class=\"comment\">//强制执行策略</span></span><br><span class=\"line\">    <span class=\"built_in\">SelinuxSetEnforcement</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关键代码又来了，调用 execv，初始化参数 second_stage，准备执行初始化第二阶段</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path = <span class=\"string\">&quot;/system/bin/init&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* args[] = &#123;path, <span class=\"string\">&quot;second_stage&quot;</span>, <span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">execv</span>(path, <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span>**&gt;(args));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化（第二阶段）\">初始化（第二阶段）</h2>\n<p>execv 调用又来了，本次传入初始化参数是 <code>second_stage</code>，执行流程再次回到 main.cpp，紧接着开始第二阶段的初始化。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;second_stage&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">SecondStageMain</span>(argc, argv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//init.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SecondStageMain</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果设备解锁 unlock，将允许 adb root 加载调试信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* force_debuggable_env = <span class=\"built_in\">getenv</span>(<span class=\"string\">&quot;INIT_FORCE_DEBUGGABLE&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> load_debug_prop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (force_debuggable_env &amp;&amp; AvbHandle::<span class=\"built_in\">IsDeviceUnlocked</span>()) &#123;</span><br><span class=\"line\">        load_debug_prop = <span class=\"string\">&quot;true&quot;</span>s == force_debuggable_env;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//属性初始化，创建属性信息并存储在 /dev/__properties__/property_info 文件中</span></span><br><span class=\"line\">    <span class=\"comment\">//从其他多个文件读取数据，构造成 PropertyInf 属性集合</span></span><br><span class=\"line\">    <span class=\"comment\">//还处理了几个重要的信息：这些被处理的信息将被 InitPropertySet(name,value) 函数写入 property_info 文件中</span></span><br><span class=\"line\">    <span class=\"comment\">//    ProcessKernelDt();</span></span><br><span class=\"line\">    <span class=\"comment\">//    ProcessKernelCmdline();</span></span><br><span class=\"line\">    <span class=\"comment\">//    ProcessBootconfig();</span></span><br><span class=\"line\">    <span class=\"comment\">//    ExportKernelBootProps();//遇到了陌生又熟悉的 ro.boot 键值对属性，例如 &quot;ro.boot.mode&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//PropertyLoadBootDefaults();//上述收集到的属性信息都将被加载，如果是恢复模式（刷机）IsRecoveryMode()，那么会加载默认的属性文件 /prop.default </span></span><br><span class=\"line\">    <span class=\"comment\">//GetRamdiskPropForSecondStage(); //第二阶段需要的属性去哪里加载？/second_stage_resources/system/etc/ramdisk/build.prop</span></span><br><span class=\"line\">    <span class=\"built_in\">PropertyInit</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//挂载一些其他的文件系统：apex、linkerconfig</span></span><br><span class=\"line\">    <span class=\"built_in\">MountExtraFilesystems</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//注册 socket 监听</span></span><br><span class=\"line\">    Epoll epoll;</span><br><span class=\"line\">    <span class=\"built_in\">InstallSignalFdHandler</span>(&amp;epoll);</span><br><span class=\"line\">    <span class=\"built_in\">InstallInitNotifier</span>(&amp;epoll);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动属性服务，通过 socket 通讯</span></span><br><span class=\"line\">    <span class=\"built_in\">StartPropertyService</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//oem：刷机的同学可能会记得 ‘开发者选项’ 中就有个选项是 ‘OEM解锁’——是否允许解锁引导加载程序，刷机时候我们通常会打开此选项</span></span><br><span class=\"line\">    <span class=\"built_in\">export_oem_lock_status</span>(); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//原来 usb 对应的属性是 sys.usb.controller，所在文件 /sys/class/udc</span></span><br><span class=\"line\">    <span class=\"built_in\">SetUsbController</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//内核版本 ro.kernel.version，包含主版本 major 和次版本 minor</span></span><br><span class=\"line\">    <span class=\"built_in\">SetKernelVersion</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始化 subcontext 一个进程【请转到 subcontext.h】</span></span><br><span class=\"line\">    <span class=\"built_in\">InitializeSubcontext</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//加载启动脚本</span></span><br><span class=\"line\">    <span class=\"comment\">//首先通过 Property 加载 ro.boot.init_rc 属性值，如果为空则加载 /system/etc/init/hw/init.rc</span></span><br><span class=\"line\">    <span class=\"comment\">//actionManager 添加一堆不知道是什么的 action 进入队列等待执行</span></span><br><span class=\"line\">    <span class=\"comment\">//serviceList 通过解析一些 /init.rc、/system/etc/init、/vendor/etc/init 获取的服务</span></span><br><span class=\"line\">    <span class=\"built_in\">LoadBootScripts</span>(actionManager, serviceList);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//准备进入无限循环，此前重置进程优先级</span></span><br><span class=\"line\">    <span class=\"comment\">//prio 优先级范围 0～139，值越小优先级越高</span></span><br><span class=\"line\">    <span class=\"built_in\">setpriority</span>(PRIO_PROCESS, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//epoll 负责事件处理，默认情况 epoll 会休眠，类似阻塞直到有事件到来；关于 epoll </span></span><br><span class=\"line\">        <span class=\"comment\">//如果有事件需要处理，等待事件将被置为0，也就是需要马上处理事件</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> epoll_timeout = std::optional&lt;std::chrono::milliseconds&gt;&#123;kDiagnosticTimeout&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//每次都会检查是否关机</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> shutdown_command = shutdown_state.<span class=\"built_in\">CheckShutdown</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//还会检测如果进程需要重启，将立即启动</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> next_process_action_time = <span class=\"built_in\">HandleProcessActions</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//如果事件队列不为空，将 fron 第一个事件取出进行处理，递归进行，加锁同步进行</span></span><br><span class=\"line\">        <span class=\"built_in\">HandleControlMessage</span>();</span><br><span class=\"line\">        <span class=\"comment\">//至此，第二阶段完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//subcontext.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subcontext</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Subcontext</span>(std::vector&lt;std::string&gt; path_prefixes, std::string context, <span class=\"keyword\">bool</span> host = <span class=\"literal\">false</span>)</span><br><span class=\"line\">        : <span class=\"built_in\">path_prefixes_</span>(std::<span class=\"built_in\">move</span>(path_prefixes)), <span class=\"built_in\">context_</span>(std::<span class=\"built_in\">move</span>(context)), <span class=\"built_in\">pid_</span>(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!host) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//构造函数中直接 fork 一个进程</span></span><br><span class=\"line\">            <span class=\"built_in\">Fork</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Subcontext::Fork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个对应上下文的 socket</span></span><br><span class=\"line\">    unique_fd subcontext_socket;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Socketpair</span>(AF_UNIX, SOCK_SEQPACKET | SOCK_CLOEXEC, <span class=\"number\">0</span>, &amp;socket_, &amp;subcontext_socket)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(__ANDROID__)</span></span><br><span class=\"line\">    <span class=\"comment\">//subcontext 的初始化需要在挂载 default 的空间下，为了能够访问 /apex</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> result = <span class=\"built_in\">SwitchToMountNamespaceIfNeeded</span>(NS_DEFAULT); !result.<span class=\"built_in\">ok</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Could not switch to \\&quot;default\\&quot; mount namespace: &quot;</span> &lt;&lt; result.<span class=\"built_in\">error</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//获取下一阶段初始化的执行路径，至关重要啊兄弟们</span></span><br><span class=\"line\">   <span class=\"comment\">//Android11 源码约450G，目前使用 vscode 搜索某关键字，</span></span><br><span class=\"line\">   <span class=\"comment\">//搜索效果不是很好，搜索太慢了，似乎索引建立太慢？有什么更好的工具可以替换 vscode ???  </span></span><br><span class=\"line\">   <span class=\"comment\">//工具 ———— https://github.com/oracle/opengrok  Oracle 开源的真是福利好。</span></span><br><span class=\"line\">   <span class=\"comment\">// </span></span><br><span class=\"line\">   <span class=\"comment\">//----- 假装我是分割线 -----</span></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">//那么 GetExecutablePath 实现在哪里？源码中没看到啊</span></span><br><span class=\"line\">   <span class=\"comment\">//⚠️注意了：</span></span><br><span class=\"line\">   <span class=\"comment\">// 1、调用 GetExecutablePath() 所在命名空间是 using android::base::GetExecutablePath;</span></span><br><span class=\"line\">   <span class=\"comment\">// 2、看看引入的头文件 #include &lt;android-base/properties.h&gt;，注意咯，是尖括号&lt;&gt;引入方式，而不是双引号“”本地引入，说明本地项目下根本找不到，是通过系统连接进来的。</span></span><br><span class=\"line\">   <span class=\"comment\">// 3、查阅官网，发现文件实现在内核仓库有一份可查阅。https://source.android.google.cn/devices/tech/config/kernel?hl=zh-cn</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> init_path = <span class=\"built_in\">GetExecutablePath</span>();</span><br><span class=\"line\">   <span class=\"keyword\">auto</span> child_fd_string = std::<span class=\"built_in\">to_string</span>(child_fd);</span><br><span class=\"line\">   <span class=\"comment\">//终于又等到了 execv 函数，注意传参 subcontext，是不是又回到了 main.cpp【或许你对 main.cpp 已没有了印象，毕竟学习就是一个不断重复的过程，反复的、反复的、反复的印象也就深刻了】</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* args[] = &#123;init_path.<span class=\"built_in\">c_str</span>(), <span class=\"string\">&quot;subcontext&quot;</span>, context_.<span class=\"built_in\">c_str</span>(),child_fd_string.<span class=\"built_in\">c_str</span>(), <span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">   <span class=\"built_in\">execv</span>(init_path.<span class=\"built_in\">data</span>(), <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span>**&gt;(args));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//有没有一种可能，地球是圆的，你在此处静候，我一直往北走，最后还能相遇不是吗？</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;subcontext&quot;</span>)) &#123;</span><br><span class=\"line\">    android::base::<span class=\"built_in\">InitLogging</span>(argv, &amp;android::base::KernelLogger); </span><br><span class=\"line\">    <span class=\"keyword\">const</span> BuiltinFunctionMap&amp; function_map = <span class=\"built_in\">GetBuiltinFunctionMap</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">SubcontextMain</span>(argc, argv, &amp;function_map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SubcontextMain</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv, <span class=\"keyword\">const</span> BuiltinFunctionMap* function_map)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//主要还是干两件事，创建上下文进程、并进入无限循环</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> subcontext_process = <span class=\"built_in\">SubcontextProcess</span>(function_map, context, init_fd);</span><br><span class=\"line\">    <span class=\"comment\">// Restore prio before main loop</span></span><br><span class=\"line\">    <span class=\"built_in\">setpriority</span>(PRIO_PROCESS, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    subcontext_process.<span class=\"built_in\">MainLoop</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubcontextProcess</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">SubcontextProcess</span>(<span class=\"keyword\">const</span> BuiltinFunctionMap* function_map, std::string context, <span class=\"keyword\">int</span> init_fd)</span><br><span class=\"line\">        : <span class=\"built_in\">function_map_</span>(function_map), <span class=\"built_in\">context_</span>(std::<span class=\"built_in\">move</span>(context)), <span class=\"built_in\">init_fd_</span>(init_fd)&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainLoop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SubcontextProcess::MainLoop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    pollfd ufd[<span class=\"number\">1</span>];</span><br><span class=\"line\">    ufd[<span class=\"number\">0</span>].events = POLLIN;</span><br><span class=\"line\">    ufd[<span class=\"number\">0</span>].fd = init_fd_;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//进入无限循环，处理循环事件的还是 poll 具柄，使用 socket 通讯</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理的消息类型有两种：执行型、数据解析型</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> subcontext_command = <span class=\"built_in\">SubcontextCommand</span>();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> reply = <span class=\"built_in\">SubcontextReply</span>();</span><br><span class=\"line\">        <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (subcontext_command.<span class=\"built_in\">command_case</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SubcontextCommand::kExecuteCommand: &#123;</span><br><span class=\"line\">                <span class=\"built_in\">RunCommand</span>(subcontext_command.<span class=\"built_in\">execute_command</span>(), &amp;reply);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SubcontextCommand::kExpandArgsCommand: &#123;</span><br><span class=\"line\">                <span class=\"built_in\">ExpandArgs</span>(subcontext_command.<span class=\"built_in\">expand_args_command</span>(), &amp;reply);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Unknown message type from init: &quot;</span></span><br><span class=\"line\">                           &lt;&lt; subcontext_command.<span class=\"built_in\">command_case</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//循环中干的事就是不断分发消息，到此第二阶段初始化节本结束</span></span><br><span class=\"line\">        <span class=\"comment\">//？？？呵，一脸懵逼吧，消息发出去之后呢？之后又去执行哪里了🤔️</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> result = <span class=\"built_in\">SendMessage</span>(init_fd_, reply); !result.<span class=\"built_in\">ok</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">LOG</span>(FATAL) &lt;&lt; <span class=\"string\">&quot;Failed to send message to init: &quot;</span> &lt;&lt; result.<span class=\"built_in\">error</span>();</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>最后</h1>\n<p>Android 系统启动由 Linux 创建 init 进程，init 进程通过解析 <code>init.rc</code> 等几个初始化配置文件，根据解析数据继续创建、启动其他的进程或服务，初始化第一阶段执行完紧接着建立 SELinux 机制，再执行初始化第二阶段。</p>\n<p>接下来会执行到哪了呢？<code>init.rc</code> 初始化配置文件的内容具体是什么？初始化配置文件是从哪里加载的，文件存放在哪里？不得不说，作为新手的我确实还有很多疑问，相信后续能够进一步了解。</p>\n<p><strong>其他知识</strong></p>\n<ul>\n<li>Ramdisk: 将一块内存当作物理磁盘使用（虚拟内存）</li>\n<li>signalfd: 信号抽象的文件描述符（一切皆文件），信号异步操作将转换问 I/O 操作</li>\n<li>Epoll：多路复用、批量处理文件描述符，poll 升级版</li>\n<li>GSI：generic system image（系统镜像）</li>\n<li>opengrok：一个快速可用的源代码搜索和交叉引用引擎</li>\n</ul>\n<p><strong>参考链接</strong></p>\n<ul>\n<li>Linux 内核文档：<a href=\"https://www.kernel.org/doc/html/\">https://www.kernel.org/doc/html/</a></li>\n<li>Linux 文档：<a href=\"https://linux.die.net/\">https://linux.die.net/</a></li>\n</ul>\n"},{"title":"Android 系统 Systemserver","catalog":true,"date":"2022-09-29T14:57:13.000Z","subtitle":"启动服务、核心服务、其他服务","header-img":"/img/220928/android_sysserver_bg.png","sticky":6,"_content":"\n\n\n\n**相关文件**\n\n- /framework/base/service/java/com/android/server/SystemServer.java\n- /framework/base/service/java/com/android/server/SystemServiceManager.java\n- /framework/base/service/java/com/android/server/WatchDog.java\n- /frameworks/base/core/java/com/android/server/SystemConfig.java\n- ... etc\n\n# 运行 System server\n\n经过前两篇的系统文章，已经完成了 init、zygote 进程的创建和初始化，即将启动系统各大服务，各项服务由服务管理者 `System server` 完成创建和启动，那么赶紧进入瞧瞧去 `/framework/base/service/java/com/android/server/SystemServer.java`\n\n```java\n//SystemServer.java\npublic final class SystemServer implements Dumpable {\n\n    //列举几个认为重要的成员\n    \n   //类似这样的服务名称不少于 50 个\n    private static final String WIFI_SERVICE_CLASS =\n            \"com.android.server.wifi.WifiService\";                  //Wi-Fi服务\n    private static final String WIFI_SCANNING_SERVICE_CLASS =\n            \"com.android.server.wifi.scanner.WifiScanningService\";  //Wi-Fi 扫描\n    private static final String ALARM_MANAGER_SERVICE_CLASS =\n            \"com.android.server.alarm.AlarmManagerService\";         //闹钟\n    ... etc\n    \n    //系统默认的对话框等主题\n    private static final int DEFAULT_SYSTEM_THEME =\n           com.android.internal.R.style.Theme_DeviceDefault_System;\n    \n    //很重要的一个主角，系统服务管理者\n    private SystemServiceManager mSystemServiceManager;\n\n    //具体服务实现类\n    private ActivityManagerService mActivityManagerService;  //Activity 管理\n    private PackageManagerService mPackageManagerService;    //安装包管理\n    private ContentResolver mContentResolver;                //内容解析——内容提供者数据解析\n    private DisplayManagerService mDisplayManagerService;    //设备显示相关\n\n    //看变量名就很清晰，application 错误报告信息记录\n    private static LinkedList<Pair<String, ApplicationErrorReport.CrashInfo>> sPendingWtfs;\n\n    //memtracker：memory tracker 【参考链接】\n    private static native void startMemtrackProxyService();\n\n    //Hidl Hardware Interface Definition Language 硬件抽象层语言【参考链接】\n    private static native void startHidlServices();\n\n    //调试模式下我们应用进程能够 dump head，dump file 是进程的内存镜像，把进程当前保存的状态保存到 dump 文件\n    //head dump 其实利用 Android studio 内置的工具（Android profile、Memory profile）也是可以生成的，直接帮你把文件可视化\n    //生成的文件保存路径 /data/system/heapdump/\n    private static native void initZygoteChildHeapProfiling();\n\n\n    //从主函数开始执行\n    public static void main(String[] args) {\n        new SystemServer().run();\n    }\n}\n```\n\n\n```java\n//SystemServer\npublic SystemServer() {\n    //记录性信息，不影响继续阅读吧，主要还是后面的 run 方法\n\n    mFactoryTestMode = FactoryTest.getMode();\n    mStartCount = SystemProperties.getInt(SYSPROP_START_COUNT, 0) + 1;\n    mRuntimeStartElapsedTime = SystemClock.elapsedRealtime();\n    mRuntimeStartUptime = SystemClock.uptimeMillis();\n    Process.setStartTimes(mRuntimeStartElapsedTime, mRuntimeStartUptime);\n\n    mRuntimeRestart = \"1\".equals(SystemProperties.get(\"sys.boot_completed\"));\n}\n```\n\n```java\n//SystemServer.java\nprivate void run() {\n\n    //通过设置系统属性，记录进程启动信息，启动次数等\n    SystemProperties.set(SYSPROP_START_COUNT,String.valueOf(mStartCount));\n    //如果当前时区无效将被设置为默认值 GMT —— 格林威治时间\n    SystemProperties.set(\"persist.sys.timezone\", \"GMT\");\n    //如果知道了语言，尝试通过语言设置地区属性\n    //【presist 前缀的系统属性是可写的，ro 前缀的系统属性是只读的】\n    if (!SystemProperties.get(\"persist.sys.language\").isEmpty()) {\n        final String languageTag = Locale.getDefault().toLanguageTag();\n        SystemProperties.set(\"persist.sys.locale\", languageTag); \n    }\n    \n    /*前面都是在设置一些系统属性，接下来将要真正启动服务*/\n    \n    //SystemClock.elapsedRealtime();  获取设备启动到当前的毫秒值\n    //清理一次内存，为 application 可以分配得到更多内存\n    VMRuntime.getRuntime().clearGrowthLimit();\n\n    //启动准备线程策略 THREAD_PRIORITY_FOREGROUND：应用程序不得更改线程优先级、不得更改线程数量，这些将由系统自动调整\n    android.os.Process.setThreadPriority(\n        android.os.Process.THREAD_PRIORITY_FOREGROUND); \n    //这是对前一条语句设置前台进程的限制 THREAD_PRIORITY_FOREGROUND，这里传入 false，如果此前设置的线程策略是‘后台进程组’将抛出异常\n    android.os.Process.setCanSelfBackground(false);\n\n    //Looper 是线程的消息循环机制，这里的线程自然是执行的主线程 Main-Thread，也就是 application 所在线程\n    //这里有一个经典八股文😊：自定义子线程 Looper 需要手动执行 prepareLooper，为什么我们在使用主线程的 Looper 前不需要先调用 prepare Looper？\n    //       A答：调用时肯定要调用的。这不是废话吗，我们不调用那肯定是‘别人’已经在我们使用前就调用了————那这个‘别人’其实就是 Android env 在创建时候调用了\n    //这个 application main loop 被系统缓存在 Looper.java 中（static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();）\n    //我们平时使用是通过： Looper.getMainLooper()\n    Looper.prepareMainLooper();\n    Looper.getMainLooper().setSlowLogThresholdMs(\n        SLOW_DISPATCH_THRESHOLD_MS, SLOW_DELIVERY_THRESHOLD_MS);\n\n    //创建系统上下文 mSystemContext 以及设置上述的默认主题\n    createSystemContext();\n    //继续\n    mSystemServiceManager = new SystemServiceManager(mSystemContext);\n\n    //启动读取系统全局配置的线程池，下面启动服务启动时候将会用到\n    //什么时候关闭线程池呢？if (phase == SystemService.PHASE_BOOT_COMPLETED){SystemServerInitThreadPool.shutdown();}\n    SystemServerInitThreadPool tp = SystemServerInitThreadPool.start();\n\n    //【重点、重点、重点】\n    //启动各种 Service\n    startBootstrapServices(t);  //启动服务\n    startCoreServices(t);       //核心服务\n    startOtherServices(t);      //其他服务\n    \n    //一个检测工具\n    StrictMode.initVmDefaults(null);\n    //进入一个无眠的世界默默`打工`，为‘人民’服务\n    /*\n        1、获得当前线程的消息队列 MessageQueue\n        2、在 for(;;) 循环中不断从消息队列取出消息，queue.next()，这是一个阻塞的过程\n        3、如果获取到可用的消息则进行分发 msg.target.dispatchMessage(msg)\n        4、消息分发之后进行回收或清理 msg.recycleUnChecked()\n    */\n    Looper.loop();\n}\n```\n\n# 启动 Bootstrap 服务\n```java\n//SystemServer.java\nprivate void startBootstrapServices(@NonNull TimingsTraceAndSlog t) {\n\n    //【1】watchdog 看门🐶？看着是有这个意思，大概就是监控服务\n    /*\n        1、它运行在一个单独的线程中 mThread = new Thread(this::run, \"watchdog\");\n        2、主要是检查一些线程的运行状态和调度情况，比如检查的线程有前台线程、IO、UI、main、display、animation、surface animation 等线程\n    */\n    final Watchdog watchdog = Watchdog.getInstance();\n    watchdog.start();\n\n    //【2】加载全局系统配置信息\n    /*\n        1、此线程池在 SystemServer 启动时候执行\n        2、在 SystemServer 启动完成之后关闭 SystemService.PHASE_BOOT_COMPLETE\n        3、调用 submit 方法真正执行系统全局配置读取的方法在哪里？线程池提交之后执行的当然是 run 方法。谁的 run 方法？SystemConfig::getInstance 又是啥，在哪里？【不解，知者欢迎评论】\n        4、SystemConfig::getInstance：Java 能够使用双引号访问静态方法，在此之前我只知道 cpp 是可以这样的，后来查了一下似乎是 lambada 的语法糖😺不知者无罪\n        5、readPublicNativeLibrariesList();//String[] dirs = {\"/system/etc\", \"/system_ext/etc\", \"/product/etc\",\"vendor/etc\"};读取此目录下 public.libraries- 开头，.txt 结尾的配置文件\n        6、readAllPermissions();//解析根目录、Vendor目录等 etc/sysconfig、etc/permission 下 XML 权限文件\n    */\n    final String TAG_SYSTEM_CONFIG = \"ReadingSystemConfig\";\n    SystemServerInitThreadPool.submit(SystemConfig::getInstance, TAG_SYSTEM_CONFIG);\n\n    //【3】公共服务\n    /*\n        1、将来 ActivityManagerService、PackageManagerService ...etc 会使用\n        2、调用 addService 一看流程最终到了 IServiceManager.cpp 藏得这么深，真是服了这个老 six，sp<AidlServiceManager> mTheRealServiceManager;   \n    */\n    PlatformCompat platformCompat = new PlatformCompat(mSystemContext);\n    ServiceManager.addService(Context.PLATFORM_COMPAT_SERVICE, platformCompat);\n    ServiceManager.addService(Context.PLATFORM_COMPAT_NATIVE_SERVICE,\n        new PlatformCompatNative(platformCompat));\n\n    //【4】文件完整性校验相关服务\n    mSystemServiceManager.startService(FileIntegrityService.class);\n\n    //【5】应用程序安装相关服务\n    Installer installer = mSystemServiceManager.startService(Installer.class);\n\n    //【6】设备标识访问策略服务\n    /*\n        1、获取手机序列号：getSerial()，系统属性对应键 ro.serialn。调用时\nelephonyPermissions.checkCallingOrSelfReadDeviceIdentifiers\n        2、指定包名获取序列号 getSerialForPackage，其中再根据包名 + 当前用户ID获取调用此类的 UID，所以猜测还有有不少限制的，比如限制非 root 用户、限制非系统应用\n    */\n    SystemServiceManager.startService(DeviceIdentifiersPolicyService.class);\n    \n    //【7】URI 授权管理服务 （关于 Uri 可参考链接）\n    mSystemServiceManager.startService(UriGrantsManagerService.Lifecycle.class);\n    \n    //【8】电池相关服务\n    /*\n        1、电量🔋触发器BatteryTrigger mBatteryTrigger，通过广播监听电量变化，当电量下降1%将会接收到广播，似乎只做一件事：就是更新最新电量信息\n        2、IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED); 通过 context 注册广播\n    */\n    mSystemServiceManager.startService(PowerStatsService.class);\n\n    //【9】内存分析服务  （native 调用）\n    startMemtrackProxyService();\n    \n    //【10】AMS 服务（终于看到一个比较常见的🐶）\n    /*\n        1、高版本任务栈管理类似乎被分离出来了，由 ActivityTaskManagerService 实现，内容太多，下次一定看看\n    */\n    ActivityTaskManagerService atm = mSystemServiceManager.startService(\n        ActivityTaskManagerService.Lifecycle.class).getService();\n    mActivityManagerService = ActivityManagerService.Lifecycle.startService(\n        mSystemServiceManager, atm);\n\n    //【11】数据加载\n    mDataLoaderManagerService = mSystemServiceManager.startService(\n        DataLoaderManagerService.class);\n        \n    //【12】电源管理服务，之前那个时电池状态管理（只做了一件事：监听电量变化）\n    mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);\n\n    //【13】系统恢复服务，我们刷机常见的 Recover 模式\n    mSystemServiceManager.startService(RecoverySystemService.Lifecycle.class);\n\n    //【14】安装包管理服务，这是个大类，三万行呢，下次一定看看\n    mPackageManagerService = PackageManagerService.main(mSystemContext, installer,\n        domainVerificationService, mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF,\n        mOnlyCore);\n        \n    //【15】传感器服务\n    mSystemServiceManager.startService(new SensorPrivacyService(mSystemContext));\n    mSystemServiceManager.startService(SensorService.class);\n}\n```\n启动服务到这里就结束啦，只是部分列举，并不完整，服务是如何运行的？具体都在做了些什么？等等！！！这些执行细节希望在之后的系列文章进一步深入（内容实在是太多了😭）\n\n# 启动 Core 服务\n```java\n//SystemServer.java\nprivate void startCoreServices(@NonNull TimingsTraceAndSlog t) {\n    //【1】主要负责读取系统配置信息\n    mSystemServiceManager.startService(SystemConfigService.class);\n    \n    //【2】电量跟踪\n    mSystemServiceManager.startService(BatteryService.class);\n    \n    //【3】应用使用状态跟踪\n    mSystemServiceManager.startService(UsageStatsService.class);\n    \n    //【4】监控设备是否充电、屏幕是否亮起\n    //（通过高优先级的广播监听📢，指定特定的 intentfilter——ACTION_SCREEN_ON/ACTION_SCREEN_OFF/ACTION_BATTERY_CHANGED）\n    mSystemServiceManager.startService(CachedDeviceStateService.class);\n    \n    //【5】应用程序回滚？？？\n    mSystemServiceManager.startService(ROLLBACK_MANAGER_SERVICE_CLASS);\n\n    //【6】tombstone 墓碑，记录进程被杀死前的一些信息，比如调用栈、内存使用情况、CPU 使用情况、backtrace 等等，主要是监控和记录 native 崩溃信息（获取这个崩溃日志需要 root 权限）\n    mSystemServiceManager.startService(NativeTombstoneManagerService.class);\n    \n    //【7】Android 错误报告生成，应用崩溃时候查看这个报告还是很有用的（前提是你能够看懂报告）\n    // 可以同 adb bugreport 获取错误报告（Android 版本之间获取方式稍有区别，根据 adb bugreport 提示操作即可）\n    mSystemServiceManager.startService(BugreportManagerService.class);\n\n    //【8】主要还是监视和收集 GPU 信息\n    mSystemServiceManager.startService(GpuService.class);    \n}\n```\n\n核心服务不是很多，主要是信息记录相关，必不可少、确实很是关键。\n\n# 启动 Other 服务\n```java\n//SystemServer.java\n private void startOtherServices(@NonNull TimingsTraceAndSlog t) {\n\n        try {\n            //闹钟服务⏰\n            mSystemServiceManager.startService(ALARM_MANAGER_SERVICE_CLASS);\n            //WMS 服务\n            mSystemServiceManager.startBootPhase(t, SystemService.PHASE_WAIT_FOR_SENSOR_SERVICE);\n            wm = WindowManagerService.main(context, inputManager, !mFirstBoot, mOnlyCore,\n                    new PhoneWindowManager(), mActivityManagerService.mActivityTaskManager);\n            ServiceManager.addService(Context.WINDOW_SERVICE, wm, /* allowIsolated= */ false,\n                    DUMP_FLAG_PRIORITY_CRITICAL | DUMP_FLAG_PROTO);\n            ServiceManager.addService(Context.INPUT_SERVICE, inputManager,\n                    /* allowIsolated= */ false, DUMP_FLAG_PRIORITY_CRITICAL);\n\n            //蓝牙服务\n            if (mFactoryTestMode == FactoryTest.FACTORY_TEST_LOW_LEVEL) {\n                Slog.i(TAG, \"No Bluetooth Service (factory test)\");\n            } else if (!context.getPackageManager().hasSystemFeature\n                    (PackageManager.FEATURE_BLUETOOTH)) {\n                Slog.i(TAG, \"No Bluetooth Service (Bluetooth Hardware Not Present)\");\n            } else {\n                mSystemServiceManager.startService(BluetoothService.class);\n            }\n\n            //网络列表监控服务\n            mSystemServiceManager.startService(NetworkWatchlistService.Lifecycle.class);\n\n            //输入法管理服务\n            if (InputMethodSystemProperty.MULTI_CLIENT_IME_ENABLED) {\n                mSystemServiceManager.startService(\n                        MultiClientInputMethodManagerService.Lifecycle.class);\n            } else {\n                mSystemServiceManager.startService(InputMethodManagerService.Lifecycle.class);\n            }\n            \n            //辅助功能\n            try {\n                mSystemServiceManager.startService(ACCESSIBILITY_MANAGER_SERVICE_CLASS);\n            } catch (Throwable e) {\n                reportWtf(\"starting Accessibility Manager\", e);\n            }\n            \n            //开发者选项中，OEM 解锁还记得吗\n            if (hasPdb || OemLockService.isHalPresent()) {\n                mSystemServiceManager.startService(OemLockService.class);\n            }\n\n            //状态栏    \n            try {\n                statusBar = new StatusBarManagerService(context);\n                ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);\n             } catch (Throwable e) {\n             }\n             \n\n\n            startContentCaptureService(context, t);\n            startAttentionService(context, t);\n            startRotationResolverService(context, t);\n            startSystemCaptionsManagerService(context, t);\n            //文字语音转换\n            startTextToSpeechManagerService(context, t);\n\n            //系统语音识别\n            mSystemServiceManager.startService(SPEECH_RECOGNITION_MANAGER_SERVICE_CLASS);\n            \n            //智慧空间？记得华为手机搜索页面是这个名称，有的叫‘智慧场景’\n            mSystemServiceManager.startService(SMARTSPACE_MANAGER_SERVICE_CLASS);\n\n            //网络\n            try {\n                networkManagement = NetworkManagementService.create(context);\n                ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);\n            } catch (Throwable e) {\n            }\n            \n            //字体\n            mSystemServiceManager.startService(new FontManagerService.Lifecycle(context, safeMode));\n\n            //Wi-Fi\n            if (context.getPackageManager().hasSystemFeature(\n                    PackageManager.FEATURE_WIFI)) {\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_SCANNING_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n            }\n            if (context.getPackageManager().hasSystemFeature(\n                    PackageManager.FEATURE_WIFI_RTT)) {\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_RTT_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n            }\n            if (context.getPackageManager().hasSystemFeature(\n                    PackageManager.FEATURE_WIFI_AWARE)) {\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_AWARE_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n            }\n            if (context.getPackageManager().hasSystemFeature(\n                    PackageManager.FEATURE_WIFI_DIRECT)) {\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_P2P_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n            }\n            \n            //VPN\n            try {\n                vpnManager = VpnManagerService.create(context);\n                ServiceManager.addService(Context.VPN_MANAGEMENT_SERVICE, vpnManager);\n            } catch (Throwable e) {\n            }\n            t.traceEnd();\n\n            t.traceBegin(\"StartVcnManagementService\");\n            try {\n                vcnManagement = VcnManagementService.create(context);\n                ServiceManager.addService(Context.VCN_MANAGEMENT_SERVICE, vcnManagement);\n            } catch (Throwable e) {\n                reportWtf(\"starting VCN Management Service\", e);\n            }\n            t.traceEnd();\n\n            //系统更新\n            try {\n                ServiceManager.addService(Context.SYSTEM_UPDATE_SERVICE,\n                        new SystemUpdateManagerService(context));\n            } catch (Throwable e) {\n            }\n            \n            //通知栏\n            mSystemServiceManager.startService(NotificationManagerService.class);\n            SystemNotificationChannels.removeDeprecated(context);\n            SystemNotificationChannels.createAll(context);\n            notification = INotificationManager.Stub.asInterface(\n                    ServiceManager.getService(Context.NOTIFICATION_SERVICE));\n\n            //壁纸\n            if (context.getResources().getBoolean(R.bool.config_enableWallpaperService)) {\n                mSystemServiceManager.startService(WALLPAPER_SERVICE_CLASS);\n            } else {\n            }\n\n            //音量\n            if (!isArc) {\n                mSystemServiceManager.startService(AudioService.Lifecycle.class);\n            } else {\n                String className = context.getResources()\n                        .getString(R.string.config_deviceSpecificAudioService);\n                try {\n                    mSystemServiceManager.startService(className + \"$Lifecycle\");\n                } catch (Throwable e) {\n                }\n            }\n            \n            //无限广播\n            if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_BROADCAST_RADIO)) {\n                t.traceBegin(\"StartBroadcastRadioService\");\n                mSystemServiceManager.startService(BroadcastRadioService.class);\n                t.traceEnd();\n            }\n        \n            //adb 调试\n            try {\n                mSystemServiceManager.startService(ADB_SERVICE_CLASS);\n            } catch (Throwable e) {\n                Slog.e(TAG, \"Failure starting AdbService\");\n            }\n            \n            //app 启动\n        mSystemServiceManager.startService(LauncherAppsService.class);\n            \n            //启动密码锁\n        mSystemServiceManager.startBootPhase(t, SystemService.PHASE_LOCK_SETTINGS_READY);\n        \n        //紧接着会有各项之前启动的服务调用 systemReady() 方法，指定服务准备完毕，即将进入下一个阶段\n        mPackageManagerService.systemReady();\n        mDisplayManagerService.systemReady(safeMode, mOnlyCore);\n        ... etc\n        \n        //等待服务准备完毕\n        mPackageManagerService.waitForAppDataPrepared();\n\n        //各项服务调用 systemRunning()、start() 方法开始运行服务自身\n        countryDetectorF.systemRunning();\n        networkTimeUpdaterF.systemRunning();\n        inputManagerF.systemRunning();\n        telephonyRegistryF.systemRunning();\n        mmsServiceF.systemRunning();\n        ... etc\n        \n        //启动系统界面服务\n        /*\n            1、通过 intent 指定特定的组件 context.startServiceAsUser(intent, UserHandle.SYSTEM);\n            2、startServiceAsUser 更上层的代码对我们看来像是调用 context.startService\n            3、指定的启动的服务组件 pm.getSystemUiServiceComponent() 是什么呢？\n                PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);\n                PackageManagerInternal 是一个抽象类，实现类是 PackageManagerInternalImpl\n                而 PackageManagerInternalImpl 是 PackageManager 的内部类，所属成员是 private final PackageManagerInternal mPmInternal;\n                而 getSystemUiServiceComponent 就是获取一个 string 资源com.android.internal.R.string.config_systemUIServiceComponent\n            4、资源文件所在路径：frameworks/base/core/res/res/values/config.xml【看这个文件有好多服务的 component】\n            5、资源内容 \n            <!-- SystemUi service component -->\n            <string name=\"config_systemUIServiceComponent\" translatable=\"false\">com.android.systemui/com.android.systemui.SystemUIService</string>\n        */\n        startSystemUi(context, windowManagerF);\n    }\n}\n```\n\n## 启动 SystemUI 服务\n\n```java\n//SystemServer.java\nprivate static void startSystemUi(Context context, WindowManagerService windowManager) {\n    PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);\n    Intent intent = new Intent();\n    /*\n        1、很明显这是一个服务 component: com.android.systemui/com.android.systemui.SystemUIService\n        2、此服务 Java 实现类所在路径是 /framework/base/packages/SystemUI/src/com/android/systemui/SystemUIService.java\n        3、这个类比较简洁，主要有三个成员分别负责不同的事情\n            mainHandle  ：主线程通讯，明知故问\n            dumpHandle  ：当前线程运行状态信息输出\n            logBufferFreezer   ：负责错误报告日志相关【错误报告-参考链接】\n            \n        4、system server 进程启动的 UI 服务：来到了 SystemUIApplication.java 这个类 ((SystemUIApplication) getApplication()).startServicesIfNeeded();\n            所有的 UI 服务包含哪些？服务名称列表哪里来？又是一个字符串数组资源 config_systemUIServiceComponents R.array.config_systemUIServiceComponentsPerUser\n            资源所在路径是 /framework/base/packages/SystemUI/res/value/config.xml\n            \n            4.1【服务列表参考下文】\n            4.2 通过反射创建服务 Class.forname(serviceName) 调用指定构造函数 newInstance\n            4.3 启动服务 mServices[i].start(); 接下来就不具体看了，以后具体服务具体分析\n            \n        5、SysteUIApplication 他是一个 Application，所以在此之前创建该实例是会先执行 onCreate 方法，\n            这里有调用一个重要的方法，对于非私有的非系统用户将执行 startSecondaryUserServicesIfNeeded();\n            获取的服务列表是 R.array.config_systemUIServiceComponentsPerUser 查看只有一个服务\n            \n            5.1 com.android.systemui.util.NotificationChannels\n            \n    intent.setComponent(pm.getSystemUiServiceComponent());\n    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);\n    context.startServiceAsUser(intent, UserHandle.SYSTEM);\n    windowManager.onSystemUiStarted();\n}\n```\n\n**system UI 服务列表**\n```xml\n//通知渠道服务（Android 低版本的通知创建是不需要设置通知渠道，后来高版本引入通知渠道并且必须设置，否则通知显示存在异常）\n<item>com.android.systemui.util.NotificationChannels</item> \n<item>com.android.systemui.keyguard.KeyguardViewMediator</item> \n//应用最近任务列表\n<item>com.android.systemui.recents.Recents</item> \n//音量\n<item>com.android.systemui.volume.VolumeUI</item> \n<item>com.android.systemui.stackdivider.Divider</item> \n//状态栏\n<item>com.android.systemui.statusbar.phone.StatusBar</item>\n<item>com.android.systemui.usb.StorageNotification</item> \n<item>com.android.systemui.power.PowerUI</item> \n<item>com.android.systemui.media.RingtonePlayer</item> \n//键盘\n<item>com.android.systemui.keyboard.KeyboardUI</item> \n<item>com.android.systemui.pip.PipUI</item> \n<item>com.android.systemui.shortcut.ShortcutKeyDispatcher</item> \n<item>@string/config_systemUIVendorServiceComponent</item> \n<item>com.android.systemui.util.leak.GarbageMonitor$Service</item> \n<item>com.android.systemui.LatencyTester</item> \n<item>com.android.systemui.globalactions.GlobalActionsComponent</item> <item>com.android.systemui.ScreenDecorations</item> \n<item>com.android.systemui.biometrics.AuthController</item> \n<item>com.android.systemui.SliceBroadcastRelayHandler</item> \n<item>com.android.systemui.SizeCompatModeActivityController</item> \n<item>com.android.systemui.statusbar.notification.InstantAppNotifier</item> \n<item>com.android.systemui.theme.ThemeOverlayController</item> \n<item>com.android.systemui.accessibility.WindowMagnification</item> \n<item>com.android.systemui.accessibility.SystemActions</item> \n<item>com.android.systemui.toast.ToastUI</item>\n```\n\nSystem Server 大概是启动完成，那么接下来又去哪里运行了呢？？？或者下一步我们继续看那个点比较合适呢？？？之前我们只是粗略浏览，中间忽略了很多，下一步的入口点可能要返回之前的代码重新阅读发现合适的切入点，SystemServer 也已经进入了‘永久的循环’，等待的就是接受外部‘信号’做相应处理、继续分发到具体执行。 \n\n那么，我们下周再见😊\n\n# 附加\n\n## 如何快速搜索\n**Android 项目中如何快速搜索某关键字？**\n\nAOSP 整个项目是很庞大的，不仅仅是包含 java 代码，就拿当前我下载的 `Android 11-r21 分支`来说，我是通过 git 下载在没有指定 `single-branch dept=1` 参数下，整个过程下载完毕占用大约 **430G** 存储空间。\n\n一开始我把源码存储在机械硬盘，通过 VSCode 打开机存在械硬盘的中的项目（整个 AOSP），比如搜索某个关键字，那个速度堪比龟速；后来把项目拷贝到笔记本 SSD 固态硬盘，搜索速度确实有了明显的提高，但整个项目搜索还是比较慢，不是十分满意；如果是单独打开某个模块——— framework 模块、framework base 模块等等，搜索速度还可以接受。但如果要找的代码根本不在当前模块，比如你打开 framework base 模块，但实际代码在 framework service 模块，这样是搜索不到结果的，因此还得把搜索范围扩大，引入的模块多了速度终是会变慢。\n\n搜索能够快速找到目标，是不是要借助一个东西————**索引**，如果有工具把 AOSP 整个项目预先建立索引，然后再打开项目搜索，下次搜索时无需重新创建索引，通过索引搜索不得要起飞。~~与搜索相关索引确实是个好东西。~~\n\n\n【**最后**】\n\n推荐使用已有的在线网站辅助搜索：[**基于 opengrok 的 AOSPXRef**](http://aospxref.com)\n\n以搜索 SystemUIService `config_systemUIServiceComponent`为例：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6d6877806a144cfb2a73a40aa569c01~tplv-k3u1fbpfcp-watermark.image?)\n\n【**最后的最后**】\n\nASOPXRef 现有的项目是较少的，也就是几个特定的版本，如果能满足自己的需求刚好，要是想看的源码版本不是已存在的建议还是自己通过 `opengrok` 引擎搭建一个服务。\n**Oracle opengrok：**[快速且可用的源代码搜索和交叉引用引擎](https://github.com/oracle/opengrok)\n\n\n\n## 参考链接\n- WTF：What a Terrible Failure —— Android 系统错误记录的一种\n- Memtrack：内存分析 https://zhuanlan.zhihu.com/p/168361476\n- Hidl：硬件抽象层，在较低 Android 版本可能还在使用 HAL （hardware abstract layer）https://zhuanlan.zhihu.com/p/28256541\n- Android Uri：https://www.cnblogs.com/bhlsheji/p/4246580.html\n- Android 错误报告：https://developer.android.com/studio/debug/bug-report ，https://source.android.com/source/read-bug-reports.html\n- Android 墓碑：https://source.android.com/devices/tech/debug\n\n","source":"_posts/undefined/Android系统启动systemserver进程.md","raw":"---\ntitle: Android 系统 Systemserver\ncatalog: true\ndate: 2022-09-29 22:57:13\nsubtitle: 启动服务、核心服务、其他服务\nheader-img: /img/220928/android_sysserver_bg.png\ntags: AOSP\nsticky: 6\ncategories:\n---\n\n\n\n\n**相关文件**\n\n- /framework/base/service/java/com/android/server/SystemServer.java\n- /framework/base/service/java/com/android/server/SystemServiceManager.java\n- /framework/base/service/java/com/android/server/WatchDog.java\n- /frameworks/base/core/java/com/android/server/SystemConfig.java\n- ... etc\n\n# 运行 System server\n\n经过前两篇的系统文章，已经完成了 init、zygote 进程的创建和初始化，即将启动系统各大服务，各项服务由服务管理者 `System server` 完成创建和启动，那么赶紧进入瞧瞧去 `/framework/base/service/java/com/android/server/SystemServer.java`\n\n```java\n//SystemServer.java\npublic final class SystemServer implements Dumpable {\n\n    //列举几个认为重要的成员\n    \n   //类似这样的服务名称不少于 50 个\n    private static final String WIFI_SERVICE_CLASS =\n            \"com.android.server.wifi.WifiService\";                  //Wi-Fi服务\n    private static final String WIFI_SCANNING_SERVICE_CLASS =\n            \"com.android.server.wifi.scanner.WifiScanningService\";  //Wi-Fi 扫描\n    private static final String ALARM_MANAGER_SERVICE_CLASS =\n            \"com.android.server.alarm.AlarmManagerService\";         //闹钟\n    ... etc\n    \n    //系统默认的对话框等主题\n    private static final int DEFAULT_SYSTEM_THEME =\n           com.android.internal.R.style.Theme_DeviceDefault_System;\n    \n    //很重要的一个主角，系统服务管理者\n    private SystemServiceManager mSystemServiceManager;\n\n    //具体服务实现类\n    private ActivityManagerService mActivityManagerService;  //Activity 管理\n    private PackageManagerService mPackageManagerService;    //安装包管理\n    private ContentResolver mContentResolver;                //内容解析——内容提供者数据解析\n    private DisplayManagerService mDisplayManagerService;    //设备显示相关\n\n    //看变量名就很清晰，application 错误报告信息记录\n    private static LinkedList<Pair<String, ApplicationErrorReport.CrashInfo>> sPendingWtfs;\n\n    //memtracker：memory tracker 【参考链接】\n    private static native void startMemtrackProxyService();\n\n    //Hidl Hardware Interface Definition Language 硬件抽象层语言【参考链接】\n    private static native void startHidlServices();\n\n    //调试模式下我们应用进程能够 dump head，dump file 是进程的内存镜像，把进程当前保存的状态保存到 dump 文件\n    //head dump 其实利用 Android studio 内置的工具（Android profile、Memory profile）也是可以生成的，直接帮你把文件可视化\n    //生成的文件保存路径 /data/system/heapdump/\n    private static native void initZygoteChildHeapProfiling();\n\n\n    //从主函数开始执行\n    public static void main(String[] args) {\n        new SystemServer().run();\n    }\n}\n```\n\n\n```java\n//SystemServer\npublic SystemServer() {\n    //记录性信息，不影响继续阅读吧，主要还是后面的 run 方法\n\n    mFactoryTestMode = FactoryTest.getMode();\n    mStartCount = SystemProperties.getInt(SYSPROP_START_COUNT, 0) + 1;\n    mRuntimeStartElapsedTime = SystemClock.elapsedRealtime();\n    mRuntimeStartUptime = SystemClock.uptimeMillis();\n    Process.setStartTimes(mRuntimeStartElapsedTime, mRuntimeStartUptime);\n\n    mRuntimeRestart = \"1\".equals(SystemProperties.get(\"sys.boot_completed\"));\n}\n```\n\n```java\n//SystemServer.java\nprivate void run() {\n\n    //通过设置系统属性，记录进程启动信息，启动次数等\n    SystemProperties.set(SYSPROP_START_COUNT,String.valueOf(mStartCount));\n    //如果当前时区无效将被设置为默认值 GMT —— 格林威治时间\n    SystemProperties.set(\"persist.sys.timezone\", \"GMT\");\n    //如果知道了语言，尝试通过语言设置地区属性\n    //【presist 前缀的系统属性是可写的，ro 前缀的系统属性是只读的】\n    if (!SystemProperties.get(\"persist.sys.language\").isEmpty()) {\n        final String languageTag = Locale.getDefault().toLanguageTag();\n        SystemProperties.set(\"persist.sys.locale\", languageTag); \n    }\n    \n    /*前面都是在设置一些系统属性，接下来将要真正启动服务*/\n    \n    //SystemClock.elapsedRealtime();  获取设备启动到当前的毫秒值\n    //清理一次内存，为 application 可以分配得到更多内存\n    VMRuntime.getRuntime().clearGrowthLimit();\n\n    //启动准备线程策略 THREAD_PRIORITY_FOREGROUND：应用程序不得更改线程优先级、不得更改线程数量，这些将由系统自动调整\n    android.os.Process.setThreadPriority(\n        android.os.Process.THREAD_PRIORITY_FOREGROUND); \n    //这是对前一条语句设置前台进程的限制 THREAD_PRIORITY_FOREGROUND，这里传入 false，如果此前设置的线程策略是‘后台进程组’将抛出异常\n    android.os.Process.setCanSelfBackground(false);\n\n    //Looper 是线程的消息循环机制，这里的线程自然是执行的主线程 Main-Thread，也就是 application 所在线程\n    //这里有一个经典八股文😊：自定义子线程 Looper 需要手动执行 prepareLooper，为什么我们在使用主线程的 Looper 前不需要先调用 prepare Looper？\n    //       A答：调用时肯定要调用的。这不是废话吗，我们不调用那肯定是‘别人’已经在我们使用前就调用了————那这个‘别人’其实就是 Android env 在创建时候调用了\n    //这个 application main loop 被系统缓存在 Looper.java 中（static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();）\n    //我们平时使用是通过： Looper.getMainLooper()\n    Looper.prepareMainLooper();\n    Looper.getMainLooper().setSlowLogThresholdMs(\n        SLOW_DISPATCH_THRESHOLD_MS, SLOW_DELIVERY_THRESHOLD_MS);\n\n    //创建系统上下文 mSystemContext 以及设置上述的默认主题\n    createSystemContext();\n    //继续\n    mSystemServiceManager = new SystemServiceManager(mSystemContext);\n\n    //启动读取系统全局配置的线程池，下面启动服务启动时候将会用到\n    //什么时候关闭线程池呢？if (phase == SystemService.PHASE_BOOT_COMPLETED){SystemServerInitThreadPool.shutdown();}\n    SystemServerInitThreadPool tp = SystemServerInitThreadPool.start();\n\n    //【重点、重点、重点】\n    //启动各种 Service\n    startBootstrapServices(t);  //启动服务\n    startCoreServices(t);       //核心服务\n    startOtherServices(t);      //其他服务\n    \n    //一个检测工具\n    StrictMode.initVmDefaults(null);\n    //进入一个无眠的世界默默`打工`，为‘人民’服务\n    /*\n        1、获得当前线程的消息队列 MessageQueue\n        2、在 for(;;) 循环中不断从消息队列取出消息，queue.next()，这是一个阻塞的过程\n        3、如果获取到可用的消息则进行分发 msg.target.dispatchMessage(msg)\n        4、消息分发之后进行回收或清理 msg.recycleUnChecked()\n    */\n    Looper.loop();\n}\n```\n\n# 启动 Bootstrap 服务\n```java\n//SystemServer.java\nprivate void startBootstrapServices(@NonNull TimingsTraceAndSlog t) {\n\n    //【1】watchdog 看门🐶？看着是有这个意思，大概就是监控服务\n    /*\n        1、它运行在一个单独的线程中 mThread = new Thread(this::run, \"watchdog\");\n        2、主要是检查一些线程的运行状态和调度情况，比如检查的线程有前台线程、IO、UI、main、display、animation、surface animation 等线程\n    */\n    final Watchdog watchdog = Watchdog.getInstance();\n    watchdog.start();\n\n    //【2】加载全局系统配置信息\n    /*\n        1、此线程池在 SystemServer 启动时候执行\n        2、在 SystemServer 启动完成之后关闭 SystemService.PHASE_BOOT_COMPLETE\n        3、调用 submit 方法真正执行系统全局配置读取的方法在哪里？线程池提交之后执行的当然是 run 方法。谁的 run 方法？SystemConfig::getInstance 又是啥，在哪里？【不解，知者欢迎评论】\n        4、SystemConfig::getInstance：Java 能够使用双引号访问静态方法，在此之前我只知道 cpp 是可以这样的，后来查了一下似乎是 lambada 的语法糖😺不知者无罪\n        5、readPublicNativeLibrariesList();//String[] dirs = {\"/system/etc\", \"/system_ext/etc\", \"/product/etc\",\"vendor/etc\"};读取此目录下 public.libraries- 开头，.txt 结尾的配置文件\n        6、readAllPermissions();//解析根目录、Vendor目录等 etc/sysconfig、etc/permission 下 XML 权限文件\n    */\n    final String TAG_SYSTEM_CONFIG = \"ReadingSystemConfig\";\n    SystemServerInitThreadPool.submit(SystemConfig::getInstance, TAG_SYSTEM_CONFIG);\n\n    //【3】公共服务\n    /*\n        1、将来 ActivityManagerService、PackageManagerService ...etc 会使用\n        2、调用 addService 一看流程最终到了 IServiceManager.cpp 藏得这么深，真是服了这个老 six，sp<AidlServiceManager> mTheRealServiceManager;   \n    */\n    PlatformCompat platformCompat = new PlatformCompat(mSystemContext);\n    ServiceManager.addService(Context.PLATFORM_COMPAT_SERVICE, platformCompat);\n    ServiceManager.addService(Context.PLATFORM_COMPAT_NATIVE_SERVICE,\n        new PlatformCompatNative(platformCompat));\n\n    //【4】文件完整性校验相关服务\n    mSystemServiceManager.startService(FileIntegrityService.class);\n\n    //【5】应用程序安装相关服务\n    Installer installer = mSystemServiceManager.startService(Installer.class);\n\n    //【6】设备标识访问策略服务\n    /*\n        1、获取手机序列号：getSerial()，系统属性对应键 ro.serialn。调用时\nelephonyPermissions.checkCallingOrSelfReadDeviceIdentifiers\n        2、指定包名获取序列号 getSerialForPackage，其中再根据包名 + 当前用户ID获取调用此类的 UID，所以猜测还有有不少限制的，比如限制非 root 用户、限制非系统应用\n    */\n    SystemServiceManager.startService(DeviceIdentifiersPolicyService.class);\n    \n    //【7】URI 授权管理服务 （关于 Uri 可参考链接）\n    mSystemServiceManager.startService(UriGrantsManagerService.Lifecycle.class);\n    \n    //【8】电池相关服务\n    /*\n        1、电量🔋触发器BatteryTrigger mBatteryTrigger，通过广播监听电量变化，当电量下降1%将会接收到广播，似乎只做一件事：就是更新最新电量信息\n        2、IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED); 通过 context 注册广播\n    */\n    mSystemServiceManager.startService(PowerStatsService.class);\n\n    //【9】内存分析服务  （native 调用）\n    startMemtrackProxyService();\n    \n    //【10】AMS 服务（终于看到一个比较常见的🐶）\n    /*\n        1、高版本任务栈管理类似乎被分离出来了，由 ActivityTaskManagerService 实现，内容太多，下次一定看看\n    */\n    ActivityTaskManagerService atm = mSystemServiceManager.startService(\n        ActivityTaskManagerService.Lifecycle.class).getService();\n    mActivityManagerService = ActivityManagerService.Lifecycle.startService(\n        mSystemServiceManager, atm);\n\n    //【11】数据加载\n    mDataLoaderManagerService = mSystemServiceManager.startService(\n        DataLoaderManagerService.class);\n        \n    //【12】电源管理服务，之前那个时电池状态管理（只做了一件事：监听电量变化）\n    mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);\n\n    //【13】系统恢复服务，我们刷机常见的 Recover 模式\n    mSystemServiceManager.startService(RecoverySystemService.Lifecycle.class);\n\n    //【14】安装包管理服务，这是个大类，三万行呢，下次一定看看\n    mPackageManagerService = PackageManagerService.main(mSystemContext, installer,\n        domainVerificationService, mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF,\n        mOnlyCore);\n        \n    //【15】传感器服务\n    mSystemServiceManager.startService(new SensorPrivacyService(mSystemContext));\n    mSystemServiceManager.startService(SensorService.class);\n}\n```\n启动服务到这里就结束啦，只是部分列举，并不完整，服务是如何运行的？具体都在做了些什么？等等！！！这些执行细节希望在之后的系列文章进一步深入（内容实在是太多了😭）\n\n# 启动 Core 服务\n```java\n//SystemServer.java\nprivate void startCoreServices(@NonNull TimingsTraceAndSlog t) {\n    //【1】主要负责读取系统配置信息\n    mSystemServiceManager.startService(SystemConfigService.class);\n    \n    //【2】电量跟踪\n    mSystemServiceManager.startService(BatteryService.class);\n    \n    //【3】应用使用状态跟踪\n    mSystemServiceManager.startService(UsageStatsService.class);\n    \n    //【4】监控设备是否充电、屏幕是否亮起\n    //（通过高优先级的广播监听📢，指定特定的 intentfilter——ACTION_SCREEN_ON/ACTION_SCREEN_OFF/ACTION_BATTERY_CHANGED）\n    mSystemServiceManager.startService(CachedDeviceStateService.class);\n    \n    //【5】应用程序回滚？？？\n    mSystemServiceManager.startService(ROLLBACK_MANAGER_SERVICE_CLASS);\n\n    //【6】tombstone 墓碑，记录进程被杀死前的一些信息，比如调用栈、内存使用情况、CPU 使用情况、backtrace 等等，主要是监控和记录 native 崩溃信息（获取这个崩溃日志需要 root 权限）\n    mSystemServiceManager.startService(NativeTombstoneManagerService.class);\n    \n    //【7】Android 错误报告生成，应用崩溃时候查看这个报告还是很有用的（前提是你能够看懂报告）\n    // 可以同 adb bugreport 获取错误报告（Android 版本之间获取方式稍有区别，根据 adb bugreport 提示操作即可）\n    mSystemServiceManager.startService(BugreportManagerService.class);\n\n    //【8】主要还是监视和收集 GPU 信息\n    mSystemServiceManager.startService(GpuService.class);    \n}\n```\n\n核心服务不是很多，主要是信息记录相关，必不可少、确实很是关键。\n\n# 启动 Other 服务\n```java\n//SystemServer.java\n private void startOtherServices(@NonNull TimingsTraceAndSlog t) {\n\n        try {\n            //闹钟服务⏰\n            mSystemServiceManager.startService(ALARM_MANAGER_SERVICE_CLASS);\n            //WMS 服务\n            mSystemServiceManager.startBootPhase(t, SystemService.PHASE_WAIT_FOR_SENSOR_SERVICE);\n            wm = WindowManagerService.main(context, inputManager, !mFirstBoot, mOnlyCore,\n                    new PhoneWindowManager(), mActivityManagerService.mActivityTaskManager);\n            ServiceManager.addService(Context.WINDOW_SERVICE, wm, /* allowIsolated= */ false,\n                    DUMP_FLAG_PRIORITY_CRITICAL | DUMP_FLAG_PROTO);\n            ServiceManager.addService(Context.INPUT_SERVICE, inputManager,\n                    /* allowIsolated= */ false, DUMP_FLAG_PRIORITY_CRITICAL);\n\n            //蓝牙服务\n            if (mFactoryTestMode == FactoryTest.FACTORY_TEST_LOW_LEVEL) {\n                Slog.i(TAG, \"No Bluetooth Service (factory test)\");\n            } else if (!context.getPackageManager().hasSystemFeature\n                    (PackageManager.FEATURE_BLUETOOTH)) {\n                Slog.i(TAG, \"No Bluetooth Service (Bluetooth Hardware Not Present)\");\n            } else {\n                mSystemServiceManager.startService(BluetoothService.class);\n            }\n\n            //网络列表监控服务\n            mSystemServiceManager.startService(NetworkWatchlistService.Lifecycle.class);\n\n            //输入法管理服务\n            if (InputMethodSystemProperty.MULTI_CLIENT_IME_ENABLED) {\n                mSystemServiceManager.startService(\n                        MultiClientInputMethodManagerService.Lifecycle.class);\n            } else {\n                mSystemServiceManager.startService(InputMethodManagerService.Lifecycle.class);\n            }\n            \n            //辅助功能\n            try {\n                mSystemServiceManager.startService(ACCESSIBILITY_MANAGER_SERVICE_CLASS);\n            } catch (Throwable e) {\n                reportWtf(\"starting Accessibility Manager\", e);\n            }\n            \n            //开发者选项中，OEM 解锁还记得吗\n            if (hasPdb || OemLockService.isHalPresent()) {\n                mSystemServiceManager.startService(OemLockService.class);\n            }\n\n            //状态栏    \n            try {\n                statusBar = new StatusBarManagerService(context);\n                ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);\n             } catch (Throwable e) {\n             }\n             \n\n\n            startContentCaptureService(context, t);\n            startAttentionService(context, t);\n            startRotationResolverService(context, t);\n            startSystemCaptionsManagerService(context, t);\n            //文字语音转换\n            startTextToSpeechManagerService(context, t);\n\n            //系统语音识别\n            mSystemServiceManager.startService(SPEECH_RECOGNITION_MANAGER_SERVICE_CLASS);\n            \n            //智慧空间？记得华为手机搜索页面是这个名称，有的叫‘智慧场景’\n            mSystemServiceManager.startService(SMARTSPACE_MANAGER_SERVICE_CLASS);\n\n            //网络\n            try {\n                networkManagement = NetworkManagementService.create(context);\n                ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);\n            } catch (Throwable e) {\n            }\n            \n            //字体\n            mSystemServiceManager.startService(new FontManagerService.Lifecycle(context, safeMode));\n\n            //Wi-Fi\n            if (context.getPackageManager().hasSystemFeature(\n                    PackageManager.FEATURE_WIFI)) {\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_SCANNING_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n            }\n            if (context.getPackageManager().hasSystemFeature(\n                    PackageManager.FEATURE_WIFI_RTT)) {\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_RTT_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n            }\n            if (context.getPackageManager().hasSystemFeature(\n                    PackageManager.FEATURE_WIFI_AWARE)) {\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_AWARE_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n            }\n            if (context.getPackageManager().hasSystemFeature(\n                    PackageManager.FEATURE_WIFI_DIRECT)) {\n                mSystemServiceManager.startServiceFromJar(\n                        WIFI_P2P_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);\n            }\n            \n            //VPN\n            try {\n                vpnManager = VpnManagerService.create(context);\n                ServiceManager.addService(Context.VPN_MANAGEMENT_SERVICE, vpnManager);\n            } catch (Throwable e) {\n            }\n            t.traceEnd();\n\n            t.traceBegin(\"StartVcnManagementService\");\n            try {\n                vcnManagement = VcnManagementService.create(context);\n                ServiceManager.addService(Context.VCN_MANAGEMENT_SERVICE, vcnManagement);\n            } catch (Throwable e) {\n                reportWtf(\"starting VCN Management Service\", e);\n            }\n            t.traceEnd();\n\n            //系统更新\n            try {\n                ServiceManager.addService(Context.SYSTEM_UPDATE_SERVICE,\n                        new SystemUpdateManagerService(context));\n            } catch (Throwable e) {\n            }\n            \n            //通知栏\n            mSystemServiceManager.startService(NotificationManagerService.class);\n            SystemNotificationChannels.removeDeprecated(context);\n            SystemNotificationChannels.createAll(context);\n            notification = INotificationManager.Stub.asInterface(\n                    ServiceManager.getService(Context.NOTIFICATION_SERVICE));\n\n            //壁纸\n            if (context.getResources().getBoolean(R.bool.config_enableWallpaperService)) {\n                mSystemServiceManager.startService(WALLPAPER_SERVICE_CLASS);\n            } else {\n            }\n\n            //音量\n            if (!isArc) {\n                mSystemServiceManager.startService(AudioService.Lifecycle.class);\n            } else {\n                String className = context.getResources()\n                        .getString(R.string.config_deviceSpecificAudioService);\n                try {\n                    mSystemServiceManager.startService(className + \"$Lifecycle\");\n                } catch (Throwable e) {\n                }\n            }\n            \n            //无限广播\n            if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_BROADCAST_RADIO)) {\n                t.traceBegin(\"StartBroadcastRadioService\");\n                mSystemServiceManager.startService(BroadcastRadioService.class);\n                t.traceEnd();\n            }\n        \n            //adb 调试\n            try {\n                mSystemServiceManager.startService(ADB_SERVICE_CLASS);\n            } catch (Throwable e) {\n                Slog.e(TAG, \"Failure starting AdbService\");\n            }\n            \n            //app 启动\n        mSystemServiceManager.startService(LauncherAppsService.class);\n            \n            //启动密码锁\n        mSystemServiceManager.startBootPhase(t, SystemService.PHASE_LOCK_SETTINGS_READY);\n        \n        //紧接着会有各项之前启动的服务调用 systemReady() 方法，指定服务准备完毕，即将进入下一个阶段\n        mPackageManagerService.systemReady();\n        mDisplayManagerService.systemReady(safeMode, mOnlyCore);\n        ... etc\n        \n        //等待服务准备完毕\n        mPackageManagerService.waitForAppDataPrepared();\n\n        //各项服务调用 systemRunning()、start() 方法开始运行服务自身\n        countryDetectorF.systemRunning();\n        networkTimeUpdaterF.systemRunning();\n        inputManagerF.systemRunning();\n        telephonyRegistryF.systemRunning();\n        mmsServiceF.systemRunning();\n        ... etc\n        \n        //启动系统界面服务\n        /*\n            1、通过 intent 指定特定的组件 context.startServiceAsUser(intent, UserHandle.SYSTEM);\n            2、startServiceAsUser 更上层的代码对我们看来像是调用 context.startService\n            3、指定的启动的服务组件 pm.getSystemUiServiceComponent() 是什么呢？\n                PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);\n                PackageManagerInternal 是一个抽象类，实现类是 PackageManagerInternalImpl\n                而 PackageManagerInternalImpl 是 PackageManager 的内部类，所属成员是 private final PackageManagerInternal mPmInternal;\n                而 getSystemUiServiceComponent 就是获取一个 string 资源com.android.internal.R.string.config_systemUIServiceComponent\n            4、资源文件所在路径：frameworks/base/core/res/res/values/config.xml【看这个文件有好多服务的 component】\n            5、资源内容 \n            <!-- SystemUi service component -->\n            <string name=\"config_systemUIServiceComponent\" translatable=\"false\">com.android.systemui/com.android.systemui.SystemUIService</string>\n        */\n        startSystemUi(context, windowManagerF);\n    }\n}\n```\n\n## 启动 SystemUI 服务\n\n```java\n//SystemServer.java\nprivate static void startSystemUi(Context context, WindowManagerService windowManager) {\n    PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);\n    Intent intent = new Intent();\n    /*\n        1、很明显这是一个服务 component: com.android.systemui/com.android.systemui.SystemUIService\n        2、此服务 Java 实现类所在路径是 /framework/base/packages/SystemUI/src/com/android/systemui/SystemUIService.java\n        3、这个类比较简洁，主要有三个成员分别负责不同的事情\n            mainHandle  ：主线程通讯，明知故问\n            dumpHandle  ：当前线程运行状态信息输出\n            logBufferFreezer   ：负责错误报告日志相关【错误报告-参考链接】\n            \n        4、system server 进程启动的 UI 服务：来到了 SystemUIApplication.java 这个类 ((SystemUIApplication) getApplication()).startServicesIfNeeded();\n            所有的 UI 服务包含哪些？服务名称列表哪里来？又是一个字符串数组资源 config_systemUIServiceComponents R.array.config_systemUIServiceComponentsPerUser\n            资源所在路径是 /framework/base/packages/SystemUI/res/value/config.xml\n            \n            4.1【服务列表参考下文】\n            4.2 通过反射创建服务 Class.forname(serviceName) 调用指定构造函数 newInstance\n            4.3 启动服务 mServices[i].start(); 接下来就不具体看了，以后具体服务具体分析\n            \n        5、SysteUIApplication 他是一个 Application，所以在此之前创建该实例是会先执行 onCreate 方法，\n            这里有调用一个重要的方法，对于非私有的非系统用户将执行 startSecondaryUserServicesIfNeeded();\n            获取的服务列表是 R.array.config_systemUIServiceComponentsPerUser 查看只有一个服务\n            \n            5.1 com.android.systemui.util.NotificationChannels\n            \n    intent.setComponent(pm.getSystemUiServiceComponent());\n    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);\n    context.startServiceAsUser(intent, UserHandle.SYSTEM);\n    windowManager.onSystemUiStarted();\n}\n```\n\n**system UI 服务列表**\n```xml\n//通知渠道服务（Android 低版本的通知创建是不需要设置通知渠道，后来高版本引入通知渠道并且必须设置，否则通知显示存在异常）\n<item>com.android.systemui.util.NotificationChannels</item> \n<item>com.android.systemui.keyguard.KeyguardViewMediator</item> \n//应用最近任务列表\n<item>com.android.systemui.recents.Recents</item> \n//音量\n<item>com.android.systemui.volume.VolumeUI</item> \n<item>com.android.systemui.stackdivider.Divider</item> \n//状态栏\n<item>com.android.systemui.statusbar.phone.StatusBar</item>\n<item>com.android.systemui.usb.StorageNotification</item> \n<item>com.android.systemui.power.PowerUI</item> \n<item>com.android.systemui.media.RingtonePlayer</item> \n//键盘\n<item>com.android.systemui.keyboard.KeyboardUI</item> \n<item>com.android.systemui.pip.PipUI</item> \n<item>com.android.systemui.shortcut.ShortcutKeyDispatcher</item> \n<item>@string/config_systemUIVendorServiceComponent</item> \n<item>com.android.systemui.util.leak.GarbageMonitor$Service</item> \n<item>com.android.systemui.LatencyTester</item> \n<item>com.android.systemui.globalactions.GlobalActionsComponent</item> <item>com.android.systemui.ScreenDecorations</item> \n<item>com.android.systemui.biometrics.AuthController</item> \n<item>com.android.systemui.SliceBroadcastRelayHandler</item> \n<item>com.android.systemui.SizeCompatModeActivityController</item> \n<item>com.android.systemui.statusbar.notification.InstantAppNotifier</item> \n<item>com.android.systemui.theme.ThemeOverlayController</item> \n<item>com.android.systemui.accessibility.WindowMagnification</item> \n<item>com.android.systemui.accessibility.SystemActions</item> \n<item>com.android.systemui.toast.ToastUI</item>\n```\n\nSystem Server 大概是启动完成，那么接下来又去哪里运行了呢？？？或者下一步我们继续看那个点比较合适呢？？？之前我们只是粗略浏览，中间忽略了很多，下一步的入口点可能要返回之前的代码重新阅读发现合适的切入点，SystemServer 也已经进入了‘永久的循环’，等待的就是接受外部‘信号’做相应处理、继续分发到具体执行。 \n\n那么，我们下周再见😊\n\n# 附加\n\n## 如何快速搜索\n**Android 项目中如何快速搜索某关键字？**\n\nAOSP 整个项目是很庞大的，不仅仅是包含 java 代码，就拿当前我下载的 `Android 11-r21 分支`来说，我是通过 git 下载在没有指定 `single-branch dept=1` 参数下，整个过程下载完毕占用大约 **430G** 存储空间。\n\n一开始我把源码存储在机械硬盘，通过 VSCode 打开机存在械硬盘的中的项目（整个 AOSP），比如搜索某个关键字，那个速度堪比龟速；后来把项目拷贝到笔记本 SSD 固态硬盘，搜索速度确实有了明显的提高，但整个项目搜索还是比较慢，不是十分满意；如果是单独打开某个模块——— framework 模块、framework base 模块等等，搜索速度还可以接受。但如果要找的代码根本不在当前模块，比如你打开 framework base 模块，但实际代码在 framework service 模块，这样是搜索不到结果的，因此还得把搜索范围扩大，引入的模块多了速度终是会变慢。\n\n搜索能够快速找到目标，是不是要借助一个东西————**索引**，如果有工具把 AOSP 整个项目预先建立索引，然后再打开项目搜索，下次搜索时无需重新创建索引，通过索引搜索不得要起飞。~~与搜索相关索引确实是个好东西。~~\n\n\n【**最后**】\n\n推荐使用已有的在线网站辅助搜索：[**基于 opengrok 的 AOSPXRef**](http://aospxref.com)\n\n以搜索 SystemUIService `config_systemUIServiceComponent`为例：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6d6877806a144cfb2a73a40aa569c01~tplv-k3u1fbpfcp-watermark.image?)\n\n【**最后的最后**】\n\nASOPXRef 现有的项目是较少的，也就是几个特定的版本，如果能满足自己的需求刚好，要是想看的源码版本不是已存在的建议还是自己通过 `opengrok` 引擎搭建一个服务。\n**Oracle opengrok：**[快速且可用的源代码搜索和交叉引用引擎](https://github.com/oracle/opengrok)\n\n\n\n## 参考链接\n- WTF：What a Terrible Failure —— Android 系统错误记录的一种\n- Memtrack：内存分析 https://zhuanlan.zhihu.com/p/168361476\n- Hidl：硬件抽象层，在较低 Android 版本可能还在使用 HAL （hardware abstract layer）https://zhuanlan.zhihu.com/p/28256541\n- Android Uri：https://www.cnblogs.com/bhlsheji/p/4246580.html\n- Android 错误报告：https://developer.android.com/studio/debug/bug-report ，https://source.android.com/source/read-bug-reports.html\n- Android 墓碑：https://source.android.com/devices/tech/debug\n\n","slug":"Android系统启动systemserver进程","published":1,"lang":"undefined","updated":"2022-09-29T14:57:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q7000d7tqp9iezefwo","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><strong>相关文件</strong></p>\n<ul>\n<li>/framework/base/service/java/com/android/server/SystemServer.java</li>\n<li>/framework/base/service/java/com/android/server/SystemServiceManager.java</li>\n<li>/framework/base/service/java/com/android/server/WatchDog.java</li>\n<li>/frameworks/base/core/java/com/android/server/SystemConfig.java</li>\n<li>… etc</li>\n</ul>\n<h1>运行 System server</h1>\n<p>经过前两篇的系统文章，已经完成了 init、zygote 进程的创建和初始化，即将启动系统各大服务，各项服务由服务管理者 <code>System server</code> 完成创建和启动，那么赶紧进入瞧瞧去 <code>/framework/base/service/java/com/android/server/SystemServer.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemServer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dumpable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//列举几个认为重要的成员</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"comment\">//类似这样的服务名称不少于 50 个</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String WIFI_SERVICE_CLASS =</span><br><span class=\"line\">            <span class=\"string\">&quot;com.android.server.wifi.WifiService&quot;</span>;                  <span class=\"comment\">//Wi-Fi服务</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String WIFI_SCANNING_SERVICE_CLASS =</span><br><span class=\"line\">            <span class=\"string\">&quot;com.android.server.wifi.scanner.WifiScanningService&quot;</span>;  <span class=\"comment\">//Wi-Fi 扫描</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ALARM_MANAGER_SERVICE_CLASS =</span><br><span class=\"line\">            <span class=\"string\">&quot;com.android.server.alarm.AlarmManagerService&quot;</span>;         <span class=\"comment\">//闹钟</span></span><br><span class=\"line\">    ... etc</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//系统默认的对话框等主题</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_SYSTEM_THEME =</span><br><span class=\"line\">           com.android.internal.R.style.Theme_DeviceDefault_System;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//很重要的一个主角，系统服务管理者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SystemServiceManager mSystemServiceManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//具体服务实现类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ActivityManagerService mActivityManagerService;  <span class=\"comment\">//Activity 管理</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PackageManagerService mPackageManagerService;    <span class=\"comment\">//安装包管理</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ContentResolver mContentResolver;                <span class=\"comment\">//内容解析——内容提供者数据解析</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DisplayManagerService mDisplayManagerService;    <span class=\"comment\">//设备显示相关</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//看变量名就很清晰，application 错误报告信息记录</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LinkedList&lt;Pair&lt;String, ApplicationErrorReport.CrashInfo&gt;&gt; sPendingWtfs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//memtracker：memory tracker 【参考链接】</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">startMemtrackProxyService</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Hidl Hardware Interface Definition Language 硬件抽象层语言【参考链接】</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">startHidlServices</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调试模式下我们应用进程能够 dump head，dump file 是进程的内存镜像，把进程当前保存的状态保存到 dump 文件</span></span><br><span class=\"line\">    <span class=\"comment\">//head dump 其实利用 Android studio 内置的工具（Android profile、Memory profile）也是可以生成的，直接帮你把文件可视化</span></span><br><span class=\"line\">    <span class=\"comment\">//生成的文件保存路径 /data/system/heapdump/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">initZygoteChildHeapProfiling</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从主函数开始执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SystemServer().run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SystemServer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//记录性信息，不影响继续阅读吧，主要还是后面的 run 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    mFactoryTestMode = FactoryTest.getMode();</span><br><span class=\"line\">    mStartCount = SystemProperties.getInt(SYSPROP_START_COUNT, <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    mRuntimeStartElapsedTime = SystemClock.elapsedRealtime();</span><br><span class=\"line\">    mRuntimeStartUptime = SystemClock.uptimeMillis();</span><br><span class=\"line\">    Process.setStartTimes(mRuntimeStartElapsedTime, mRuntimeStartUptime);</span><br><span class=\"line\"></span><br><span class=\"line\">    mRuntimeRestart = <span class=\"string\">&quot;1&quot;</span>.equals(SystemProperties.get(<span class=\"string\">&quot;sys.boot_completed&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过设置系统属性，记录进程启动信息，启动次数等</span></span><br><span class=\"line\">    SystemProperties.set(SYSPROP_START_COUNT,String.valueOf(mStartCount));</span><br><span class=\"line\">    <span class=\"comment\">//如果当前时区无效将被设置为默认值 GMT —— 格林威治时间</span></span><br><span class=\"line\">    SystemProperties.set(<span class=\"string\">&quot;persist.sys.timezone&quot;</span>, <span class=\"string\">&quot;GMT&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//如果知道了语言，尝试通过语言设置地区属性</span></span><br><span class=\"line\">    <span class=\"comment\">//【presist 前缀的系统属性是可写的，ro 前缀的系统属性是只读的】</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!SystemProperties.get(<span class=\"string\">&quot;persist.sys.language&quot;</span>).isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String languageTag = Locale.getDefault().toLanguageTag();</span><br><span class=\"line\">        SystemProperties.set(<span class=\"string\">&quot;persist.sys.locale&quot;</span>, languageTag); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*前面都是在设置一些系统属性，接下来将要真正启动服务*/</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//SystemClock.elapsedRealtime();  获取设备启动到当前的毫秒值</span></span><br><span class=\"line\">    <span class=\"comment\">//清理一次内存，为 application 可以分配得到更多内存</span></span><br><span class=\"line\">    VMRuntime.getRuntime().clearGrowthLimit();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动准备线程策略 THREAD_PRIORITY_FOREGROUND：应用程序不得更改线程优先级、不得更改线程数量，这些将由系统自动调整</span></span><br><span class=\"line\">    android.os.Process.setThreadPriority(</span><br><span class=\"line\">        android.os.Process.THREAD_PRIORITY_FOREGROUND); </span><br><span class=\"line\">    <span class=\"comment\">//这是对前一条语句设置前台进程的限制 THREAD_PRIORITY_FOREGROUND，这里传入 false，如果此前设置的线程策略是‘后台进程组’将抛出异常</span></span><br><span class=\"line\">    android.os.Process.setCanSelfBackground(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Looper 是线程的消息循环机制，这里的线程自然是执行的主线程 Main-Thread，也就是 application 所在线程</span></span><br><span class=\"line\">    <span class=\"comment\">//这里有一个经典八股文😊：自定义子线程 Looper 需要手动执行 prepareLooper，为什么我们在使用主线程的 Looper 前不需要先调用 prepare Looper？</span></span><br><span class=\"line\">    <span class=\"comment\">//       A答：调用时肯定要调用的。这不是废话吗，我们不调用那肯定是‘别人’已经在我们使用前就调用了————那这个‘别人’其实就是 Android env 在创建时候调用了</span></span><br><span class=\"line\">    <span class=\"comment\">//这个 application main loop 被系统缓存在 Looper.java 中（static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;();）</span></span><br><span class=\"line\">    <span class=\"comment\">//我们平时使用是通过： Looper.getMainLooper()</span></span><br><span class=\"line\">    Looper.prepareMainLooper();</span><br><span class=\"line\">    Looper.getMainLooper().setSlowLogThresholdMs(</span><br><span class=\"line\">        SLOW_DISPATCH_THRESHOLD_MS, SLOW_DELIVERY_THRESHOLD_MS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建系统上下文 mSystemContext 以及设置上述的默认主题</span></span><br><span class=\"line\">    createSystemContext();</span><br><span class=\"line\">    <span class=\"comment\">//继续</span></span><br><span class=\"line\">    mSystemServiceManager = <span class=\"keyword\">new</span> SystemServiceManager(mSystemContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动读取系统全局配置的线程池，下面启动服务启动时候将会用到</span></span><br><span class=\"line\">    <span class=\"comment\">//什么时候关闭线程池呢？if (phase == SystemService.PHASE_BOOT_COMPLETED)&#123;SystemServerInitThreadPool.shutdown();&#125;</span></span><br><span class=\"line\">    SystemServerInitThreadPool tp = SystemServerInitThreadPool.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【重点、重点、重点】</span></span><br><span class=\"line\">    <span class=\"comment\">//启动各种 Service</span></span><br><span class=\"line\">    startBootstrapServices(t);  <span class=\"comment\">//启动服务</span></span><br><span class=\"line\">    startCoreServices(t);       <span class=\"comment\">//核心服务</span></span><br><span class=\"line\">    startOtherServices(t);      <span class=\"comment\">//其他服务</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//一个检测工具</span></span><br><span class=\"line\">    StrictMode.initVmDefaults(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//进入一个无眠的世界默默`打工`，为‘人民’服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、获得当前线程的消息队列 MessageQueue</span></span><br><span class=\"line\"><span class=\"comment\">        2、在 for(;;) 循环中不断从消息队列取出消息，queue.next()，这是一个阻塞的过程</span></span><br><span class=\"line\"><span class=\"comment\">        3、如果获取到可用的消息则进行分发 msg.target.dispatchMessage(msg)</span></span><br><span class=\"line\"><span class=\"comment\">        4、消息分发之后进行回收或清理 msg.recycleUnChecked()</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    Looper.loop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>启动 Bootstrap 服务</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startBootstrapServices</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> TimingsTraceAndSlog t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【1】watchdog 看门🐶？看着是有这个意思，大概就是监控服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、它运行在一个单独的线程中 mThread = new Thread(this::run, &quot;watchdog&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        2、主要是检查一些线程的运行状态和调度情况，比如检查的线程有前台线程、IO、UI、main、display、animation、surface animation 等线程</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Watchdog watchdog = Watchdog.getInstance();</span><br><span class=\"line\">    watchdog.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【2】加载全局系统配置信息</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、此线程池在 SystemServer 启动时候执行</span></span><br><span class=\"line\"><span class=\"comment\">        2、在 SystemServer 启动完成之后关闭 SystemService.PHASE_BOOT_COMPLETE</span></span><br><span class=\"line\"><span class=\"comment\">        3、调用 submit 方法真正执行系统全局配置读取的方法在哪里？线程池提交之后执行的当然是 run 方法。谁的 run 方法？SystemConfig::getInstance 又是啥，在哪里？【不解，知者欢迎评论】</span></span><br><span class=\"line\"><span class=\"comment\">        4、SystemConfig::getInstance：Java 能够使用双引号访问静态方法，在此之前我只知道 cpp 是可以这样的，后来查了一下似乎是 lambada 的语法糖😺不知者无罪</span></span><br><span class=\"line\"><span class=\"comment\">        5、readPublicNativeLibrariesList();//String[] dirs = &#123;&quot;/system/etc&quot;, &quot;/system_ext/etc&quot;, &quot;/product/etc&quot;,&quot;vendor/etc&quot;&#125;;读取此目录下 public.libraries- 开头，.txt 结尾的配置文件</span></span><br><span class=\"line\"><span class=\"comment\">        6、readAllPermissions();//解析根目录、Vendor目录等 etc/sysconfig、etc/permission 下 XML 权限文件</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String TAG_SYSTEM_CONFIG = <span class=\"string\">&quot;ReadingSystemConfig&quot;</span>;</span><br><span class=\"line\">    SystemServerInitThreadPool.submit(SystemConfig::getInstance, TAG_SYSTEM_CONFIG);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【3】公共服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、将来 ActivityManagerService、PackageManagerService ...etc 会使用</span></span><br><span class=\"line\"><span class=\"comment\">        2、调用 addService 一看流程最终到了 IServiceManager.cpp 藏得这么深，真是服了这个老 six，sp&lt;AidlServiceManager&gt; mTheRealServiceManager;   </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    PlatformCompat platformCompat = <span class=\"keyword\">new</span> PlatformCompat(mSystemContext);</span><br><span class=\"line\">    ServiceManager.addService(Context.PLATFORM_COMPAT_SERVICE, platformCompat);</span><br><span class=\"line\">    ServiceManager.addService(Context.PLATFORM_COMPAT_NATIVE_SERVICE,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PlatformCompatNative(platformCompat));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【4】文件完整性校验相关服务</span></span><br><span class=\"line\">    mSystemServiceManager.startService(FileIntegrityService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【5】应用程序安装相关服务</span></span><br><span class=\"line\">    Installer installer = mSystemServiceManager.startService(Installer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【6】设备标识访问策略服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、获取手机序列号：getSerial()，系统属性对应键 ro.serialn。调用时</span></span><br><span class=\"line\"><span class=\"comment\">elephonyPermissions.checkCallingOrSelfReadDeviceIdentifiers</span></span><br><span class=\"line\"><span class=\"comment\">        2、指定包名获取序列号 getSerialForPackage，其中再根据包名 + 当前用户ID获取调用此类的 UID，所以猜测还有有不少限制的，比如限制非 root 用户、限制非系统应用</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    SystemServiceManager.startService(DeviceIdentifiersPolicyService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【7】URI 授权管理服务 （关于 Uri 可参考链接）</span></span><br><span class=\"line\">    mSystemServiceManager.startService(UriGrantsManagerService.Lifecycle.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【8】电池相关服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、电量🔋触发器BatteryTrigger mBatteryTrigger，通过广播监听电量变化，当电量下降1%将会接收到广播，似乎只做一件事：就是更新最新电量信息</span></span><br><span class=\"line\"><span class=\"comment\">        2、IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED); 通过 context 注册广播</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    mSystemServiceManager.startService(PowerStatsService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【9】内存分析服务  （native 调用）</span></span><br><span class=\"line\">    startMemtrackProxyService();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【10】AMS 服务（终于看到一个比较常见的🐶）</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、高版本任务栈管理类似乎被分离出来了，由 ActivityTaskManagerService 实现，内容太多，下次一定看看</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    ActivityTaskManagerService atm = mSystemServiceManager.startService(</span><br><span class=\"line\">        ActivityTaskManagerService.Lifecycle.class).getService();</span><br><span class=\"line\">    mActivityManagerService = ActivityManagerService.Lifecycle.startService(</span><br><span class=\"line\">        mSystemServiceManager, atm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【11】数据加载</span></span><br><span class=\"line\">    mDataLoaderManagerService = mSystemServiceManager.startService(</span><br><span class=\"line\">        DataLoaderManagerService.class);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//【12】电源管理服务，之前那个时电池状态管理（只做了一件事：监听电量变化）</span></span><br><span class=\"line\">    mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【13】系统恢复服务，我们刷机常见的 Recover 模式</span></span><br><span class=\"line\">    mSystemServiceManager.startService(RecoverySystemService.Lifecycle.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【14】安装包管理服务，这是个大类，三万行呢，下次一定看看</span></span><br><span class=\"line\">    mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</span><br><span class=\"line\">        domainVerificationService, mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF,</span><br><span class=\"line\">        mOnlyCore);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//【15】传感器服务</span></span><br><span class=\"line\">    mSystemServiceManager.startService(<span class=\"keyword\">new</span> SensorPrivacyService(mSystemContext));</span><br><span class=\"line\">    mSystemServiceManager.startService(SensorService.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动服务到这里就结束啦，只是部分列举，并不完整，服务是如何运行的？具体都在做了些什么？等等！！！这些执行细节希望在之后的系列文章进一步深入（内容实在是太多了😭）</p>\n<h1>启动 Core 服务</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startCoreServices</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> TimingsTraceAndSlog t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//【1】主要负责读取系统配置信息</span></span><br><span class=\"line\">    mSystemServiceManager.startService(SystemConfigService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【2】电量跟踪</span></span><br><span class=\"line\">    mSystemServiceManager.startService(BatteryService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【3】应用使用状态跟踪</span></span><br><span class=\"line\">    mSystemServiceManager.startService(UsageStatsService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【4】监控设备是否充电、屏幕是否亮起</span></span><br><span class=\"line\">    <span class=\"comment\">//（通过高优先级的广播监听📢，指定特定的 intentfilter——ACTION_SCREEN_ON/ACTION_SCREEN_OFF/ACTION_BATTERY_CHANGED）</span></span><br><span class=\"line\">    mSystemServiceManager.startService(CachedDeviceStateService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【5】应用程序回滚？？？</span></span><br><span class=\"line\">    mSystemServiceManager.startService(ROLLBACK_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【6】tombstone 墓碑，记录进程被杀死前的一些信息，比如调用栈、内存使用情况、CPU 使用情况、backtrace 等等，主要是监控和记录 native 崩溃信息（获取这个崩溃日志需要 root 权限）</span></span><br><span class=\"line\">    mSystemServiceManager.startService(NativeTombstoneManagerService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【7】Android 错误报告生成，应用崩溃时候查看这个报告还是很有用的（前提是你能够看懂报告）</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以同 adb bugreport 获取错误报告（Android 版本之间获取方式稍有区别，根据 adb bugreport 提示操作即可）</span></span><br><span class=\"line\">    mSystemServiceManager.startService(BugreportManagerService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【8】主要还是监视和收集 GPU 信息</span></span><br><span class=\"line\">    mSystemServiceManager.startService(GpuService.class);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>核心服务不是很多，主要是信息记录相关，必不可少、确实很是关键。</p>\n<h1>启动 Other 服务</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startOtherServices</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> TimingsTraceAndSlog t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//闹钟服务⏰</span></span><br><span class=\"line\">            mSystemServiceManager.startService(ALARM_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\">            <span class=\"comment\">//WMS 服务</span></span><br><span class=\"line\">            mSystemServiceManager.startBootPhase(t, SystemService.PHASE_WAIT_FOR_SENSOR_SERVICE);</span><br><span class=\"line\">            wm = WindowManagerService.main(context, inputManager, !mFirstBoot, mOnlyCore,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> PhoneWindowManager(), mActivityManagerService.mActivityTaskManager);</span><br><span class=\"line\">            ServiceManager.addService(Context.WINDOW_SERVICE, wm, <span class=\"comment\">/* allowIsolated= */</span> <span class=\"keyword\">false</span>,</span><br><span class=\"line\">                    DUMP_FLAG_PRIORITY_CRITICAL | DUMP_FLAG_PROTO);</span><br><span class=\"line\">            ServiceManager.addService(Context.INPUT_SERVICE, inputManager,</span><br><span class=\"line\">                    <span class=\"comment\">/* allowIsolated= */</span> <span class=\"keyword\">false</span>, DUMP_FLAG_PRIORITY_CRITICAL);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//蓝牙服务</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactoryTestMode == FactoryTest.FACTORY_TEST_LOW_LEVEL) &#123;</span><br><span class=\"line\">                Slog.i(TAG, <span class=\"string\">&quot;No Bluetooth Service (factory test)&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!context.getPackageManager().hasSystemFeature</span><br><span class=\"line\">                    (PackageManager.FEATURE_BLUETOOTH)) &#123;</span><br><span class=\"line\">                Slog.i(TAG, <span class=\"string\">&quot;No Bluetooth Service (Bluetooth Hardware Not Present)&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(BluetoothService.class);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//网络列表监控服务</span></span><br><span class=\"line\">            mSystemServiceManager.startService(NetworkWatchlistService.Lifecycle.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//输入法管理服务</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (InputMethodSystemProperty.MULTI_CLIENT_IME_ENABLED) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(</span><br><span class=\"line\">                        MultiClientInputMethodManagerService.Lifecycle.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(InputMethodManagerService.Lifecycle.class);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//辅助功能</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(ACCESSIBILITY_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                reportWtf(<span class=\"string\">&quot;starting Accessibility Manager&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//开发者选项中，OEM 解锁还记得吗</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasPdb || OemLockService.isHalPresent()) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(OemLockService.class);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//状态栏    </span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                statusBar = <span class=\"keyword\">new</span> StatusBarManagerService(context);</span><br><span class=\"line\">                ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            startContentCaptureService(context, t);</span><br><span class=\"line\">            startAttentionService(context, t);</span><br><span class=\"line\">            startRotationResolverService(context, t);</span><br><span class=\"line\">            startSystemCaptionsManagerService(context, t);</span><br><span class=\"line\">            <span class=\"comment\">//文字语音转换</span></span><br><span class=\"line\">            startTextToSpeechManagerService(context, t);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//系统语音识别</span></span><br><span class=\"line\">            mSystemServiceManager.startService(SPEECH_RECOGNITION_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//智慧空间？记得华为手机搜索页面是这个名称，有的叫‘智慧场景’</span></span><br><span class=\"line\">            mSystemServiceManager.startService(SMARTSPACE_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//网络</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                networkManagement = NetworkManagementService.create(context);</span><br><span class=\"line\">                ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//字体</span></span><br><span class=\"line\">            mSystemServiceManager.startService(<span class=\"keyword\">new</span> FontManagerService.Lifecycle(context, safeMode));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Wi-Fi</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getPackageManager().hasSystemFeature(</span><br><span class=\"line\">                    PackageManager.FEATURE_WIFI)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_SCANNING_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getPackageManager().hasSystemFeature(</span><br><span class=\"line\">                    PackageManager.FEATURE_WIFI_RTT)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_RTT_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getPackageManager().hasSystemFeature(</span><br><span class=\"line\">                    PackageManager.FEATURE_WIFI_AWARE)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_AWARE_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getPackageManager().hasSystemFeature(</span><br><span class=\"line\">                    PackageManager.FEATURE_WIFI_DIRECT)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_P2P_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//VPN</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                vpnManager = VpnManagerService.create(context);</span><br><span class=\"line\">                ServiceManager.addService(Context.VPN_MANAGEMENT_SERVICE, vpnManager);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            t.traceEnd();</span><br><span class=\"line\"></span><br><span class=\"line\">            t.traceBegin(<span class=\"string\">&quot;StartVcnManagementService&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                vcnManagement = VcnManagementService.create(context);</span><br><span class=\"line\">                ServiceManager.addService(Context.VCN_MANAGEMENT_SERVICE, vcnManagement);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                reportWtf(<span class=\"string\">&quot;starting VCN Management Service&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            t.traceEnd();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//系统更新</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ServiceManager.addService(Context.SYSTEM_UPDATE_SERVICE,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> SystemUpdateManagerService(context));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//通知栏</span></span><br><span class=\"line\">            mSystemServiceManager.startService(NotificationManagerService.class);</span><br><span class=\"line\">            SystemNotificationChannels.removeDeprecated(context);</span><br><span class=\"line\">            SystemNotificationChannels.createAll(context);</span><br><span class=\"line\">            notification = INotificationManager.Stub.asInterface(</span><br><span class=\"line\">                    ServiceManager.getService(Context.NOTIFICATION_SERVICE));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//壁纸</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getResources().getBoolean(R.bool.config_enableWallpaperService)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(WALLPAPER_SERVICE_CLASS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//音量</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isArc) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(AudioService.Lifecycle.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String className = context.getResources()</span><br><span class=\"line\">                        .getString(R.string.config_deviceSpecificAudioService);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    mSystemServiceManager.startService(className + <span class=\"string\">&quot;$Lifecycle&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//无限广播</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPackageManager.hasSystemFeature(PackageManager.FEATURE_BROADCAST_RADIO)) &#123;</span><br><span class=\"line\">                t.traceBegin(<span class=\"string\">&quot;StartBroadcastRadioService&quot;</span>);</span><br><span class=\"line\">                mSystemServiceManager.startService(BroadcastRadioService.class);</span><br><span class=\"line\">                t.traceEnd();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"comment\">//adb 调试</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(ADB_SERVICE_CLASS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                Slog.e(TAG, <span class=\"string\">&quot;Failure starting AdbService&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//app 启动</span></span><br><span class=\"line\">        mSystemServiceManager.startService(LauncherAppsService.class);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//启动密码锁</span></span><br><span class=\"line\">        mSystemServiceManager.startBootPhase(t, SystemService.PHASE_LOCK_SETTINGS_READY);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//紧接着会有各项之前启动的服务调用 systemReady() 方法，指定服务准备完毕，即将进入下一个阶段</span></span><br><span class=\"line\">        mPackageManagerService.systemReady();</span><br><span class=\"line\">        mDisplayManagerService.systemReady(safeMode, mOnlyCore);</span><br><span class=\"line\">        ... etc</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//等待服务准备完毕</span></span><br><span class=\"line\">        mPackageManagerService.waitForAppDataPrepared();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//各项服务调用 systemRunning()、start() 方法开始运行服务自身</span></span><br><span class=\"line\">        countryDetectorF.systemRunning();</span><br><span class=\"line\">        networkTimeUpdaterF.systemRunning();</span><br><span class=\"line\">        inputManagerF.systemRunning();</span><br><span class=\"line\">        telephonyRegistryF.systemRunning();</span><br><span class=\"line\">        mmsServiceF.systemRunning();</span><br><span class=\"line\">        ... etc</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//启动系统界面服务</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、通过 intent 指定特定的组件 context.startServiceAsUser(intent, UserHandle.SYSTEM);</span></span><br><span class=\"line\"><span class=\"comment\">            2、startServiceAsUser 更上层的代码对我们看来像是调用 context.startService</span></span><br><span class=\"line\"><span class=\"comment\">            3、指定的启动的服务组件 pm.getSystemUiServiceComponent() 是什么呢？</span></span><br><span class=\"line\"><span class=\"comment\">                PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);</span></span><br><span class=\"line\"><span class=\"comment\">                PackageManagerInternal 是一个抽象类，实现类是 PackageManagerInternalImpl</span></span><br><span class=\"line\"><span class=\"comment\">                而 PackageManagerInternalImpl 是 PackageManager 的内部类，所属成员是 private final PackageManagerInternal mPmInternal;</span></span><br><span class=\"line\"><span class=\"comment\">                而 getSystemUiServiceComponent 就是获取一个 string 资源com.android.internal.R.string.config_systemUIServiceComponent</span></span><br><span class=\"line\"><span class=\"comment\">            4、资源文件所在路径：frameworks/base/core/res/res/values/config.xml【看这个文件有好多服务的 component】</span></span><br><span class=\"line\"><span class=\"comment\">            5、资源内容 </span></span><br><span class=\"line\"><span class=\"comment\">            &lt;!-- SystemUi service component --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;string name=&quot;config_systemUIServiceComponent&quot; translatable=&quot;false&quot;&gt;com.android.systemui/com.android.systemui.SystemUIService&lt;/string&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        startSystemUi(context, windowManagerF);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动-SystemUI-服务\">启动 SystemUI 服务</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startSystemUi</span><span class=\"params\">(Context context, WindowManagerService windowManager)</span> </span>&#123;</span><br><span class=\"line\">    PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);</span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、很明显这是一个服务 component: com.android.systemui/com.android.systemui.SystemUIService</span></span><br><span class=\"line\"><span class=\"comment\">        2、此服务 Java 实现类所在路径是 /framework/base/packages/SystemUI/src/com/android/systemui/SystemUIService.java</span></span><br><span class=\"line\"><span class=\"comment\">        3、这个类比较简洁，主要有三个成员分别负责不同的事情</span></span><br><span class=\"line\"><span class=\"comment\">            mainHandle  ：主线程通讯，明知故问</span></span><br><span class=\"line\"><span class=\"comment\">            dumpHandle  ：当前线程运行状态信息输出</span></span><br><span class=\"line\"><span class=\"comment\">            logBufferFreezer   ：负责错误报告日志相关【错误报告-参考链接】</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">        4、system server 进程启动的 UI 服务：来到了 SystemUIApplication.java 这个类 ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span></span><br><span class=\"line\"><span class=\"comment\">            所有的 UI 服务包含哪些？服务名称列表哪里来？又是一个字符串数组资源 config_systemUIServiceComponents R.array.config_systemUIServiceComponentsPerUser</span></span><br><span class=\"line\"><span class=\"comment\">            资源所在路径是 /framework/base/packages/SystemUI/res/value/config.xml</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">            4.1【服务列表参考下文】</span></span><br><span class=\"line\"><span class=\"comment\">            4.2 通过反射创建服务 Class.forname(serviceName) 调用指定构造函数 newInstance</span></span><br><span class=\"line\"><span class=\"comment\">            4.3 启动服务 mServices[i].start(); 接下来就不具体看了，以后具体服务具体分析</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">        5、SysteUIApplication 他是一个 Application，所以在此之前创建该实例是会先执行 onCreate 方法，</span></span><br><span class=\"line\"><span class=\"comment\">            这里有调用一个重要的方法，对于非私有的非系统用户将执行 startSecondaryUserServicesIfNeeded();</span></span><br><span class=\"line\"><span class=\"comment\">            获取的服务列表是 R.array.config_systemUIServiceComponentsPerUser 查看只有一个服务</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">            5.1 com.android.systemui.util.NotificationChannels</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">    intent.setComponent(pm.getSystemUiServiceComponent());</span></span><br><span class=\"line\"><span class=\"comment\">    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span></span><br><span class=\"line\"><span class=\"comment\">    context.startServiceAsUser(intent, UserHandle.SYSTEM);</span></span><br><span class=\"line\"><span class=\"comment\">    windowManager.onSystemUiStarted();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>system UI 服务列表</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通知渠道服务（Android 低版本的通知创建是不需要设置通知渠道，后来高版本引入通知渠道并且必须设置，否则通知显示存在异常）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.util.NotificationChannels<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.keyguard.KeyguardViewMediator<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\">//应用最近任务列表</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.recents.Recents<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\">//音量</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.volume.VolumeUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.stackdivider.Divider<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\">//状态栏</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.statusbar.phone.StatusBar<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.usb.StorageNotification<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.power.PowerUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.media.RingtonePlayer<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\">//键盘</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.keyboard.KeyboardUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.pip.PipUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.shortcut.ShortcutKeyDispatcher<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>@string/config_systemUIVendorServiceComponent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.util.leak.GarbageMonitor$Service<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.LatencyTester<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.globalactions.GlobalActionsComponent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.ScreenDecorations<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.biometrics.AuthController<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.SliceBroadcastRelayHandler<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.SizeCompatModeActivityController<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.statusbar.notification.InstantAppNotifier<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.theme.ThemeOverlayController<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.accessibility.WindowMagnification<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.accessibility.SystemActions<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.toast.ToastUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>System Server 大概是启动完成，那么接下来又去哪里运行了呢？？？或者下一步我们继续看那个点比较合适呢？？？之前我们只是粗略浏览，中间忽略了很多，下一步的入口点可能要返回之前的代码重新阅读发现合适的切入点，SystemServer 也已经进入了‘永久的循环’，等待的就是接受外部‘信号’做相应处理、继续分发到具体执行。</p>\n<p>那么，我们下周再见😊</p>\n<h1>附加</h1>\n<h2 id=\"如何快速搜索\">如何快速搜索</h2>\n<p><strong>Android 项目中如何快速搜索某关键字？</strong></p>\n<p>AOSP 整个项目是很庞大的，不仅仅是包含 java 代码，就拿当前我下载的 <code>Android 11-r21 分支</code>来说，我是通过 git 下载在没有指定 <code>single-branch dept=1</code> 参数下，整个过程下载完毕占用大约 <strong>430G</strong> 存储空间。</p>\n<p>一开始我把源码存储在机械硬盘，通过 VSCode 打开机存在械硬盘的中的项目（整个 AOSP），比如搜索某个关键字，那个速度堪比龟速；后来把项目拷贝到笔记本 SSD 固态硬盘，搜索速度确实有了明显的提高，但整个项目搜索还是比较慢，不是十分满意；如果是单独打开某个模块——— framework 模块、framework base 模块等等，搜索速度还可以接受。但如果要找的代码根本不在当前模块，比如你打开 framework base 模块，但实际代码在 framework service 模块，这样是搜索不到结果的，因此还得把搜索范围扩大，引入的模块多了速度终是会变慢。</p>\n<p>搜索能够快速找到目标，是不是要借助一个东西————<strong>索引</strong>，如果有工具把 AOSP 整个项目预先建立索引，然后再打开项目搜索，下次搜索时无需重新创建索引，通过索引搜索不得要起飞。<s>与搜索相关索引确实是个好东西。</s></p>\n<p>【<strong>最后</strong>】</p>\n<p>推荐使用已有的在线网站辅助搜索：<a href=\"http://aospxref.com\"><strong>基于 opengrok 的 AOSPXRef</strong></a></p>\n<p>以搜索 SystemUIService <code>config_systemUIServiceComponent</code>为例：<br>\n<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6d6877806a144cfb2a73a40aa569c01~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>【<strong>最后的最后</strong>】</p>\n<p>ASOPXRef 现有的项目是较少的，也就是几个特定的版本，如果能满足自己的需求刚好，要是想看的源码版本不是已存在的建议还是自己通过 <code>opengrok</code> 引擎搭建一个服务。<br>\n<strong>Oracle opengrok：</strong><a href=\"https://github.com/oracle/opengrok\">快速且可用的源代码搜索和交叉引用引擎</a></p>\n<h2 id=\"参考链接\">参考链接</h2>\n<ul>\n<li>WTF：What a Terrible Failure —— Android 系统错误记录的一种</li>\n<li>Memtrack：内存分析 <a href=\"https://zhuanlan.zhihu.com/p/168361476\">https://zhuanlan.zhihu.com/p/168361476</a></li>\n<li>Hidl：硬件抽象层，在较低 Android 版本可能还在使用 HAL （hardware abstract layer）<a href=\"https://zhuanlan.zhihu.com/p/28256541\">https://zhuanlan.zhihu.com/p/28256541</a></li>\n<li>Android Uri：<a href=\"https://www.cnblogs.com/bhlsheji/p/4246580.html\">https://www.cnblogs.com/bhlsheji/p/4246580.html</a></li>\n<li>Android 错误报告：<a href=\"https://developer.android.com/studio/debug/bug-report\">https://developer.android.com/studio/debug/bug-report</a> ，<a href=\"https://source.android.com/source/read-bug-reports.html\">https://source.android.com/source/read-bug-reports.html</a></li>\n<li>Android 墓碑：<a href=\"https://source.android.com/devices/tech/debug\">https://source.android.com/devices/tech/debug</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>相关文件</strong></p>\n<ul>\n<li>/framework/base/service/java/com/android/server/SystemServer.java</li>\n<li>/framework/base/service/java/com/android/server/SystemServiceManager.java</li>\n<li>/framework/base/service/java/com/android/server/WatchDog.java</li>\n<li>/frameworks/base/core/java/com/android/server/SystemConfig.java</li>\n<li>… etc</li>\n</ul>\n<h1>运行 System server</h1>\n<p>经过前两篇的系统文章，已经完成了 init、zygote 进程的创建和初始化，即将启动系统各大服务，各项服务由服务管理者 <code>System server</code> 完成创建和启动，那么赶紧进入瞧瞧去 <code>/framework/base/service/java/com/android/server/SystemServer.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemServer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dumpable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//列举几个认为重要的成员</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"comment\">//类似这样的服务名称不少于 50 个</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String WIFI_SERVICE_CLASS =</span><br><span class=\"line\">            <span class=\"string\">&quot;com.android.server.wifi.WifiService&quot;</span>;                  <span class=\"comment\">//Wi-Fi服务</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String WIFI_SCANNING_SERVICE_CLASS =</span><br><span class=\"line\">            <span class=\"string\">&quot;com.android.server.wifi.scanner.WifiScanningService&quot;</span>;  <span class=\"comment\">//Wi-Fi 扫描</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ALARM_MANAGER_SERVICE_CLASS =</span><br><span class=\"line\">            <span class=\"string\">&quot;com.android.server.alarm.AlarmManagerService&quot;</span>;         <span class=\"comment\">//闹钟</span></span><br><span class=\"line\">    ... etc</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//系统默认的对话框等主题</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_SYSTEM_THEME =</span><br><span class=\"line\">           com.android.internal.R.style.Theme_DeviceDefault_System;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//很重要的一个主角，系统服务管理者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SystemServiceManager mSystemServiceManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//具体服务实现类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ActivityManagerService mActivityManagerService;  <span class=\"comment\">//Activity 管理</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PackageManagerService mPackageManagerService;    <span class=\"comment\">//安装包管理</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ContentResolver mContentResolver;                <span class=\"comment\">//内容解析——内容提供者数据解析</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DisplayManagerService mDisplayManagerService;    <span class=\"comment\">//设备显示相关</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//看变量名就很清晰，application 错误报告信息记录</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LinkedList&lt;Pair&lt;String, ApplicationErrorReport.CrashInfo&gt;&gt; sPendingWtfs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//memtracker：memory tracker 【参考链接】</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">startMemtrackProxyService</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Hidl Hardware Interface Definition Language 硬件抽象层语言【参考链接】</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">startHidlServices</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调试模式下我们应用进程能够 dump head，dump file 是进程的内存镜像，把进程当前保存的状态保存到 dump 文件</span></span><br><span class=\"line\">    <span class=\"comment\">//head dump 其实利用 Android studio 内置的工具（Android profile、Memory profile）也是可以生成的，直接帮你把文件可视化</span></span><br><span class=\"line\">    <span class=\"comment\">//生成的文件保存路径 /data/system/heapdump/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">initZygoteChildHeapProfiling</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从主函数开始执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SystemServer().run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SystemServer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//记录性信息，不影响继续阅读吧，主要还是后面的 run 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    mFactoryTestMode = FactoryTest.getMode();</span><br><span class=\"line\">    mStartCount = SystemProperties.getInt(SYSPROP_START_COUNT, <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    mRuntimeStartElapsedTime = SystemClock.elapsedRealtime();</span><br><span class=\"line\">    mRuntimeStartUptime = SystemClock.uptimeMillis();</span><br><span class=\"line\">    Process.setStartTimes(mRuntimeStartElapsedTime, mRuntimeStartUptime);</span><br><span class=\"line\"></span><br><span class=\"line\">    mRuntimeRestart = <span class=\"string\">&quot;1&quot;</span>.equals(SystemProperties.get(<span class=\"string\">&quot;sys.boot_completed&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过设置系统属性，记录进程启动信息，启动次数等</span></span><br><span class=\"line\">    SystemProperties.set(SYSPROP_START_COUNT,String.valueOf(mStartCount));</span><br><span class=\"line\">    <span class=\"comment\">//如果当前时区无效将被设置为默认值 GMT —— 格林威治时间</span></span><br><span class=\"line\">    SystemProperties.set(<span class=\"string\">&quot;persist.sys.timezone&quot;</span>, <span class=\"string\">&quot;GMT&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//如果知道了语言，尝试通过语言设置地区属性</span></span><br><span class=\"line\">    <span class=\"comment\">//【presist 前缀的系统属性是可写的，ro 前缀的系统属性是只读的】</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!SystemProperties.get(<span class=\"string\">&quot;persist.sys.language&quot;</span>).isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String languageTag = Locale.getDefault().toLanguageTag();</span><br><span class=\"line\">        SystemProperties.set(<span class=\"string\">&quot;persist.sys.locale&quot;</span>, languageTag); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*前面都是在设置一些系统属性，接下来将要真正启动服务*/</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//SystemClock.elapsedRealtime();  获取设备启动到当前的毫秒值</span></span><br><span class=\"line\">    <span class=\"comment\">//清理一次内存，为 application 可以分配得到更多内存</span></span><br><span class=\"line\">    VMRuntime.getRuntime().clearGrowthLimit();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动准备线程策略 THREAD_PRIORITY_FOREGROUND：应用程序不得更改线程优先级、不得更改线程数量，这些将由系统自动调整</span></span><br><span class=\"line\">    android.os.Process.setThreadPriority(</span><br><span class=\"line\">        android.os.Process.THREAD_PRIORITY_FOREGROUND); </span><br><span class=\"line\">    <span class=\"comment\">//这是对前一条语句设置前台进程的限制 THREAD_PRIORITY_FOREGROUND，这里传入 false，如果此前设置的线程策略是‘后台进程组’将抛出异常</span></span><br><span class=\"line\">    android.os.Process.setCanSelfBackground(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Looper 是线程的消息循环机制，这里的线程自然是执行的主线程 Main-Thread，也就是 application 所在线程</span></span><br><span class=\"line\">    <span class=\"comment\">//这里有一个经典八股文😊：自定义子线程 Looper 需要手动执行 prepareLooper，为什么我们在使用主线程的 Looper 前不需要先调用 prepare Looper？</span></span><br><span class=\"line\">    <span class=\"comment\">//       A答：调用时肯定要调用的。这不是废话吗，我们不调用那肯定是‘别人’已经在我们使用前就调用了————那这个‘别人’其实就是 Android env 在创建时候调用了</span></span><br><span class=\"line\">    <span class=\"comment\">//这个 application main loop 被系统缓存在 Looper.java 中（static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;();）</span></span><br><span class=\"line\">    <span class=\"comment\">//我们平时使用是通过： Looper.getMainLooper()</span></span><br><span class=\"line\">    Looper.prepareMainLooper();</span><br><span class=\"line\">    Looper.getMainLooper().setSlowLogThresholdMs(</span><br><span class=\"line\">        SLOW_DISPATCH_THRESHOLD_MS, SLOW_DELIVERY_THRESHOLD_MS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建系统上下文 mSystemContext 以及设置上述的默认主题</span></span><br><span class=\"line\">    createSystemContext();</span><br><span class=\"line\">    <span class=\"comment\">//继续</span></span><br><span class=\"line\">    mSystemServiceManager = <span class=\"keyword\">new</span> SystemServiceManager(mSystemContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动读取系统全局配置的线程池，下面启动服务启动时候将会用到</span></span><br><span class=\"line\">    <span class=\"comment\">//什么时候关闭线程池呢？if (phase == SystemService.PHASE_BOOT_COMPLETED)&#123;SystemServerInitThreadPool.shutdown();&#125;</span></span><br><span class=\"line\">    SystemServerInitThreadPool tp = SystemServerInitThreadPool.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【重点、重点、重点】</span></span><br><span class=\"line\">    <span class=\"comment\">//启动各种 Service</span></span><br><span class=\"line\">    startBootstrapServices(t);  <span class=\"comment\">//启动服务</span></span><br><span class=\"line\">    startCoreServices(t);       <span class=\"comment\">//核心服务</span></span><br><span class=\"line\">    startOtherServices(t);      <span class=\"comment\">//其他服务</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//一个检测工具</span></span><br><span class=\"line\">    StrictMode.initVmDefaults(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//进入一个无眠的世界默默`打工`，为‘人民’服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、获得当前线程的消息队列 MessageQueue</span></span><br><span class=\"line\"><span class=\"comment\">        2、在 for(;;) 循环中不断从消息队列取出消息，queue.next()，这是一个阻塞的过程</span></span><br><span class=\"line\"><span class=\"comment\">        3、如果获取到可用的消息则进行分发 msg.target.dispatchMessage(msg)</span></span><br><span class=\"line\"><span class=\"comment\">        4、消息分发之后进行回收或清理 msg.recycleUnChecked()</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    Looper.loop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>启动 Bootstrap 服务</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startBootstrapServices</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> TimingsTraceAndSlog t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【1】watchdog 看门🐶？看着是有这个意思，大概就是监控服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、它运行在一个单独的线程中 mThread = new Thread(this::run, &quot;watchdog&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        2、主要是检查一些线程的运行状态和调度情况，比如检查的线程有前台线程、IO、UI、main、display、animation、surface animation 等线程</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Watchdog watchdog = Watchdog.getInstance();</span><br><span class=\"line\">    watchdog.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【2】加载全局系统配置信息</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、此线程池在 SystemServer 启动时候执行</span></span><br><span class=\"line\"><span class=\"comment\">        2、在 SystemServer 启动完成之后关闭 SystemService.PHASE_BOOT_COMPLETE</span></span><br><span class=\"line\"><span class=\"comment\">        3、调用 submit 方法真正执行系统全局配置读取的方法在哪里？线程池提交之后执行的当然是 run 方法。谁的 run 方法？SystemConfig::getInstance 又是啥，在哪里？【不解，知者欢迎评论】</span></span><br><span class=\"line\"><span class=\"comment\">        4、SystemConfig::getInstance：Java 能够使用双引号访问静态方法，在此之前我只知道 cpp 是可以这样的，后来查了一下似乎是 lambada 的语法糖😺不知者无罪</span></span><br><span class=\"line\"><span class=\"comment\">        5、readPublicNativeLibrariesList();//String[] dirs = &#123;&quot;/system/etc&quot;, &quot;/system_ext/etc&quot;, &quot;/product/etc&quot;,&quot;vendor/etc&quot;&#125;;读取此目录下 public.libraries- 开头，.txt 结尾的配置文件</span></span><br><span class=\"line\"><span class=\"comment\">        6、readAllPermissions();//解析根目录、Vendor目录等 etc/sysconfig、etc/permission 下 XML 权限文件</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String TAG_SYSTEM_CONFIG = <span class=\"string\">&quot;ReadingSystemConfig&quot;</span>;</span><br><span class=\"line\">    SystemServerInitThreadPool.submit(SystemConfig::getInstance, TAG_SYSTEM_CONFIG);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【3】公共服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、将来 ActivityManagerService、PackageManagerService ...etc 会使用</span></span><br><span class=\"line\"><span class=\"comment\">        2、调用 addService 一看流程最终到了 IServiceManager.cpp 藏得这么深，真是服了这个老 six，sp&lt;AidlServiceManager&gt; mTheRealServiceManager;   </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    PlatformCompat platformCompat = <span class=\"keyword\">new</span> PlatformCompat(mSystemContext);</span><br><span class=\"line\">    ServiceManager.addService(Context.PLATFORM_COMPAT_SERVICE, platformCompat);</span><br><span class=\"line\">    ServiceManager.addService(Context.PLATFORM_COMPAT_NATIVE_SERVICE,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PlatformCompatNative(platformCompat));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【4】文件完整性校验相关服务</span></span><br><span class=\"line\">    mSystemServiceManager.startService(FileIntegrityService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【5】应用程序安装相关服务</span></span><br><span class=\"line\">    Installer installer = mSystemServiceManager.startService(Installer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【6】设备标识访问策略服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、获取手机序列号：getSerial()，系统属性对应键 ro.serialn。调用时</span></span><br><span class=\"line\"><span class=\"comment\">elephonyPermissions.checkCallingOrSelfReadDeviceIdentifiers</span></span><br><span class=\"line\"><span class=\"comment\">        2、指定包名获取序列号 getSerialForPackage，其中再根据包名 + 当前用户ID获取调用此类的 UID，所以猜测还有有不少限制的，比如限制非 root 用户、限制非系统应用</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    SystemServiceManager.startService(DeviceIdentifiersPolicyService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【7】URI 授权管理服务 （关于 Uri 可参考链接）</span></span><br><span class=\"line\">    mSystemServiceManager.startService(UriGrantsManagerService.Lifecycle.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【8】电池相关服务</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、电量🔋触发器BatteryTrigger mBatteryTrigger，通过广播监听电量变化，当电量下降1%将会接收到广播，似乎只做一件事：就是更新最新电量信息</span></span><br><span class=\"line\"><span class=\"comment\">        2、IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED); 通过 context 注册广播</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    mSystemServiceManager.startService(PowerStatsService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【9】内存分析服务  （native 调用）</span></span><br><span class=\"line\">    startMemtrackProxyService();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【10】AMS 服务（终于看到一个比较常见的🐶）</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、高版本任务栈管理类似乎被分离出来了，由 ActivityTaskManagerService 实现，内容太多，下次一定看看</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    ActivityTaskManagerService atm = mSystemServiceManager.startService(</span><br><span class=\"line\">        ActivityTaskManagerService.Lifecycle.class).getService();</span><br><span class=\"line\">    mActivityManagerService = ActivityManagerService.Lifecycle.startService(</span><br><span class=\"line\">        mSystemServiceManager, atm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【11】数据加载</span></span><br><span class=\"line\">    mDataLoaderManagerService = mSystemServiceManager.startService(</span><br><span class=\"line\">        DataLoaderManagerService.class);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//【12】电源管理服务，之前那个时电池状态管理（只做了一件事：监听电量变化）</span></span><br><span class=\"line\">    mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【13】系统恢复服务，我们刷机常见的 Recover 模式</span></span><br><span class=\"line\">    mSystemServiceManager.startService(RecoverySystemService.Lifecycle.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【14】安装包管理服务，这是个大类，三万行呢，下次一定看看</span></span><br><span class=\"line\">    mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</span><br><span class=\"line\">        domainVerificationService, mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF,</span><br><span class=\"line\">        mOnlyCore);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//【15】传感器服务</span></span><br><span class=\"line\">    mSystemServiceManager.startService(<span class=\"keyword\">new</span> SensorPrivacyService(mSystemContext));</span><br><span class=\"line\">    mSystemServiceManager.startService(SensorService.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动服务到这里就结束啦，只是部分列举，并不完整，服务是如何运行的？具体都在做了些什么？等等！！！这些执行细节希望在之后的系列文章进一步深入（内容实在是太多了😭）</p>\n<h1>启动 Core 服务</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startCoreServices</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> TimingsTraceAndSlog t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//【1】主要负责读取系统配置信息</span></span><br><span class=\"line\">    mSystemServiceManager.startService(SystemConfigService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【2】电量跟踪</span></span><br><span class=\"line\">    mSystemServiceManager.startService(BatteryService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【3】应用使用状态跟踪</span></span><br><span class=\"line\">    mSystemServiceManager.startService(UsageStatsService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【4】监控设备是否充电、屏幕是否亮起</span></span><br><span class=\"line\">    <span class=\"comment\">//（通过高优先级的广播监听📢，指定特定的 intentfilter——ACTION_SCREEN_ON/ACTION_SCREEN_OFF/ACTION_BATTERY_CHANGED）</span></span><br><span class=\"line\">    mSystemServiceManager.startService(CachedDeviceStateService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【5】应用程序回滚？？？</span></span><br><span class=\"line\">    mSystemServiceManager.startService(ROLLBACK_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【6】tombstone 墓碑，记录进程被杀死前的一些信息，比如调用栈、内存使用情况、CPU 使用情况、backtrace 等等，主要是监控和记录 native 崩溃信息（获取这个崩溃日志需要 root 权限）</span></span><br><span class=\"line\">    mSystemServiceManager.startService(NativeTombstoneManagerService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//【7】Android 错误报告生成，应用崩溃时候查看这个报告还是很有用的（前提是你能够看懂报告）</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以同 adb bugreport 获取错误报告（Android 版本之间获取方式稍有区别，根据 adb bugreport 提示操作即可）</span></span><br><span class=\"line\">    mSystemServiceManager.startService(BugreportManagerService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//【8】主要还是监视和收集 GPU 信息</span></span><br><span class=\"line\">    mSystemServiceManager.startService(GpuService.class);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>核心服务不是很多，主要是信息记录相关，必不可少、确实很是关键。</p>\n<h1>启动 Other 服务</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startOtherServices</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> TimingsTraceAndSlog t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//闹钟服务⏰</span></span><br><span class=\"line\">            mSystemServiceManager.startService(ALARM_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\">            <span class=\"comment\">//WMS 服务</span></span><br><span class=\"line\">            mSystemServiceManager.startBootPhase(t, SystemService.PHASE_WAIT_FOR_SENSOR_SERVICE);</span><br><span class=\"line\">            wm = WindowManagerService.main(context, inputManager, !mFirstBoot, mOnlyCore,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> PhoneWindowManager(), mActivityManagerService.mActivityTaskManager);</span><br><span class=\"line\">            ServiceManager.addService(Context.WINDOW_SERVICE, wm, <span class=\"comment\">/* allowIsolated= */</span> <span class=\"keyword\">false</span>,</span><br><span class=\"line\">                    DUMP_FLAG_PRIORITY_CRITICAL | DUMP_FLAG_PROTO);</span><br><span class=\"line\">            ServiceManager.addService(Context.INPUT_SERVICE, inputManager,</span><br><span class=\"line\">                    <span class=\"comment\">/* allowIsolated= */</span> <span class=\"keyword\">false</span>, DUMP_FLAG_PRIORITY_CRITICAL);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//蓝牙服务</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactoryTestMode == FactoryTest.FACTORY_TEST_LOW_LEVEL) &#123;</span><br><span class=\"line\">                Slog.i(TAG, <span class=\"string\">&quot;No Bluetooth Service (factory test)&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!context.getPackageManager().hasSystemFeature</span><br><span class=\"line\">                    (PackageManager.FEATURE_BLUETOOTH)) &#123;</span><br><span class=\"line\">                Slog.i(TAG, <span class=\"string\">&quot;No Bluetooth Service (Bluetooth Hardware Not Present)&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(BluetoothService.class);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//网络列表监控服务</span></span><br><span class=\"line\">            mSystemServiceManager.startService(NetworkWatchlistService.Lifecycle.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//输入法管理服务</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (InputMethodSystemProperty.MULTI_CLIENT_IME_ENABLED) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(</span><br><span class=\"line\">                        MultiClientInputMethodManagerService.Lifecycle.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(InputMethodManagerService.Lifecycle.class);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//辅助功能</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(ACCESSIBILITY_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                reportWtf(<span class=\"string\">&quot;starting Accessibility Manager&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//开发者选项中，OEM 解锁还记得吗</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasPdb || OemLockService.isHalPresent()) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(OemLockService.class);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//状态栏    </span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                statusBar = <span class=\"keyword\">new</span> StatusBarManagerService(context);</span><br><span class=\"line\">                ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            startContentCaptureService(context, t);</span><br><span class=\"line\">            startAttentionService(context, t);</span><br><span class=\"line\">            startRotationResolverService(context, t);</span><br><span class=\"line\">            startSystemCaptionsManagerService(context, t);</span><br><span class=\"line\">            <span class=\"comment\">//文字语音转换</span></span><br><span class=\"line\">            startTextToSpeechManagerService(context, t);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//系统语音识别</span></span><br><span class=\"line\">            mSystemServiceManager.startService(SPEECH_RECOGNITION_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//智慧空间？记得华为手机搜索页面是这个名称，有的叫‘智慧场景’</span></span><br><span class=\"line\">            mSystemServiceManager.startService(SMARTSPACE_MANAGER_SERVICE_CLASS);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//网络</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                networkManagement = NetworkManagementService.create(context);</span><br><span class=\"line\">                ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//字体</span></span><br><span class=\"line\">            mSystemServiceManager.startService(<span class=\"keyword\">new</span> FontManagerService.Lifecycle(context, safeMode));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Wi-Fi</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getPackageManager().hasSystemFeature(</span><br><span class=\"line\">                    PackageManager.FEATURE_WIFI)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_SCANNING_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getPackageManager().hasSystemFeature(</span><br><span class=\"line\">                    PackageManager.FEATURE_WIFI_RTT)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_RTT_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getPackageManager().hasSystemFeature(</span><br><span class=\"line\">                    PackageManager.FEATURE_WIFI_AWARE)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_AWARE_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getPackageManager().hasSystemFeature(</span><br><span class=\"line\">                    PackageManager.FEATURE_WIFI_DIRECT)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startServiceFromJar(</span><br><span class=\"line\">                        WIFI_P2P_SERVICE_CLASS, WIFI_APEX_SERVICE_JAR_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//VPN</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                vpnManager = VpnManagerService.create(context);</span><br><span class=\"line\">                ServiceManager.addService(Context.VPN_MANAGEMENT_SERVICE, vpnManager);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            t.traceEnd();</span><br><span class=\"line\"></span><br><span class=\"line\">            t.traceBegin(<span class=\"string\">&quot;StartVcnManagementService&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                vcnManagement = VcnManagementService.create(context);</span><br><span class=\"line\">                ServiceManager.addService(Context.VCN_MANAGEMENT_SERVICE, vcnManagement);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                reportWtf(<span class=\"string\">&quot;starting VCN Management Service&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            t.traceEnd();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//系统更新</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ServiceManager.addService(Context.SYSTEM_UPDATE_SERVICE,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> SystemUpdateManagerService(context));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//通知栏</span></span><br><span class=\"line\">            mSystemServiceManager.startService(NotificationManagerService.class);</span><br><span class=\"line\">            SystemNotificationChannels.removeDeprecated(context);</span><br><span class=\"line\">            SystemNotificationChannels.createAll(context);</span><br><span class=\"line\">            notification = INotificationManager.Stub.asInterface(</span><br><span class=\"line\">                    ServiceManager.getService(Context.NOTIFICATION_SERVICE));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//壁纸</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.getResources().getBoolean(R.bool.config_enableWallpaperService)) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(WALLPAPER_SERVICE_CLASS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//音量</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isArc) &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(AudioService.Lifecycle.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String className = context.getResources()</span><br><span class=\"line\">                        .getString(R.string.config_deviceSpecificAudioService);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    mSystemServiceManager.startService(className + <span class=\"string\">&quot;$Lifecycle&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//无限广播</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPackageManager.hasSystemFeature(PackageManager.FEATURE_BROADCAST_RADIO)) &#123;</span><br><span class=\"line\">                t.traceBegin(<span class=\"string\">&quot;StartBroadcastRadioService&quot;</span>);</span><br><span class=\"line\">                mSystemServiceManager.startService(BroadcastRadioService.class);</span><br><span class=\"line\">                t.traceEnd();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"comment\">//adb 调试</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                mSystemServiceManager.startService(ADB_SERVICE_CLASS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                Slog.e(TAG, <span class=\"string\">&quot;Failure starting AdbService&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//app 启动</span></span><br><span class=\"line\">        mSystemServiceManager.startService(LauncherAppsService.class);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//启动密码锁</span></span><br><span class=\"line\">        mSystemServiceManager.startBootPhase(t, SystemService.PHASE_LOCK_SETTINGS_READY);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//紧接着会有各项之前启动的服务调用 systemReady() 方法，指定服务准备完毕，即将进入下一个阶段</span></span><br><span class=\"line\">        mPackageManagerService.systemReady();</span><br><span class=\"line\">        mDisplayManagerService.systemReady(safeMode, mOnlyCore);</span><br><span class=\"line\">        ... etc</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//等待服务准备完毕</span></span><br><span class=\"line\">        mPackageManagerService.waitForAppDataPrepared();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//各项服务调用 systemRunning()、start() 方法开始运行服务自身</span></span><br><span class=\"line\">        countryDetectorF.systemRunning();</span><br><span class=\"line\">        networkTimeUpdaterF.systemRunning();</span><br><span class=\"line\">        inputManagerF.systemRunning();</span><br><span class=\"line\">        telephonyRegistryF.systemRunning();</span><br><span class=\"line\">        mmsServiceF.systemRunning();</span><br><span class=\"line\">        ... etc</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//启动系统界面服务</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、通过 intent 指定特定的组件 context.startServiceAsUser(intent, UserHandle.SYSTEM);</span></span><br><span class=\"line\"><span class=\"comment\">            2、startServiceAsUser 更上层的代码对我们看来像是调用 context.startService</span></span><br><span class=\"line\"><span class=\"comment\">            3、指定的启动的服务组件 pm.getSystemUiServiceComponent() 是什么呢？</span></span><br><span class=\"line\"><span class=\"comment\">                PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);</span></span><br><span class=\"line\"><span class=\"comment\">                PackageManagerInternal 是一个抽象类，实现类是 PackageManagerInternalImpl</span></span><br><span class=\"line\"><span class=\"comment\">                而 PackageManagerInternalImpl 是 PackageManager 的内部类，所属成员是 private final PackageManagerInternal mPmInternal;</span></span><br><span class=\"line\"><span class=\"comment\">                而 getSystemUiServiceComponent 就是获取一个 string 资源com.android.internal.R.string.config_systemUIServiceComponent</span></span><br><span class=\"line\"><span class=\"comment\">            4、资源文件所在路径：frameworks/base/core/res/res/values/config.xml【看这个文件有好多服务的 component】</span></span><br><span class=\"line\"><span class=\"comment\">            5、资源内容 </span></span><br><span class=\"line\"><span class=\"comment\">            &lt;!-- SystemUi service component --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;string name=&quot;config_systemUIServiceComponent&quot; translatable=&quot;false&quot;&gt;com.android.systemui/com.android.systemui.SystemUIService&lt;/string&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        startSystemUi(context, windowManagerF);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动-SystemUI-服务\">启动 SystemUI 服务</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startSystemUi</span><span class=\"params\">(Context context, WindowManagerService windowManager)</span> </span>&#123;</span><br><span class=\"line\">    PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);</span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、很明显这是一个服务 component: com.android.systemui/com.android.systemui.SystemUIService</span></span><br><span class=\"line\"><span class=\"comment\">        2、此服务 Java 实现类所在路径是 /framework/base/packages/SystemUI/src/com/android/systemui/SystemUIService.java</span></span><br><span class=\"line\"><span class=\"comment\">        3、这个类比较简洁，主要有三个成员分别负责不同的事情</span></span><br><span class=\"line\"><span class=\"comment\">            mainHandle  ：主线程通讯，明知故问</span></span><br><span class=\"line\"><span class=\"comment\">            dumpHandle  ：当前线程运行状态信息输出</span></span><br><span class=\"line\"><span class=\"comment\">            logBufferFreezer   ：负责错误报告日志相关【错误报告-参考链接】</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">        4、system server 进程启动的 UI 服务：来到了 SystemUIApplication.java 这个类 ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span></span><br><span class=\"line\"><span class=\"comment\">            所有的 UI 服务包含哪些？服务名称列表哪里来？又是一个字符串数组资源 config_systemUIServiceComponents R.array.config_systemUIServiceComponentsPerUser</span></span><br><span class=\"line\"><span class=\"comment\">            资源所在路径是 /framework/base/packages/SystemUI/res/value/config.xml</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">            4.1【服务列表参考下文】</span></span><br><span class=\"line\"><span class=\"comment\">            4.2 通过反射创建服务 Class.forname(serviceName) 调用指定构造函数 newInstance</span></span><br><span class=\"line\"><span class=\"comment\">            4.3 启动服务 mServices[i].start(); 接下来就不具体看了，以后具体服务具体分析</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">        5、SysteUIApplication 他是一个 Application，所以在此之前创建该实例是会先执行 onCreate 方法，</span></span><br><span class=\"line\"><span class=\"comment\">            这里有调用一个重要的方法，对于非私有的非系统用户将执行 startSecondaryUserServicesIfNeeded();</span></span><br><span class=\"line\"><span class=\"comment\">            获取的服务列表是 R.array.config_systemUIServiceComponentsPerUser 查看只有一个服务</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">            5.1 com.android.systemui.util.NotificationChannels</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">    intent.setComponent(pm.getSystemUiServiceComponent());</span></span><br><span class=\"line\"><span class=\"comment\">    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span></span><br><span class=\"line\"><span class=\"comment\">    context.startServiceAsUser(intent, UserHandle.SYSTEM);</span></span><br><span class=\"line\"><span class=\"comment\">    windowManager.onSystemUiStarted();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>system UI 服务列表</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通知渠道服务（Android 低版本的通知创建是不需要设置通知渠道，后来高版本引入通知渠道并且必须设置，否则通知显示存在异常）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.util.NotificationChannels<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.keyguard.KeyguardViewMediator<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\">//应用最近任务列表</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.recents.Recents<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\">//音量</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.volume.VolumeUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.stackdivider.Divider<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\">//状态栏</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.statusbar.phone.StatusBar<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.usb.StorageNotification<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.power.PowerUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.media.RingtonePlayer<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\">//键盘</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.keyboard.KeyboardUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.pip.PipUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.shortcut.ShortcutKeyDispatcher<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>@string/config_systemUIVendorServiceComponent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.util.leak.GarbageMonitor$Service<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.LatencyTester<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.globalactions.GlobalActionsComponent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.ScreenDecorations<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.biometrics.AuthController<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.SliceBroadcastRelayHandler<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.SizeCompatModeActivityController<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.statusbar.notification.InstantAppNotifier<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.theme.ThemeOverlayController<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.accessibility.WindowMagnification<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.accessibility.SystemActions<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>com.android.systemui.toast.ToastUI<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>System Server 大概是启动完成，那么接下来又去哪里运行了呢？？？或者下一步我们继续看那个点比较合适呢？？？之前我们只是粗略浏览，中间忽略了很多，下一步的入口点可能要返回之前的代码重新阅读发现合适的切入点，SystemServer 也已经进入了‘永久的循环’，等待的就是接受外部‘信号’做相应处理、继续分发到具体执行。</p>\n<p>那么，我们下周再见😊</p>\n<h1>附加</h1>\n<h2 id=\"如何快速搜索\">如何快速搜索</h2>\n<p><strong>Android 项目中如何快速搜索某关键字？</strong></p>\n<p>AOSP 整个项目是很庞大的，不仅仅是包含 java 代码，就拿当前我下载的 <code>Android 11-r21 分支</code>来说，我是通过 git 下载在没有指定 <code>single-branch dept=1</code> 参数下，整个过程下载完毕占用大约 <strong>430G</strong> 存储空间。</p>\n<p>一开始我把源码存储在机械硬盘，通过 VSCode 打开机存在械硬盘的中的项目（整个 AOSP），比如搜索某个关键字，那个速度堪比龟速；后来把项目拷贝到笔记本 SSD 固态硬盘，搜索速度确实有了明显的提高，但整个项目搜索还是比较慢，不是十分满意；如果是单独打开某个模块——— framework 模块、framework base 模块等等，搜索速度还可以接受。但如果要找的代码根本不在当前模块，比如你打开 framework base 模块，但实际代码在 framework service 模块，这样是搜索不到结果的，因此还得把搜索范围扩大，引入的模块多了速度终是会变慢。</p>\n<p>搜索能够快速找到目标，是不是要借助一个东西————<strong>索引</strong>，如果有工具把 AOSP 整个项目预先建立索引，然后再打开项目搜索，下次搜索时无需重新创建索引，通过索引搜索不得要起飞。<s>与搜索相关索引确实是个好东西。</s></p>\n<p>【<strong>最后</strong>】</p>\n<p>推荐使用已有的在线网站辅助搜索：<a href=\"http://aospxref.com\"><strong>基于 opengrok 的 AOSPXRef</strong></a></p>\n<p>以搜索 SystemUIService <code>config_systemUIServiceComponent</code>为例：<br>\n<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6d6877806a144cfb2a73a40aa569c01~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>【<strong>最后的最后</strong>】</p>\n<p>ASOPXRef 现有的项目是较少的，也就是几个特定的版本，如果能满足自己的需求刚好，要是想看的源码版本不是已存在的建议还是自己通过 <code>opengrok</code> 引擎搭建一个服务。<br>\n<strong>Oracle opengrok：</strong><a href=\"https://github.com/oracle/opengrok\">快速且可用的源代码搜索和交叉引用引擎</a></p>\n<h2 id=\"参考链接\">参考链接</h2>\n<ul>\n<li>WTF：What a Terrible Failure —— Android 系统错误记录的一种</li>\n<li>Memtrack：内存分析 <a href=\"https://zhuanlan.zhihu.com/p/168361476\">https://zhuanlan.zhihu.com/p/168361476</a></li>\n<li>Hidl：硬件抽象层，在较低 Android 版本可能还在使用 HAL （hardware abstract layer）<a href=\"https://zhuanlan.zhihu.com/p/28256541\">https://zhuanlan.zhihu.com/p/28256541</a></li>\n<li>Android Uri：<a href=\"https://www.cnblogs.com/bhlsheji/p/4246580.html\">https://www.cnblogs.com/bhlsheji/p/4246580.html</a></li>\n<li>Android 错误报告：<a href=\"https://developer.android.com/studio/debug/bug-report\">https://developer.android.com/studio/debug/bug-report</a> ，<a href=\"https://source.android.com/source/read-bug-reports.html\">https://source.android.com/source/read-bug-reports.html</a></li>\n<li>Android 墓碑：<a href=\"https://source.android.com/devices/tech/debug\">https://source.android.com/devices/tech/debug</a></li>\n</ul>\n"},{"title":"Android 系统 zygote","catalog":true,"date":"2022-09-29T14:56:05.000Z","subtitle":"俗称 Java 世界的鼻祖","header-img":"/img/220928/android_zygot_bg.png","sticky":7,"_content":"\n\n相关文件：\n\n- /system/core/init/init.cpp\n- /system/etc/init/hw/init.rc  (源码工程没找到，是从手机上获取)\n- /system/etc/init/hw/init.zygote32.rc （手机上获取）\n- /system/etc/init/hw/init.zygote64_32.rc （手机上获取）\n- /system/core/init/action.cpp\n- /system/core/init/service.cpp\n- /system/core/init/service_list.cpp\n- frameworks/base/core/java/com/android/internal/os/ZygoteInit.java\n- frameworks/base/core/java/com/android/internal/os/ZygoteServer.java\n- frameworks/base/core/java/com/android/internal/os/Zygote.java\n- frameworks/base/core/java/com/android/internal/os/WrapperInit.java\n\n\n# 解析初始化配置文件 \n\n初始化配置文件包括但不限于 init.rc、hw/init.rc。带着的疑惑继续看源码，之前提到执行到初始化第二阶段时 init 进程进入无限的轮询（loop），似乎不知去向何处？疑惑是在等待接收消息后再做处理，第二阶段中创建 init 进程中有一个重要的函数`LoadBootScripts(actionManager,serviceList)`，加载启动脚本的关键，相当重要，与`init.rc`文件存在千丝万缕的关系。\n\n```cpp\n//init.cpp\nstatic void LoadBootScripts(ActionManager& action_manager, ServiceList& service_list) {\n    Parser parser = CreateParser(action_manager, service_list);\n    std::string bootscript = GetProperty(\"ro.boot.init_rc\", \"\");\n    if (bootscript.empty()) {\n        //解析 init.rc，启动的关键文件\n        parser.ParseConfig(\"/system/etc/init/hw/init.rc\");\n        if (!parser.ParseConfig(\"/system/etc/init\")) {\n            late_import_paths.emplace_back(\"/system/etc/init\");\n        }\n        \n        parser.ParseConfig(\"/system_ext/etc/init\");\n        if (!parser.ParseConfig(\"/vendor/etc/init\")) {\n            //vendor 厂商相关的初始化配置\n            late_import_paths.emplace_back(\"/vendor/etc/init\");\n        }\n        if (!parser.ParseConfig(\"/odm/etc/init\")) {\n            late_import_paths.emplace_back(\"/odm/etc/init\");\n        }\n        if (!parser.ParseConfig(\"/product/etc/init\")) {\n            late_import_paths.emplace_back(\"/product/etc/init\");\n        }\n    } else {\n        parser.ParseConfig(bootscript);\n    }\n}\n```\n\n```cpp\n//init.cpp\nvoid SecondStageMain(){\n\n    //数据解析获得，开始构建 action 队列\n    ActionManager& am = ActionManager::GetInstance();\n    am.QueueBuiltinAction(SetupCgroupsAction, \"SetupCgroups\");\n    .... etc\n\n    //触发启动\n    am.QueueEventTrigger(\"init\");\n    \n    //若处于充电模式将延迟初始化\n    std::string bootmode = GetProperty(\"ro.bootmode\", \"\");\n    if (bootmode == \"charger\") {\n        am.QueueEventTrigger(\"charger\");\n    } else {\n        am.QueueEventTrigger(\"late-init\");\n    }\n    \n    //init 进程进入无限轮训\n    while(true){\n        //开始通过 command 命令执行 inir.rc 脚本各项服务以及初始化\n        if (!(prop_waiter_state.MightBeWaiting() || Service::is_exec_service_running())) {\n            am.ExecuteOneCommand();\n        }\n        if (!(prop_waiter_state.MightBeWaiting() || Service::is_exec_service_running())) {\n\n        // If there's more work to do, wake up again immediately.\n        if (am.HasMoreCommands())\n            epoll_timeout = 0ms;\n        }\n    }\n}\n```\n\n在 Android 11 上，init.rc 文件位于`/system/etc/init/hw/init.rc`\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92ab7d4ccd7a4118a1f705928d97c212~tplv-k3u1fbpfcp-watermark.image?)\n\n这是我在小米手机找的，rc 文件被视为 Android 初始化语言，那肯定也有自己的语法或格式，可以参考：https://www.cnblogs.com/gufanyuan/p/9350130.html\n\n**mark：**\n- action on 后携带一组命令\n- trigger 触发器，确定何时执行命令\n- service 当 init 退出时启动或重启\n- options 进一步控制命令执行的方式和时间\n- 命令：on 每一行代表一条命令\n- import 导入额外的 rc 文件需要解析\n\n看看 rc 文件：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0991aad99b524f9ebc147ce1fe075047~tplv-k3u1fbpfcp-watermark.image?)\n\n```cpp\n//  /system/etc/init/hw/init.rc\n# 小米系统，也有厂商自己的解析文件，需要执行属于自己的进程\n# import 指明导入其他配置文件需要解析\n# MIUI ADD:\nimport /init.miui.rc\n\n# 还记得 SecondStageMain actionManage 吗\n# am.QueueEventTrigger(\"early-init\");\non early-init\n    # 一个守护进程，负责处理 uevent 消息\n    start ueventd\n    # apex 服务于系统模块安装\n    exec_start apexd-bootstrap\n\n# 触发所有 action\n# am.QueueEventTrigger(\"init\");\non init\n    # 创建 stdio 标准输入输出链接\n    symlink /proc/self/fd/0 /dev/stdin\n    # 给 sdcard 更改权限\n    chmod 0770 /config/sdcardfs\n    \n    # 启动服务\n    # 系统服务，越来越接近应用层了\n    start servicemanager\n    # hw——hardware，硬件服务\n    start hwservicemanager\n    #供应商服务\n    start vndservicemanager\n    # init action 就执行到这，中间省略很多命令，这里只是抽取几个，点到为止\n    \n# 挂载文件系统以及核心服务\n# am.QueueEventTrigger(\"late-init\");\non late-init\n    # 触发 fs：Vold 控制和管理外部存储的进程\n    trigger early-fs\n\n    # 重点来了⚠️⚠️⚠️\n    # import /system/etc/init/hw/init.${ro.zygote}.rc\n    # zygote 进来了，常说的 Android 应用层的鼻祖\n    trigger zygote-start\n    \n    trigger early-boot\n    trigger boot\n\non boot\n    # 启动 HAL 硬件抽象类服务\n    class_start hal\n    # 启动核心类服务\n    class_start core\n```\n\n# 解析 zygote.rc\n\n看上面截图，现在该执行`init.zygote32.rc、init.zygote64_32.rc`，继续往下看。\n```cpp\n//  /system/etc/init/hw/init.zygote32.rc\n// zygote32 : 只有一个 32，那就是纯纯的为 32 位准备的\n\nservice zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server\n    class main\n    priority -20\n    user root\n    group root readproc reserved_disk\n    socket zygote stream 660 root system\n    socket usap_pool_primary stream 660 root system\n    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse\n    onrestart write /sys/power/state on\n    onrestart restart audioserver\n    onrestart restart cameraserver\n    onrestart restart media\n    onrestart restart netd\n    onrestart restart wificond\n    writepid /dev/cpuset/foreground/tasks\n\n```\n\n```c++\n//  /system/etc/init/hw/init.zygote64_32.rc\n// zygote64_32 : 前部分 64 指主要模式，后部分 32 指辅助模式；同样的也会有 zygote32_64.rc、zygote32.rc、zygote64.rc  etc.\n\n# service 是 Android 初始化话语言的一部分，指 init 启动或退出时重新启动服务\n# 显然，这里的服务名称就是‘家喻户晓’的 zygote 进程\nservice zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote\n    class main\n    priority -20     ### 进程优先级 -20 ，值越小优先级越高，取值范围 [-20,19]\n    user root        ### 由 root 用户执行 \n    group root readproc reserved_disk\n    socket zygote stream 660 root system\n    socket usap_pool_primary stream 660 root system\n    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse\n    onrestart write /sys/power/state on\n    onrestart restart audioserver\n    onrestart restart cameraserver\n    onrestart restart media\n    onrestart restart netd\n    onrestart restart wificond\n    task_profiles ProcessCapacityHigh MaxPerformance\n\n# zygote_secondary ？？？？？\n# 你在看前面提到的‘主模式’和‘辅模式’，恰好 zygote 是 app_process64，zygote_secondary 是 app_process32，\n# 刚刚好对应上文件名 init.zygote64_32.rc 【主模式是64，辅模式是32】\nservice zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload\n    class main\n    priority -20\n    user root\n    group root readproc reserved_disk\n    socket zygote_secondary stream 660 root system\n    socket usap_pool_secondary stream 660 root system\n    onrestart restart zygote\n    task_profiles ProcessCapacityHigh MaxPerformance\n```\n\n# 创建 zygote Process\n\n在初始化第二阶段 SecondStageMain 解析了 inir.rc，回到 main.cpp 知道 GetBuiltinFunctionMap 函数映射表作为参数传入 SubcontextMain，第四部分开始执行，接着看看执行流程。\n\n```cpp\n//main.cpp\nreturn SubcontextMain(argc, argv, &function_map);\n\n//subcontext.cpp\nauto subcontext_process = SubcontextProcess(function_map, context, init_fd);\n\n//subcontext.cpp\nSubcontextProcess(const BuiltinFunctionMap* function_map, std::string context, int init_fd)\n: function_map_(function_map), context_(std::move(context)), init_fd_(init_fd){};\n//通过构造函数，直接将函数映射表赋值给成员 function_map_\nconst BuiltinFunctionMap* function_map_;\n\n//在 SubcontextMain 中开始主循环\nsubcontext_process.MainLoop();\n\n//主循环中准备执行命令\nRunCommand(subcontext_command.execute_command(), &reply);\n\n//映射表 function_map_ 被使用\n//根据参数（命令）查找对应的内置函数\nauto map_result = function_map_->Find(args);\n//找到了命令准备执行\nresult = RunBuiltinFunction(map_result->function, args, context_);\n\n//构造参数，直接调用\n//回想一下，映射表中是否有着一个 item\n//{\"class_start\", {1, 1, {false, do_class_start}}}\n//do_class_start：内置函数被声明在 builtins.cpp 中，下面看看其实现\nauto builtin_arguments = BuiltinArguments(context);\nreturn function(builtin_arguments);\n```\n\n```cpp\n//builtins.cpp\nstatic Result<void> do_class_start(const BuiltinArguments& args) {\n    if (android::base::GetBoolProperty(\"persist.init.dont_start_class.\" + args[1], false))\n        return {};\n    //服务启动\n    /*\n        1、ServiceList::GetInstance() 到底是什么东西啊？service 列表又是什么？\n    还记得第二阶段初始化 SecondStageMain 中这段代码吗\n    ServiceList& sm = ServiceList::GetInstance();\n    LoadBootScripts(am, sm); //这正是在解析 init.rc 文件，其中就包含 hw/init.rc\n    \n        2、可以认为 service 就是通过解析 init.rc 中的 service 获得的，此文件正好也导入 import hw/init.rc，其中包含 zygote 相关，\n    进而继续解析 init.zygote.rc，zygote.rc 文件内容也会被解析到\n\nServiceList.GetInstance 就是 std::vector<std::unique_ptr<Service>> services_;\nservice->classenames() 就是 std::set<std::string> classnames_;\n    \n        3、创建 Service 的构造函数：\n    Service::Service(const std::string& name, unsigned flags, uid_t uid, gid_t gid,\n       const std::vector<gid_t>& supp_gids, int namespace_flags,\n       const std::string& seclabel, Subcontext* subcontext_for_restart_commands,\n       const std::vector<std::string>& args, bool from_apex)\n       :  name_(name),\n       classnames_({\"default\"}),\n        ... etc\n     ){}\n    \n    */\n\n    for (const auto& service : ServiceList::GetInstance()) {\n        //参数的来源\n        /*\n            1、反复查阅资料得知 args 就是 rc 文件中每个 service 的参数\n        args[1] 自然是第二个参数\n        看 hw/zygote.rc service 执行 zygote 命令前部分\n        ...\n        service zygote\n          class main\n          ...\n        \n            2、因此 args[1] 其实就是 main\n        同样，我们看 hw/init.usb.rc 也有一个 service\n        ...\n        service adbd\n           class core\n           ...   \n        adb 的使用与 adbd 可有很大的关系，adbd 是一个远程服务进程\n        \n            3、所以这里的意思是：\n        根据参数名称去服务列表中查找是否存在，如果服务存在那么开始执行\n        服务一般是以进程的形式存在，且很有可能是守护进程\n        */\n        if (service->classnames().count(args[1])) {\n            if (auto result = service->StartIfNotDisabled(); !result.ok()) {\n                LOG(ERROR) << \"Could not start service '\" << service->name()\n                           << \"' as part of class '\" << args[1] << \"': \" << result.error();\n            }\n        }\n    }\n    return {};\n}\n\n//service.cpp\nResult<void> Service::StartIfNotDisabled() {\n    if (!(flags_ & SVC_DISABLED)) {\n        return Start();\n    } else {\n        flags_ |= SVC_DISABLED_START;\n    }\n    return {};\n}\n\n//service.cpp\nResult<void> Service::Start() {\n    \n    pid_t pid = -1;\n    if (namespaces_.flags) {\n        pid = clone(nullptr, nullptr, namespaces_.flags | SIGCHLD, nullptr);\n    } else {\n        //就这？进程就被 fork 出来了？？？\n        pid = fork();\n    }\n\n    // pid 0 是 idle 进程，肯定不能\n    if (pid == 0) {\n        umask(077);\n        RunService(override_mount_namespace, descriptors, std::move(pipefd));\n        _exit(127);\n    }\n    \n    //创建进程组\n    errno = -createProcessGroup(proc_attr_.uid, pid_, use_memcg);\n}\n```\n\n到此，通过查找服务列表创建了一堆进程，现在我们主要关注 `zygote`进程的创建，这时候间从 cpp 进入 Java\n\n# 初始化 zygote\n## 预加载配置\n\n```cpp\n//ZygoteInit.java\npublic class ZygoteInit {\n    /*\n     * 初始化主要做：\n     * 1、完成预初始化\n     * 2、创建 zygote 服务\n     * 3、创建系统服务\n     */\n    public static void main(String[] argv) {\n        //【1】完成预初始化\n        /*\n            1、调用 ZygoteHooks.onBeginPreload(); ZygoteHooks 从 Dalvik 包引入，在 framework 下没有找到的源码应该是在别处了，预想是对 Dalvik 的初始化；预加载结束时也会调用 ZygoteHooks.onEndPreload();\n            2、VMRuntime 为 Dalvik 预加载路径下的类 /system/etc/preloaded-classes、profilebootclasspath\n            3、创建并缓存非启动类路径下的类加载器 /system/framework/android.hidl.base-V1.0-java.jar、/system/framework/android.hidl.manager-V1.0-java.jar (HIDL 接口定义语言 —— https://source.android.google.cn/devices/architecture/hidl?hl=zh-cn)\n            4、加载资源，加载前先更新配置（比如当前设备分辨率、屏幕尺寸、语言），\n        根据分辨率加载 drawable、颜色资源\n            5、通过 native 加载为应用进程准备的 HAL 硬件抽象列表\n            6、如果开启了 ro.zygote.disable_gl_preload，也通过 native 执行图形 GL 预加载\n            7、通过 System.loadLibrary 加载共享库 android.lib、compiler_rt.lib、jnigraphics.lib\n            8、准备 Hyphenator 环境，缓存字体\n            9、加载 webviewchromium_loader.lib，准备 webview \n            10、通过 AndroidKeyStoreProvider 安装 keystore 内容提供者  \n        */\n        preload(bootTimingsTraceLog);\n        \n        //初始化 GC，并执行一次清理\n        ZygoteHooks.gcAndFinalize()；\n        //到这里 zygote 已经是【初始化完毕】\n        Zygote.initNativeState(isPrimaryZygote)\n        \n        //【2】创建 zygote 服务\n        ZygoteServer zygoteServer = null;\n        zygoteServer = new ZygoteServer(isPrimaryZygote);\n        \n        //【3】创建系统服务\n        if (startSystemServer) {\n            //fork，可见每一个系统服务都是独立的进程；ABI —— Application binary interface【参考链接】\n            //在 Android 项目中对应的就是 ndk filter，如 arm64、x86  .etc\n            //为支持不同平台，ndk filter 是能够配置多个的，所以是一个列表形式存在\n            Runnable r = forkSystemServer(abiList, zygoteSocketName, zygoteServer);\n            if (r != null) {\n                //创建之后马上运行\n                return;\n            }\n         }\n         \n        // zygote 服务进入自己的世界轮训\n        caller = zygoteServer.runSelectLoop(abiList);\n        if(caller != null){\n            caller.run();\n        }\n    }\n}\n```\n\n## 创建 zygoteServer\n\n服务主要还是通过 socket 实现，等待来自 Linux、unix 守护进程 (socket) 的消息，同时也负责子进程的创建。\n\n```cpp\n//ZygoteServer.java\nclass ZygoteServer {\n\n//列举几个重要的成员\n//用于监听 socket 连接\nprivate LocalServerSocket mZygoteSocket;\n//为 USAP 非专用应用进程池 服务\nprivate final LocalServerSocket mUsapPoolSocket;\n\nZygoteServer(boolean isPrimaryZygote) {\n        //通过 native 调用获取\n        mUsapPoolEventFD = Zygote.getUsapPoolEventFD();\n        \n        //主 zygote\n        if (isPrimaryZygote) {\n            //完成的 socket 名称需要和 ANDROID_SOCKET_ + socketname 拼接，\n            //然后拿完整的名称去系统环境变量中查找获取文件描述符 fd —— file describe，实际是一个整型数值【参考链接】\n            mZygoteSocket = Zygote.createManagedSocketFromInitSocket(Zygote.PRIMARY_SOCKET_NAME);\n            mUsapPoolSocket =\n                    Zygote.createManagedSocketFromInitSocket(\n                            Zygote.USAP_POOL_PRIMARY_SOCKET_NAME);\n        } else { //辅 zygote\n            mZygoteSocket = Zygote.createManagedSocketFromInitSocket(Zygote.SECONDARY_SOCKET_NAME);\n            mUsapPoolSocket =\n                    Zygote.createManagedSocketFromInitSocket(\n                            Zygote.USAP_POOL_SECONDARY_SOCKET_NAME);\n        }\n\n        //获取 非专用应用进程池 配置，还是通过系统配置 SystemPropertice 获取\n        /*\n            mUsapPoolSizeMax —— usap_pool_size_max\n            mUsapPoolSizeMin —— usap_pool_size_min\n            mUsapPoolRefillThreshold —— usap_refill_threshold\n        */\n        fetchUsapPoolPolicyProps();\n    }\n}\n\n//最重要的还是进入 poll 轮训【关于高并发 IO 多路复用，参考链接】\nRunnable runSelectLoop(String abiList) {\n\n    while(true){\n        //每一次轮训且超过一分钟都更新 USAP 配置\n        fetchUsapPoolPolicyPropsWithMinInterval\n\n        //系统调用 poll 处理文件描述符 fd\n        //Os.poll 返回值0：表示处理超时或非阻塞状态没有可处理的文件描述符\n        pollReturnValue = Os.poll(pollFDs, pollTimeoutMs);\n        \n        ... etc\n        \n        //还有一个需要关注的就是返回值，类型是 Runnable\n        //这是在特殊情况下发生重置 USAP，command 的内容是：\n        /*\n            fetchUsapPoolPolicyPropsIfUnfetched();\n            ZygoteHooks.preFork();\n            ZygoteHooks.postForkCommon();\n        */\n        final Runnable command = fillUsapPool(sessionSocketRawFDs, isPriorityRefill);\n        if (command != null) {\n            return command;\n        }\n}\n```\n\n## 创建 SystemServer\n\n```cpp\n//ZygoteInit.java\n\n/*\n    abiList —— ndl filter\n    socketname —— zygote 进程名称\n    zygoteServer —— 自然是 zygote 的主要服务\n*/\nprivate static Runnable forkSystemServer(String abiList, String socketName,\n                                             ZygoteServer zygoteServer) {\n    //启动参数\n    String[] args = {\n                \"--setuid=1000\", //linux 中不同 uid 可以代表拥有不同的权限\n                \"--setgid=1000\",\n                \"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,\"\n                        + \"1024,1032,1065,3001,3002,3003,3005,3006,3007,3009,3010,3011,3012\",\n                \"--capabilities=\" + capabilities + \",\" + capabilities,\n                \"--nice-name=system_server\",\n                \"--runtime-args\",\n                \"--target-sdk-version=\" + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,\n                \"com.android.server.SystemServer\",\n     };\n     \n\n    //省略参数构造过程\n    ZygoteArguments parsedArgs;\n    \n    //创建服务进程，还是调用 native 方法\n    /*\n        int pid = nativeForkSystemServer(\n        uid, gid, gids, runtimeFlags, rlimits,\n        permittedCapabilities, effectiveCapabilities);\n    */\n    pid = Zygote.forkSystemServer(\n        parsedArgs.mUid, parsedArgs.mGid,\n        parsedArgs.mGids,\n        parsedArgs.mRuntimeFlags,\n        null,\n        parsedArgs.mPermittedCapabilities,\n        parsedArgs.mEffectiveCapabilities);\n     \n    /*\n        pid=0 则是子进程被创建\n        pid=-1 则表示出错\n        pid (非0值)创建父进程\n    */\n    if (pid == 0) {\n        //？？？还会有第二个 zygote 进程，这是什么操作？？？\n        //看看官方描述：We determine this by comparing the device ABI list with this zygotes list. \n        //            If this zygote supports all ABIs this device supports, there won't be another zygote.\n        if (hasSecondZygote(abiList)) {\n            waitForSecondaryZygote(socketName);\n        }\n\n        zygoteServer.closeServerSocket();\n        //继续把参数分发给系统服务进程，这里做的事情比较多了\n        /*\n            1、获取系统服务类路径 systemServerClassPath，首先还是从系统环境中读取Os.getenv(\"SYSTEMSERVERCLASSPATH\")；当进程执行时 ART 将会处理此路径\n            2、负责 zygote 的 native 初始化和 application 的执行\n            3、这里无论先走那个分支，后面都会走到同一个方法调用：return RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,\n        classLoader);\n        \n            if (parsedArgs.mInvokeWith != null) {\n                WrapperInit.execApplication(parsedArgs.mInvokeWith,\n                        parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,\n                        VMRuntime.getCurrentInstructionSet(), null, args);\n            } else {\n                ClassLoader cl = getOrCreateSystemServerClassLoader();\n                return ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,\n                parsedArgs.mDisabledCompatChanges,\n                parsedArgs.mRemainingArgs, cl);\n            }\n        */\n        return handleSystemServerProcess(parsedArgs);\n    }\n}\n```\n\n```cpp\n//RuntimeInit.java\nprotected static Runnable applicationInit(int targetSdkVersion, long[] disabledCompatChanges,\n        String[] argv, ClassLoader classLoader) {\n\n    //设置运行目标版本\n    VMRuntime.getRuntime().setTargetSdkVersion(targetSdkVersion);\n    //通过启动类名找到此类，由类加载器加载并调用其 main 方法\n    return findStaticMain(args.startClass, args.startArgs, classLoader);\n}\n```\n\n```cpp\n//RuntimeInit.java\nprotected static Runnable findStaticMain(String className, String[] argv,\n            ClassLoader classLoader) {\n  \n    //常规方法，只是执行 classloader\n    Class<?> cl = Class.forName(className, true, classLoader);\n    Method m = cl.getMethod(\"main\", new Class[] { String[].class });\n    \n        //因为当前是在 zygote 进程创建 SystemServer，在此流程中本次执行我们认为参数 className=\"com.android.internal.os.SystemServer\"\n    return new MethodAndArgsCaller(m, argv);\n}\n```\n\n到这里 SystemServer 已经创建完成，接下来是通过 `MethodAndArgsCaller` 方法执行其中的 `main` 方法，源码路径是`/frameworks/base/services/java/com/android/server/SystemServer.java`。\n\n\n# 附加\n\n## 参考链接\n\n- Androi.bp：bp 文件，替换 .mk 的配置文，由 https://github.com/palantir/blueprint 框架解析\n- Android.mk：mk 文件，Android 程序编译\n- lmkd：low memory killer deamon 低内存终止守护进程\n- Apex：Android pony express 解决较低级别系统模块的安装流程 https://source.android.google.cn/devices/tech/ota/apex?hl=zh-cn\n- syspro 文件：系统共享信息的属性配置文件，通常作为系统 API 实现 https://source.android.google.cn/devices/architecture/sysprops-apis?hl=zh-cn#:~:text=一个,Sysprop%20说明文件包含一条属性消息，用来描述一组属性%E3%80%82\n- ABI：与 CPU 指令集相关 https://developer.android.google.cn/ndk/guides/abis?hl=zh-cn\n- fd ：文件描述符 https://www.cnblogs.com/cscshi/p/15705033.html\n- Linux IO 多路复用：select、poll、epoll https://cloud.tencent.com/developer/article/1005481\n- MTE：memory tagging extension  [ 内存标签扩展 ](https://cloud.tencent.com/developer/article/2003341#:~:text=Arm%20MTE（内存标记）作为Armv8.5指令集的一部分引入%E3%80%82%20MTE现在内置于Arm%20最近宣布的符合Armv9%20的%20CPU%20中，例如,Cortex-X2、Cortex-A710%20和Cortex-A510%E3%80%82%20未来基于Armv9%20的%20CPU%20也将集成%20MTE%E3%80%82)\n- 已加标记指针：https://source.android.google.cn/devices/tech/debug/tagged-pointers?hl=zh-cn\n\n","source":"_posts/undefined/Android系统启动zgote进程.md","raw":"---\ntitle: Android 系统 zygote \ncatalog: true\ndate: 2022-09-29 22:56:05\nsubtitle: 俗称 Java 世界的鼻祖\nheader-img: /img/220928/android_zygot_bg.png\ntags: AOSP\nsticky: 7\ncategories:\n---\n\n\n相关文件：\n\n- /system/core/init/init.cpp\n- /system/etc/init/hw/init.rc  (源码工程没找到，是从手机上获取)\n- /system/etc/init/hw/init.zygote32.rc （手机上获取）\n- /system/etc/init/hw/init.zygote64_32.rc （手机上获取）\n- /system/core/init/action.cpp\n- /system/core/init/service.cpp\n- /system/core/init/service_list.cpp\n- frameworks/base/core/java/com/android/internal/os/ZygoteInit.java\n- frameworks/base/core/java/com/android/internal/os/ZygoteServer.java\n- frameworks/base/core/java/com/android/internal/os/Zygote.java\n- frameworks/base/core/java/com/android/internal/os/WrapperInit.java\n\n\n# 解析初始化配置文件 \n\n初始化配置文件包括但不限于 init.rc、hw/init.rc。带着的疑惑继续看源码，之前提到执行到初始化第二阶段时 init 进程进入无限的轮询（loop），似乎不知去向何处？疑惑是在等待接收消息后再做处理，第二阶段中创建 init 进程中有一个重要的函数`LoadBootScripts(actionManager,serviceList)`，加载启动脚本的关键，相当重要，与`init.rc`文件存在千丝万缕的关系。\n\n```cpp\n//init.cpp\nstatic void LoadBootScripts(ActionManager& action_manager, ServiceList& service_list) {\n    Parser parser = CreateParser(action_manager, service_list);\n    std::string bootscript = GetProperty(\"ro.boot.init_rc\", \"\");\n    if (bootscript.empty()) {\n        //解析 init.rc，启动的关键文件\n        parser.ParseConfig(\"/system/etc/init/hw/init.rc\");\n        if (!parser.ParseConfig(\"/system/etc/init\")) {\n            late_import_paths.emplace_back(\"/system/etc/init\");\n        }\n        \n        parser.ParseConfig(\"/system_ext/etc/init\");\n        if (!parser.ParseConfig(\"/vendor/etc/init\")) {\n            //vendor 厂商相关的初始化配置\n            late_import_paths.emplace_back(\"/vendor/etc/init\");\n        }\n        if (!parser.ParseConfig(\"/odm/etc/init\")) {\n            late_import_paths.emplace_back(\"/odm/etc/init\");\n        }\n        if (!parser.ParseConfig(\"/product/etc/init\")) {\n            late_import_paths.emplace_back(\"/product/etc/init\");\n        }\n    } else {\n        parser.ParseConfig(bootscript);\n    }\n}\n```\n\n```cpp\n//init.cpp\nvoid SecondStageMain(){\n\n    //数据解析获得，开始构建 action 队列\n    ActionManager& am = ActionManager::GetInstance();\n    am.QueueBuiltinAction(SetupCgroupsAction, \"SetupCgroups\");\n    .... etc\n\n    //触发启动\n    am.QueueEventTrigger(\"init\");\n    \n    //若处于充电模式将延迟初始化\n    std::string bootmode = GetProperty(\"ro.bootmode\", \"\");\n    if (bootmode == \"charger\") {\n        am.QueueEventTrigger(\"charger\");\n    } else {\n        am.QueueEventTrigger(\"late-init\");\n    }\n    \n    //init 进程进入无限轮训\n    while(true){\n        //开始通过 command 命令执行 inir.rc 脚本各项服务以及初始化\n        if (!(prop_waiter_state.MightBeWaiting() || Service::is_exec_service_running())) {\n            am.ExecuteOneCommand();\n        }\n        if (!(prop_waiter_state.MightBeWaiting() || Service::is_exec_service_running())) {\n\n        // If there's more work to do, wake up again immediately.\n        if (am.HasMoreCommands())\n            epoll_timeout = 0ms;\n        }\n    }\n}\n```\n\n在 Android 11 上，init.rc 文件位于`/system/etc/init/hw/init.rc`\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92ab7d4ccd7a4118a1f705928d97c212~tplv-k3u1fbpfcp-watermark.image?)\n\n这是我在小米手机找的，rc 文件被视为 Android 初始化语言，那肯定也有自己的语法或格式，可以参考：https://www.cnblogs.com/gufanyuan/p/9350130.html\n\n**mark：**\n- action on 后携带一组命令\n- trigger 触发器，确定何时执行命令\n- service 当 init 退出时启动或重启\n- options 进一步控制命令执行的方式和时间\n- 命令：on 每一行代表一条命令\n- import 导入额外的 rc 文件需要解析\n\n看看 rc 文件：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0991aad99b524f9ebc147ce1fe075047~tplv-k3u1fbpfcp-watermark.image?)\n\n```cpp\n//  /system/etc/init/hw/init.rc\n# 小米系统，也有厂商自己的解析文件，需要执行属于自己的进程\n# import 指明导入其他配置文件需要解析\n# MIUI ADD:\nimport /init.miui.rc\n\n# 还记得 SecondStageMain actionManage 吗\n# am.QueueEventTrigger(\"early-init\");\non early-init\n    # 一个守护进程，负责处理 uevent 消息\n    start ueventd\n    # apex 服务于系统模块安装\n    exec_start apexd-bootstrap\n\n# 触发所有 action\n# am.QueueEventTrigger(\"init\");\non init\n    # 创建 stdio 标准输入输出链接\n    symlink /proc/self/fd/0 /dev/stdin\n    # 给 sdcard 更改权限\n    chmod 0770 /config/sdcardfs\n    \n    # 启动服务\n    # 系统服务，越来越接近应用层了\n    start servicemanager\n    # hw——hardware，硬件服务\n    start hwservicemanager\n    #供应商服务\n    start vndservicemanager\n    # init action 就执行到这，中间省略很多命令，这里只是抽取几个，点到为止\n    \n# 挂载文件系统以及核心服务\n# am.QueueEventTrigger(\"late-init\");\non late-init\n    # 触发 fs：Vold 控制和管理外部存储的进程\n    trigger early-fs\n\n    # 重点来了⚠️⚠️⚠️\n    # import /system/etc/init/hw/init.${ro.zygote}.rc\n    # zygote 进来了，常说的 Android 应用层的鼻祖\n    trigger zygote-start\n    \n    trigger early-boot\n    trigger boot\n\non boot\n    # 启动 HAL 硬件抽象类服务\n    class_start hal\n    # 启动核心类服务\n    class_start core\n```\n\n# 解析 zygote.rc\n\n看上面截图，现在该执行`init.zygote32.rc、init.zygote64_32.rc`，继续往下看。\n```cpp\n//  /system/etc/init/hw/init.zygote32.rc\n// zygote32 : 只有一个 32，那就是纯纯的为 32 位准备的\n\nservice zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server\n    class main\n    priority -20\n    user root\n    group root readproc reserved_disk\n    socket zygote stream 660 root system\n    socket usap_pool_primary stream 660 root system\n    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse\n    onrestart write /sys/power/state on\n    onrestart restart audioserver\n    onrestart restart cameraserver\n    onrestart restart media\n    onrestart restart netd\n    onrestart restart wificond\n    writepid /dev/cpuset/foreground/tasks\n\n```\n\n```c++\n//  /system/etc/init/hw/init.zygote64_32.rc\n// zygote64_32 : 前部分 64 指主要模式，后部分 32 指辅助模式；同样的也会有 zygote32_64.rc、zygote32.rc、zygote64.rc  etc.\n\n# service 是 Android 初始化话语言的一部分，指 init 启动或退出时重新启动服务\n# 显然，这里的服务名称就是‘家喻户晓’的 zygote 进程\nservice zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote\n    class main\n    priority -20     ### 进程优先级 -20 ，值越小优先级越高，取值范围 [-20,19]\n    user root        ### 由 root 用户执行 \n    group root readproc reserved_disk\n    socket zygote stream 660 root system\n    socket usap_pool_primary stream 660 root system\n    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse\n    onrestart write /sys/power/state on\n    onrestart restart audioserver\n    onrestart restart cameraserver\n    onrestart restart media\n    onrestart restart netd\n    onrestart restart wificond\n    task_profiles ProcessCapacityHigh MaxPerformance\n\n# zygote_secondary ？？？？？\n# 你在看前面提到的‘主模式’和‘辅模式’，恰好 zygote 是 app_process64，zygote_secondary 是 app_process32，\n# 刚刚好对应上文件名 init.zygote64_32.rc 【主模式是64，辅模式是32】\nservice zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload\n    class main\n    priority -20\n    user root\n    group root readproc reserved_disk\n    socket zygote_secondary stream 660 root system\n    socket usap_pool_secondary stream 660 root system\n    onrestart restart zygote\n    task_profiles ProcessCapacityHigh MaxPerformance\n```\n\n# 创建 zygote Process\n\n在初始化第二阶段 SecondStageMain 解析了 inir.rc，回到 main.cpp 知道 GetBuiltinFunctionMap 函数映射表作为参数传入 SubcontextMain，第四部分开始执行，接着看看执行流程。\n\n```cpp\n//main.cpp\nreturn SubcontextMain(argc, argv, &function_map);\n\n//subcontext.cpp\nauto subcontext_process = SubcontextProcess(function_map, context, init_fd);\n\n//subcontext.cpp\nSubcontextProcess(const BuiltinFunctionMap* function_map, std::string context, int init_fd)\n: function_map_(function_map), context_(std::move(context)), init_fd_(init_fd){};\n//通过构造函数，直接将函数映射表赋值给成员 function_map_\nconst BuiltinFunctionMap* function_map_;\n\n//在 SubcontextMain 中开始主循环\nsubcontext_process.MainLoop();\n\n//主循环中准备执行命令\nRunCommand(subcontext_command.execute_command(), &reply);\n\n//映射表 function_map_ 被使用\n//根据参数（命令）查找对应的内置函数\nauto map_result = function_map_->Find(args);\n//找到了命令准备执行\nresult = RunBuiltinFunction(map_result->function, args, context_);\n\n//构造参数，直接调用\n//回想一下，映射表中是否有着一个 item\n//{\"class_start\", {1, 1, {false, do_class_start}}}\n//do_class_start：内置函数被声明在 builtins.cpp 中，下面看看其实现\nauto builtin_arguments = BuiltinArguments(context);\nreturn function(builtin_arguments);\n```\n\n```cpp\n//builtins.cpp\nstatic Result<void> do_class_start(const BuiltinArguments& args) {\n    if (android::base::GetBoolProperty(\"persist.init.dont_start_class.\" + args[1], false))\n        return {};\n    //服务启动\n    /*\n        1、ServiceList::GetInstance() 到底是什么东西啊？service 列表又是什么？\n    还记得第二阶段初始化 SecondStageMain 中这段代码吗\n    ServiceList& sm = ServiceList::GetInstance();\n    LoadBootScripts(am, sm); //这正是在解析 init.rc 文件，其中就包含 hw/init.rc\n    \n        2、可以认为 service 就是通过解析 init.rc 中的 service 获得的，此文件正好也导入 import hw/init.rc，其中包含 zygote 相关，\n    进而继续解析 init.zygote.rc，zygote.rc 文件内容也会被解析到\n\nServiceList.GetInstance 就是 std::vector<std::unique_ptr<Service>> services_;\nservice->classenames() 就是 std::set<std::string> classnames_;\n    \n        3、创建 Service 的构造函数：\n    Service::Service(const std::string& name, unsigned flags, uid_t uid, gid_t gid,\n       const std::vector<gid_t>& supp_gids, int namespace_flags,\n       const std::string& seclabel, Subcontext* subcontext_for_restart_commands,\n       const std::vector<std::string>& args, bool from_apex)\n       :  name_(name),\n       classnames_({\"default\"}),\n        ... etc\n     ){}\n    \n    */\n\n    for (const auto& service : ServiceList::GetInstance()) {\n        //参数的来源\n        /*\n            1、反复查阅资料得知 args 就是 rc 文件中每个 service 的参数\n        args[1] 自然是第二个参数\n        看 hw/zygote.rc service 执行 zygote 命令前部分\n        ...\n        service zygote\n          class main\n          ...\n        \n            2、因此 args[1] 其实就是 main\n        同样，我们看 hw/init.usb.rc 也有一个 service\n        ...\n        service adbd\n           class core\n           ...   \n        adb 的使用与 adbd 可有很大的关系，adbd 是一个远程服务进程\n        \n            3、所以这里的意思是：\n        根据参数名称去服务列表中查找是否存在，如果服务存在那么开始执行\n        服务一般是以进程的形式存在，且很有可能是守护进程\n        */\n        if (service->classnames().count(args[1])) {\n            if (auto result = service->StartIfNotDisabled(); !result.ok()) {\n                LOG(ERROR) << \"Could not start service '\" << service->name()\n                           << \"' as part of class '\" << args[1] << \"': \" << result.error();\n            }\n        }\n    }\n    return {};\n}\n\n//service.cpp\nResult<void> Service::StartIfNotDisabled() {\n    if (!(flags_ & SVC_DISABLED)) {\n        return Start();\n    } else {\n        flags_ |= SVC_DISABLED_START;\n    }\n    return {};\n}\n\n//service.cpp\nResult<void> Service::Start() {\n    \n    pid_t pid = -1;\n    if (namespaces_.flags) {\n        pid = clone(nullptr, nullptr, namespaces_.flags | SIGCHLD, nullptr);\n    } else {\n        //就这？进程就被 fork 出来了？？？\n        pid = fork();\n    }\n\n    // pid 0 是 idle 进程，肯定不能\n    if (pid == 0) {\n        umask(077);\n        RunService(override_mount_namespace, descriptors, std::move(pipefd));\n        _exit(127);\n    }\n    \n    //创建进程组\n    errno = -createProcessGroup(proc_attr_.uid, pid_, use_memcg);\n}\n```\n\n到此，通过查找服务列表创建了一堆进程，现在我们主要关注 `zygote`进程的创建，这时候间从 cpp 进入 Java\n\n# 初始化 zygote\n## 预加载配置\n\n```cpp\n//ZygoteInit.java\npublic class ZygoteInit {\n    /*\n     * 初始化主要做：\n     * 1、完成预初始化\n     * 2、创建 zygote 服务\n     * 3、创建系统服务\n     */\n    public static void main(String[] argv) {\n        //【1】完成预初始化\n        /*\n            1、调用 ZygoteHooks.onBeginPreload(); ZygoteHooks 从 Dalvik 包引入，在 framework 下没有找到的源码应该是在别处了，预想是对 Dalvik 的初始化；预加载结束时也会调用 ZygoteHooks.onEndPreload();\n            2、VMRuntime 为 Dalvik 预加载路径下的类 /system/etc/preloaded-classes、profilebootclasspath\n            3、创建并缓存非启动类路径下的类加载器 /system/framework/android.hidl.base-V1.0-java.jar、/system/framework/android.hidl.manager-V1.0-java.jar (HIDL 接口定义语言 —— https://source.android.google.cn/devices/architecture/hidl?hl=zh-cn)\n            4、加载资源，加载前先更新配置（比如当前设备分辨率、屏幕尺寸、语言），\n        根据分辨率加载 drawable、颜色资源\n            5、通过 native 加载为应用进程准备的 HAL 硬件抽象列表\n            6、如果开启了 ro.zygote.disable_gl_preload，也通过 native 执行图形 GL 预加载\n            7、通过 System.loadLibrary 加载共享库 android.lib、compiler_rt.lib、jnigraphics.lib\n            8、准备 Hyphenator 环境，缓存字体\n            9、加载 webviewchromium_loader.lib，准备 webview \n            10、通过 AndroidKeyStoreProvider 安装 keystore 内容提供者  \n        */\n        preload(bootTimingsTraceLog);\n        \n        //初始化 GC，并执行一次清理\n        ZygoteHooks.gcAndFinalize()；\n        //到这里 zygote 已经是【初始化完毕】\n        Zygote.initNativeState(isPrimaryZygote)\n        \n        //【2】创建 zygote 服务\n        ZygoteServer zygoteServer = null;\n        zygoteServer = new ZygoteServer(isPrimaryZygote);\n        \n        //【3】创建系统服务\n        if (startSystemServer) {\n            //fork，可见每一个系统服务都是独立的进程；ABI —— Application binary interface【参考链接】\n            //在 Android 项目中对应的就是 ndk filter，如 arm64、x86  .etc\n            //为支持不同平台，ndk filter 是能够配置多个的，所以是一个列表形式存在\n            Runnable r = forkSystemServer(abiList, zygoteSocketName, zygoteServer);\n            if (r != null) {\n                //创建之后马上运行\n                return;\n            }\n         }\n         \n        // zygote 服务进入自己的世界轮训\n        caller = zygoteServer.runSelectLoop(abiList);\n        if(caller != null){\n            caller.run();\n        }\n    }\n}\n```\n\n## 创建 zygoteServer\n\n服务主要还是通过 socket 实现，等待来自 Linux、unix 守护进程 (socket) 的消息，同时也负责子进程的创建。\n\n```cpp\n//ZygoteServer.java\nclass ZygoteServer {\n\n//列举几个重要的成员\n//用于监听 socket 连接\nprivate LocalServerSocket mZygoteSocket;\n//为 USAP 非专用应用进程池 服务\nprivate final LocalServerSocket mUsapPoolSocket;\n\nZygoteServer(boolean isPrimaryZygote) {\n        //通过 native 调用获取\n        mUsapPoolEventFD = Zygote.getUsapPoolEventFD();\n        \n        //主 zygote\n        if (isPrimaryZygote) {\n            //完成的 socket 名称需要和 ANDROID_SOCKET_ + socketname 拼接，\n            //然后拿完整的名称去系统环境变量中查找获取文件描述符 fd —— file describe，实际是一个整型数值【参考链接】\n            mZygoteSocket = Zygote.createManagedSocketFromInitSocket(Zygote.PRIMARY_SOCKET_NAME);\n            mUsapPoolSocket =\n                    Zygote.createManagedSocketFromInitSocket(\n                            Zygote.USAP_POOL_PRIMARY_SOCKET_NAME);\n        } else { //辅 zygote\n            mZygoteSocket = Zygote.createManagedSocketFromInitSocket(Zygote.SECONDARY_SOCKET_NAME);\n            mUsapPoolSocket =\n                    Zygote.createManagedSocketFromInitSocket(\n                            Zygote.USAP_POOL_SECONDARY_SOCKET_NAME);\n        }\n\n        //获取 非专用应用进程池 配置，还是通过系统配置 SystemPropertice 获取\n        /*\n            mUsapPoolSizeMax —— usap_pool_size_max\n            mUsapPoolSizeMin —— usap_pool_size_min\n            mUsapPoolRefillThreshold —— usap_refill_threshold\n        */\n        fetchUsapPoolPolicyProps();\n    }\n}\n\n//最重要的还是进入 poll 轮训【关于高并发 IO 多路复用，参考链接】\nRunnable runSelectLoop(String abiList) {\n\n    while(true){\n        //每一次轮训且超过一分钟都更新 USAP 配置\n        fetchUsapPoolPolicyPropsWithMinInterval\n\n        //系统调用 poll 处理文件描述符 fd\n        //Os.poll 返回值0：表示处理超时或非阻塞状态没有可处理的文件描述符\n        pollReturnValue = Os.poll(pollFDs, pollTimeoutMs);\n        \n        ... etc\n        \n        //还有一个需要关注的就是返回值，类型是 Runnable\n        //这是在特殊情况下发生重置 USAP，command 的内容是：\n        /*\n            fetchUsapPoolPolicyPropsIfUnfetched();\n            ZygoteHooks.preFork();\n            ZygoteHooks.postForkCommon();\n        */\n        final Runnable command = fillUsapPool(sessionSocketRawFDs, isPriorityRefill);\n        if (command != null) {\n            return command;\n        }\n}\n```\n\n## 创建 SystemServer\n\n```cpp\n//ZygoteInit.java\n\n/*\n    abiList —— ndl filter\n    socketname —— zygote 进程名称\n    zygoteServer —— 自然是 zygote 的主要服务\n*/\nprivate static Runnable forkSystemServer(String abiList, String socketName,\n                                             ZygoteServer zygoteServer) {\n    //启动参数\n    String[] args = {\n                \"--setuid=1000\", //linux 中不同 uid 可以代表拥有不同的权限\n                \"--setgid=1000\",\n                \"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,\"\n                        + \"1024,1032,1065,3001,3002,3003,3005,3006,3007,3009,3010,3011,3012\",\n                \"--capabilities=\" + capabilities + \",\" + capabilities,\n                \"--nice-name=system_server\",\n                \"--runtime-args\",\n                \"--target-sdk-version=\" + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,\n                \"com.android.server.SystemServer\",\n     };\n     \n\n    //省略参数构造过程\n    ZygoteArguments parsedArgs;\n    \n    //创建服务进程，还是调用 native 方法\n    /*\n        int pid = nativeForkSystemServer(\n        uid, gid, gids, runtimeFlags, rlimits,\n        permittedCapabilities, effectiveCapabilities);\n    */\n    pid = Zygote.forkSystemServer(\n        parsedArgs.mUid, parsedArgs.mGid,\n        parsedArgs.mGids,\n        parsedArgs.mRuntimeFlags,\n        null,\n        parsedArgs.mPermittedCapabilities,\n        parsedArgs.mEffectiveCapabilities);\n     \n    /*\n        pid=0 则是子进程被创建\n        pid=-1 则表示出错\n        pid (非0值)创建父进程\n    */\n    if (pid == 0) {\n        //？？？还会有第二个 zygote 进程，这是什么操作？？？\n        //看看官方描述：We determine this by comparing the device ABI list with this zygotes list. \n        //            If this zygote supports all ABIs this device supports, there won't be another zygote.\n        if (hasSecondZygote(abiList)) {\n            waitForSecondaryZygote(socketName);\n        }\n\n        zygoteServer.closeServerSocket();\n        //继续把参数分发给系统服务进程，这里做的事情比较多了\n        /*\n            1、获取系统服务类路径 systemServerClassPath，首先还是从系统环境中读取Os.getenv(\"SYSTEMSERVERCLASSPATH\")；当进程执行时 ART 将会处理此路径\n            2、负责 zygote 的 native 初始化和 application 的执行\n            3、这里无论先走那个分支，后面都会走到同一个方法调用：return RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,\n        classLoader);\n        \n            if (parsedArgs.mInvokeWith != null) {\n                WrapperInit.execApplication(parsedArgs.mInvokeWith,\n                        parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,\n                        VMRuntime.getCurrentInstructionSet(), null, args);\n            } else {\n                ClassLoader cl = getOrCreateSystemServerClassLoader();\n                return ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,\n                parsedArgs.mDisabledCompatChanges,\n                parsedArgs.mRemainingArgs, cl);\n            }\n        */\n        return handleSystemServerProcess(parsedArgs);\n    }\n}\n```\n\n```cpp\n//RuntimeInit.java\nprotected static Runnable applicationInit(int targetSdkVersion, long[] disabledCompatChanges,\n        String[] argv, ClassLoader classLoader) {\n\n    //设置运行目标版本\n    VMRuntime.getRuntime().setTargetSdkVersion(targetSdkVersion);\n    //通过启动类名找到此类，由类加载器加载并调用其 main 方法\n    return findStaticMain(args.startClass, args.startArgs, classLoader);\n}\n```\n\n```cpp\n//RuntimeInit.java\nprotected static Runnable findStaticMain(String className, String[] argv,\n            ClassLoader classLoader) {\n  \n    //常规方法，只是执行 classloader\n    Class<?> cl = Class.forName(className, true, classLoader);\n    Method m = cl.getMethod(\"main\", new Class[] { String[].class });\n    \n        //因为当前是在 zygote 进程创建 SystemServer，在此流程中本次执行我们认为参数 className=\"com.android.internal.os.SystemServer\"\n    return new MethodAndArgsCaller(m, argv);\n}\n```\n\n到这里 SystemServer 已经创建完成，接下来是通过 `MethodAndArgsCaller` 方法执行其中的 `main` 方法，源码路径是`/frameworks/base/services/java/com/android/server/SystemServer.java`。\n\n\n# 附加\n\n## 参考链接\n\n- Androi.bp：bp 文件，替换 .mk 的配置文，由 https://github.com/palantir/blueprint 框架解析\n- Android.mk：mk 文件，Android 程序编译\n- lmkd：low memory killer deamon 低内存终止守护进程\n- Apex：Android pony express 解决较低级别系统模块的安装流程 https://source.android.google.cn/devices/tech/ota/apex?hl=zh-cn\n- syspro 文件：系统共享信息的属性配置文件，通常作为系统 API 实现 https://source.android.google.cn/devices/architecture/sysprops-apis?hl=zh-cn#:~:text=一个,Sysprop%20说明文件包含一条属性消息，用来描述一组属性%E3%80%82\n- ABI：与 CPU 指令集相关 https://developer.android.google.cn/ndk/guides/abis?hl=zh-cn\n- fd ：文件描述符 https://www.cnblogs.com/cscshi/p/15705033.html\n- Linux IO 多路复用：select、poll、epoll https://cloud.tencent.com/developer/article/1005481\n- MTE：memory tagging extension  [ 内存标签扩展 ](https://cloud.tencent.com/developer/article/2003341#:~:text=Arm%20MTE（内存标记）作为Armv8.5指令集的一部分引入%E3%80%82%20MTE现在内置于Arm%20最近宣布的符合Armv9%20的%20CPU%20中，例如,Cortex-X2、Cortex-A710%20和Cortex-A510%E3%80%82%20未来基于Armv9%20的%20CPU%20也将集成%20MTE%E3%80%82)\n- 已加标记指针：https://source.android.google.cn/devices/tech/debug/tagged-pointers?hl=zh-cn\n\n","slug":"Android系统启动zgote进程","published":1,"lang":"undefined","updated":"2022-09-29T14:56:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q7000e7tqphmxcfk18","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>相关文件：</p>\n<ul>\n<li>/system/core/init/init.cpp</li>\n<li>/system/etc/init/hw/init.rc  (源码工程没找到，是从手机上获取)</li>\n<li>/system/etc/init/hw/init.zygote32.rc （手机上获取）</li>\n<li>/system/etc/init/hw/init.zygote64_32.rc （手机上获取）</li>\n<li>/system/core/init/action.cpp</li>\n<li>/system/core/init/service.cpp</li>\n<li>/system/core/init/service_list.cpp</li>\n<li>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</li>\n<li>frameworks/base/core/java/com/android/internal/os/ZygoteServer.java</li>\n<li>frameworks/base/core/java/com/android/internal/os/Zygote.java</li>\n<li>frameworks/base/core/java/com/android/internal/os/WrapperInit.java</li>\n</ul>\n<h1>解析初始化配置文件</h1>\n<p>初始化配置文件包括但不限于 init.rc、hw/init.rc。带着的疑惑继续看源码，之前提到执行到初始化第二阶段时 init 进程进入无限的轮询（loop），似乎不知去向何处？疑惑是在等待接收消息后再做处理，第二阶段中创建 init 进程中有一个重要的函数<code>LoadBootScripts(actionManager,serviceList)</code>，加载启动脚本的关键，相当重要，与<code>init.rc</code>文件存在千丝万缕的关系。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//init.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">LoadBootScripts</span><span class=\"params\">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> </span>&#123;</span><br><span class=\"line\">    Parser parser = <span class=\"built_in\">CreateParser</span>(action_manager, service_list);</span><br><span class=\"line\">    std::string bootscript = <span class=\"built_in\">GetProperty</span>(<span class=\"string\">&quot;ro.boot.init_rc&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bootscript.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解析 init.rc，启动的关键文件</span></span><br><span class=\"line\">        parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/system/etc/init/hw/init.rc&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/system/etc/init&quot;</span>)) &#123;</span><br><span class=\"line\">            late_import_paths.<span class=\"built_in\">emplace_back</span>(<span class=\"string\">&quot;/system/etc/init&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/system_ext/etc/init&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/vendor/etc/init&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//vendor 厂商相关的初始化配置</span></span><br><span class=\"line\">            late_import_paths.<span class=\"built_in\">emplace_back</span>(<span class=\"string\">&quot;/vendor/etc/init&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/odm/etc/init&quot;</span>)) &#123;</span><br><span class=\"line\">            late_import_paths.<span class=\"built_in\">emplace_back</span>(<span class=\"string\">&quot;/odm/etc/init&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/product/etc/init&quot;</span>)) &#123;</span><br><span class=\"line\">            late_import_paths.<span class=\"built_in\">emplace_back</span>(<span class=\"string\">&quot;/product/etc/init&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        parser.<span class=\"built_in\">ParseConfig</span>(bootscript);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//init.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SecondStageMain</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据解析获得，开始构建 action 队列</span></span><br><span class=\"line\">    ActionManager&amp; am = ActionManager::<span class=\"built_in\">GetInstance</span>();</span><br><span class=\"line\">    am.<span class=\"built_in\">QueueBuiltinAction</span>(SetupCgroupsAction, <span class=\"string\">&quot;SetupCgroups&quot;</span>);</span><br><span class=\"line\">    .... etc</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//触发启动</span></span><br><span class=\"line\">    am.<span class=\"built_in\">QueueEventTrigger</span>(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//若处于充电模式将延迟初始化</span></span><br><span class=\"line\">    std::string bootmode = <span class=\"built_in\">GetProperty</span>(<span class=\"string\">&quot;ro.bootmode&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bootmode == <span class=\"string\">&quot;charger&quot;</span>) &#123;</span><br><span class=\"line\">        am.<span class=\"built_in\">QueueEventTrigger</span>(<span class=\"string\">&quot;charger&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        am.<span class=\"built_in\">QueueEventTrigger</span>(<span class=\"string\">&quot;late-init&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//init 进程进入无限轮训</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始通过 command 命令执行 inir.rc 脚本各项服务以及初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(prop_waiter_state.<span class=\"built_in\">MightBeWaiting</span>() || Service::<span class=\"built_in\">is_exec_service_running</span>())) &#123;</span><br><span class=\"line\">            am.<span class=\"built_in\">ExecuteOneCommand</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(prop_waiter_state.<span class=\"built_in\">MightBeWaiting</span>() || Service::<span class=\"built_in\">is_exec_service_running</span>())) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If there&#x27;s more work to do, wake up again immediately.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (am.<span class=\"built_in\">HasMoreCommands</span>())</span><br><span class=\"line\">            epoll_timeout = <span class=\"number\">0</span>ms;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Android 11 上，init.rc 文件位于<code>/system/etc/init/hw/init.rc</code></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92ab7d4ccd7a4118a1f705928d97c212~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>这是我在小米手机找的，rc 文件被视为 Android 初始化语言，那肯定也有自己的语法或格式，可以参考：<a href=\"https://www.cnblogs.com/gufanyuan/p/9350130.html\">https://www.cnblogs.com/gufanyuan/p/9350130.html</a></p>\n<p><strong>mark：</strong></p>\n<ul>\n<li>action on 后携带一组命令</li>\n<li>trigger 触发器，确定何时执行命令</li>\n<li>service 当 init 退出时启动或重启</li>\n<li>options 进一步控制命令执行的方式和时间</li>\n<li>命令：on 每一行代表一条命令</li>\n<li>import 导入额外的 rc 文件需要解析</li>\n</ul>\n<p>看看 rc 文件：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0991aad99b524f9ebc147ce1fe075047~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  /system/etc/init/hw/init.rc</span></span><br><span class=\"line\"># 小米系统，也有厂商自己的解析文件，需要执行属于自己的进程</span><br><span class=\"line\"><span class=\"meta\"># import 指明导入其他配置文件需要解析</span></span><br><span class=\"line\"># MIUI ADD:</span><br><span class=\"line\"><span class=\"keyword\">import</span> /init.miui.rc</span><br><span class=\"line\"></span><br><span class=\"line\"># 还记得 SecondStageMain actionManage 吗</span><br><span class=\"line\"><span class=\"meta\"># am.QueueEventTrigger(<span class=\"meta-string\">&quot;early-init&quot;</span>);</span></span><br><span class=\"line\">on early-init</span><br><span class=\"line\">    # 一个守护进程，负责处理 uevent 消息</span><br><span class=\"line\">    start ueventd</span><br><span class=\"line\">    <span class=\"meta\"># apex 服务于系统模块安装</span></span><br><span class=\"line\">    exec_start apexd-bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\"># 触发所有 action</span><br><span class=\"line\"><span class=\"meta\"># am.QueueEventTrigger(<span class=\"meta-string\">&quot;init&quot;</span>);</span></span><br><span class=\"line\">on init</span><br><span class=\"line\">    # 创建 stdio 标准输入输出链接</span><br><span class=\"line\">    symlink /proc/self/fd/<span class=\"number\">0</span> /dev/stdin</span><br><span class=\"line\">    # 给 sdcard 更改权限</span><br><span class=\"line\">    chmod <span class=\"number\">0770</span> /config/sdcardfs</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 启动服务</span><br><span class=\"line\">    # 系统服务，越来越接近应用层了</span><br><span class=\"line\">    start servicemanager</span><br><span class=\"line\">    <span class=\"meta\"># hw——hardware，硬件服务</span></span><br><span class=\"line\">    start hwservicemanager</span><br><span class=\"line\">    #供应商服务</span><br><span class=\"line\">    start vndservicemanager</span><br><span class=\"line\">    <span class=\"meta\"># init action 就执行到这，中间省略很多命令，这里只是抽取几个，点到为止</span></span><br><span class=\"line\">    </span><br><span class=\"line\"># 挂载文件系统以及核心服务</span><br><span class=\"line\"><span class=\"meta\"># am.QueueEventTrigger(<span class=\"meta-string\">&quot;late-init&quot;</span>);</span></span><br><span class=\"line\">on late-init</span><br><span class=\"line\">    # 触发 fs：Vold 控制和管理外部存储的进程</span><br><span class=\"line\">    trigger early-fs</span><br><span class=\"line\"></span><br><span class=\"line\">    # 重点来了⚠️⚠️⚠️</span><br><span class=\"line\">    <span class=\"meta\"># import /system/etc/init/hw/init.$&#123;ro.zygote&#125;.rc</span></span><br><span class=\"line\">    <span class=\"meta\"># zygote 进来了，常说的 Android 应用层的鼻祖</span></span><br><span class=\"line\">    trigger zygote-start</span><br><span class=\"line\">    </span><br><span class=\"line\">    trigger early-boot</span><br><span class=\"line\">    trigger boot</span><br><span class=\"line\"></span><br><span class=\"line\">on boot</span><br><span class=\"line\">    # 启动 HAL 硬件抽象类服务</span><br><span class=\"line\">    class_start hal</span><br><span class=\"line\">    # 启动核心类服务</span><br><span class=\"line\">    class_start core</span><br></pre></td></tr></table></figure>\n<h1>解析 zygote.rc</h1>\n<p>看上面截图，现在该执行<code>init.zygote32.rc、init.zygote64_32.rc</code>，继续往下看。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  /system/etc/init/hw/init.zygote32.rc</span></span><br><span class=\"line\"><span class=\"comment\">// zygote32 : 只有一个 32，那就是纯纯的为 32 位准备的</span></span><br><span class=\"line\"></span><br><span class=\"line\">service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">main</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">priority</span> -20</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">user</span> <span class=\"title\">root</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">group</span> <span class=\"title\">root</span> <span class=\"title\">readproc</span> <span class=\"title\">reserved_disk</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">socket</span> <span class=\"title\">zygote</span> <span class=\"title\">stream</span> 660 <span class=\"title\">root</span> <span class=\"title\">system</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">socket</span> <span class=\"title\">usap_pool_primary</span> <span class=\"title\">stream</span> 660 <span class=\"title\">root</span> <span class=\"title\">system</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">exec_background</span> - <span class=\"title\">system</span> <span class=\"title\">system</span> -- /<span class=\"title\">system</span>/<span class=\"title\">bin</span>/<span class=\"title\">vdc</span> <span class=\"title\">volume</span> <span class=\"title\">abort_fuse</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">write</span> /<span class=\"title\">sys</span>/<span class=\"title\">power</span>/<span class=\"title\">state</span> <span class=\"title\">on</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">audioserver</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">cameraserver</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">media</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">netd</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">wificond</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">writepid</span> /<span class=\"title\">dev</span>/<span class=\"title\">cpuset</span>/<span class=\"title\">foreground</span>/<span class=\"title\">tasks</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  /system/etc/init/hw/init.zygote64_32.rc</span></span><br><span class=\"line\"><span class=\"comment\">// zygote64_32 : 前部分 64 指主要模式，后部分 32 指辅助模式；同样的也会有 zygote32_64.rc、zygote32.rc、zygote64.rc  etc.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># service 是 Android 初始化话语言的一部分，指 init 启动或退出时重新启动服务</span></span><br><span class=\"line\"># 显然，这里的服务名称就是‘家喻户晓’的 zygote 进程</span><br><span class=\"line\">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span><br><span class=\"line\">    class main</span><br><span class=\"line\">    priority <span class=\"number\">-20</span>     ### 进程优先级 <span class=\"number\">-20</span> ，值越小优先级越高，取值范围 [<span class=\"number\">-20</span>,<span class=\"number\">19</span>]</span><br><span class=\"line\">    user root        ### 由 root 用户执行 </span><br><span class=\"line\">    group root readproc reserved_disk</span><br><span class=\"line\">    socket zygote stream <span class=\"number\">660</span> root system</span><br><span class=\"line\">    socket usap_pool_primary stream <span class=\"number\">660</span> root system</span><br><span class=\"line\">    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse</span><br><span class=\"line\">    onrestart write /sys/power/state on</span><br><span class=\"line\">    onrestart restart audioserver</span><br><span class=\"line\">    onrestart restart cameraserver</span><br><span class=\"line\">    onrestart restart media</span><br><span class=\"line\">    onrestart restart netd</span><br><span class=\"line\">    onrestart restart wificond</span><br><span class=\"line\">    task_profiles ProcessCapacityHigh MaxPerformance</span><br><span class=\"line\"></span><br><span class=\"line\"># zygote_secondary ？？？？？</span><br><span class=\"line\"># 你在看前面提到的‘主模式’和‘辅模式’，恰好 zygote 是 app_process64，zygote_secondary 是 app_process32，</span><br><span class=\"line\"># 刚刚好对应上文件名 init.zygote64_32.rc 【主模式是<span class=\"number\">64</span>，辅模式是<span class=\"number\">32</span>】</span><br><span class=\"line\">service zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload</span><br><span class=\"line\">    class main</span><br><span class=\"line\">    priority <span class=\"number\">-20</span></span><br><span class=\"line\">    user root</span><br><span class=\"line\">    group root readproc reserved_disk</span><br><span class=\"line\">    socket zygote_secondary stream <span class=\"number\">660</span> root system</span><br><span class=\"line\">    socket usap_pool_secondary stream <span class=\"number\">660</span> root system</span><br><span class=\"line\">    onrestart restart zygote</span><br><span class=\"line\">    task_profiles ProcessCapacityHigh MaxPerformance</span><br></pre></td></tr></table></figure>\n<h1>创建 zygote Process</h1>\n<p>在初始化第二阶段 SecondStageMain 解析了 inir.rc，回到 main.cpp 知道 GetBuiltinFunctionMap 函数映射表作为参数传入 SubcontextMain，第四部分开始执行，接着看看执行流程。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">SubcontextMain</span>(argc, argv, &amp;function_map);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> subcontext_process = <span class=\"built_in\">SubcontextProcess</span>(function_map, context, init_fd);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"built_in\">SubcontextProcess</span>(<span class=\"keyword\">const</span> BuiltinFunctionMap* function_map, std::string context, <span class=\"keyword\">int</span> init_fd)</span><br><span class=\"line\">: <span class=\"built_in\">function_map_</span>(function_map), <span class=\"built_in\">context_</span>(std::<span class=\"built_in\">move</span>(context)), <span class=\"built_in\">init_fd_</span>(init_fd)&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//通过构造函数，直接将函数映射表赋值给成员 function_map_</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> BuiltinFunctionMap* function_map_;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在 SubcontextMain 中开始主循环</span></span><br><span class=\"line\">subcontext_process.<span class=\"built_in\">MainLoop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主循环中准备执行命令</span></span><br><span class=\"line\"><span class=\"built_in\">RunCommand</span>(subcontext_command.<span class=\"built_in\">execute_command</span>(), &amp;reply);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//映射表 function_map_ 被使用</span></span><br><span class=\"line\"><span class=\"comment\">//根据参数（命令）查找对应的内置函数</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> map_result = function_map_-&gt;<span class=\"built_in\">Find</span>(args);</span><br><span class=\"line\"><span class=\"comment\">//找到了命令准备执行</span></span><br><span class=\"line\">result = <span class=\"built_in\">RunBuiltinFunction</span>(map_result-&gt;function, args, context_);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造参数，直接调用</span></span><br><span class=\"line\"><span class=\"comment\">//回想一下，映射表中是否有着一个 item</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;&quot;class_start&quot;, &#123;1, 1, &#123;false, do_class_start&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//do_class_start：内置函数被声明在 builtins.cpp 中，下面看看其实现</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> builtin_arguments = <span class=\"built_in\">BuiltinArguments</span>(context);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">function</span>(builtin_arguments);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//builtins.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Result&lt;<span class=\"keyword\">void</span>&gt; <span class=\"title\">do_class_start</span><span class=\"params\">(<span class=\"keyword\">const</span> BuiltinArguments&amp; args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (android::base::<span class=\"built_in\">GetBoolProperty</span>(<span class=\"string\">&quot;persist.init.dont_start_class.&quot;</span> + args[<span class=\"number\">1</span>], <span class=\"literal\">false</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//服务启动</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、ServiceList::GetInstance() 到底是什么东西啊？service 列表又是什么？</span></span><br><span class=\"line\"><span class=\"comment\">    还记得第二阶段初始化 SecondStageMain 中这段代码吗</span></span><br><span class=\"line\"><span class=\"comment\">    ServiceList&amp; sm = ServiceList::GetInstance();</span></span><br><span class=\"line\"><span class=\"comment\">    LoadBootScripts(am, sm); //这正是在解析 init.rc 文件，其中就包含 hw/init.rc</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">        2、可以认为 service 就是通过解析 init.rc 中的 service 获得的，此文件正好也导入 import hw/init.rc，其中包含 zygote 相关，</span></span><br><span class=\"line\"><span class=\"comment\">    进而继续解析 init.zygote.rc，zygote.rc 文件内容也会被解析到</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">ServiceList.GetInstance 就是 std::vector&lt;std::unique_ptr&lt;Service&gt;&gt; services_;</span></span><br><span class=\"line\"><span class=\"comment\">service-&gt;classenames() 就是 std::set&lt;std::string&gt; classnames_;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">        3、创建 Service 的构造函数：</span></span><br><span class=\"line\"><span class=\"comment\">    Service::Service(const std::string&amp; name, unsigned flags, uid_t uid, gid_t gid,</span></span><br><span class=\"line\"><span class=\"comment\">       const std::vector&lt;gid_t&gt;&amp; supp_gids, int namespace_flags,</span></span><br><span class=\"line\"><span class=\"comment\">       const std::string&amp; seclabel, Subcontext* subcontext_for_restart_commands,</span></span><br><span class=\"line\"><span class=\"comment\">       const std::vector&lt;std::string&gt;&amp; args, bool from_apex)</span></span><br><span class=\"line\"><span class=\"comment\">       :  name_(name),</span></span><br><span class=\"line\"><span class=\"comment\">       classnames_(&#123;&quot;default&quot;&#125;),</span></span><br><span class=\"line\"><span class=\"comment\">        ... etc</span></span><br><span class=\"line\"><span class=\"comment\">     )&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; service : ServiceList::<span class=\"built_in\">GetInstance</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//参数的来源</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、反复查阅资料得知 args 就是 rc 文件中每个 service 的参数</span></span><br><span class=\"line\"><span class=\"comment\">        args[1] 自然是第二个参数</span></span><br><span class=\"line\"><span class=\"comment\">        看 hw/zygote.rc service 执行 zygote 命令前部分</span></span><br><span class=\"line\"><span class=\"comment\">        ...</span></span><br><span class=\"line\"><span class=\"comment\">        service zygote</span></span><br><span class=\"line\"><span class=\"comment\">          class main</span></span><br><span class=\"line\"><span class=\"comment\">          ...</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">            2、因此 args[1] 其实就是 main</span></span><br><span class=\"line\"><span class=\"comment\">        同样，我们看 hw/init.usb.rc 也有一个 service</span></span><br><span class=\"line\"><span class=\"comment\">        ...</span></span><br><span class=\"line\"><span class=\"comment\">        service adbd</span></span><br><span class=\"line\"><span class=\"comment\">           class core</span></span><br><span class=\"line\"><span class=\"comment\">           ...   </span></span><br><span class=\"line\"><span class=\"comment\">        adb 的使用与 adbd 可有很大的关系，adbd 是一个远程服务进程</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">            3、所以这里的意思是：</span></span><br><span class=\"line\"><span class=\"comment\">        根据参数名称去服务列表中查找是否存在，如果服务存在那么开始执行</span></span><br><span class=\"line\"><span class=\"comment\">        服务一般是以进程的形式存在，且很有可能是守护进程</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (service-&gt;<span class=\"built_in\">classnames</span>().<span class=\"built_in\">count</span>(args[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> result = service-&gt;<span class=\"built_in\">StartIfNotDisabled</span>(); !result.<span class=\"built_in\">ok</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">LOG</span>(ERROR) &lt;&lt; <span class=\"string\">&quot;Could not start service &#x27;&quot;</span> &lt;&lt; service-&gt;<span class=\"built_in\">name</span>()</span><br><span class=\"line\">                           &lt;&lt; <span class=\"string\">&quot;&#x27; as part of class &#x27;&quot;</span> &lt;&lt; args[<span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&quot;&#x27;: &quot;</span> &lt;&lt; result.<span class=\"built_in\">error</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//service.cpp</span></span><br><span class=\"line\"><span class=\"function\">Result&lt;<span class=\"keyword\">void</span>&gt; <span class=\"title\">Service::StartIfNotDisabled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(flags_ &amp; SVC_DISABLED)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Start</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        flags_ |= SVC_DISABLED_START;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//service.cpp</span></span><br><span class=\"line\"><span class=\"function\">Result&lt;<span class=\"keyword\">void</span>&gt; <span class=\"title\">Service::Start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pid = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (namespaces_.flags) &#123;</span><br><span class=\"line\">        pid = <span class=\"built_in\">clone</span>(<span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, namespaces_.flags | SIGCHLD, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//就这？进程就被 fork 出来了？？？</span></span><br><span class=\"line\">        pid = fork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pid 0 是 idle 进程，肯定不能</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">umask</span>(<span class=\"number\">077</span>);</span><br><span class=\"line\">        <span class=\"built_in\">RunService</span>(override_mount_namespace, descriptors, std::<span class=\"built_in\">move</span>(pipefd));</span><br><span class=\"line\">        _exit(<span class=\"number\">127</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建进程组</span></span><br><span class=\"line\">    errno = -<span class=\"built_in\">createProcessGroup</span>(proc_attr_.uid, pid_, use_memcg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，通过查找服务列表创建了一堆进程，现在我们主要关注 <code>zygote</code>进程的创建，这时候间从 cpp 进入 Java</p>\n<h1>初始化 zygote</h1>\n<h2 id=\"预加载配置\">预加载配置</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ZygoteInit.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZygoteInit</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化主要做：</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、完成预初始化</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、创建 zygote 服务</span></span><br><span class=\"line\"><span class=\"comment\">     * 3、创建系统服务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] argv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//【1】完成预初始化</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、调用 ZygoteHooks.onBeginPreload(); ZygoteHooks 从 Dalvik 包引入，在 framework 下没有找到的源码应该是在别处了，预想是对 Dalvik 的初始化；预加载结束时也会调用 ZygoteHooks.onEndPreload();</span></span><br><span class=\"line\"><span class=\"comment\">            2、VMRuntime 为 Dalvik 预加载路径下的类 /system/etc/preloaded-classes、profilebootclasspath</span></span><br><span class=\"line\"><span class=\"comment\">            3、创建并缓存非启动类路径下的类加载器 /system/framework/android.hidl.base-V1.0-java.jar、/system/framework/android.hidl.manager-V1.0-java.jar (HIDL 接口定义语言 —— https://source.android.google.cn/devices/architecture/hidl?hl=zh-cn)</span></span><br><span class=\"line\"><span class=\"comment\">            4、加载资源，加载前先更新配置（比如当前设备分辨率、屏幕尺寸、语言），</span></span><br><span class=\"line\"><span class=\"comment\">        根据分辨率加载 drawable、颜色资源</span></span><br><span class=\"line\"><span class=\"comment\">            5、通过 native 加载为应用进程准备的 HAL 硬件抽象列表</span></span><br><span class=\"line\"><span class=\"comment\">            6、如果开启了 ro.zygote.disable_gl_preload，也通过 native 执行图形 GL 预加载</span></span><br><span class=\"line\"><span class=\"comment\">            7、通过 System.loadLibrary 加载共享库 android.lib、compiler_rt.lib、jnigraphics.lib</span></span><br><span class=\"line\"><span class=\"comment\">            8、准备 Hyphenator 环境，缓存字体</span></span><br><span class=\"line\"><span class=\"comment\">            9、加载 webviewchromium_loader.lib，准备 webview </span></span><br><span class=\"line\"><span class=\"comment\">            10、通过 AndroidKeyStoreProvider 安装 keystore 内容提供者  </span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"built_in\">preload</span>(bootTimingsTraceLog);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化 GC，并执行一次清理</span></span><br><span class=\"line\">        ZygoteHooks.<span class=\"built_in\">gcAndFinalize</span>()；</span><br><span class=\"line\">        <span class=\"comment\">//到这里 zygote 已经是【初始化完毕】</span></span><br><span class=\"line\">        Zygote.<span class=\"built_in\">initNativeState</span>(isPrimaryZygote)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//【2】创建 zygote 服务</span></span><br><span class=\"line\">        ZygoteServer zygoteServer = null;</span><br><span class=\"line\">        zygoteServer = <span class=\"keyword\">new</span> <span class=\"built_in\">ZygoteServer</span>(isPrimaryZygote);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//【3】创建系统服务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startSystemServer) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//fork，可见每一个系统服务都是独立的进程；ABI —— Application binary interface【参考链接】</span></span><br><span class=\"line\">            <span class=\"comment\">//在 Android 项目中对应的就是 ndk filter，如 arm64、x86  .etc</span></span><br><span class=\"line\">            <span class=\"comment\">//为支持不同平台，ndk filter 是能够配置多个的，所以是一个列表形式存在</span></span><br><span class=\"line\">            Runnable r = forkSystemServer(abiList, zygoteSocketName, zygoteServer);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r != null) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建之后马上运行</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// zygote 服务进入自己的世界轮训</span></span><br><span class=\"line\">        caller = zygoteServer.<span class=\"built_in\">runSelectLoop</span>(abiList);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(caller != null)&#123;</span><br><span class=\"line\">            caller.<span class=\"built_in\">run</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-zygoteServer\">创建 zygoteServer</h2>\n<p>服务主要还是通过 socket 实现，等待来自 Linux、unix 守护进程 (socket) 的消息，同时也负责子进程的创建。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ZygoteServer.java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZygoteServer</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//列举几个重要的成员</span></span><br><span class=\"line\"><span class=\"comment\">//用于监听 socket 连接</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> LocalServerSocket mZygoteSocket;</span><br><span class=\"line\"><span class=\"comment\">//为 USAP 非专用应用进程池 服务</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LocalServerSocket mUsapPoolSocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ZygoteServer</span>(boolean isPrimaryZygote) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过 native 调用获取</span></span><br><span class=\"line\">        mUsapPoolEventFD = Zygote.<span class=\"built_in\">getUsapPoolEventFD</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//主 zygote</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPrimaryZygote) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//完成的 socket 名称需要和 ANDROID_SOCKET_ + socketname 拼接，</span></span><br><span class=\"line\">            <span class=\"comment\">//然后拿完整的名称去系统环境变量中查找获取文件描述符 fd —— file describe，实际是一个整型数值【参考链接】</span></span><br><span class=\"line\">            mZygoteSocket = Zygote.<span class=\"built_in\">createManagedSocketFromInitSocket</span>(Zygote.PRIMARY_SOCKET_NAME);</span><br><span class=\"line\">            mUsapPoolSocket =</span><br><span class=\"line\">                    Zygote.<span class=\"built_in\">createManagedSocketFromInitSocket</span>(</span><br><span class=\"line\">                            Zygote.USAP_POOL_PRIMARY_SOCKET_NAME);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//辅 zygote</span></span><br><span class=\"line\">            mZygoteSocket = Zygote.<span class=\"built_in\">createManagedSocketFromInitSocket</span>(Zygote.SECONDARY_SOCKET_NAME);</span><br><span class=\"line\">            mUsapPoolSocket =</span><br><span class=\"line\">                    Zygote.<span class=\"built_in\">createManagedSocketFromInitSocket</span>(</span><br><span class=\"line\">                            Zygote.USAP_POOL_SECONDARY_SOCKET_NAME);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取 非专用应用进程池 配置，还是通过系统配置 SystemPropertice 获取</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            mUsapPoolSizeMax —— usap_pool_size_max</span></span><br><span class=\"line\"><span class=\"comment\">            mUsapPoolSizeMin —— usap_pool_size_min</span></span><br><span class=\"line\"><span class=\"comment\">            mUsapPoolRefillThreshold —— usap_refill_threshold</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"built_in\">fetchUsapPoolPolicyProps</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最重要的还是进入 poll 轮训【关于高并发 IO 多路复用，参考链接】</span></span><br><span class=\"line\"><span class=\"function\">Runnable <span class=\"title\">runSelectLoop</span><span class=\"params\">(String abiList)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//每一次轮训且超过一分钟都更新 USAP 配置</span></span><br><span class=\"line\">        fetchUsapPoolPolicyPropsWithMinInterval</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//系统调用 poll 处理文件描述符 fd</span></span><br><span class=\"line\">        <span class=\"comment\">//Os.poll 返回值0：表示处理超时或非阻塞状态没有可处理的文件描述符</span></span><br><span class=\"line\">        pollReturnValue = Os.<span class=\"built_in\">poll</span>(pollFDs, pollTimeoutMs);</span><br><span class=\"line\">        </span><br><span class=\"line\">        ... etc</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//还有一个需要关注的就是返回值，类型是 Runnable</span></span><br><span class=\"line\">        <span class=\"comment\">//这是在特殊情况下发生重置 USAP，command 的内容是：</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            fetchUsapPoolPolicyPropsIfUnfetched();</span></span><br><span class=\"line\"><span class=\"comment\">            ZygoteHooks.preFork();</span></span><br><span class=\"line\"><span class=\"comment\">            ZygoteHooks.postForkCommon();</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Runnable command = <span class=\"built_in\">fillUsapPool</span>(sessionSocketRawFDs, isPriorityRefill);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command != null) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> command;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-SystemServer\">创建 SystemServer</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ZygoteInit.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    abiList —— ndl filter</span></span><br><span class=\"line\"><span class=\"comment\">    socketname —— zygote 进程名称</span></span><br><span class=\"line\"><span class=\"comment\">    zygoteServer —— 自然是 zygote 的主要服务</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Runnable <span class=\"title\">forkSystemServer</span><span class=\"params\">(String abiList, String socketName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                             ZygoteServer zygoteServer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//启动参数</span></span><br><span class=\"line\">    String[] args = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;--setuid=1000&quot;</span>, <span class=\"comment\">//linux 中不同 uid 可以代表拥有不同的权限</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--setgid=1000&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,&quot;</span></span><br><span class=\"line\">                        + <span class=\"string\">&quot;1024,1032,1065,3001,3002,3003,3005,3006,3007,3009,3010,3011,3012&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;--capabilities=&quot;</span> + capabilities + <span class=\"string\">&quot;,&quot;</span> + capabilities,</span><br><span class=\"line\">                <span class=\"string\">&quot;--nice-name=system_server&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;--runtime-args&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;--target-sdk-version=&quot;</span> + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,</span><br><span class=\"line\">                <span class=\"string\">&quot;com.android.server.SystemServer&quot;</span>,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略参数构造过程</span></span><br><span class=\"line\">    ZygoteArguments parsedArgs;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建服务进程，还是调用 native 方法</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        int pid = nativeForkSystemServer(</span></span><br><span class=\"line\"><span class=\"comment\">        uid, gid, gids, runtimeFlags, rlimits,</span></span><br><span class=\"line\"><span class=\"comment\">        permittedCapabilities, effectiveCapabilities);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    pid = Zygote.forkSystemServer(</span><br><span class=\"line\">        parsedArgs.mUid, parsedArgs.mGid,</span><br><span class=\"line\">        parsedArgs.mGids,</span><br><span class=\"line\">        parsedArgs.mRuntimeFlags,</span><br><span class=\"line\">        null,</span><br><span class=\"line\">        parsedArgs.mPermittedCapabilities,</span><br><span class=\"line\">        parsedArgs.mEffectiveCapabilities);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        pid=0 则是子进程被创建</span></span><br><span class=\"line\"><span class=\"comment\">        pid=-1 则表示出错</span></span><br><span class=\"line\"><span class=\"comment\">        pid (非0值)创建父进程</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//？？？还会有第二个 zygote 进程，这是什么操作？？？</span></span><br><span class=\"line\">        <span class=\"comment\">//看看官方描述：We determine this by comparing the device ABI list with this zygotes list. </span></span><br><span class=\"line\">        <span class=\"comment\">//            If this zygote supports all ABIs this device supports, there won&#x27;t be another zygote.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">hasSecondZygote</span>(abiList)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">waitForSecondaryZygote</span>(socketName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        zygoteServer.<span class=\"built_in\">closeServerSocket</span>();</span><br><span class=\"line\">        <span class=\"comment\">//继续把参数分发给系统服务进程，这里做的事情比较多了</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、获取系统服务类路径 systemServerClassPath，首先还是从系统环境中读取Os.getenv(&quot;SYSTEMSERVERCLASSPATH&quot;)；当进程执行时 ART 将会处理此路径</span></span><br><span class=\"line\"><span class=\"comment\">            2、负责 zygote 的 native 初始化和 application 的执行</span></span><br><span class=\"line\"><span class=\"comment\">            3、这里无论先走那个分支，后面都会走到同一个方法调用：return RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,</span></span><br><span class=\"line\"><span class=\"comment\">        classLoader);</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">            if (parsedArgs.mInvokeWith != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                WrapperInit.execApplication(parsedArgs.mInvokeWith,</span></span><br><span class=\"line\"><span class=\"comment\">                        parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,</span></span><br><span class=\"line\"><span class=\"comment\">                        VMRuntime.getCurrentInstructionSet(), null, args);</span></span><br><span class=\"line\"><span class=\"comment\">            &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                ClassLoader cl = getOrCreateSystemServerClassLoader();</span></span><br><span class=\"line\"><span class=\"comment\">                return ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,</span></span><br><span class=\"line\"><span class=\"comment\">                parsedArgs.mDisabledCompatChanges,</span></span><br><span class=\"line\"><span class=\"comment\">                parsedArgs.mRemainingArgs, cl);</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">handleSystemServerProcess</span>(parsedArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RuntimeInit.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> Runnable <span class=\"title\">applicationInit</span><span class=\"params\">(<span class=\"keyword\">int</span> targetSdkVersion, <span class=\"keyword\">long</span>[] disabledCompatChanges,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] argv, ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置运行目标版本</span></span><br><span class=\"line\">    VMRuntime.<span class=\"built_in\">getRuntime</span>().<span class=\"built_in\">setTargetSdkVersion</span>(targetSdkVersion);</span><br><span class=\"line\">    <span class=\"comment\">//通过启动类名找到此类，由类加载器加载并调用其 main 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">findStaticMain</span>(args.startClass, args.startArgs, classLoader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RuntimeInit.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> Runnable <span class=\"title\">findStaticMain</span><span class=\"params\">(String className, String[] argv,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//常规方法，只是执行 classloader</span></span><br><span class=\"line\">    Class&lt;?&gt; cl = Class.forName(className, <span class=\"literal\">true</span>, classLoader);</span><br><span class=\"line\">    Method m = cl.<span class=\"built_in\">getMethod</span>(<span class=\"string\">&quot;main&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123; String[].class &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//因为当前是在 zygote 进程创建 SystemServer，在此流程中本次执行我们认为参数 className=&quot;com.android.internal.os.SystemServer&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">MethodAndArgsCaller</span>(m, argv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里 SystemServer 已经创建完成，接下来是通过 <code>MethodAndArgsCaller</code> 方法执行其中的 <code>main</code> 方法，源码路径是<code>/frameworks/base/services/java/com/android/server/SystemServer.java</code>。</p>\n<h1>附加</h1>\n<h2 id=\"参考链接\">参考链接</h2>\n<ul>\n<li>Androi.bp：bp 文件，替换 .mk 的配置文，由 <a href=\"https://github.com/palantir/blueprint\">https://github.com/palantir/blueprint</a> 框架解析</li>\n<li><a href=\"http://Android.mk\">Android.mk</a>：mk 文件，Android 程序编译</li>\n<li>lmkd：low memory killer deamon 低内存终止守护进程</li>\n<li>Apex：Android pony express 解决较低级别系统模块的安装流程 <a href=\"https://source.android.google.cn/devices/tech/ota/apex?hl=zh-cn\">https://source.android.google.cn/devices/tech/ota/apex?hl=zh-cn</a></li>\n<li>syspro 文件：系统共享信息的属性配置文件，通常作为系统 API 实现 <a href=\"https://source.android.google.cn/devices/architecture/sysprops-apis?hl=zh-cn#:~:text=%E4%B8%80%E4%B8%AA,Sysprop%20%E8%AF%B4%E6%98%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%B8%80%E6%9D%A1%E5%B1%9E%E6%80%A7%E6%B6%88%E6%81%AF%EF%BC%8C%E7%94%A8%E6%9D%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E7%BB%84%E5%B1%9E%E6%80%A7%E3%80%82\">https://source.android.google.cn/devices/architecture/sysprops-apis?hl=zh-cn#:~:text=一个,Sysprop 说明文件包含一条属性消息，用来描述一组属性。</a></li>\n<li>ABI：与 CPU 指令集相关 <a href=\"https://developer.android.google.cn/ndk/guides/abis?hl=zh-cn\">https://developer.android.google.cn/ndk/guides/abis?hl=zh-cn</a></li>\n<li>fd ：文件描述符 <a href=\"https://www.cnblogs.com/cscshi/p/15705033.html\">https://www.cnblogs.com/cscshi/p/15705033.html</a></li>\n<li>Linux IO 多路复用：select、poll、epoll <a href=\"https://cloud.tencent.com/developer/article/1005481\">https://cloud.tencent.com/developer/article/1005481</a></li>\n<li>MTE：memory tagging extension  <a href=\"https://cloud.tencent.com/developer/article/2003341#:~:text=Arm%20MTE%EF%BC%88%E5%86%85%E5%AD%98%E6%A0%87%E8%AE%B0%EF%BC%89%E4%BD%9C%E4%B8%BAArmv8.5%E6%8C%87%E4%BB%A4%E9%9B%86%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%E5%BC%95%E5%85%A5%E3%80%82%20MTE%E7%8E%B0%E5%9C%A8%E5%86%85%E7%BD%AE%E4%BA%8EArm%20%E6%9C%80%E8%BF%91%E5%AE%A3%E5%B8%83%E7%9A%84%E7%AC%A6%E5%90%88Armv9%20%E7%9A%84%20CPU%20%E4%B8%AD%EF%BC%8C%E4%BE%8B%E5%A6%82,Cortex-X2%E3%80%81Cortex-A710%20%E5%92%8CCortex-A510%E3%80%82%20%E6%9C%AA%E6%9D%A5%E5%9F%BA%E4%BA%8EArmv9%20%E7%9A%84%20CPU%20%E4%B9%9F%E5%B0%86%E9%9B%86%E6%88%90%20MTE%E3%80%82\"> 内存标签扩展 </a></li>\n<li>已加标记指针：<a href=\"https://source.android.google.cn/devices/tech/debug/tagged-pointers?hl=zh-cn\">https://source.android.google.cn/devices/tech/debug/tagged-pointers?hl=zh-cn</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>相关文件：</p>\n<ul>\n<li>/system/core/init/init.cpp</li>\n<li>/system/etc/init/hw/init.rc  (源码工程没找到，是从手机上获取)</li>\n<li>/system/etc/init/hw/init.zygote32.rc （手机上获取）</li>\n<li>/system/etc/init/hw/init.zygote64_32.rc （手机上获取）</li>\n<li>/system/core/init/action.cpp</li>\n<li>/system/core/init/service.cpp</li>\n<li>/system/core/init/service_list.cpp</li>\n<li>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</li>\n<li>frameworks/base/core/java/com/android/internal/os/ZygoteServer.java</li>\n<li>frameworks/base/core/java/com/android/internal/os/Zygote.java</li>\n<li>frameworks/base/core/java/com/android/internal/os/WrapperInit.java</li>\n</ul>\n<h1>解析初始化配置文件</h1>\n<p>初始化配置文件包括但不限于 init.rc、hw/init.rc。带着的疑惑继续看源码，之前提到执行到初始化第二阶段时 init 进程进入无限的轮询（loop），似乎不知去向何处？疑惑是在等待接收消息后再做处理，第二阶段中创建 init 进程中有一个重要的函数<code>LoadBootScripts(actionManager,serviceList)</code>，加载启动脚本的关键，相当重要，与<code>init.rc</code>文件存在千丝万缕的关系。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//init.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">LoadBootScripts</span><span class=\"params\">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> </span>&#123;</span><br><span class=\"line\">    Parser parser = <span class=\"built_in\">CreateParser</span>(action_manager, service_list);</span><br><span class=\"line\">    std::string bootscript = <span class=\"built_in\">GetProperty</span>(<span class=\"string\">&quot;ro.boot.init_rc&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bootscript.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解析 init.rc，启动的关键文件</span></span><br><span class=\"line\">        parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/system/etc/init/hw/init.rc&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/system/etc/init&quot;</span>)) &#123;</span><br><span class=\"line\">            late_import_paths.<span class=\"built_in\">emplace_back</span>(<span class=\"string\">&quot;/system/etc/init&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/system_ext/etc/init&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/vendor/etc/init&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//vendor 厂商相关的初始化配置</span></span><br><span class=\"line\">            late_import_paths.<span class=\"built_in\">emplace_back</span>(<span class=\"string\">&quot;/vendor/etc/init&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/odm/etc/init&quot;</span>)) &#123;</span><br><span class=\"line\">            late_import_paths.<span class=\"built_in\">emplace_back</span>(<span class=\"string\">&quot;/odm/etc/init&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parser.<span class=\"built_in\">ParseConfig</span>(<span class=\"string\">&quot;/product/etc/init&quot;</span>)) &#123;</span><br><span class=\"line\">            late_import_paths.<span class=\"built_in\">emplace_back</span>(<span class=\"string\">&quot;/product/etc/init&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        parser.<span class=\"built_in\">ParseConfig</span>(bootscript);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//init.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SecondStageMain</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据解析获得，开始构建 action 队列</span></span><br><span class=\"line\">    ActionManager&amp; am = ActionManager::<span class=\"built_in\">GetInstance</span>();</span><br><span class=\"line\">    am.<span class=\"built_in\">QueueBuiltinAction</span>(SetupCgroupsAction, <span class=\"string\">&quot;SetupCgroups&quot;</span>);</span><br><span class=\"line\">    .... etc</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//触发启动</span></span><br><span class=\"line\">    am.<span class=\"built_in\">QueueEventTrigger</span>(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//若处于充电模式将延迟初始化</span></span><br><span class=\"line\">    std::string bootmode = <span class=\"built_in\">GetProperty</span>(<span class=\"string\">&quot;ro.bootmode&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bootmode == <span class=\"string\">&quot;charger&quot;</span>) &#123;</span><br><span class=\"line\">        am.<span class=\"built_in\">QueueEventTrigger</span>(<span class=\"string\">&quot;charger&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        am.<span class=\"built_in\">QueueEventTrigger</span>(<span class=\"string\">&quot;late-init&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//init 进程进入无限轮训</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始通过 command 命令执行 inir.rc 脚本各项服务以及初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(prop_waiter_state.<span class=\"built_in\">MightBeWaiting</span>() || Service::<span class=\"built_in\">is_exec_service_running</span>())) &#123;</span><br><span class=\"line\">            am.<span class=\"built_in\">ExecuteOneCommand</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(prop_waiter_state.<span class=\"built_in\">MightBeWaiting</span>() || Service::<span class=\"built_in\">is_exec_service_running</span>())) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If there&#x27;s more work to do, wake up again immediately.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (am.<span class=\"built_in\">HasMoreCommands</span>())</span><br><span class=\"line\">            epoll_timeout = <span class=\"number\">0</span>ms;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Android 11 上，init.rc 文件位于<code>/system/etc/init/hw/init.rc</code></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92ab7d4ccd7a4118a1f705928d97c212~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>这是我在小米手机找的，rc 文件被视为 Android 初始化语言，那肯定也有自己的语法或格式，可以参考：<a href=\"https://www.cnblogs.com/gufanyuan/p/9350130.html\">https://www.cnblogs.com/gufanyuan/p/9350130.html</a></p>\n<p><strong>mark：</strong></p>\n<ul>\n<li>action on 后携带一组命令</li>\n<li>trigger 触发器，确定何时执行命令</li>\n<li>service 当 init 退出时启动或重启</li>\n<li>options 进一步控制命令执行的方式和时间</li>\n<li>命令：on 每一行代表一条命令</li>\n<li>import 导入额外的 rc 文件需要解析</li>\n</ul>\n<p>看看 rc 文件：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0991aad99b524f9ebc147ce1fe075047~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  /system/etc/init/hw/init.rc</span></span><br><span class=\"line\"># 小米系统，也有厂商自己的解析文件，需要执行属于自己的进程</span><br><span class=\"line\"><span class=\"meta\"># import 指明导入其他配置文件需要解析</span></span><br><span class=\"line\"># MIUI ADD:</span><br><span class=\"line\"><span class=\"keyword\">import</span> /init.miui.rc</span><br><span class=\"line\"></span><br><span class=\"line\"># 还记得 SecondStageMain actionManage 吗</span><br><span class=\"line\"><span class=\"meta\"># am.QueueEventTrigger(<span class=\"meta-string\">&quot;early-init&quot;</span>);</span></span><br><span class=\"line\">on early-init</span><br><span class=\"line\">    # 一个守护进程，负责处理 uevent 消息</span><br><span class=\"line\">    start ueventd</span><br><span class=\"line\">    <span class=\"meta\"># apex 服务于系统模块安装</span></span><br><span class=\"line\">    exec_start apexd-bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\"># 触发所有 action</span><br><span class=\"line\"><span class=\"meta\"># am.QueueEventTrigger(<span class=\"meta-string\">&quot;init&quot;</span>);</span></span><br><span class=\"line\">on init</span><br><span class=\"line\">    # 创建 stdio 标准输入输出链接</span><br><span class=\"line\">    symlink /proc/self/fd/<span class=\"number\">0</span> /dev/stdin</span><br><span class=\"line\">    # 给 sdcard 更改权限</span><br><span class=\"line\">    chmod <span class=\"number\">0770</span> /config/sdcardfs</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 启动服务</span><br><span class=\"line\">    # 系统服务，越来越接近应用层了</span><br><span class=\"line\">    start servicemanager</span><br><span class=\"line\">    <span class=\"meta\"># hw——hardware，硬件服务</span></span><br><span class=\"line\">    start hwservicemanager</span><br><span class=\"line\">    #供应商服务</span><br><span class=\"line\">    start vndservicemanager</span><br><span class=\"line\">    <span class=\"meta\"># init action 就执行到这，中间省略很多命令，这里只是抽取几个，点到为止</span></span><br><span class=\"line\">    </span><br><span class=\"line\"># 挂载文件系统以及核心服务</span><br><span class=\"line\"><span class=\"meta\"># am.QueueEventTrigger(<span class=\"meta-string\">&quot;late-init&quot;</span>);</span></span><br><span class=\"line\">on late-init</span><br><span class=\"line\">    # 触发 fs：Vold 控制和管理外部存储的进程</span><br><span class=\"line\">    trigger early-fs</span><br><span class=\"line\"></span><br><span class=\"line\">    # 重点来了⚠️⚠️⚠️</span><br><span class=\"line\">    <span class=\"meta\"># import /system/etc/init/hw/init.$&#123;ro.zygote&#125;.rc</span></span><br><span class=\"line\">    <span class=\"meta\"># zygote 进来了，常说的 Android 应用层的鼻祖</span></span><br><span class=\"line\">    trigger zygote-start</span><br><span class=\"line\">    </span><br><span class=\"line\">    trigger early-boot</span><br><span class=\"line\">    trigger boot</span><br><span class=\"line\"></span><br><span class=\"line\">on boot</span><br><span class=\"line\">    # 启动 HAL 硬件抽象类服务</span><br><span class=\"line\">    class_start hal</span><br><span class=\"line\">    # 启动核心类服务</span><br><span class=\"line\">    class_start core</span><br></pre></td></tr></table></figure>\n<h1>解析 zygote.rc</h1>\n<p>看上面截图，现在该执行<code>init.zygote32.rc、init.zygote64_32.rc</code>，继续往下看。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  /system/etc/init/hw/init.zygote32.rc</span></span><br><span class=\"line\"><span class=\"comment\">// zygote32 : 只有一个 32，那就是纯纯的为 32 位准备的</span></span><br><span class=\"line\"></span><br><span class=\"line\">service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">main</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">priority</span> -20</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">user</span> <span class=\"title\">root</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">group</span> <span class=\"title\">root</span> <span class=\"title\">readproc</span> <span class=\"title\">reserved_disk</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">socket</span> <span class=\"title\">zygote</span> <span class=\"title\">stream</span> 660 <span class=\"title\">root</span> <span class=\"title\">system</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">socket</span> <span class=\"title\">usap_pool_primary</span> <span class=\"title\">stream</span> 660 <span class=\"title\">root</span> <span class=\"title\">system</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">exec_background</span> - <span class=\"title\">system</span> <span class=\"title\">system</span> -- /<span class=\"title\">system</span>/<span class=\"title\">bin</span>/<span class=\"title\">vdc</span> <span class=\"title\">volume</span> <span class=\"title\">abort_fuse</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">write</span> /<span class=\"title\">sys</span>/<span class=\"title\">power</span>/<span class=\"title\">state</span> <span class=\"title\">on</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">audioserver</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">cameraserver</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">media</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">netd</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">onrestart</span> <span class=\"title\">restart</span> <span class=\"title\">wificond</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">writepid</span> /<span class=\"title\">dev</span>/<span class=\"title\">cpuset</span>/<span class=\"title\">foreground</span>/<span class=\"title\">tasks</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  /system/etc/init/hw/init.zygote64_32.rc</span></span><br><span class=\"line\"><span class=\"comment\">// zygote64_32 : 前部分 64 指主要模式，后部分 32 指辅助模式；同样的也会有 zygote32_64.rc、zygote32.rc、zygote64.rc  etc.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># service 是 Android 初始化话语言的一部分，指 init 启动或退出时重新启动服务</span></span><br><span class=\"line\"># 显然，这里的服务名称就是‘家喻户晓’的 zygote 进程</span><br><span class=\"line\">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span><br><span class=\"line\">    class main</span><br><span class=\"line\">    priority <span class=\"number\">-20</span>     ### 进程优先级 <span class=\"number\">-20</span> ，值越小优先级越高，取值范围 [<span class=\"number\">-20</span>,<span class=\"number\">19</span>]</span><br><span class=\"line\">    user root        ### 由 root 用户执行 </span><br><span class=\"line\">    group root readproc reserved_disk</span><br><span class=\"line\">    socket zygote stream <span class=\"number\">660</span> root system</span><br><span class=\"line\">    socket usap_pool_primary stream <span class=\"number\">660</span> root system</span><br><span class=\"line\">    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse</span><br><span class=\"line\">    onrestart write /sys/power/state on</span><br><span class=\"line\">    onrestart restart audioserver</span><br><span class=\"line\">    onrestart restart cameraserver</span><br><span class=\"line\">    onrestart restart media</span><br><span class=\"line\">    onrestart restart netd</span><br><span class=\"line\">    onrestart restart wificond</span><br><span class=\"line\">    task_profiles ProcessCapacityHigh MaxPerformance</span><br><span class=\"line\"></span><br><span class=\"line\"># zygote_secondary ？？？？？</span><br><span class=\"line\"># 你在看前面提到的‘主模式’和‘辅模式’，恰好 zygote 是 app_process64，zygote_secondary 是 app_process32，</span><br><span class=\"line\"># 刚刚好对应上文件名 init.zygote64_32.rc 【主模式是<span class=\"number\">64</span>，辅模式是<span class=\"number\">32</span>】</span><br><span class=\"line\">service zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload</span><br><span class=\"line\">    class main</span><br><span class=\"line\">    priority <span class=\"number\">-20</span></span><br><span class=\"line\">    user root</span><br><span class=\"line\">    group root readproc reserved_disk</span><br><span class=\"line\">    socket zygote_secondary stream <span class=\"number\">660</span> root system</span><br><span class=\"line\">    socket usap_pool_secondary stream <span class=\"number\">660</span> root system</span><br><span class=\"line\">    onrestart restart zygote</span><br><span class=\"line\">    task_profiles ProcessCapacityHigh MaxPerformance</span><br></pre></td></tr></table></figure>\n<h1>创建 zygote Process</h1>\n<p>在初始化第二阶段 SecondStageMain 解析了 inir.rc，回到 main.cpp 知道 GetBuiltinFunctionMap 函数映射表作为参数传入 SubcontextMain，第四部分开始执行，接着看看执行流程。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">SubcontextMain</span>(argc, argv, &amp;function_map);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> subcontext_process = <span class=\"built_in\">SubcontextProcess</span>(function_map, context, init_fd);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//subcontext.cpp</span></span><br><span class=\"line\"><span class=\"built_in\">SubcontextProcess</span>(<span class=\"keyword\">const</span> BuiltinFunctionMap* function_map, std::string context, <span class=\"keyword\">int</span> init_fd)</span><br><span class=\"line\">: <span class=\"built_in\">function_map_</span>(function_map), <span class=\"built_in\">context_</span>(std::<span class=\"built_in\">move</span>(context)), <span class=\"built_in\">init_fd_</span>(init_fd)&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//通过构造函数，直接将函数映射表赋值给成员 function_map_</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> BuiltinFunctionMap* function_map_;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在 SubcontextMain 中开始主循环</span></span><br><span class=\"line\">subcontext_process.<span class=\"built_in\">MainLoop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主循环中准备执行命令</span></span><br><span class=\"line\"><span class=\"built_in\">RunCommand</span>(subcontext_command.<span class=\"built_in\">execute_command</span>(), &amp;reply);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//映射表 function_map_ 被使用</span></span><br><span class=\"line\"><span class=\"comment\">//根据参数（命令）查找对应的内置函数</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> map_result = function_map_-&gt;<span class=\"built_in\">Find</span>(args);</span><br><span class=\"line\"><span class=\"comment\">//找到了命令准备执行</span></span><br><span class=\"line\">result = <span class=\"built_in\">RunBuiltinFunction</span>(map_result-&gt;function, args, context_);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造参数，直接调用</span></span><br><span class=\"line\"><span class=\"comment\">//回想一下，映射表中是否有着一个 item</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;&quot;class_start&quot;, &#123;1, 1, &#123;false, do_class_start&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//do_class_start：内置函数被声明在 builtins.cpp 中，下面看看其实现</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> builtin_arguments = <span class=\"built_in\">BuiltinArguments</span>(context);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">function</span>(builtin_arguments);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//builtins.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Result&lt;<span class=\"keyword\">void</span>&gt; <span class=\"title\">do_class_start</span><span class=\"params\">(<span class=\"keyword\">const</span> BuiltinArguments&amp; args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (android::base::<span class=\"built_in\">GetBoolProperty</span>(<span class=\"string\">&quot;persist.init.dont_start_class.&quot;</span> + args[<span class=\"number\">1</span>], <span class=\"literal\">false</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//服务启动</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、ServiceList::GetInstance() 到底是什么东西啊？service 列表又是什么？</span></span><br><span class=\"line\"><span class=\"comment\">    还记得第二阶段初始化 SecondStageMain 中这段代码吗</span></span><br><span class=\"line\"><span class=\"comment\">    ServiceList&amp; sm = ServiceList::GetInstance();</span></span><br><span class=\"line\"><span class=\"comment\">    LoadBootScripts(am, sm); //这正是在解析 init.rc 文件，其中就包含 hw/init.rc</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">        2、可以认为 service 就是通过解析 init.rc 中的 service 获得的，此文件正好也导入 import hw/init.rc，其中包含 zygote 相关，</span></span><br><span class=\"line\"><span class=\"comment\">    进而继续解析 init.zygote.rc，zygote.rc 文件内容也会被解析到</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">ServiceList.GetInstance 就是 std::vector&lt;std::unique_ptr&lt;Service&gt;&gt; services_;</span></span><br><span class=\"line\"><span class=\"comment\">service-&gt;classenames() 就是 std::set&lt;std::string&gt; classnames_;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">        3、创建 Service 的构造函数：</span></span><br><span class=\"line\"><span class=\"comment\">    Service::Service(const std::string&amp; name, unsigned flags, uid_t uid, gid_t gid,</span></span><br><span class=\"line\"><span class=\"comment\">       const std::vector&lt;gid_t&gt;&amp; supp_gids, int namespace_flags,</span></span><br><span class=\"line\"><span class=\"comment\">       const std::string&amp; seclabel, Subcontext* subcontext_for_restart_commands,</span></span><br><span class=\"line\"><span class=\"comment\">       const std::vector&lt;std::string&gt;&amp; args, bool from_apex)</span></span><br><span class=\"line\"><span class=\"comment\">       :  name_(name),</span></span><br><span class=\"line\"><span class=\"comment\">       classnames_(&#123;&quot;default&quot;&#125;),</span></span><br><span class=\"line\"><span class=\"comment\">        ... etc</span></span><br><span class=\"line\"><span class=\"comment\">     )&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; service : ServiceList::<span class=\"built_in\">GetInstance</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//参数的来源</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、反复查阅资料得知 args 就是 rc 文件中每个 service 的参数</span></span><br><span class=\"line\"><span class=\"comment\">        args[1] 自然是第二个参数</span></span><br><span class=\"line\"><span class=\"comment\">        看 hw/zygote.rc service 执行 zygote 命令前部分</span></span><br><span class=\"line\"><span class=\"comment\">        ...</span></span><br><span class=\"line\"><span class=\"comment\">        service zygote</span></span><br><span class=\"line\"><span class=\"comment\">          class main</span></span><br><span class=\"line\"><span class=\"comment\">          ...</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">            2、因此 args[1] 其实就是 main</span></span><br><span class=\"line\"><span class=\"comment\">        同样，我们看 hw/init.usb.rc 也有一个 service</span></span><br><span class=\"line\"><span class=\"comment\">        ...</span></span><br><span class=\"line\"><span class=\"comment\">        service adbd</span></span><br><span class=\"line\"><span class=\"comment\">           class core</span></span><br><span class=\"line\"><span class=\"comment\">           ...   </span></span><br><span class=\"line\"><span class=\"comment\">        adb 的使用与 adbd 可有很大的关系，adbd 是一个远程服务进程</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">            3、所以这里的意思是：</span></span><br><span class=\"line\"><span class=\"comment\">        根据参数名称去服务列表中查找是否存在，如果服务存在那么开始执行</span></span><br><span class=\"line\"><span class=\"comment\">        服务一般是以进程的形式存在，且很有可能是守护进程</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (service-&gt;<span class=\"built_in\">classnames</span>().<span class=\"built_in\">count</span>(args[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> result = service-&gt;<span class=\"built_in\">StartIfNotDisabled</span>(); !result.<span class=\"built_in\">ok</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">LOG</span>(ERROR) &lt;&lt; <span class=\"string\">&quot;Could not start service &#x27;&quot;</span> &lt;&lt; service-&gt;<span class=\"built_in\">name</span>()</span><br><span class=\"line\">                           &lt;&lt; <span class=\"string\">&quot;&#x27; as part of class &#x27;&quot;</span> &lt;&lt; args[<span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&quot;&#x27;: &quot;</span> &lt;&lt; result.<span class=\"built_in\">error</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//service.cpp</span></span><br><span class=\"line\"><span class=\"function\">Result&lt;<span class=\"keyword\">void</span>&gt; <span class=\"title\">Service::StartIfNotDisabled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(flags_ &amp; SVC_DISABLED)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Start</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        flags_ |= SVC_DISABLED_START;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//service.cpp</span></span><br><span class=\"line\"><span class=\"function\">Result&lt;<span class=\"keyword\">void</span>&gt; <span class=\"title\">Service::Start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pid = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (namespaces_.flags) &#123;</span><br><span class=\"line\">        pid = <span class=\"built_in\">clone</span>(<span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, namespaces_.flags | SIGCHLD, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//就这？进程就被 fork 出来了？？？</span></span><br><span class=\"line\">        pid = fork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pid 0 是 idle 进程，肯定不能</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">umask</span>(<span class=\"number\">077</span>);</span><br><span class=\"line\">        <span class=\"built_in\">RunService</span>(override_mount_namespace, descriptors, std::<span class=\"built_in\">move</span>(pipefd));</span><br><span class=\"line\">        _exit(<span class=\"number\">127</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建进程组</span></span><br><span class=\"line\">    errno = -<span class=\"built_in\">createProcessGroup</span>(proc_attr_.uid, pid_, use_memcg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，通过查找服务列表创建了一堆进程，现在我们主要关注 <code>zygote</code>进程的创建，这时候间从 cpp 进入 Java</p>\n<h1>初始化 zygote</h1>\n<h2 id=\"预加载配置\">预加载配置</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ZygoteInit.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZygoteInit</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化主要做：</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、完成预初始化</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、创建 zygote 服务</span></span><br><span class=\"line\"><span class=\"comment\">     * 3、创建系统服务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] argv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//【1】完成预初始化</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、调用 ZygoteHooks.onBeginPreload(); ZygoteHooks 从 Dalvik 包引入，在 framework 下没有找到的源码应该是在别处了，预想是对 Dalvik 的初始化；预加载结束时也会调用 ZygoteHooks.onEndPreload();</span></span><br><span class=\"line\"><span class=\"comment\">            2、VMRuntime 为 Dalvik 预加载路径下的类 /system/etc/preloaded-classes、profilebootclasspath</span></span><br><span class=\"line\"><span class=\"comment\">            3、创建并缓存非启动类路径下的类加载器 /system/framework/android.hidl.base-V1.0-java.jar、/system/framework/android.hidl.manager-V1.0-java.jar (HIDL 接口定义语言 —— https://source.android.google.cn/devices/architecture/hidl?hl=zh-cn)</span></span><br><span class=\"line\"><span class=\"comment\">            4、加载资源，加载前先更新配置（比如当前设备分辨率、屏幕尺寸、语言），</span></span><br><span class=\"line\"><span class=\"comment\">        根据分辨率加载 drawable、颜色资源</span></span><br><span class=\"line\"><span class=\"comment\">            5、通过 native 加载为应用进程准备的 HAL 硬件抽象列表</span></span><br><span class=\"line\"><span class=\"comment\">            6、如果开启了 ro.zygote.disable_gl_preload，也通过 native 执行图形 GL 预加载</span></span><br><span class=\"line\"><span class=\"comment\">            7、通过 System.loadLibrary 加载共享库 android.lib、compiler_rt.lib、jnigraphics.lib</span></span><br><span class=\"line\"><span class=\"comment\">            8、准备 Hyphenator 环境，缓存字体</span></span><br><span class=\"line\"><span class=\"comment\">            9、加载 webviewchromium_loader.lib，准备 webview </span></span><br><span class=\"line\"><span class=\"comment\">            10、通过 AndroidKeyStoreProvider 安装 keystore 内容提供者  </span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"built_in\">preload</span>(bootTimingsTraceLog);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化 GC，并执行一次清理</span></span><br><span class=\"line\">        ZygoteHooks.<span class=\"built_in\">gcAndFinalize</span>()；</span><br><span class=\"line\">        <span class=\"comment\">//到这里 zygote 已经是【初始化完毕】</span></span><br><span class=\"line\">        Zygote.<span class=\"built_in\">initNativeState</span>(isPrimaryZygote)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//【2】创建 zygote 服务</span></span><br><span class=\"line\">        ZygoteServer zygoteServer = null;</span><br><span class=\"line\">        zygoteServer = <span class=\"keyword\">new</span> <span class=\"built_in\">ZygoteServer</span>(isPrimaryZygote);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//【3】创建系统服务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startSystemServer) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//fork，可见每一个系统服务都是独立的进程；ABI —— Application binary interface【参考链接】</span></span><br><span class=\"line\">            <span class=\"comment\">//在 Android 项目中对应的就是 ndk filter，如 arm64、x86  .etc</span></span><br><span class=\"line\">            <span class=\"comment\">//为支持不同平台，ndk filter 是能够配置多个的，所以是一个列表形式存在</span></span><br><span class=\"line\">            Runnable r = forkSystemServer(abiList, zygoteSocketName, zygoteServer);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r != null) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建之后马上运行</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// zygote 服务进入自己的世界轮训</span></span><br><span class=\"line\">        caller = zygoteServer.<span class=\"built_in\">runSelectLoop</span>(abiList);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(caller != null)&#123;</span><br><span class=\"line\">            caller.<span class=\"built_in\">run</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-zygoteServer\">创建 zygoteServer</h2>\n<p>服务主要还是通过 socket 实现，等待来自 Linux、unix 守护进程 (socket) 的消息，同时也负责子进程的创建。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ZygoteServer.java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZygoteServer</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//列举几个重要的成员</span></span><br><span class=\"line\"><span class=\"comment\">//用于监听 socket 连接</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> LocalServerSocket mZygoteSocket;</span><br><span class=\"line\"><span class=\"comment\">//为 USAP 非专用应用进程池 服务</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LocalServerSocket mUsapPoolSocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ZygoteServer</span>(boolean isPrimaryZygote) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过 native 调用获取</span></span><br><span class=\"line\">        mUsapPoolEventFD = Zygote.<span class=\"built_in\">getUsapPoolEventFD</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//主 zygote</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPrimaryZygote) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//完成的 socket 名称需要和 ANDROID_SOCKET_ + socketname 拼接，</span></span><br><span class=\"line\">            <span class=\"comment\">//然后拿完整的名称去系统环境变量中查找获取文件描述符 fd —— file describe，实际是一个整型数值【参考链接】</span></span><br><span class=\"line\">            mZygoteSocket = Zygote.<span class=\"built_in\">createManagedSocketFromInitSocket</span>(Zygote.PRIMARY_SOCKET_NAME);</span><br><span class=\"line\">            mUsapPoolSocket =</span><br><span class=\"line\">                    Zygote.<span class=\"built_in\">createManagedSocketFromInitSocket</span>(</span><br><span class=\"line\">                            Zygote.USAP_POOL_PRIMARY_SOCKET_NAME);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//辅 zygote</span></span><br><span class=\"line\">            mZygoteSocket = Zygote.<span class=\"built_in\">createManagedSocketFromInitSocket</span>(Zygote.SECONDARY_SOCKET_NAME);</span><br><span class=\"line\">            mUsapPoolSocket =</span><br><span class=\"line\">                    Zygote.<span class=\"built_in\">createManagedSocketFromInitSocket</span>(</span><br><span class=\"line\">                            Zygote.USAP_POOL_SECONDARY_SOCKET_NAME);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取 非专用应用进程池 配置，还是通过系统配置 SystemPropertice 获取</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            mUsapPoolSizeMax —— usap_pool_size_max</span></span><br><span class=\"line\"><span class=\"comment\">            mUsapPoolSizeMin —— usap_pool_size_min</span></span><br><span class=\"line\"><span class=\"comment\">            mUsapPoolRefillThreshold —— usap_refill_threshold</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"built_in\">fetchUsapPoolPolicyProps</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最重要的还是进入 poll 轮训【关于高并发 IO 多路复用，参考链接】</span></span><br><span class=\"line\"><span class=\"function\">Runnable <span class=\"title\">runSelectLoop</span><span class=\"params\">(String abiList)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//每一次轮训且超过一分钟都更新 USAP 配置</span></span><br><span class=\"line\">        fetchUsapPoolPolicyPropsWithMinInterval</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//系统调用 poll 处理文件描述符 fd</span></span><br><span class=\"line\">        <span class=\"comment\">//Os.poll 返回值0：表示处理超时或非阻塞状态没有可处理的文件描述符</span></span><br><span class=\"line\">        pollReturnValue = Os.<span class=\"built_in\">poll</span>(pollFDs, pollTimeoutMs);</span><br><span class=\"line\">        </span><br><span class=\"line\">        ... etc</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//还有一个需要关注的就是返回值，类型是 Runnable</span></span><br><span class=\"line\">        <span class=\"comment\">//这是在特殊情况下发生重置 USAP，command 的内容是：</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            fetchUsapPoolPolicyPropsIfUnfetched();</span></span><br><span class=\"line\"><span class=\"comment\">            ZygoteHooks.preFork();</span></span><br><span class=\"line\"><span class=\"comment\">            ZygoteHooks.postForkCommon();</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Runnable command = <span class=\"built_in\">fillUsapPool</span>(sessionSocketRawFDs, isPriorityRefill);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command != null) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> command;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-SystemServer\">创建 SystemServer</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ZygoteInit.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    abiList —— ndl filter</span></span><br><span class=\"line\"><span class=\"comment\">    socketname —— zygote 进程名称</span></span><br><span class=\"line\"><span class=\"comment\">    zygoteServer —— 自然是 zygote 的主要服务</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Runnable <span class=\"title\">forkSystemServer</span><span class=\"params\">(String abiList, String socketName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                             ZygoteServer zygoteServer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//启动参数</span></span><br><span class=\"line\">    String[] args = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;--setuid=1000&quot;</span>, <span class=\"comment\">//linux 中不同 uid 可以代表拥有不同的权限</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--setgid=1000&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,&quot;</span></span><br><span class=\"line\">                        + <span class=\"string\">&quot;1024,1032,1065,3001,3002,3003,3005,3006,3007,3009,3010,3011,3012&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;--capabilities=&quot;</span> + capabilities + <span class=\"string\">&quot;,&quot;</span> + capabilities,</span><br><span class=\"line\">                <span class=\"string\">&quot;--nice-name=system_server&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;--runtime-args&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;--target-sdk-version=&quot;</span> + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,</span><br><span class=\"line\">                <span class=\"string\">&quot;com.android.server.SystemServer&quot;</span>,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略参数构造过程</span></span><br><span class=\"line\">    ZygoteArguments parsedArgs;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建服务进程，还是调用 native 方法</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        int pid = nativeForkSystemServer(</span></span><br><span class=\"line\"><span class=\"comment\">        uid, gid, gids, runtimeFlags, rlimits,</span></span><br><span class=\"line\"><span class=\"comment\">        permittedCapabilities, effectiveCapabilities);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    pid = Zygote.forkSystemServer(</span><br><span class=\"line\">        parsedArgs.mUid, parsedArgs.mGid,</span><br><span class=\"line\">        parsedArgs.mGids,</span><br><span class=\"line\">        parsedArgs.mRuntimeFlags,</span><br><span class=\"line\">        null,</span><br><span class=\"line\">        parsedArgs.mPermittedCapabilities,</span><br><span class=\"line\">        parsedArgs.mEffectiveCapabilities);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        pid=0 则是子进程被创建</span></span><br><span class=\"line\"><span class=\"comment\">        pid=-1 则表示出错</span></span><br><span class=\"line\"><span class=\"comment\">        pid (非0值)创建父进程</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//？？？还会有第二个 zygote 进程，这是什么操作？？？</span></span><br><span class=\"line\">        <span class=\"comment\">//看看官方描述：We determine this by comparing the device ABI list with this zygotes list. </span></span><br><span class=\"line\">        <span class=\"comment\">//            If this zygote supports all ABIs this device supports, there won&#x27;t be another zygote.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">hasSecondZygote</span>(abiList)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">waitForSecondaryZygote</span>(socketName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        zygoteServer.<span class=\"built_in\">closeServerSocket</span>();</span><br><span class=\"line\">        <span class=\"comment\">//继续把参数分发给系统服务进程，这里做的事情比较多了</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、获取系统服务类路径 systemServerClassPath，首先还是从系统环境中读取Os.getenv(&quot;SYSTEMSERVERCLASSPATH&quot;)；当进程执行时 ART 将会处理此路径</span></span><br><span class=\"line\"><span class=\"comment\">            2、负责 zygote 的 native 初始化和 application 的执行</span></span><br><span class=\"line\"><span class=\"comment\">            3、这里无论先走那个分支，后面都会走到同一个方法调用：return RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,</span></span><br><span class=\"line\"><span class=\"comment\">        classLoader);</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">            if (parsedArgs.mInvokeWith != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                WrapperInit.execApplication(parsedArgs.mInvokeWith,</span></span><br><span class=\"line\"><span class=\"comment\">                        parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,</span></span><br><span class=\"line\"><span class=\"comment\">                        VMRuntime.getCurrentInstructionSet(), null, args);</span></span><br><span class=\"line\"><span class=\"comment\">            &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                ClassLoader cl = getOrCreateSystemServerClassLoader();</span></span><br><span class=\"line\"><span class=\"comment\">                return ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,</span></span><br><span class=\"line\"><span class=\"comment\">                parsedArgs.mDisabledCompatChanges,</span></span><br><span class=\"line\"><span class=\"comment\">                parsedArgs.mRemainingArgs, cl);</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">handleSystemServerProcess</span>(parsedArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RuntimeInit.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> Runnable <span class=\"title\">applicationInit</span><span class=\"params\">(<span class=\"keyword\">int</span> targetSdkVersion, <span class=\"keyword\">long</span>[] disabledCompatChanges,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] argv, ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置运行目标版本</span></span><br><span class=\"line\">    VMRuntime.<span class=\"built_in\">getRuntime</span>().<span class=\"built_in\">setTargetSdkVersion</span>(targetSdkVersion);</span><br><span class=\"line\">    <span class=\"comment\">//通过启动类名找到此类，由类加载器加载并调用其 main 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">findStaticMain</span>(args.startClass, args.startArgs, classLoader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RuntimeInit.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> Runnable <span class=\"title\">findStaticMain</span><span class=\"params\">(String className, String[] argv,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//常规方法，只是执行 classloader</span></span><br><span class=\"line\">    Class&lt;?&gt; cl = Class.forName(className, <span class=\"literal\">true</span>, classLoader);</span><br><span class=\"line\">    Method m = cl.<span class=\"built_in\">getMethod</span>(<span class=\"string\">&quot;main&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123; String[].class &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//因为当前是在 zygote 进程创建 SystemServer，在此流程中本次执行我们认为参数 className=&quot;com.android.internal.os.SystemServer&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">MethodAndArgsCaller</span>(m, argv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里 SystemServer 已经创建完成，接下来是通过 <code>MethodAndArgsCaller</code> 方法执行其中的 <code>main</code> 方法，源码路径是<code>/frameworks/base/services/java/com/android/server/SystemServer.java</code>。</p>\n<h1>附加</h1>\n<h2 id=\"参考链接\">参考链接</h2>\n<ul>\n<li>Androi.bp：bp 文件，替换 .mk 的配置文，由 <a href=\"https://github.com/palantir/blueprint\">https://github.com/palantir/blueprint</a> 框架解析</li>\n<li><a href=\"http://Android.mk\">Android.mk</a>：mk 文件，Android 程序编译</li>\n<li>lmkd：low memory killer deamon 低内存终止守护进程</li>\n<li>Apex：Android pony express 解决较低级别系统模块的安装流程 <a href=\"https://source.android.google.cn/devices/tech/ota/apex?hl=zh-cn\">https://source.android.google.cn/devices/tech/ota/apex?hl=zh-cn</a></li>\n<li>syspro 文件：系统共享信息的属性配置文件，通常作为系统 API 实现 <a href=\"https://source.android.google.cn/devices/architecture/sysprops-apis?hl=zh-cn#:~:text=%E4%B8%80%E4%B8%AA,Sysprop%20%E8%AF%B4%E6%98%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%B8%80%E6%9D%A1%E5%B1%9E%E6%80%A7%E6%B6%88%E6%81%AF%EF%BC%8C%E7%94%A8%E6%9D%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E7%BB%84%E5%B1%9E%E6%80%A7%E3%80%82\">https://source.android.google.cn/devices/architecture/sysprops-apis?hl=zh-cn#:~:text=一个,Sysprop 说明文件包含一条属性消息，用来描述一组属性。</a></li>\n<li>ABI：与 CPU 指令集相关 <a href=\"https://developer.android.google.cn/ndk/guides/abis?hl=zh-cn\">https://developer.android.google.cn/ndk/guides/abis?hl=zh-cn</a></li>\n<li>fd ：文件描述符 <a href=\"https://www.cnblogs.com/cscshi/p/15705033.html\">https://www.cnblogs.com/cscshi/p/15705033.html</a></li>\n<li>Linux IO 多路复用：select、poll、epoll <a href=\"https://cloud.tencent.com/developer/article/1005481\">https://cloud.tencent.com/developer/article/1005481</a></li>\n<li>MTE：memory tagging extension  <a href=\"https://cloud.tencent.com/developer/article/2003341#:~:text=Arm%20MTE%EF%BC%88%E5%86%85%E5%AD%98%E6%A0%87%E8%AE%B0%EF%BC%89%E4%BD%9C%E4%B8%BAArmv8.5%E6%8C%87%E4%BB%A4%E9%9B%86%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%E5%BC%95%E5%85%A5%E3%80%82%20MTE%E7%8E%B0%E5%9C%A8%E5%86%85%E7%BD%AE%E4%BA%8EArm%20%E6%9C%80%E8%BF%91%E5%AE%A3%E5%B8%83%E7%9A%84%E7%AC%A6%E5%90%88Armv9%20%E7%9A%84%20CPU%20%E4%B8%AD%EF%BC%8C%E4%BE%8B%E5%A6%82,Cortex-X2%E3%80%81Cortex-A710%20%E5%92%8CCortex-A510%E3%80%82%20%E6%9C%AA%E6%9D%A5%E5%9F%BA%E4%BA%8EArmv9%20%E7%9A%84%20CPU%20%E4%B9%9F%E5%B0%86%E9%9B%86%E6%88%90%20MTE%E3%80%82\"> 内存标签扩展 </a></li>\n<li>已加标记指针：<a href=\"https://source.android.google.cn/devices/tech/debug/tagged-pointers?hl=zh-cn\">https://source.android.google.cn/devices/tech/debug/tagged-pointers?hl=zh-cn</a></li>\n</ul>\n"},{"title":"Android 系统 Home（一）","catalog":true,"date":"2022-09-29T14:57:44.000Z","subtitle":"启动桌面就是查找并启动 Activity","header-img":"/img/220928/android_sysserver_bg.png","sticky":8,"_content":"\n\n# Ready go\n在系列文章中，上一章我们对 `package` 目录下的内容有了一定的了解，我们知道设备上的桌面其实就是一个`系统应用`，AOSP 原生有提供，但是厂商定制的 ROM 往往会自己重写或重新实现，扩展功能；那么继续 Android 系统启动思考往下走，我们是不是应该看看手机桌面是如何显示的———桌面程序是如何启动的？\n\n虽然我们知道桌面程序是`Launcher`，但是我们作为刚阅读源码的小白，**如何在源码中快速找到桌面程序启动的入口？** 这是一个可以思考的问题， 当然，站在‘巨人的肩膀’直接使用百度也是可以的，但这里我想到另外一种方式————`无障碍服务 Accessebility`；在平时开发中，无障碍服务除了满足项目需求应用于项目中外，还有一种就是利用该服务作为我们的辅助工具，提高开发效率，我个人最常用的就是`查看系统当前最顶部显示的 activity`。作为辅助手段，早已有成熟的软件工具，这里推荐两个工具。\n\n\n- 开发者助手\n- Android 开发工具箱\n- MT 文件管理器\n\n# systemReady\n\n我们知道，SystemServer 在被调用时先执行 `main` 函数，紧接着执行当前类的静态方法 `run`，然后分三个阶段启动 `启动服务、核心服务、其他服务`，最后进入 `Looper().loop` 循环忘不停歇的 ~~打工~~ 等待消息到来并处理。启动服务是一部分，难道不做点别的吗？刚好在启动 **其他服务** 这里看到这一段注释：\n\n```\n// We now tell the activity manager it is okay to run third party\n// code.  It will call back into us once it has gotten to the state\n// where third party code can really run (but before it has actually\n// started launching the initial applications), for us to complete our\n// initialization.\n\nSystemServer：AMS 你所需的一些服务已准备就绪，可以启动第三方应用了，收到请回答，收到请回答，over！over！\n\nAMS：收到！收到！看我回调行事，over！\n```\n\n先是 AMS systemReady 进入准备阶段\n\n```java\n//ActivityManagerService.java\npublic void systemReady(final Runnable goingCallback, @NonNull TimingsTraceAndSlog t) {\n\n    /*\n        1、管理 activity 的任务栈【这种内容太细了，以后逐个看看，先略过】\n        2、包含 RecentTasks 最近运行的任务列表\n    */\n    mActivityTaskManager.onSystemReady();\n    mUserController.onSystemReady();\n    //访问控制，主要与权限、限制相关\n    mAppOpsService.systemReady();\n    mProcessList.onSystemReady();\n\n    /*\n        1、如果进程或进程组被标记为杀死，将调用 Process.killProcessQuiet(mPid);ProcessList.killProcessGroup(uid, mPid);杀死进程，为启动新进程做准备\n        2、当然，进程也可能被标记为重启，便不会从进程队列中移除       \n    */\n    mProcessList.removeProcessLocked\n    //注册启动监听，ATM：activitTaskManager\n    mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(mActivityLaunchObserver);\n    //UGM：uri global manager，uri 作为数据访问地址、数据传递也是很常用的\n    mUgmInternal.onSystemReady();\n    //pmi：power manager internal，低电量监控\n    pmi.registerLowPowerModeObserver\n    \n    \n    //😓执行到一半就返回去执行回调【请参考 —— 回调1】\n    if (goingCallback != null) goingCallback.run();\n        \n    /*\n        1、启动持久应用（不会休眠的、启动唤醒程序），待启动的是哪些应用，又来到了 IPackageManager.aidl 的 getPersistentApplications，\n           实现类是 PackageManagerService.java\n        2、getPersistentApplications 实际上获取到的是一个 ApplicationInfo 列表\n        3、通过 applicationInfo 创建 processRecorder，接着通过 ProcessList 一顿判断、调整 processRecorder\n        4、最后可能通过 wzygote 或 Process.start 启动\n    */\n    startPersistentApps(PackageManager.MATCH_DIRECT_BOOT_AWARE);\n\n    //ActivityTaskManagerInternal.java 实现类在 ActivityManagerService 的一个内部类 LocalService；\n    //‼️启动桌面程序\n    mAtmInternal.startHomeOnAllDisplays(currentUserId, \"systemReady\");\n    \n    mAtmInternal.resumeTopActivities(false /* scheduleIdle */);    \n}\n```\n\nAMS 准备完毕，请求 SystemServer 超级管家执行回调\n\n```java\n//SystemServer.java 【回调1】\nmActivityManagerService.systemReady(() -> {\n\n    //service.onBootPhase(mCurrentPhase=500); 系统服务那么多到底谁在执行 500 这个标记？\n    //不用过多关注，这只是一个通知，回调告知其他服务 AMS 启动了，你们可以使用 AMS 做别的事情\n    mSystemServiceManager.startBootPhase(t, SystemService.PHASE_ACTIVITY_MANAGER_READY);\n    \n    //AMS 需要监控 native 崩溃，里面启动了一个线程 Thread，内部使用阻塞的 socket 接收崩溃信息并返回给上层或输出\n    mActivityManagerService.startObservingNativeCrashes();\n\n    //看到 ops 往往是跟限制策略有关🚫\n    mActivityManagerService.setAppOpsPolicy(new AppOpsPolicy(mSystemContext));\n\n    // Wait for all packages to be prepared\n    mPackageManagerService.waitForAppDataPrepared();\n    //第三方应用准备好了，又发起一个启动第三方应用的回调，让各自实现此状态码的服务执行相应操作【见图1】\n    mSystemServiceManager.startBootPhase(t, SystemService.PHASE_THIRD_PARTY_APPS_CAN_START);\n\n    ... etc\n    \n    //到这里我们算是回调执行完成，我们又要回到 systemReady 里面去，继续看执行 goingCallback.run(); 之后的代码\n    \n}, t);\n```\n\n# startHomeOnAllDisplays\n\n我们想知道 startHomeOnAllDisplays 的具体实现在哪里？有谁执行的？不妨找找看。\n\n- ActivityManagerService#mAtmInternal.startHomeOnAllDisplays(currentUserId, \"systemReady\"); `AMS 中调用`\n- ActivityTaskManagerInternal#startHomeOnAllDisplays   `这是一个抽象类的抽象方法`\n- ActivityTaskManagerService#LocalService            `实现类是 ATMS 的内部类`\n- ActivityTaskManagerService#mInternal; `实现类实例赋给了 ATMS 的成员`\n- ActivityTaskManagerService#LocalServices.addService(ActivityTaskManagerInternal.class, mInternal); `在 ATMS 启动周期 onStart 中被缓存到本地服务列表`\n- com.android.server#private static final ArrayMap<Class<?>, Object> sLocalServiceObjects `本地服务列表就是这么一个简单的数组`\n- ActivityTaskManagerService#mAtmInternal = LocalServices.getService(ActivityTaskManagerInternal.class); `从本地服务缓存列表中获取实例赋给 ATMS`\n\n了解了，直接找实现类 `LocalService`。\n\n```java\n//ActivityTaskManagerService.java#LocalService\n@Override\npublic boolean startHomeOnAllDisplays(int userId, String reason) {\n    synchronized (mGlobalLock) {\n        return mRootWindowContainer.startHomeOnAllDisplays(userId, reason);\n    }\n}\n```\n\n```java\n//RootWindowContainer.java\nboolean startHomeOnAllDisplays(int userId, String reason) {\n    //桌面主界面是否启动完毕\n    boolean homeStarted = false;\n    //这里的循环表示对应 AllDisplays，设备是可能存在多个显示器的\n    for (int i = getChildCount() - 1; i >= 0; i--) {\n        final int displayId = getChildAt(i).mDisplayId;\n        homeStarted |= startHomeOnDisplay(userId, reason, displayId);\n    }\n    return homeStarted;\n}\n```\n\n```java\n//RootWindowContainer.java\nboolean startHomeOnDisplay(int userId, String reason, int displayId) {\n    return startHomeOnDisplay(userId, reason, displayId, false /* allowInstrumenting */,\n            false /* fromHomeKey */);\n}\n```\n\n```java\n//RootWindowContainer.java\nboolean startHomeOnDisplay(int userId, String reason, int displayId, boolean allowInstrumenting,\n        boolean fromHomeKey) {\n    //如果遇到无效的显示设备，则使用默认的或已获得焦点的最顶部显示ID\n    if (displayId == INVALID_DISPLAY) {\n        final Task rootTask = getTopDisplayFocusedRootTask();\n        displayId = rootTask != null ? rootTask.getDisplayId() : DEFAULT_DISPLAY;\n    }\n\n    final DisplayContent display = getDisplayContent(displayId);\n    return display.reduceOnAllTaskDisplayAreas((taskDisplayArea, result) ->\n                    result | startHomeOnTaskDisplayArea(userId, reason, taskDisplayArea,\n                            allowInstrumenting, fromHomeKey),\n            false /* initValue */);\n}\n```\n    \n```java\n//RootWindowContainer.java\nboolean startHomeOnTaskDisplayArea(int userId, String reason, TaskDisplayArea taskDisplayArea,\n        boolean allowInstrumenting, boolean fromHomeKey) {\n    //如果提供的现实区域无效，同样的恢复默认\n    if (taskDisplayArea == null) {\n        final Task rootTask = getTopDisplayFocusedRootTask();\n        taskDisplayArea = rootTask != null ? rootTask.getDisplayArea()\n                : getDefaultTaskDisplayArea();\n    }\n\n    //‼️重要的来了，桌面也是一个 activity，启动一个 activity，最重要的便是启动目标信息\n    Intent homeIntent = null;\n    ActivityInfo aInfo = null;\n    //\n    if (taskDisplayArea == getDefaultTaskDisplayArea()) {\n        /*\n            1、mService 是 ActivityTaskManagerService\n            2、【默认】intent.addCategory(Intent.CATEGORY_HOME); mTopAction = Intent.ACTION_MAIN;\n        */\n        homeIntent = mService.getHomeIntent();\n        aInfo = resolveHomeActivity(userId, homeIntent);\n    } else if (shouldPlaceSecondaryHomeOnDisplayArea(taskDisplayArea)) {\n        Pair<ActivityInfo, Intent> info = resolveSecondaryHomeActivity(userId, taskDisplayArea);\n        aInfo = info.first;\n        homeIntent = info.second;\n    }\n    if (aInfo == null || homeIntent == null) {\n        return false;\n    }\n\n    //显示总是有一些显示\n    if (!canStartHomeOnDisplayArea(aInfo, taskDisplayArea, allowInstrumenting)) {\n        return false;\n    }\n\n    homeIntent.setComponent(new ComponentName(aInfo.applicationInfo.packageName, aInfo.name));\n    homeIntent.setFlags(homeIntent.getFlags() | FLAG_ACTIVITY_NEW_TASK);\n    if (fromHomeKey) {\n        homeIntent.putExtra(WindowManagerPolicy.EXTRA_FROM_HOME_KEY, true);\n        if (mWindowManager.getRecentsAnimationController() != null) {\n            mWindowManager.getRecentsAnimationController().cancelAnimationForHomeStart();\n        }\n    }\n    homeIntent.putExtra(WindowManagerPolicy.EXTRA_START_REASON, reason);\n\n    //启动 activity 还得看 activityStartController\n    mService.getActivityStartController().startHomeActivity(homeIntent, aInfo, myReason,\n            taskDisplayArea);\n    return true;\n}\n```\n\n\n# activitStartController\n\n```java \n//ActivityStartController.java\n//⚠️：这里启动的是 homeItent\nvoid startHomeActivity(Intent intent, ActivityInfo aInfo, String reason,\n        TaskDisplayArea taskDisplayArea) {\n    //没有任何附加属性，比如没有 activity 动画\n    final ActivityOptions options = ActivityOptions.makeBasic();\n    //全屏窗口模式\n    options.setLaunchWindowingMode(WINDOWING_MODE_FULLSCREEN);\n    if (!ActivityRecord.isResolverActivity(aInfo.name)) {\n        //指定这是一个桌面 activity \n        options.setLaunchActivityType(ACTIVITY_TYPE_HOME);\n    }\n\n    //显示设备ID也指定，似乎 activity 启动需要的参数都将封装到 ActivitOptions \n    final int displayId = taskDisplayArea.getDisplayId();\n    options.setLaunchDisplayId(displayId);\n    options.setLaunchTaskDisplayArea(taskDisplayArea.mRemoteToken\n            .toWindowContainerToken());\n\n    //只是一个变量递增 mDeferResumeCount++，这如何使用 \n    mSupervisor.beginDeferResume();\n\n    final Task rootHomeTask;\n    try {\n        /*\n            1、activity 需要依赖 task 容器，所以启动前必须确保 Task 已创建\n            2、TaskDisplayArea#createRootTask 需指定 activityType=home_activity，ontop=true 在显示器的顶部创建 rootTask\n            3、最终创建是通过 Task.Builder()......build();  至此，存储桌面 activity 的 Task 已经有了\n            4、mRootWindowContainer 这个很重要，我们所见到的界面都要依附于它\n        */\n        rootHomeTask = taskDisplayArea.getOrCreateRootHomeTask(ON_TOP/*true*/);\n    } finally {\n        //这个跟 mDeferResumeCount++ 对应，这里是 mDeferResumeCount--\n        //关于这个还有一个方法：readyToResume() {return mDeferResumeCount == 0;} \n        //true if resume can be called：那估计是哪里进行轮询监听 readyToResume()\n        mSupervisor.endDeferResume();\n    }\n\n    /*\n        1、有了可承载桌面程序的任务栈，接着就要启动桌面 activity\n        2、获得一个 activity 启动器 ActivitStarter，开始执行 excute()\n        3、启动器似乎使用了工厂模式，默认启动器数量 3 个\n        4、启动器主要成员有 ActivityStartController、ActivityTaskManagerService、ActivityTaskSupervisor、ActivityStartInterceptor\n        5、在构建请求器过程中还需要构造启动请求参数 mRequest \n    */\n    mLastHomeActivityStartResult = obtainStarter(intent, \"startHomeActivity: \" + reason)\n            .setOutActivity(tmpOutRecord)\n            .setCallingUid(0)\n            .setActivityInfo(aInfo)\n            .setActivityOptions(options.toBundle())\n            .execute();\n    mLastHomeActivityStartRecord = tmpOutRecord[0];\n    if (rootHomeTask.mInResumeTopActivity) {\n        //开始调用 onResume 声明周期方法，回到 activity 最熟悉的地方\n        mSupervisor.scheduleResumeTopActivities();\n    }\n}\n```\n\n关于 `ActivityTaskSupervisor` 负责的任务太多了，估计像个版本要分离部分代码吧\n\n```java\n// TODO: This class has become a dumping ground. Let's\n// - Move things relating to the hierarchy to RootWindowContainer\n// - Move things relating to activity life cycles to maybe a new class called ActivityLifeCycler\n// - Move interface things to ActivityTaskManagerService.\n// - All other little things to other files.\npublic class ActivityTaskSupervisor implements RecentTasks.Callbacks {\n\n}\n```\n\n\n# activityStarter\n\n```java\n//ActivityStarter.java\nint execute() {\n    try {\n        /*\n            1、如果启动请求信息无效，则重新解析并填充启动请求参数\n            2、请求参数包括 pid、uid、resolveInfo、activityInfo  .etc\n        */\n        if (mRequest.activityInfo == null) {\n            mRequest.resolveActivity(mSupervisor);\n        }\n\n        int res;\n        //mGlobalLock 全局服务锁，并没有什么特别，就是一个普通对象\n        synchronized (mService.mGlobalLock) {\n            final boolean globalConfigWillChange = mRequest.globalConfig != null\n                    && mService.getGlobalConfiguration().diff(mRequest.globalConfig) != 0;\n            final Task rootTask = mRootWindowContainer.getTopDisplayFocusedRootTask();\n            if (rootTask != null) {\n                rootTask.mConfigWillChange = globalConfigWillChange;\n            }\n            final long origId = Binder.clearCallingIdentity();\n\n            /*\n                1、什么重量级进程切换，我都懵了😺\n                2、如果找不到调用者 app 进程，则终止启动请求 ATMS.getProcessController(request.caller) == null\n            */\n            res = resolveToHeavyWeightSwitcherIfNeeded();\n            if (res != START_SUCCESS) {\n                return res;\n            }\n\n            //‼️执行启动请求\n            res = executeRequest(mRequest);\n\n            mSupervisor.getActivityMetricsLogger().notifyActivityLaunched(launchingState, res,\n                    newActivityCreated, mLastStartActivityRecord, originalOptions);\n            if (mRequest.waitResult != null) {\n                mRequest.waitResult.result = res;\n                res = waitResultIfNeeded(mRequest.waitResult, mLastStartActivityRecord,\n                        launchingState);\n            }\n            return getExternalResult(res);\n        }\n    } finally {\n        //执行完成最后一定要回收 activity 启动器\n        onExecutionComplete();\n    }\n}\n```\n\nactivity 启动请求正式开始，这里将会有很多的启动限制🚫等。\n\n```java\n//ActivitStarter.java\nprivate int executeRequest(Request request) {\n    //很好奇这个 reason 这么总要吗？干什么用的\n    if (TextUtils.isEmpty(request.reason)) {\n        throw new IllegalArgumentException(\"Need to specify a reason.\");\n    }\n    \n    //如果中途检测到是非启动成功（触发启动限制），那么立马结束请求，返回结果\n    int err = ActivityManager.START_SUCCESS;\n    // Pull the optional Ephemeral Installer-only bundle out of the options early.\n    final Bundle verificationBundle =\n            options != null ? options.popAppVerificationBundle() : null;\n\n    //❌限制1：根据启动请求调用者 caller 寻找是否存在启动 app 进程，如果不存在则返回拦截请求\n    WindowProcessController callerApp = null;\n    if (caller != null) {\n        callerApp = mService.getProcessController(caller);\n        if (callerApp != null) {\n            callingPid = callerApp.getPid();\n            callingUid = callerApp.mInfo.uid;\n        } else {\n            err = START_PERMISSION_DENIED;\n        }\n    }\n\n    final int launchFlags = intent.getFlags();\n    if ((launchFlags & Intent.FLAG_ACTIVITY_FORWARD_RESULT) != 0 && sourceRecord != null) {\n        //❌什么请求冲突？？？\n        if (requestCode >= 0) {\n            SafeActivityOptions.abort(options);\n            return ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT;\n        }\n    }\n\n    if (err == ActivityManager.START_SUCCESS && intent.getComponent() == null) {\n        //❌启动目标 activity 未知，失败\n        err = ActivityManager.START_INTENT_NOT_RESOLVED;\n    }\n\n    if (err == ActivityManager.START_SUCCESS && aInfo == null) {\n        //❌同样的，请求所需要的基础信息都未知，自然中断本次请求\n        err = ActivityManager.START_CLASS_NOT_FOUND;\n    }\n\n    // voiceSession 语音交互相关 activity【这里其实是 activity 启动都会经过的路途，只是我们本次分析的是‘启动桌面 activity’】\n    if (err == ActivityManager.START_SUCCESS && sourceRecord != null\n            && sourceRecord.getTask().voiceSession != null) {\n        if ((launchFlags & FLAG_ACTIVITY_NEW_TASK) == 0\n                && sourceRecord.info.applicationInfo.uid != aInfo.applicationInfo.uid) {\n            try {\n                intent.addCategory(Intent.CATEGORY_VOICE);\n                if (!mService.getPackageManager().activitySupportsIntent(\n                        intent.getComponent(), intent, resolvedType)) {\n                    //❌不支持语音交互功能？\n                    err = ActivityManager.START_NOT_VOICE_COMPATIBLE;\n                }\n            } catch (RemoteException e) {\n                //❌不支持语音交互功能？\n                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;\n            }\n        }\n    }\n\n    if (err == ActivityManager.START_SUCCESS && voiceSession != null) {\n        try {\n            if (!mService.getPackageManager().activitySupportsIntent(intent.getComponent(),\n                    intent, resolvedType)) {\n                //❌不支持\n                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;\n            }\n        } catch (RemoteException e) {\n            //❌不支持\n            err = ActivityManager.START_NOT_VOICE_COMPATIBLE;\n        }\n    }\n\n    if (err != START_SUCCESS) {\n        SafeActivityOptions.abort(options);\n        return err;\n    }\n\n    //检查 activity 启动是否满足条件\n    boolean abort = !mSupervisor.checkStartAnyActivityPermission(intent, aInfo, resultWho,\n            requestCode, callingPid, callingUid, callingPackage, callingFeatureId,\n            request.ignoreTargetSecurity, inTask != null, callerApp, resultRecord,\n            resultRootTask);\n    abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,\n            callingPid, resolvedType, aInfo.applicationInfo);\n    abort |= !mService.getPermissionPolicyInternal().checkStartActivity(intent, callingUid,\n            callingPackage);\n\n    boolean restrictedBgActivity = false;\n    if (!abort) {\n        try {\n            //继续检查是否满足启动条件\n            restrictedBgActivity = shouldAbortBackgroundActivityStart(callingUid,\n                    callingPid, callingPackage, realCallingUid, realCallingPid, callerApp,\n                    request.originatingPendingIntent, request.allowBackgroundActivityStart,\n                    intent);\n        } finally {\n\n        }\n    }\n\n     \n    //略略略～～～\n\n\n    //没有通过启动检查就要结束执行了\n    if (abort) {\n        ActivityOptions.abort(checkedOptions);\n        return START_ABORTED;\n    }\n\n    if (aInfo != null) {\n        if (mService.getPackageManagerInternalLocked().isPermissionsReviewRequired(\n                aInfo.packageName, userId)) {\n            final IIntentSender target = mService.getIntentSenderLocked(\n                    ActivityManager.INTENT_SENDER_ACTIVITY, callingPackage, callingFeatureId,\n                    callingUid, userId, null, null, 0, new Intent[]{intent},\n                    new String[]{resolvedType}, PendingIntent.FLAG_CANCEL_CURRENT\n                            | PendingIntent.FLAG_ONE_SHOT, null);\n\n            Intent newIntent = new Intent(Intent.ACTION_REVIEW_PERMISSIONS);\n\n            int flags = intent.getFlags();\n            flags |= Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS;\n\n            //设置启动标识，仅设置 NEW_TASK 某些场景不一定会真的创建一个任务栈，但可以置为 MULTIPLE_TASK\n            if ((flags & (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_NEW_DOCUMENT)) != 0) {\n                flags |= Intent.FLAG_ACTIVITY_MULTIPLE_TASK;\n            }\n            newIntent.setFlags(flags);\n\n            newIntent.putExtra(Intent.EXTRA_PACKAGE_NAME, aInfo.packageName);\n            newIntent.putExtra(Intent.EXTRA_INTENT, new IntentSender(target));\n            if (resultRecord != null) {\n                newIntent.putExtra(Intent.EXTRA_RESULT_NEEDED, true);\n            }\n            intent = newIntent;\n\n            //一堆数据解析和赋值就不看了\n            intentGrants = null;\n            resolvedType = null;\n            callingUid = realCallingUid;\n            callingPid = realCallingPid;\n            rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId, 0,\n                    computeResolveFilterUid(\n                            callingUid, realCallingUid, request.filterCallingUid));\n            aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags,\n                    null /*profilerInfo*/);\n        }\n    }\n\n    if (rInfo != null && rInfo.auxiliaryInfo != null) {\n        //万事俱备，准备待发，创建一个可以启动的 intent （也就是启动数据每个必要的不可少）\n        //应该是有特别之处的，不然为什么不直接使用外部传进来的 intent，具体就不纠结了\n        intent = createLaunchIntent(rInfo.auxiliaryInfo, request.ephemeralIntent,\n                callingPackage, callingFeatureId, verificationBundle, resolvedType, userId);\n        resolvedType = null;\n        callingUid = realCallingUid;\n        callingPid = realCallingPid;\n        intentGrants = null;\n        aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, null /*profilerInfo*/);\n    }\n\n    //每一个 activity 的信息都将记录在 ActivityRecord 中\n    final ActivityRecord r = new ActivityRecord.Builder(mService)\n            .setCaller(callerApp)\n            .setLaunchedFromPid(callingPid)\n            .setLaunchedFromUid(callingUid)\n            .setLaunchedFromPackage(callingPackage)\n            .setLaunchedFromFeature(callingFeatureId)\n            .setIntent(intent)\n            .setResolvedType(resolvedType)\n            .setActivityInfo(aInfo)\n            .setConfiguration(mService.getGlobalConfiguration())\n            .setResultTo(resultRecord)\n            .setResultWho(resultWho)\n            .setRequestCode(requestCode)\n            .setComponentSpecified(request.componentSpecified)\n            .setRootVoiceInteraction(voiceSession != null)\n            .setActivityOptions(checkedOptions)\n            .setSourceRecord(sourceRecord)\n            .build();\n\n    mLastStartActivityRecord = r;\n    //‼️好了，又到下一个启动阶段\n    mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,\n            request.voiceInteractor, startFlags, true /* doResume */, checkedOptions,\n            inTask, inTaskFragment, restrictedBgActivity, intentGrants);\n\n    if (request.outActivity != null) {\n        request.outActivity[0] = mLastStartActivityRecord;\n    }\n    return mLastStartActivityResult;\n}\n```\n\n## checkStartAnyActivityPremission\n\n任何一个 activity 启动都需要检查权限问题。\n\n```java\n//ActivitTaskSupervisor.java\nboolean checkStartAnyActivityPermission(Intent intent, ActivityInfo aInfo, String resultWho,\n        int requestCode, int callingPid, int callingUid, String callingPackage,\n        @Nullable String callingFeatureId, boolean ignoreTargetSecurity,\n        boolean launchingInTask, WindowProcessController callerApp, ActivityRecord resultRecord,\n        Task resultRootTask) {\n    //0、✅如果是最近任务列表中的组件 并且 是当前栈中请求启动是允许的\n    final boolean isCallerRecents = mService.getRecentTasks() != null\n            && mService.getRecentTasks().isCallerRecents(callingUid);\n    /*\n        1、✅如果是具有超级用户权限的应用请求启动是允许的 appID=Process.ROOT_UID\n        2、✅如果是系统应用请求启动是允许的 appID=Process.SYSTEM_UID\n        3、❌如果是不同进程是不允许的 UserHandle.isIsolated(uid)\n        4、✅如果是设备所有者请求启动是允许的 UserHandle.isSameApp(uid, owningUid)\n        5、❌如果目标 activity exported=false 是不被允许启动的\n        6、❌如果检查的权限存在 ‘禁止权限列表’中是不被允许的  [至于列表中都有哪些权限我们以后讨论]\n    */\n    final int startAnyPerm = mService.checkPermission(START_ANY_ACTIVITY, callingPid,\n            callingUid);\n    if (startAnyPerm == PERMISSION_GRANTED || (isCallerRecents && launchingInTask)) {\n        return true;\n    }\n\n    //❌component 限制 【跟上述限制差不多，会调用到 checkComponentPermission】\n    final int componentRestriction = getComponentRestrictionForCallingPackage(aInfo,\n            callingPackage, callingFeatureId, callingPid, callingUid, ignoreTargetSecurity);\n    //❌action 限制  【跟上述限制差不多，会调用到 checkPermission】\n    final int actionRestriction = getActionRestrictionForCallingPackage(\n            intent.getAction(), callingPackage, callingFeatureId, callingPid, callingUid);\n    if (componentRestriction == ACTIVITY_RESTRICTION_PERMISSION\n            || actionRestriction == ACTIVITY_RESTRICTION_PERMISSION) {\n        if (resultRecord != null) {\n            resultRecord.sendResult(INVALID_UID, resultWho, requestCode,\n                    Activity.RESULT_CANCELED, null /* data */, null /* dataGrants */);\n        }\n        throw new SecurityException(msg);\n    }\n\n    if (actionRestriction == ACTIVITY_RESTRICTION_APPOP) {\n        return false;\n    } else if (componentRestriction == ACTIVITY_RESTRICTION_APPOP) {\n        return false;\n    }\n\n    return true;\n}\n```\n\n## checkIntent\n\nmService.mIntentFirewall.checkStartActivity 最终调用的就是 intent 过滤。\n\n```java\n//IntentFirewall.java\npublic boolean checkIntent(FirewallIntentResolver resolver, ComponentName resolvedComponent,\n        int intentType, Intent intent, int callerUid, int callerPid, String resolvedType,\n        int receivingUid) {\n    boolean log = false;\n    boolean block = false;\n\n    List<Rule> candidateRules;\n    candidateRules = resolver.queryIntent(intent, resolvedType, false /*defaultOnly*/, 0);\n    if (candidateRules == null) {\n        candidateRules = new ArrayList<Rule>();\n    }\n    resolver.queryByComponent(resolvedComponent, candidateRules);\n\n    for (int i=0; i<candidateRules.size(); i++) {\n        Rule rule = candidateRules.get(i);\n        //intent 过滤规则是什么，规则是如何匹配的？不懂————略！\n        if (rule.matches(this, resolvedComponent, intent, callerUid, callerPid, resolvedType,\n                receivingUid)) {\n            block |= rule.getBlock();\n            log |= rule.getLog();\n            if (block && log) {\n                break;\n            }\n        }\n    }\n\n    if (log) {\n        logIntent(intentType, intent, callerUid, resolvedType);\n    }\n\n    return !block;\n}\n```\n\n\n## checkStartActivity\n\nPermissionPolicyInternal 是一个抽象类，实现类是 PermissionPolicyService 的一个内部类 `private class Internal extends PermissionPolicyInternal `\n\n```java\n//PermissionPolicyService.java\nprivate class Internal extends PermissionPolicyInternal {\n\n    @Override\n    public boolean checkStartActivity(@NonNull Intent intent, int callingUid,\n            @Nullable String callingPackage) {\n        if (callingPackage != null && isActionRemovedForCallingPackage(intent, callingUid,\n                callingPackage)) {\n            return false;\n        }\n        return true;\n    }\n```\n\n\n```java\n//PermissionPolicyService.java\nprivate boolean isActionRemovedForCallingPackage(@NonNull Intent intent, int callingUid,\n        @NonNull String callingPackage) {\n    String action = intent.getAction();\n    if (action == null) {\n        return false;\n    }\n    switch (action) {\n        case TelecomManager.ACTION_CHANGE_DEFAULT_DIALER:\n        case Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT: {\n            ApplicationInfo applicationInfo;\n            try {\n                applicationInfo = getContext().getPackageManager().getApplicationInfoAsUser(\n                        callingPackage, 0, UserHandle.getUserId(callingUid));\n                if (applicationInfo.targetSdkVersion >= Build.VERSION_CODES.Q) {\n                    //只有高版本才会检查这个问题咯\n                    return true;\n                }\n            } catch (PackageManager.NameNotFoundException e) {\n                \n            }\n          \n            intent.putExtra(Intent.EXTRA_CALLING_PACKAGE, callingPackage);\n            return false;\n        }\n        default:\n            return false;\n    }\n}\n```\n\n## shouldAbortBackgroundActivityStart\n\n```java\nboolean shouldAbortBackgroundActivityStart(int callingUid, int callingPid,\n        final String callingPackage, int realCallingUid, int realCallingPid,\n        WindowProcessController callerApp, PendingIntentRecord originatingPendingIntent,\n        boolean allowBackgroundActivityStart, Intent intent) {\n    \n    //1、✅系统用户应用、具有 Root 权限的应用、NFC （一般是伴生设备）应用请求启动是允许的\n    final int callingAppId = UserHandle.getAppId(callingUid);\n    if (callingUid == Process.ROOT_UID || callingAppId == Process.SYSTEM_UID\n            || callingAppId == Process.NFC_UID) {\n        return false;\n    }\n\n    //2、✅如果是桌面程序启动是允许的  [正常用户操作不就是点击桌面应用图标然后启动的嘛]\n    if (isHomeApp(callingUid, callingPackage)) {\n        return false;\n    }\n\n    //3、✅设备所有者是允许的\n    final WindowState imeWindow = mRootWindowContainer.getCurrentInputMethodWindow();\n    if (imeWindow != null && callingAppId == imeWindow.mOwnerUid) {\n        return false;\n    }\n\n    //4、✅如果有前台应用或可见界面存在前台，这也是允许的\n    final int appSwitchState = mService.getBalAppSwitchesState();\n    final int callingUidProcState = mService.mActiveUids.getUidState(callingUid);\n    final boolean callingUidHasAnyVisibleWindow = mService.hasActiveVisibleWindow(callingUid);\n    final boolean isCallingUidForeground = callingUidHasAnyVisibleWindow\n            || callingUidProcState == ActivityManager.PROCESS_STATE_TOP\n            || callingUidProcState == ActivityManager.PROCESS_STATE_BOUND_TOP;\n    final boolean isCallingUidPersistentSystemProcess =\n            callingUidProcState <= ActivityManager.PROCESS_STATE_PERSISTENT_UI;\n\n    //5、✅在应用切换过程中，如果有可见的窗口是允许的\n    final boolean appSwitchAllowedOrFg =\n            appSwitchState == APP_SWITCH_ALLOW || appSwitchState == APP_SWITCH_FG_ONLY;\n    if (((appSwitchAllowedOrFg || mService.mActiveUids.hasNonAppVisibleWindow(callingUid))\n            && callingUidHasAnyVisibleWindow)\n            || isCallingUidPersistentSystemProcess) {\n        return false;\n    }\n    \n    final int realCallingUidProcState = (callingUid == realCallingUid)\n            ? callingUidProcState\n            : mService.mActiveUids.getUidState(realCallingUid);\n    final boolean realCallingUidHasAnyVisibleWindow = (callingUid == realCallingUid)\n            ? callingUidHasAnyVisibleWindow\n            : mService.hasActiveVisibleWindow(realCallingUid);\n    final boolean isRealCallingUidForeground = (callingUid == realCallingUid)\n            ? isCallingUidForeground\n            : realCallingUidHasAnyVisibleWindow\n                    || realCallingUidProcState == ActivityManager.PROCESS_STATE_TOP;\n    final int realCallingAppId = UserHandle.getAppId(realCallingUid);\n    final boolean isRealCallingUidPersistentSystemProcess = (callingUid == realCallingUid)\n            ? isCallingUidPersistentSystemProcess\n            : (realCallingAppId == Process.SYSTEM_UID)\n                    || realCallingUidProcState <= ActivityManager.PROCESS_STATE_PERSISTENT_UI;\n    if (realCallingUid != callingUid) {\n        //6、✅如果调用的进程有可见的窗口是允许的\n        if (realCallingUidHasAnyVisibleWindow) {\n            if (DEBUG_ACTIVITY_STARTS) {\n                Slog.d(TAG, \"Activity start allowed: realCallingUid (\" + realCallingUid\n                        + \") has visible (non-toast) window\");\n            }\n            return false;\n        }\n\n        //7、✅如果是‘系统持久应用’发起的请求是允许的\n        if (isRealCallingUidPersistentSystemProcess && allowBackgroundActivityStart) {\n            return false;\n        }\n\n        //8、✅如果存在伴生设备或者相关可见应用进程是允许的\n        if (mService.isAssociatedCompanionApp(UserHandle.getUserId(realCallingUid),\n                realCallingUid)) {\n            return false;\n        }\n    }\n\n    //9、✅具备系统权限 START_ACTIVITIES_FROM_BACKGROUND 是允许的\n    if (mService.checkPermission(START_ACTIVITIES_FROM_BACKGROUND, callingPid, callingUid)\n            == PERMISSION_GRANTED) {\n        return false;\n    }\n\n    //10、✅如果最近存在相同 uid 进程启动相关组件是允许的（同一个应用）\n    if (mSupervisor.mRecentTasks.isCallerRecents(callingUid)) {\n        return false;\n    }\n\n    //11、✅对于设备所有者请求启动是允许的\n    if (mService.isDeviceOwner(callingUid)) {\n        return false;\n    }\n\n    //12、✅对于伴生设备的请求是允许的\n    final int callingUserId = UserHandle.getUserId(callingUid);\n    if (mService.isAssociatedCompanionApp(callingUserId, callingUid)) {\n        return false;\n    }\n    \n    //13、✅具备系统权限 SYSTEM_ALERT_WINDOW 是允许的\n    if (mService.hasSystemAlertWindowPermission(callingUid, callingPid, callingPackage)) {\n        return false;\n    }\n\n  \n    int callerAppUid = callingUid;\n    if (callerApp == null) {\n        callerApp = mService.getProcessController(realCallingPid, realCallingUid);\n        callerAppUid = realCallingUid;\n    }\n    if (callerApp != null) {\n        //‼️来到了新的启动控制类：BackgroundLaunchProcessController#areBackgroundActivityStartsAllowed\n        //参考下文\n        if (callerApp.areBackgroundActivityStartsAllowed(appSwitchState)) {\n            return false;\n        }\n\n        final ArraySet<WindowProcessController> uidProcesses =\n                mService.mProcessMap.getProcesses(callerAppUid);\n        if (uidProcesses != null) {\n            for (int i = uidProcesses.size() - 1; i >= 0; i--) {\n                final WindowProcessController proc = uidProcesses.valueAt(i);\n                //参看下文\n                if (proc != callerApp\n                        && proc.areBackgroundActivityStartsAllowed(appSwitchState)) {\n                    return false;\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```\n\n## areBackgroundActivityStartsAllowed\n\n```java\n//BackgroundLaunchProcessController.java\nboolean areBackgroundActivityStartsAllowed(int pid, int uid, String packageName,\n        int appSwitchState, boolean isCheckingForFgsStart,\n        boolean hasActivityInVisibleTask, boolean hasBackgroundActivityStartPrivileges,\n        long lastStopAppSwitchesTime, long lastActivityLaunchTime,\n        long lastActivityFinishTime) {\n    if (appSwitchState == APP_SWITCH_ALLOW) {\n        final long now = SystemClock.uptimeMillis();\n        if (now - lastActivityLaunchTime < ACTIVITY_BG_START_GRACE_PERIOD_MS\n                || now - lastActivityFinishTime < ACTIVITY_BG_START_GRACE_PERIOD_MS) {\n            if (lastActivityLaunchTime > lastStopAppSwitchesTime\n                    || lastActivityFinishTime > lastStopAppSwitchesTime) {\n                return true;\n            }\n        }\n    }\n    if (hasBackgroundActivityStartPrivileges) {\n        return true;\n    }\n\n    if (hasActivityInVisibleTask\n            && (appSwitchState == APP_SWITCH_ALLOW || appSwitchState == APP_SWITCH_FG_ONLY)) {\n        return true;\n    }\n    if (isBoundByForegroundUid()) {\n        return true;\n    }\n    if (isBackgroundStartAllowedByToken(uid, packageName, isCheckingForFgsStart)) {\n        return true;\n    }\n    return false;\n}\n```\n\n# startActivityUnchecked\n\n```java\n//ActivityStarter.java\nprivate int startActivityUnchecked(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        TaskFragment inTaskFragment, boolean restrictedBgActivity,\n        NeededUriGrants intentGrants) {\n}\n```\n\n\n# Reference\n\n- 输入法控件 IME：https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn\n- [ 关于孤儿进程、僵尸进程的概念 ](https://baike.baidu.com/item/孤儿进程/16751450#:~:text=在操作系统领域中，孤儿进程指的是在其父进程执行完成或被终止后仍继续运行的一类进程%E3%80%82,这些孤儿进程将被init进程%20%28进程号为1%29所收养，并由init进程对它们完成状态收集工作%E3%80%82)\n- [ 关于 UID、PID 的了解](https://www.cnblogs.com/perseus/articles/2354173.html)\n- [AutofillManager 参考链接 [1]](https://developer.android.google.cn/guide/topics/text/autofill?hl=zh-cn)","source":"_posts/undefined/Android系统桌面启动一.md","raw":"---\ntitle: Android 系统 Home（一）\ncatalog: true\ndate: 2022-09-29 22:57:44\nsubtitle: 启动桌面就是查找并启动 Activity\nheader-img: /img/220928/android_sysserver_bg.png\ntags: AOSP\nsticky: 8\ncategories:\n---\n\n\n# Ready go\n在系列文章中，上一章我们对 `package` 目录下的内容有了一定的了解，我们知道设备上的桌面其实就是一个`系统应用`，AOSP 原生有提供，但是厂商定制的 ROM 往往会自己重写或重新实现，扩展功能；那么继续 Android 系统启动思考往下走，我们是不是应该看看手机桌面是如何显示的———桌面程序是如何启动的？\n\n虽然我们知道桌面程序是`Launcher`，但是我们作为刚阅读源码的小白，**如何在源码中快速找到桌面程序启动的入口？** 这是一个可以思考的问题， 当然，站在‘巨人的肩膀’直接使用百度也是可以的，但这里我想到另外一种方式————`无障碍服务 Accessebility`；在平时开发中，无障碍服务除了满足项目需求应用于项目中外，还有一种就是利用该服务作为我们的辅助工具，提高开发效率，我个人最常用的就是`查看系统当前最顶部显示的 activity`。作为辅助手段，早已有成熟的软件工具，这里推荐两个工具。\n\n\n- 开发者助手\n- Android 开发工具箱\n- MT 文件管理器\n\n# systemReady\n\n我们知道，SystemServer 在被调用时先执行 `main` 函数，紧接着执行当前类的静态方法 `run`，然后分三个阶段启动 `启动服务、核心服务、其他服务`，最后进入 `Looper().loop` 循环忘不停歇的 ~~打工~~ 等待消息到来并处理。启动服务是一部分，难道不做点别的吗？刚好在启动 **其他服务** 这里看到这一段注释：\n\n```\n// We now tell the activity manager it is okay to run third party\n// code.  It will call back into us once it has gotten to the state\n// where third party code can really run (but before it has actually\n// started launching the initial applications), for us to complete our\n// initialization.\n\nSystemServer：AMS 你所需的一些服务已准备就绪，可以启动第三方应用了，收到请回答，收到请回答，over！over！\n\nAMS：收到！收到！看我回调行事，over！\n```\n\n先是 AMS systemReady 进入准备阶段\n\n```java\n//ActivityManagerService.java\npublic void systemReady(final Runnable goingCallback, @NonNull TimingsTraceAndSlog t) {\n\n    /*\n        1、管理 activity 的任务栈【这种内容太细了，以后逐个看看，先略过】\n        2、包含 RecentTasks 最近运行的任务列表\n    */\n    mActivityTaskManager.onSystemReady();\n    mUserController.onSystemReady();\n    //访问控制，主要与权限、限制相关\n    mAppOpsService.systemReady();\n    mProcessList.onSystemReady();\n\n    /*\n        1、如果进程或进程组被标记为杀死，将调用 Process.killProcessQuiet(mPid);ProcessList.killProcessGroup(uid, mPid);杀死进程，为启动新进程做准备\n        2、当然，进程也可能被标记为重启，便不会从进程队列中移除       \n    */\n    mProcessList.removeProcessLocked\n    //注册启动监听，ATM：activitTaskManager\n    mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(mActivityLaunchObserver);\n    //UGM：uri global manager，uri 作为数据访问地址、数据传递也是很常用的\n    mUgmInternal.onSystemReady();\n    //pmi：power manager internal，低电量监控\n    pmi.registerLowPowerModeObserver\n    \n    \n    //😓执行到一半就返回去执行回调【请参考 —— 回调1】\n    if (goingCallback != null) goingCallback.run();\n        \n    /*\n        1、启动持久应用（不会休眠的、启动唤醒程序），待启动的是哪些应用，又来到了 IPackageManager.aidl 的 getPersistentApplications，\n           实现类是 PackageManagerService.java\n        2、getPersistentApplications 实际上获取到的是一个 ApplicationInfo 列表\n        3、通过 applicationInfo 创建 processRecorder，接着通过 ProcessList 一顿判断、调整 processRecorder\n        4、最后可能通过 wzygote 或 Process.start 启动\n    */\n    startPersistentApps(PackageManager.MATCH_DIRECT_BOOT_AWARE);\n\n    //ActivityTaskManagerInternal.java 实现类在 ActivityManagerService 的一个内部类 LocalService；\n    //‼️启动桌面程序\n    mAtmInternal.startHomeOnAllDisplays(currentUserId, \"systemReady\");\n    \n    mAtmInternal.resumeTopActivities(false /* scheduleIdle */);    \n}\n```\n\nAMS 准备完毕，请求 SystemServer 超级管家执行回调\n\n```java\n//SystemServer.java 【回调1】\nmActivityManagerService.systemReady(() -> {\n\n    //service.onBootPhase(mCurrentPhase=500); 系统服务那么多到底谁在执行 500 这个标记？\n    //不用过多关注，这只是一个通知，回调告知其他服务 AMS 启动了，你们可以使用 AMS 做别的事情\n    mSystemServiceManager.startBootPhase(t, SystemService.PHASE_ACTIVITY_MANAGER_READY);\n    \n    //AMS 需要监控 native 崩溃，里面启动了一个线程 Thread，内部使用阻塞的 socket 接收崩溃信息并返回给上层或输出\n    mActivityManagerService.startObservingNativeCrashes();\n\n    //看到 ops 往往是跟限制策略有关🚫\n    mActivityManagerService.setAppOpsPolicy(new AppOpsPolicy(mSystemContext));\n\n    // Wait for all packages to be prepared\n    mPackageManagerService.waitForAppDataPrepared();\n    //第三方应用准备好了，又发起一个启动第三方应用的回调，让各自实现此状态码的服务执行相应操作【见图1】\n    mSystemServiceManager.startBootPhase(t, SystemService.PHASE_THIRD_PARTY_APPS_CAN_START);\n\n    ... etc\n    \n    //到这里我们算是回调执行完成，我们又要回到 systemReady 里面去，继续看执行 goingCallback.run(); 之后的代码\n    \n}, t);\n```\n\n# startHomeOnAllDisplays\n\n我们想知道 startHomeOnAllDisplays 的具体实现在哪里？有谁执行的？不妨找找看。\n\n- ActivityManagerService#mAtmInternal.startHomeOnAllDisplays(currentUserId, \"systemReady\"); `AMS 中调用`\n- ActivityTaskManagerInternal#startHomeOnAllDisplays   `这是一个抽象类的抽象方法`\n- ActivityTaskManagerService#LocalService            `实现类是 ATMS 的内部类`\n- ActivityTaskManagerService#mInternal; `实现类实例赋给了 ATMS 的成员`\n- ActivityTaskManagerService#LocalServices.addService(ActivityTaskManagerInternal.class, mInternal); `在 ATMS 启动周期 onStart 中被缓存到本地服务列表`\n- com.android.server#private static final ArrayMap<Class<?>, Object> sLocalServiceObjects `本地服务列表就是这么一个简单的数组`\n- ActivityTaskManagerService#mAtmInternal = LocalServices.getService(ActivityTaskManagerInternal.class); `从本地服务缓存列表中获取实例赋给 ATMS`\n\n了解了，直接找实现类 `LocalService`。\n\n```java\n//ActivityTaskManagerService.java#LocalService\n@Override\npublic boolean startHomeOnAllDisplays(int userId, String reason) {\n    synchronized (mGlobalLock) {\n        return mRootWindowContainer.startHomeOnAllDisplays(userId, reason);\n    }\n}\n```\n\n```java\n//RootWindowContainer.java\nboolean startHomeOnAllDisplays(int userId, String reason) {\n    //桌面主界面是否启动完毕\n    boolean homeStarted = false;\n    //这里的循环表示对应 AllDisplays，设备是可能存在多个显示器的\n    for (int i = getChildCount() - 1; i >= 0; i--) {\n        final int displayId = getChildAt(i).mDisplayId;\n        homeStarted |= startHomeOnDisplay(userId, reason, displayId);\n    }\n    return homeStarted;\n}\n```\n\n```java\n//RootWindowContainer.java\nboolean startHomeOnDisplay(int userId, String reason, int displayId) {\n    return startHomeOnDisplay(userId, reason, displayId, false /* allowInstrumenting */,\n            false /* fromHomeKey */);\n}\n```\n\n```java\n//RootWindowContainer.java\nboolean startHomeOnDisplay(int userId, String reason, int displayId, boolean allowInstrumenting,\n        boolean fromHomeKey) {\n    //如果遇到无效的显示设备，则使用默认的或已获得焦点的最顶部显示ID\n    if (displayId == INVALID_DISPLAY) {\n        final Task rootTask = getTopDisplayFocusedRootTask();\n        displayId = rootTask != null ? rootTask.getDisplayId() : DEFAULT_DISPLAY;\n    }\n\n    final DisplayContent display = getDisplayContent(displayId);\n    return display.reduceOnAllTaskDisplayAreas((taskDisplayArea, result) ->\n                    result | startHomeOnTaskDisplayArea(userId, reason, taskDisplayArea,\n                            allowInstrumenting, fromHomeKey),\n            false /* initValue */);\n}\n```\n    \n```java\n//RootWindowContainer.java\nboolean startHomeOnTaskDisplayArea(int userId, String reason, TaskDisplayArea taskDisplayArea,\n        boolean allowInstrumenting, boolean fromHomeKey) {\n    //如果提供的现实区域无效，同样的恢复默认\n    if (taskDisplayArea == null) {\n        final Task rootTask = getTopDisplayFocusedRootTask();\n        taskDisplayArea = rootTask != null ? rootTask.getDisplayArea()\n                : getDefaultTaskDisplayArea();\n    }\n\n    //‼️重要的来了，桌面也是一个 activity，启动一个 activity，最重要的便是启动目标信息\n    Intent homeIntent = null;\n    ActivityInfo aInfo = null;\n    //\n    if (taskDisplayArea == getDefaultTaskDisplayArea()) {\n        /*\n            1、mService 是 ActivityTaskManagerService\n            2、【默认】intent.addCategory(Intent.CATEGORY_HOME); mTopAction = Intent.ACTION_MAIN;\n        */\n        homeIntent = mService.getHomeIntent();\n        aInfo = resolveHomeActivity(userId, homeIntent);\n    } else if (shouldPlaceSecondaryHomeOnDisplayArea(taskDisplayArea)) {\n        Pair<ActivityInfo, Intent> info = resolveSecondaryHomeActivity(userId, taskDisplayArea);\n        aInfo = info.first;\n        homeIntent = info.second;\n    }\n    if (aInfo == null || homeIntent == null) {\n        return false;\n    }\n\n    //显示总是有一些显示\n    if (!canStartHomeOnDisplayArea(aInfo, taskDisplayArea, allowInstrumenting)) {\n        return false;\n    }\n\n    homeIntent.setComponent(new ComponentName(aInfo.applicationInfo.packageName, aInfo.name));\n    homeIntent.setFlags(homeIntent.getFlags() | FLAG_ACTIVITY_NEW_TASK);\n    if (fromHomeKey) {\n        homeIntent.putExtra(WindowManagerPolicy.EXTRA_FROM_HOME_KEY, true);\n        if (mWindowManager.getRecentsAnimationController() != null) {\n            mWindowManager.getRecentsAnimationController().cancelAnimationForHomeStart();\n        }\n    }\n    homeIntent.putExtra(WindowManagerPolicy.EXTRA_START_REASON, reason);\n\n    //启动 activity 还得看 activityStartController\n    mService.getActivityStartController().startHomeActivity(homeIntent, aInfo, myReason,\n            taskDisplayArea);\n    return true;\n}\n```\n\n\n# activitStartController\n\n```java \n//ActivityStartController.java\n//⚠️：这里启动的是 homeItent\nvoid startHomeActivity(Intent intent, ActivityInfo aInfo, String reason,\n        TaskDisplayArea taskDisplayArea) {\n    //没有任何附加属性，比如没有 activity 动画\n    final ActivityOptions options = ActivityOptions.makeBasic();\n    //全屏窗口模式\n    options.setLaunchWindowingMode(WINDOWING_MODE_FULLSCREEN);\n    if (!ActivityRecord.isResolverActivity(aInfo.name)) {\n        //指定这是一个桌面 activity \n        options.setLaunchActivityType(ACTIVITY_TYPE_HOME);\n    }\n\n    //显示设备ID也指定，似乎 activity 启动需要的参数都将封装到 ActivitOptions \n    final int displayId = taskDisplayArea.getDisplayId();\n    options.setLaunchDisplayId(displayId);\n    options.setLaunchTaskDisplayArea(taskDisplayArea.mRemoteToken\n            .toWindowContainerToken());\n\n    //只是一个变量递增 mDeferResumeCount++，这如何使用 \n    mSupervisor.beginDeferResume();\n\n    final Task rootHomeTask;\n    try {\n        /*\n            1、activity 需要依赖 task 容器，所以启动前必须确保 Task 已创建\n            2、TaskDisplayArea#createRootTask 需指定 activityType=home_activity，ontop=true 在显示器的顶部创建 rootTask\n            3、最终创建是通过 Task.Builder()......build();  至此，存储桌面 activity 的 Task 已经有了\n            4、mRootWindowContainer 这个很重要，我们所见到的界面都要依附于它\n        */\n        rootHomeTask = taskDisplayArea.getOrCreateRootHomeTask(ON_TOP/*true*/);\n    } finally {\n        //这个跟 mDeferResumeCount++ 对应，这里是 mDeferResumeCount--\n        //关于这个还有一个方法：readyToResume() {return mDeferResumeCount == 0;} \n        //true if resume can be called：那估计是哪里进行轮询监听 readyToResume()\n        mSupervisor.endDeferResume();\n    }\n\n    /*\n        1、有了可承载桌面程序的任务栈，接着就要启动桌面 activity\n        2、获得一个 activity 启动器 ActivitStarter，开始执行 excute()\n        3、启动器似乎使用了工厂模式，默认启动器数量 3 个\n        4、启动器主要成员有 ActivityStartController、ActivityTaskManagerService、ActivityTaskSupervisor、ActivityStartInterceptor\n        5、在构建请求器过程中还需要构造启动请求参数 mRequest \n    */\n    mLastHomeActivityStartResult = obtainStarter(intent, \"startHomeActivity: \" + reason)\n            .setOutActivity(tmpOutRecord)\n            .setCallingUid(0)\n            .setActivityInfo(aInfo)\n            .setActivityOptions(options.toBundle())\n            .execute();\n    mLastHomeActivityStartRecord = tmpOutRecord[0];\n    if (rootHomeTask.mInResumeTopActivity) {\n        //开始调用 onResume 声明周期方法，回到 activity 最熟悉的地方\n        mSupervisor.scheduleResumeTopActivities();\n    }\n}\n```\n\n关于 `ActivityTaskSupervisor` 负责的任务太多了，估计像个版本要分离部分代码吧\n\n```java\n// TODO: This class has become a dumping ground. Let's\n// - Move things relating to the hierarchy to RootWindowContainer\n// - Move things relating to activity life cycles to maybe a new class called ActivityLifeCycler\n// - Move interface things to ActivityTaskManagerService.\n// - All other little things to other files.\npublic class ActivityTaskSupervisor implements RecentTasks.Callbacks {\n\n}\n```\n\n\n# activityStarter\n\n```java\n//ActivityStarter.java\nint execute() {\n    try {\n        /*\n            1、如果启动请求信息无效，则重新解析并填充启动请求参数\n            2、请求参数包括 pid、uid、resolveInfo、activityInfo  .etc\n        */\n        if (mRequest.activityInfo == null) {\n            mRequest.resolveActivity(mSupervisor);\n        }\n\n        int res;\n        //mGlobalLock 全局服务锁，并没有什么特别，就是一个普通对象\n        synchronized (mService.mGlobalLock) {\n            final boolean globalConfigWillChange = mRequest.globalConfig != null\n                    && mService.getGlobalConfiguration().diff(mRequest.globalConfig) != 0;\n            final Task rootTask = mRootWindowContainer.getTopDisplayFocusedRootTask();\n            if (rootTask != null) {\n                rootTask.mConfigWillChange = globalConfigWillChange;\n            }\n            final long origId = Binder.clearCallingIdentity();\n\n            /*\n                1、什么重量级进程切换，我都懵了😺\n                2、如果找不到调用者 app 进程，则终止启动请求 ATMS.getProcessController(request.caller) == null\n            */\n            res = resolveToHeavyWeightSwitcherIfNeeded();\n            if (res != START_SUCCESS) {\n                return res;\n            }\n\n            //‼️执行启动请求\n            res = executeRequest(mRequest);\n\n            mSupervisor.getActivityMetricsLogger().notifyActivityLaunched(launchingState, res,\n                    newActivityCreated, mLastStartActivityRecord, originalOptions);\n            if (mRequest.waitResult != null) {\n                mRequest.waitResult.result = res;\n                res = waitResultIfNeeded(mRequest.waitResult, mLastStartActivityRecord,\n                        launchingState);\n            }\n            return getExternalResult(res);\n        }\n    } finally {\n        //执行完成最后一定要回收 activity 启动器\n        onExecutionComplete();\n    }\n}\n```\n\nactivity 启动请求正式开始，这里将会有很多的启动限制🚫等。\n\n```java\n//ActivitStarter.java\nprivate int executeRequest(Request request) {\n    //很好奇这个 reason 这么总要吗？干什么用的\n    if (TextUtils.isEmpty(request.reason)) {\n        throw new IllegalArgumentException(\"Need to specify a reason.\");\n    }\n    \n    //如果中途检测到是非启动成功（触发启动限制），那么立马结束请求，返回结果\n    int err = ActivityManager.START_SUCCESS;\n    // Pull the optional Ephemeral Installer-only bundle out of the options early.\n    final Bundle verificationBundle =\n            options != null ? options.popAppVerificationBundle() : null;\n\n    //❌限制1：根据启动请求调用者 caller 寻找是否存在启动 app 进程，如果不存在则返回拦截请求\n    WindowProcessController callerApp = null;\n    if (caller != null) {\n        callerApp = mService.getProcessController(caller);\n        if (callerApp != null) {\n            callingPid = callerApp.getPid();\n            callingUid = callerApp.mInfo.uid;\n        } else {\n            err = START_PERMISSION_DENIED;\n        }\n    }\n\n    final int launchFlags = intent.getFlags();\n    if ((launchFlags & Intent.FLAG_ACTIVITY_FORWARD_RESULT) != 0 && sourceRecord != null) {\n        //❌什么请求冲突？？？\n        if (requestCode >= 0) {\n            SafeActivityOptions.abort(options);\n            return ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT;\n        }\n    }\n\n    if (err == ActivityManager.START_SUCCESS && intent.getComponent() == null) {\n        //❌启动目标 activity 未知，失败\n        err = ActivityManager.START_INTENT_NOT_RESOLVED;\n    }\n\n    if (err == ActivityManager.START_SUCCESS && aInfo == null) {\n        //❌同样的，请求所需要的基础信息都未知，自然中断本次请求\n        err = ActivityManager.START_CLASS_NOT_FOUND;\n    }\n\n    // voiceSession 语音交互相关 activity【这里其实是 activity 启动都会经过的路途，只是我们本次分析的是‘启动桌面 activity’】\n    if (err == ActivityManager.START_SUCCESS && sourceRecord != null\n            && sourceRecord.getTask().voiceSession != null) {\n        if ((launchFlags & FLAG_ACTIVITY_NEW_TASK) == 0\n                && sourceRecord.info.applicationInfo.uid != aInfo.applicationInfo.uid) {\n            try {\n                intent.addCategory(Intent.CATEGORY_VOICE);\n                if (!mService.getPackageManager().activitySupportsIntent(\n                        intent.getComponent(), intent, resolvedType)) {\n                    //❌不支持语音交互功能？\n                    err = ActivityManager.START_NOT_VOICE_COMPATIBLE;\n                }\n            } catch (RemoteException e) {\n                //❌不支持语音交互功能？\n                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;\n            }\n        }\n    }\n\n    if (err == ActivityManager.START_SUCCESS && voiceSession != null) {\n        try {\n            if (!mService.getPackageManager().activitySupportsIntent(intent.getComponent(),\n                    intent, resolvedType)) {\n                //❌不支持\n                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;\n            }\n        } catch (RemoteException e) {\n            //❌不支持\n            err = ActivityManager.START_NOT_VOICE_COMPATIBLE;\n        }\n    }\n\n    if (err != START_SUCCESS) {\n        SafeActivityOptions.abort(options);\n        return err;\n    }\n\n    //检查 activity 启动是否满足条件\n    boolean abort = !mSupervisor.checkStartAnyActivityPermission(intent, aInfo, resultWho,\n            requestCode, callingPid, callingUid, callingPackage, callingFeatureId,\n            request.ignoreTargetSecurity, inTask != null, callerApp, resultRecord,\n            resultRootTask);\n    abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,\n            callingPid, resolvedType, aInfo.applicationInfo);\n    abort |= !mService.getPermissionPolicyInternal().checkStartActivity(intent, callingUid,\n            callingPackage);\n\n    boolean restrictedBgActivity = false;\n    if (!abort) {\n        try {\n            //继续检查是否满足启动条件\n            restrictedBgActivity = shouldAbortBackgroundActivityStart(callingUid,\n                    callingPid, callingPackage, realCallingUid, realCallingPid, callerApp,\n                    request.originatingPendingIntent, request.allowBackgroundActivityStart,\n                    intent);\n        } finally {\n\n        }\n    }\n\n     \n    //略略略～～～\n\n\n    //没有通过启动检查就要结束执行了\n    if (abort) {\n        ActivityOptions.abort(checkedOptions);\n        return START_ABORTED;\n    }\n\n    if (aInfo != null) {\n        if (mService.getPackageManagerInternalLocked().isPermissionsReviewRequired(\n                aInfo.packageName, userId)) {\n            final IIntentSender target = mService.getIntentSenderLocked(\n                    ActivityManager.INTENT_SENDER_ACTIVITY, callingPackage, callingFeatureId,\n                    callingUid, userId, null, null, 0, new Intent[]{intent},\n                    new String[]{resolvedType}, PendingIntent.FLAG_CANCEL_CURRENT\n                            | PendingIntent.FLAG_ONE_SHOT, null);\n\n            Intent newIntent = new Intent(Intent.ACTION_REVIEW_PERMISSIONS);\n\n            int flags = intent.getFlags();\n            flags |= Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS;\n\n            //设置启动标识，仅设置 NEW_TASK 某些场景不一定会真的创建一个任务栈，但可以置为 MULTIPLE_TASK\n            if ((flags & (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_NEW_DOCUMENT)) != 0) {\n                flags |= Intent.FLAG_ACTIVITY_MULTIPLE_TASK;\n            }\n            newIntent.setFlags(flags);\n\n            newIntent.putExtra(Intent.EXTRA_PACKAGE_NAME, aInfo.packageName);\n            newIntent.putExtra(Intent.EXTRA_INTENT, new IntentSender(target));\n            if (resultRecord != null) {\n                newIntent.putExtra(Intent.EXTRA_RESULT_NEEDED, true);\n            }\n            intent = newIntent;\n\n            //一堆数据解析和赋值就不看了\n            intentGrants = null;\n            resolvedType = null;\n            callingUid = realCallingUid;\n            callingPid = realCallingPid;\n            rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId, 0,\n                    computeResolveFilterUid(\n                            callingUid, realCallingUid, request.filterCallingUid));\n            aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags,\n                    null /*profilerInfo*/);\n        }\n    }\n\n    if (rInfo != null && rInfo.auxiliaryInfo != null) {\n        //万事俱备，准备待发，创建一个可以启动的 intent （也就是启动数据每个必要的不可少）\n        //应该是有特别之处的，不然为什么不直接使用外部传进来的 intent，具体就不纠结了\n        intent = createLaunchIntent(rInfo.auxiliaryInfo, request.ephemeralIntent,\n                callingPackage, callingFeatureId, verificationBundle, resolvedType, userId);\n        resolvedType = null;\n        callingUid = realCallingUid;\n        callingPid = realCallingPid;\n        intentGrants = null;\n        aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, null /*profilerInfo*/);\n    }\n\n    //每一个 activity 的信息都将记录在 ActivityRecord 中\n    final ActivityRecord r = new ActivityRecord.Builder(mService)\n            .setCaller(callerApp)\n            .setLaunchedFromPid(callingPid)\n            .setLaunchedFromUid(callingUid)\n            .setLaunchedFromPackage(callingPackage)\n            .setLaunchedFromFeature(callingFeatureId)\n            .setIntent(intent)\n            .setResolvedType(resolvedType)\n            .setActivityInfo(aInfo)\n            .setConfiguration(mService.getGlobalConfiguration())\n            .setResultTo(resultRecord)\n            .setResultWho(resultWho)\n            .setRequestCode(requestCode)\n            .setComponentSpecified(request.componentSpecified)\n            .setRootVoiceInteraction(voiceSession != null)\n            .setActivityOptions(checkedOptions)\n            .setSourceRecord(sourceRecord)\n            .build();\n\n    mLastStartActivityRecord = r;\n    //‼️好了，又到下一个启动阶段\n    mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,\n            request.voiceInteractor, startFlags, true /* doResume */, checkedOptions,\n            inTask, inTaskFragment, restrictedBgActivity, intentGrants);\n\n    if (request.outActivity != null) {\n        request.outActivity[0] = mLastStartActivityRecord;\n    }\n    return mLastStartActivityResult;\n}\n```\n\n## checkStartAnyActivityPremission\n\n任何一个 activity 启动都需要检查权限问题。\n\n```java\n//ActivitTaskSupervisor.java\nboolean checkStartAnyActivityPermission(Intent intent, ActivityInfo aInfo, String resultWho,\n        int requestCode, int callingPid, int callingUid, String callingPackage,\n        @Nullable String callingFeatureId, boolean ignoreTargetSecurity,\n        boolean launchingInTask, WindowProcessController callerApp, ActivityRecord resultRecord,\n        Task resultRootTask) {\n    //0、✅如果是最近任务列表中的组件 并且 是当前栈中请求启动是允许的\n    final boolean isCallerRecents = mService.getRecentTasks() != null\n            && mService.getRecentTasks().isCallerRecents(callingUid);\n    /*\n        1、✅如果是具有超级用户权限的应用请求启动是允许的 appID=Process.ROOT_UID\n        2、✅如果是系统应用请求启动是允许的 appID=Process.SYSTEM_UID\n        3、❌如果是不同进程是不允许的 UserHandle.isIsolated(uid)\n        4、✅如果是设备所有者请求启动是允许的 UserHandle.isSameApp(uid, owningUid)\n        5、❌如果目标 activity exported=false 是不被允许启动的\n        6、❌如果检查的权限存在 ‘禁止权限列表’中是不被允许的  [至于列表中都有哪些权限我们以后讨论]\n    */\n    final int startAnyPerm = mService.checkPermission(START_ANY_ACTIVITY, callingPid,\n            callingUid);\n    if (startAnyPerm == PERMISSION_GRANTED || (isCallerRecents && launchingInTask)) {\n        return true;\n    }\n\n    //❌component 限制 【跟上述限制差不多，会调用到 checkComponentPermission】\n    final int componentRestriction = getComponentRestrictionForCallingPackage(aInfo,\n            callingPackage, callingFeatureId, callingPid, callingUid, ignoreTargetSecurity);\n    //❌action 限制  【跟上述限制差不多，会调用到 checkPermission】\n    final int actionRestriction = getActionRestrictionForCallingPackage(\n            intent.getAction(), callingPackage, callingFeatureId, callingPid, callingUid);\n    if (componentRestriction == ACTIVITY_RESTRICTION_PERMISSION\n            || actionRestriction == ACTIVITY_RESTRICTION_PERMISSION) {\n        if (resultRecord != null) {\n            resultRecord.sendResult(INVALID_UID, resultWho, requestCode,\n                    Activity.RESULT_CANCELED, null /* data */, null /* dataGrants */);\n        }\n        throw new SecurityException(msg);\n    }\n\n    if (actionRestriction == ACTIVITY_RESTRICTION_APPOP) {\n        return false;\n    } else if (componentRestriction == ACTIVITY_RESTRICTION_APPOP) {\n        return false;\n    }\n\n    return true;\n}\n```\n\n## checkIntent\n\nmService.mIntentFirewall.checkStartActivity 最终调用的就是 intent 过滤。\n\n```java\n//IntentFirewall.java\npublic boolean checkIntent(FirewallIntentResolver resolver, ComponentName resolvedComponent,\n        int intentType, Intent intent, int callerUid, int callerPid, String resolvedType,\n        int receivingUid) {\n    boolean log = false;\n    boolean block = false;\n\n    List<Rule> candidateRules;\n    candidateRules = resolver.queryIntent(intent, resolvedType, false /*defaultOnly*/, 0);\n    if (candidateRules == null) {\n        candidateRules = new ArrayList<Rule>();\n    }\n    resolver.queryByComponent(resolvedComponent, candidateRules);\n\n    for (int i=0; i<candidateRules.size(); i++) {\n        Rule rule = candidateRules.get(i);\n        //intent 过滤规则是什么，规则是如何匹配的？不懂————略！\n        if (rule.matches(this, resolvedComponent, intent, callerUid, callerPid, resolvedType,\n                receivingUid)) {\n            block |= rule.getBlock();\n            log |= rule.getLog();\n            if (block && log) {\n                break;\n            }\n        }\n    }\n\n    if (log) {\n        logIntent(intentType, intent, callerUid, resolvedType);\n    }\n\n    return !block;\n}\n```\n\n\n## checkStartActivity\n\nPermissionPolicyInternal 是一个抽象类，实现类是 PermissionPolicyService 的一个内部类 `private class Internal extends PermissionPolicyInternal `\n\n```java\n//PermissionPolicyService.java\nprivate class Internal extends PermissionPolicyInternal {\n\n    @Override\n    public boolean checkStartActivity(@NonNull Intent intent, int callingUid,\n            @Nullable String callingPackage) {\n        if (callingPackage != null && isActionRemovedForCallingPackage(intent, callingUid,\n                callingPackage)) {\n            return false;\n        }\n        return true;\n    }\n```\n\n\n```java\n//PermissionPolicyService.java\nprivate boolean isActionRemovedForCallingPackage(@NonNull Intent intent, int callingUid,\n        @NonNull String callingPackage) {\n    String action = intent.getAction();\n    if (action == null) {\n        return false;\n    }\n    switch (action) {\n        case TelecomManager.ACTION_CHANGE_DEFAULT_DIALER:\n        case Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT: {\n            ApplicationInfo applicationInfo;\n            try {\n                applicationInfo = getContext().getPackageManager().getApplicationInfoAsUser(\n                        callingPackage, 0, UserHandle.getUserId(callingUid));\n                if (applicationInfo.targetSdkVersion >= Build.VERSION_CODES.Q) {\n                    //只有高版本才会检查这个问题咯\n                    return true;\n                }\n            } catch (PackageManager.NameNotFoundException e) {\n                \n            }\n          \n            intent.putExtra(Intent.EXTRA_CALLING_PACKAGE, callingPackage);\n            return false;\n        }\n        default:\n            return false;\n    }\n}\n```\n\n## shouldAbortBackgroundActivityStart\n\n```java\nboolean shouldAbortBackgroundActivityStart(int callingUid, int callingPid,\n        final String callingPackage, int realCallingUid, int realCallingPid,\n        WindowProcessController callerApp, PendingIntentRecord originatingPendingIntent,\n        boolean allowBackgroundActivityStart, Intent intent) {\n    \n    //1、✅系统用户应用、具有 Root 权限的应用、NFC （一般是伴生设备）应用请求启动是允许的\n    final int callingAppId = UserHandle.getAppId(callingUid);\n    if (callingUid == Process.ROOT_UID || callingAppId == Process.SYSTEM_UID\n            || callingAppId == Process.NFC_UID) {\n        return false;\n    }\n\n    //2、✅如果是桌面程序启动是允许的  [正常用户操作不就是点击桌面应用图标然后启动的嘛]\n    if (isHomeApp(callingUid, callingPackage)) {\n        return false;\n    }\n\n    //3、✅设备所有者是允许的\n    final WindowState imeWindow = mRootWindowContainer.getCurrentInputMethodWindow();\n    if (imeWindow != null && callingAppId == imeWindow.mOwnerUid) {\n        return false;\n    }\n\n    //4、✅如果有前台应用或可见界面存在前台，这也是允许的\n    final int appSwitchState = mService.getBalAppSwitchesState();\n    final int callingUidProcState = mService.mActiveUids.getUidState(callingUid);\n    final boolean callingUidHasAnyVisibleWindow = mService.hasActiveVisibleWindow(callingUid);\n    final boolean isCallingUidForeground = callingUidHasAnyVisibleWindow\n            || callingUidProcState == ActivityManager.PROCESS_STATE_TOP\n            || callingUidProcState == ActivityManager.PROCESS_STATE_BOUND_TOP;\n    final boolean isCallingUidPersistentSystemProcess =\n            callingUidProcState <= ActivityManager.PROCESS_STATE_PERSISTENT_UI;\n\n    //5、✅在应用切换过程中，如果有可见的窗口是允许的\n    final boolean appSwitchAllowedOrFg =\n            appSwitchState == APP_SWITCH_ALLOW || appSwitchState == APP_SWITCH_FG_ONLY;\n    if (((appSwitchAllowedOrFg || mService.mActiveUids.hasNonAppVisibleWindow(callingUid))\n            && callingUidHasAnyVisibleWindow)\n            || isCallingUidPersistentSystemProcess) {\n        return false;\n    }\n    \n    final int realCallingUidProcState = (callingUid == realCallingUid)\n            ? callingUidProcState\n            : mService.mActiveUids.getUidState(realCallingUid);\n    final boolean realCallingUidHasAnyVisibleWindow = (callingUid == realCallingUid)\n            ? callingUidHasAnyVisibleWindow\n            : mService.hasActiveVisibleWindow(realCallingUid);\n    final boolean isRealCallingUidForeground = (callingUid == realCallingUid)\n            ? isCallingUidForeground\n            : realCallingUidHasAnyVisibleWindow\n                    || realCallingUidProcState == ActivityManager.PROCESS_STATE_TOP;\n    final int realCallingAppId = UserHandle.getAppId(realCallingUid);\n    final boolean isRealCallingUidPersistentSystemProcess = (callingUid == realCallingUid)\n            ? isCallingUidPersistentSystemProcess\n            : (realCallingAppId == Process.SYSTEM_UID)\n                    || realCallingUidProcState <= ActivityManager.PROCESS_STATE_PERSISTENT_UI;\n    if (realCallingUid != callingUid) {\n        //6、✅如果调用的进程有可见的窗口是允许的\n        if (realCallingUidHasAnyVisibleWindow) {\n            if (DEBUG_ACTIVITY_STARTS) {\n                Slog.d(TAG, \"Activity start allowed: realCallingUid (\" + realCallingUid\n                        + \") has visible (non-toast) window\");\n            }\n            return false;\n        }\n\n        //7、✅如果是‘系统持久应用’发起的请求是允许的\n        if (isRealCallingUidPersistentSystemProcess && allowBackgroundActivityStart) {\n            return false;\n        }\n\n        //8、✅如果存在伴生设备或者相关可见应用进程是允许的\n        if (mService.isAssociatedCompanionApp(UserHandle.getUserId(realCallingUid),\n                realCallingUid)) {\n            return false;\n        }\n    }\n\n    //9、✅具备系统权限 START_ACTIVITIES_FROM_BACKGROUND 是允许的\n    if (mService.checkPermission(START_ACTIVITIES_FROM_BACKGROUND, callingPid, callingUid)\n            == PERMISSION_GRANTED) {\n        return false;\n    }\n\n    //10、✅如果最近存在相同 uid 进程启动相关组件是允许的（同一个应用）\n    if (mSupervisor.mRecentTasks.isCallerRecents(callingUid)) {\n        return false;\n    }\n\n    //11、✅对于设备所有者请求启动是允许的\n    if (mService.isDeviceOwner(callingUid)) {\n        return false;\n    }\n\n    //12、✅对于伴生设备的请求是允许的\n    final int callingUserId = UserHandle.getUserId(callingUid);\n    if (mService.isAssociatedCompanionApp(callingUserId, callingUid)) {\n        return false;\n    }\n    \n    //13、✅具备系统权限 SYSTEM_ALERT_WINDOW 是允许的\n    if (mService.hasSystemAlertWindowPermission(callingUid, callingPid, callingPackage)) {\n        return false;\n    }\n\n  \n    int callerAppUid = callingUid;\n    if (callerApp == null) {\n        callerApp = mService.getProcessController(realCallingPid, realCallingUid);\n        callerAppUid = realCallingUid;\n    }\n    if (callerApp != null) {\n        //‼️来到了新的启动控制类：BackgroundLaunchProcessController#areBackgroundActivityStartsAllowed\n        //参考下文\n        if (callerApp.areBackgroundActivityStartsAllowed(appSwitchState)) {\n            return false;\n        }\n\n        final ArraySet<WindowProcessController> uidProcesses =\n                mService.mProcessMap.getProcesses(callerAppUid);\n        if (uidProcesses != null) {\n            for (int i = uidProcesses.size() - 1; i >= 0; i--) {\n                final WindowProcessController proc = uidProcesses.valueAt(i);\n                //参看下文\n                if (proc != callerApp\n                        && proc.areBackgroundActivityStartsAllowed(appSwitchState)) {\n                    return false;\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```\n\n## areBackgroundActivityStartsAllowed\n\n```java\n//BackgroundLaunchProcessController.java\nboolean areBackgroundActivityStartsAllowed(int pid, int uid, String packageName,\n        int appSwitchState, boolean isCheckingForFgsStart,\n        boolean hasActivityInVisibleTask, boolean hasBackgroundActivityStartPrivileges,\n        long lastStopAppSwitchesTime, long lastActivityLaunchTime,\n        long lastActivityFinishTime) {\n    if (appSwitchState == APP_SWITCH_ALLOW) {\n        final long now = SystemClock.uptimeMillis();\n        if (now - lastActivityLaunchTime < ACTIVITY_BG_START_GRACE_PERIOD_MS\n                || now - lastActivityFinishTime < ACTIVITY_BG_START_GRACE_PERIOD_MS) {\n            if (lastActivityLaunchTime > lastStopAppSwitchesTime\n                    || lastActivityFinishTime > lastStopAppSwitchesTime) {\n                return true;\n            }\n        }\n    }\n    if (hasBackgroundActivityStartPrivileges) {\n        return true;\n    }\n\n    if (hasActivityInVisibleTask\n            && (appSwitchState == APP_SWITCH_ALLOW || appSwitchState == APP_SWITCH_FG_ONLY)) {\n        return true;\n    }\n    if (isBoundByForegroundUid()) {\n        return true;\n    }\n    if (isBackgroundStartAllowedByToken(uid, packageName, isCheckingForFgsStart)) {\n        return true;\n    }\n    return false;\n}\n```\n\n# startActivityUnchecked\n\n```java\n//ActivityStarter.java\nprivate int startActivityUnchecked(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        TaskFragment inTaskFragment, boolean restrictedBgActivity,\n        NeededUriGrants intentGrants) {\n}\n```\n\n\n# Reference\n\n- 输入法控件 IME：https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn\n- [ 关于孤儿进程、僵尸进程的概念 ](https://baike.baidu.com/item/孤儿进程/16751450#:~:text=在操作系统领域中，孤儿进程指的是在其父进程执行完成或被终止后仍继续运行的一类进程%E3%80%82,这些孤儿进程将被init进程%20%28进程号为1%29所收养，并由init进程对它们完成状态收集工作%E3%80%82)\n- [ 关于 UID、PID 的了解](https://www.cnblogs.com/perseus/articles/2354173.html)\n- [AutofillManager 参考链接 [1]](https://developer.android.google.cn/guide/topics/text/autofill?hl=zh-cn)","slug":"Android系统桌面启动一","published":1,"lang":"undefined","updated":"2022-09-29T14:57:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q7000g7tqpc5l266uj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>Ready go</h1>\n<p>在系列文章中，上一章我们对 <code>package</code> 目录下的内容有了一定的了解，我们知道设备上的桌面其实就是一个<code>系统应用</code>，AOSP 原生有提供，但是厂商定制的 ROM 往往会自己重写或重新实现，扩展功能；那么继续 Android 系统启动思考往下走，我们是不是应该看看手机桌面是如何显示的———桌面程序是如何启动的？</p>\n<p>虽然我们知道桌面程序是<code>Launcher</code>，但是我们作为刚阅读源码的小白，<strong>如何在源码中快速找到桌面程序启动的入口？</strong> 这是一个可以思考的问题， 当然，站在‘巨人的肩膀’直接使用百度也是可以的，但这里我想到另外一种方式————<code>无障碍服务 Accessebility</code>；在平时开发中，无障碍服务除了满足项目需求应用于项目中外，还有一种就是利用该服务作为我们的辅助工具，提高开发效率，我个人最常用的就是<code>查看系统当前最顶部显示的 activity</code>。作为辅助手段，早已有成熟的软件工具，这里推荐两个工具。</p>\n<ul>\n<li>开发者助手</li>\n<li>Android 开发工具箱</li>\n<li>MT 文件管理器</li>\n</ul>\n<h1>systemReady</h1>\n<p>我们知道，SystemServer 在被调用时先执行 <code>main</code> 函数，紧接着执行当前类的静态方法 <code>run</code>，然后分三个阶段启动 <code>启动服务、核心服务、其他服务</code>，最后进入 <code>Looper().loop</code> 循环忘不停歇的 <s>打工</s> 等待消息到来并处理。启动服务是一部分，难道不做点别的吗？刚好在启动 <strong>其他服务</strong> 这里看到这一段注释：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We now tell the activity manager it is okay to run third party</span></span><br><span class=\"line\"><span class=\"comment\">// code.  It will call back into us once it has gotten to the state</span></span><br><span class=\"line\"><span class=\"comment\">// where third party code can really run (but before it has actually</span></span><br><span class=\"line\"><span class=\"comment\">// started launching the initial applications), for us to complete our</span></span><br><span class=\"line\"><span class=\"comment\">// initialization.</span></span><br><span class=\"line\"></span><br><span class=\"line\">SystemServer：AMS 你所需的一些服务已准备就绪，可以启动第三方应用了，收到请回答，收到请回答，<span class=\"built_in\">over</span>！<span class=\"built_in\">over</span>！</span><br><span class=\"line\"></span><br><span class=\"line\">AMS：收到！收到！看我回调行事，<span class=\"built_in\">over</span>！</span><br></pre></td></tr></table></figure>\n<p>先是 AMS systemReady 进入准备阶段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityManagerService.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">systemReady</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable goingCallback, <span class=\"meta\">@NonNull</span> TimingsTraceAndSlog t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、管理 activity 的任务栈【这种内容太细了，以后逐个看看，先略过】</span></span><br><span class=\"line\"><span class=\"comment\">        2、包含 RecentTasks 最近运行的任务列表</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    mActivityTaskManager.onSystemReady();</span><br><span class=\"line\">    mUserController.onSystemReady();</span><br><span class=\"line\">    <span class=\"comment\">//访问控制，主要与权限、限制相关</span></span><br><span class=\"line\">    mAppOpsService.systemReady();</span><br><span class=\"line\">    mProcessList.onSystemReady();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、如果进程或进程组被标记为杀死，将调用 Process.killProcessQuiet(mPid);ProcessList.killProcessGroup(uid, mPid);杀死进程，为启动新进程做准备</span></span><br><span class=\"line\"><span class=\"comment\">        2、当然，进程也可能被标记为重启，便不会从进程队列中移除       </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    mProcessList.removeProcessLocked</span><br><span class=\"line\">    <span class=\"comment\">//注册启动监听，ATM：activitTaskManager</span></span><br><span class=\"line\">    mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(mActivityLaunchObserver);</span><br><span class=\"line\">    <span class=\"comment\">//UGM：uri global manager，uri 作为数据访问地址、数据传递也是很常用的</span></span><br><span class=\"line\">    mUgmInternal.onSystemReady();</span><br><span class=\"line\">    <span class=\"comment\">//pmi：power manager internal，低电量监控</span></span><br><span class=\"line\">    pmi.registerLowPowerModeObserver</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//😓执行到一半就返回去执行回调【请参考 —— 回调1】</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (goingCallback != <span class=\"keyword\">null</span>) goingCallback.run();</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、启动持久应用（不会休眠的、启动唤醒程序），待启动的是哪些应用，又来到了 IPackageManager.aidl 的 getPersistentApplications，</span></span><br><span class=\"line\"><span class=\"comment\">           实现类是 PackageManagerService.java</span></span><br><span class=\"line\"><span class=\"comment\">        2、getPersistentApplications 实际上获取到的是一个 ApplicationInfo 列表</span></span><br><span class=\"line\"><span class=\"comment\">        3、通过 applicationInfo 创建 processRecorder，接着通过 ProcessList 一顿判断、调整 processRecorder</span></span><br><span class=\"line\"><span class=\"comment\">        4、最后可能通过 wzygote 或 Process.start 启动</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    startPersistentApps(PackageManager.MATCH_DIRECT_BOOT_AWARE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ActivityTaskManagerInternal.java 实现类在 ActivityManagerService 的一个内部类 LocalService；</span></span><br><span class=\"line\">    <span class=\"comment\">//‼️启动桌面程序</span></span><br><span class=\"line\">    mAtmInternal.startHomeOnAllDisplays(currentUserId, <span class=\"string\">&quot;systemReady&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    mAtmInternal.resumeTopActivities(<span class=\"keyword\">false</span> <span class=\"comment\">/* scheduleIdle */</span>);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AMS 准备完毕，请求 SystemServer 超级管家执行回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java 【回调1】</span></span><br><span class=\"line\">mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//service.onBootPhase(mCurrentPhase=500); 系统服务那么多到底谁在执行 500 这个标记？</span></span><br><span class=\"line\">    <span class=\"comment\">//不用过多关注，这只是一个通知，回调告知其他服务 AMS 启动了，你们可以使用 AMS 做别的事情</span></span><br><span class=\"line\">    mSystemServiceManager.startBootPhase(t, SystemService.PHASE_ACTIVITY_MANAGER_READY);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//AMS 需要监控 native 崩溃，里面启动了一个线程 Thread，内部使用阻塞的 socket 接收崩溃信息并返回给上层或输出</span></span><br><span class=\"line\">    mActivityManagerService.startObservingNativeCrashes();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//看到 ops 往往是跟限制策略有关🚫</span></span><br><span class=\"line\">    mActivityManagerService.setAppOpsPolicy(<span class=\"keyword\">new</span> AppOpsPolicy(mSystemContext));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Wait for all packages to be prepared</span></span><br><span class=\"line\">    mPackageManagerService.waitForAppDataPrepared();</span><br><span class=\"line\">    <span class=\"comment\">//第三方应用准备好了，又发起一个启动第三方应用的回调，让各自实现此状态码的服务执行相应操作【见图1】</span></span><br><span class=\"line\">    mSystemServiceManager.startBootPhase(t, SystemService.PHASE_THIRD_PARTY_APPS_CAN_START);</span><br><span class=\"line\"></span><br><span class=\"line\">    ... etc</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//到这里我们算是回调执行完成，我们又要回到 systemReady 里面去，继续看执行 goingCallback.run(); 之后的代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;, t);</span><br></pre></td></tr></table></figure>\n<h1>startHomeOnAllDisplays</h1>\n<p>我们想知道 startHomeOnAllDisplays 的具体实现在哪里？有谁执行的？不妨找找看。</p>\n<ul>\n<li>ActivityManagerService#mAtmInternal.startHomeOnAllDisplays(currentUserId, “systemReady”); <code>AMS 中调用</code></li>\n<li>ActivityTaskManagerInternal#startHomeOnAllDisplays   <code>这是一个抽象类的抽象方法</code></li>\n<li>ActivityTaskManagerService#LocalService            <code>实现类是 ATMS 的内部类</code></li>\n<li>ActivityTaskManagerService#mInternal; <code>实现类实例赋给了 ATMS 的成员</code></li>\n<li>ActivityTaskManagerService#LocalServices.addService(ActivityTaskManagerInternal.class, mInternal); <code>在 ATMS 启动周期 onStart 中被缓存到本地服务列表</code></li>\n<li>com.android.server#private static final ArrayMap&lt;Class&lt;?&gt;, Object&gt; sLocalServiceObjects <code>本地服务列表就是这么一个简单的数组</code></li>\n<li>ActivityTaskManagerService#mAtmInternal = LocalServices.getService(ActivityTaskManagerInternal.class); <code>从本地服务缓存列表中获取实例赋给 ATMS</code></li>\n</ul>\n<p>了解了，直接找实现类 <code>LocalService</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityTaskManagerService.java#LocalService</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnAllDisplays</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mGlobalLock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mRootWindowContainer.startHomeOnAllDisplays(userId, reason);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RootWindowContainer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnAllDisplays</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//桌面主界面是否启动完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> homeStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//这里的循环表示对应 AllDisplays，设备是可能存在多个显示器的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = getChildCount() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> displayId = getChildAt(i).mDisplayId;</span><br><span class=\"line\">        homeStarted |= startHomeOnDisplay(userId, reason, displayId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> homeStarted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RootWindowContainer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnDisplay</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason, <span class=\"keyword\">int</span> displayId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> startHomeOnDisplay(userId, reason, displayId, <span class=\"keyword\">false</span> <span class=\"comment\">/* allowInstrumenting */</span>,</span><br><span class=\"line\">            <span class=\"keyword\">false</span> <span class=\"comment\">/* fromHomeKey */</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RootWindowContainer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnDisplay</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason, <span class=\"keyword\">int</span> displayId, <span class=\"keyword\">boolean</span> allowInstrumenting,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> fromHomeKey)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果遇到无效的显示设备，则使用默认的或已获得焦点的最顶部显示ID</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (displayId == INVALID_DISPLAY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Task rootTask = getTopDisplayFocusedRootTask();</span><br><span class=\"line\">        displayId = rootTask != <span class=\"keyword\">null</span> ? rootTask.getDisplayId() : DEFAULT_DISPLAY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> DisplayContent display = getDisplayContent(displayId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> display.reduceOnAllTaskDisplayAreas((taskDisplayArea, result) -&gt;</span><br><span class=\"line\">                    result | startHomeOnTaskDisplayArea(userId, reason, taskDisplayArea,</span><br><span class=\"line\">                            allowInstrumenting, fromHomeKey),</span><br><span class=\"line\">            <span class=\"keyword\">false</span> <span class=\"comment\">/* initValue */</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RootWindowContainer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnTaskDisplayArea</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason, TaskDisplayArea taskDisplayArea,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> allowInstrumenting, <span class=\"keyword\">boolean</span> fromHomeKey)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果提供的现实区域无效，同样的恢复默认</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (taskDisplayArea == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Task rootTask = getTopDisplayFocusedRootTask();</span><br><span class=\"line\">        taskDisplayArea = rootTask != <span class=\"keyword\">null</span> ? rootTask.getDisplayArea()</span><br><span class=\"line\">                : getDefaultTaskDisplayArea();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//‼️重要的来了，桌面也是一个 activity，启动一个 activity，最重要的便是启动目标信息</span></span><br><span class=\"line\">    Intent homeIntent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ActivityInfo aInfo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (taskDisplayArea == getDefaultTaskDisplayArea()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、mService 是 ActivityTaskManagerService</span></span><br><span class=\"line\"><span class=\"comment\">            2、【默认】intent.addCategory(Intent.CATEGORY_HOME); mTopAction = Intent.ACTION_MAIN;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        homeIntent = mService.getHomeIntent();</span><br><span class=\"line\">        aInfo = resolveHomeActivity(userId, homeIntent);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shouldPlaceSecondaryHomeOnDisplayArea(taskDisplayArea)) &#123;</span><br><span class=\"line\">        Pair&lt;ActivityInfo, Intent&gt; info = resolveSecondaryHomeActivity(userId, taskDisplayArea);</span><br><span class=\"line\">        aInfo = info.first;</span><br><span class=\"line\">        homeIntent = info.second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aInfo == <span class=\"keyword\">null</span> || homeIntent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示总是有一些显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canStartHomeOnDisplayArea(aInfo, taskDisplayArea, allowInstrumenting)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    homeIntent.setComponent(<span class=\"keyword\">new</span> ComponentName(aInfo.applicationInfo.packageName, aInfo.name));</span><br><span class=\"line\">    homeIntent.setFlags(homeIntent.getFlags() | FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fromHomeKey) &#123;</span><br><span class=\"line\">        homeIntent.putExtra(WindowManagerPolicy.EXTRA_FROM_HOME_KEY, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mWindowManager.getRecentsAnimationController() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mWindowManager.getRecentsAnimationController().cancelAnimationForHomeStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    homeIntent.putExtra(WindowManagerPolicy.EXTRA_START_REASON, reason);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动 activity 还得看 activityStartController</span></span><br><span class=\"line\">    mService.getActivityStartController().startHomeActivity(homeIntent, aInfo, myReason,</span><br><span class=\"line\">            taskDisplayArea);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>activitStartController</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStartController.java</span></span><br><span class=\"line\"><span class=\"comment\">//⚠️：这里启动的是 homeItent</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startHomeActivity</span><span class=\"params\">(Intent intent, ActivityInfo aInfo, String reason,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskDisplayArea taskDisplayArea)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//没有任何附加属性，比如没有 activity 动画</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ActivityOptions options = ActivityOptions.makeBasic();</span><br><span class=\"line\">    <span class=\"comment\">//全屏窗口模式</span></span><br><span class=\"line\">    options.setLaunchWindowingMode(WINDOWING_MODE_FULLSCREEN);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ActivityRecord.isResolverActivity(aInfo.name)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定这是一个桌面 activity </span></span><br><span class=\"line\">        options.setLaunchActivityType(ACTIVITY_TYPE_HOME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示设备ID也指定，似乎 activity 启动需要的参数都将封装到 ActivitOptions </span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> displayId = taskDisplayArea.getDisplayId();</span><br><span class=\"line\">    options.setLaunchDisplayId(displayId);</span><br><span class=\"line\">    options.setLaunchTaskDisplayArea(taskDisplayArea.mRemoteToken</span><br><span class=\"line\">            .toWindowContainerToken());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//只是一个变量递增 mDeferResumeCount++，这如何使用 </span></span><br><span class=\"line\">    mSupervisor.beginDeferResume();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task rootHomeTask;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、activity 需要依赖 task 容器，所以启动前必须确保 Task 已创建</span></span><br><span class=\"line\"><span class=\"comment\">            2、TaskDisplayArea#createRootTask 需指定 activityType=home_activity，ontop=true 在显示器的顶部创建 rootTask</span></span><br><span class=\"line\"><span class=\"comment\">            3、最终创建是通过 Task.Builder()......build();  至此，存储桌面 activity 的 Task 已经有了</span></span><br><span class=\"line\"><span class=\"comment\">            4、mRootWindowContainer 这个很重要，我们所见到的界面都要依附于它</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        rootHomeTask = taskDisplayArea.getOrCreateRootHomeTask(ON_TOP<span class=\"comment\">/*true*/</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这个跟 mDeferResumeCount++ 对应，这里是 mDeferResumeCount--</span></span><br><span class=\"line\">        <span class=\"comment\">//关于这个还有一个方法：readyToResume() &#123;return mDeferResumeCount == 0;&#125; </span></span><br><span class=\"line\">        <span class=\"comment\">//true if resume can be called：那估计是哪里进行轮询监听 readyToResume()</span></span><br><span class=\"line\">        mSupervisor.endDeferResume();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、有了可承载桌面程序的任务栈，接着就要启动桌面 activity</span></span><br><span class=\"line\"><span class=\"comment\">        2、获得一个 activity 启动器 ActivitStarter，开始执行 excute()</span></span><br><span class=\"line\"><span class=\"comment\">        3、启动器似乎使用了工厂模式，默认启动器数量 3 个</span></span><br><span class=\"line\"><span class=\"comment\">        4、启动器主要成员有 ActivityStartController、ActivityTaskManagerService、ActivityTaskSupervisor、ActivityStartInterceptor</span></span><br><span class=\"line\"><span class=\"comment\">        5、在构建请求器过程中还需要构造启动请求参数 mRequest </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    mLastHomeActivityStartResult = obtainStarter(intent, <span class=\"string\">&quot;startHomeActivity: &quot;</span> + reason)</span><br><span class=\"line\">            .setOutActivity(tmpOutRecord)</span><br><span class=\"line\">            .setCallingUid(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .setActivityInfo(aInfo)</span><br><span class=\"line\">            .setActivityOptions(options.toBundle())</span><br><span class=\"line\">            .execute();</span><br><span class=\"line\">    mLastHomeActivityStartRecord = tmpOutRecord[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootHomeTask.mInResumeTopActivity) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始调用 onResume 声明周期方法，回到 activity 最熟悉的地方</span></span><br><span class=\"line\">        mSupervisor.scheduleResumeTopActivities();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>ActivityTaskSupervisor</code> 负责的任务太多了，估计像个版本要分离部分代码吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> This class has become a dumping ground. Let&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">// - Move things relating to the hierarchy to RootWindowContainer</span></span><br><span class=\"line\"><span class=\"comment\">// - Move things relating to activity life cycles to maybe a new class called ActivityLifeCycler</span></span><br><span class=\"line\"><span class=\"comment\">// - Move interface things to ActivityTaskManagerService.</span></span><br><span class=\"line\"><span class=\"comment\">// - All other little things to other files.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityTaskSupervisor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RecentTasks</span>.<span class=\"title\">Callbacks</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>activityStarter</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、如果启动请求信息无效，则重新解析并填充启动请求参数</span></span><br><span class=\"line\"><span class=\"comment\">            2、请求参数包括 pid、uid、resolveInfo、activityInfo  .etc</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mRequest.activityInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mRequest.resolveActivity(mSupervisor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res;</span><br><span class=\"line\">        <span class=\"comment\">//mGlobalLock 全局服务锁，并没有什么特别，就是一个普通对象</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mService.mGlobalLock) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> globalConfigWillChange = mRequest.globalConfig != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mService.getGlobalConfiguration().diff(mRequest.globalConfig) != <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Task rootTask = mRootWindowContainer.getTopDisplayFocusedRootTask();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rootTask != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                rootTask.mConfigWillChange = globalConfigWillChange;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                1、什么重量级进程切换，我都懵了😺</span></span><br><span class=\"line\"><span class=\"comment\">                2、如果找不到调用者 app 进程，则终止启动请求 ATMS.getProcessController(request.caller) == null</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            res = resolveToHeavyWeightSwitcherIfNeeded();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res != START_SUCCESS) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//‼️执行启动请求</span></span><br><span class=\"line\">            res = executeRequest(mRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">            mSupervisor.getActivityMetricsLogger().notifyActivityLaunched(launchingState, res,</span><br><span class=\"line\">                    newActivityCreated, mLastStartActivityRecord, originalOptions);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mRequest.waitResult != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mRequest.waitResult.result = res;</span><br><span class=\"line\">                res = waitResultIfNeeded(mRequest.waitResult, mLastStartActivityRecord,</span><br><span class=\"line\">                        launchingState);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getExternalResult(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行完成最后一定要回收 activity 启动器</span></span><br><span class=\"line\">        onExecutionComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>activity 启动请求正式开始，这里将会有很多的启动限制🚫等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivitStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">executeRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//很好奇这个 reason 这么总要吗？干什么用的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(request.reason)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Need to specify a reason.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//如果中途检测到是非启动成功（触发启动限制），那么立马结束请求，返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> err = ActivityManager.START_SUCCESS;</span><br><span class=\"line\">    <span class=\"comment\">// Pull the optional Ephemeral Installer-only bundle out of the options early.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Bundle verificationBundle =</span><br><span class=\"line\">            options != <span class=\"keyword\">null</span> ? options.popAppVerificationBundle() : <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//❌限制1：根据启动请求调用者 caller 寻找是否存在启动 app 进程，如果不存在则返回拦截请求</span></span><br><span class=\"line\">    WindowProcessController callerApp = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (caller != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callerApp = mService.getProcessController(caller);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callerApp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            callingPid = callerApp.getPid();</span><br><span class=\"line\">            callingUid = callerApp.mInfo.uid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            err = START_PERMISSION_DENIED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> launchFlags = intent.getFlags();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_FORWARD_RESULT) != <span class=\"number\">0</span> &amp;&amp; sourceRecord != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//❌什么请求冲突？？？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            SafeActivityOptions.abort(options);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; intent.getComponent() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//❌启动目标 activity 未知，失败</span></span><br><span class=\"line\">        err = ActivityManager.START_INTENT_NOT_RESOLVED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; aInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//❌同样的，请求所需要的基础信息都未知，自然中断本次请求</span></span><br><span class=\"line\">        err = ActivityManager.START_CLASS_NOT_FOUND;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// voiceSession 语音交互相关 activity【这里其实是 activity 启动都会经过的路途，只是我们本次分析的是‘启动桌面 activity’】</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; sourceRecord != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; sourceRecord.getTask().voiceSession != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((launchFlags &amp; FLAG_ACTIVITY_NEW_TASK) == <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; sourceRecord.info.applicationInfo.uid != aInfo.applicationInfo.uid) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                intent.addCategory(Intent.CATEGORY_VOICE);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mService.getPackageManager().activitySupportsIntent(</span><br><span class=\"line\">                        intent.getComponent(), intent, resolvedType)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//❌不支持语音交互功能？</span></span><br><span class=\"line\">                    err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//❌不支持语音交互功能？</span></span><br><span class=\"line\">                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; voiceSession != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mService.getPackageManager().activitySupportsIntent(intent.getComponent(),</span><br><span class=\"line\">                    intent, resolvedType)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//❌不支持</span></span><br><span class=\"line\">                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//❌不支持</span></span><br><span class=\"line\">            err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err != START_SUCCESS) &#123;</span><br><span class=\"line\">        SafeActivityOptions.abort(options);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//检查 activity 启动是否满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> abort = !mSupervisor.checkStartAnyActivityPermission(intent, aInfo, resultWho,</span><br><span class=\"line\">            requestCode, callingPid, callingUid, callingPackage, callingFeatureId,</span><br><span class=\"line\">            request.ignoreTargetSecurity, inTask != <span class=\"keyword\">null</span>, callerApp, resultRecord,</span><br><span class=\"line\">            resultRootTask);</span><br><span class=\"line\">    abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,</span><br><span class=\"line\">            callingPid, resolvedType, aInfo.applicationInfo);</span><br><span class=\"line\">    abort |= !mService.getPermissionPolicyInternal().checkStartActivity(intent, callingUid,</span><br><span class=\"line\">            callingPackage);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> restrictedBgActivity = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!abort) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//继续检查是否满足启动条件</span></span><br><span class=\"line\">            restrictedBgActivity = shouldAbortBackgroundActivityStart(callingUid,</span><br><span class=\"line\">                    callingPid, callingPackage, realCallingUid, realCallingPid, callerApp,</span><br><span class=\"line\">                    request.originatingPendingIntent, request.allowBackgroundActivityStart,</span><br><span class=\"line\">                    intent);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">//略略略～～～</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//没有通过启动检查就要结束执行了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (abort) &#123;</span><br><span class=\"line\">        ActivityOptions.abort(checkedOptions);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> START_ABORTED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mService.getPackageManagerInternalLocked().isPermissionsReviewRequired(</span><br><span class=\"line\">                aInfo.packageName, userId)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> IIntentSender target = mService.getIntentSenderLocked(</span><br><span class=\"line\">                    ActivityManager.INTENT_SENDER_ACTIVITY, callingPackage, callingFeatureId,</span><br><span class=\"line\">                    callingUid, userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>, <span class=\"keyword\">new</span> Intent[]&#123;intent&#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> String[]&#123;resolvedType&#125;, PendingIntent.FLAG_CANCEL_CURRENT</span><br><span class=\"line\">                            | PendingIntent.FLAG_ONE_SHOT, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Intent newIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_REVIEW_PERMISSIONS);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> flags = intent.getFlags();</span><br><span class=\"line\">            flags |= Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置启动标识，仅设置 NEW_TASK 某些场景不一定会真的创建一个任务栈，但可以置为 MULTIPLE_TASK</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((flags &amp; (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_NEW_DOCUMENT)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                flags |= Intent.FLAG_ACTIVITY_MULTIPLE_TASK;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            newIntent.setFlags(flags);</span><br><span class=\"line\"></span><br><span class=\"line\">            newIntent.putExtra(Intent.EXTRA_PACKAGE_NAME, aInfo.packageName);</span><br><span class=\"line\">            newIntent.putExtra(Intent.EXTRA_INTENT, <span class=\"keyword\">new</span> IntentSender(target));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resultRecord != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                newIntent.putExtra(Intent.EXTRA_RESULT_NEEDED, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            intent = newIntent;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//一堆数据解析和赋值就不看了</span></span><br><span class=\"line\">            intentGrants = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            resolvedType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            callingUid = realCallingUid;</span><br><span class=\"line\">            callingPid = realCallingPid;</span><br><span class=\"line\">            rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId, <span class=\"number\">0</span>,</span><br><span class=\"line\">                    computeResolveFilterUid(</span><br><span class=\"line\">                            callingUid, realCallingUid, request.filterCallingUid));</span><br><span class=\"line\">            aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span> <span class=\"comment\">/*profilerInfo*/</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rInfo != <span class=\"keyword\">null</span> &amp;&amp; rInfo.auxiliaryInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//万事俱备，准备待发，创建一个可以启动的 intent （也就是启动数据每个必要的不可少）</span></span><br><span class=\"line\">        <span class=\"comment\">//应该是有特别之处的，不然为什么不直接使用外部传进来的 intent，具体就不纠结了</span></span><br><span class=\"line\">        intent = createLaunchIntent(rInfo.auxiliaryInfo, request.ephemeralIntent,</span><br><span class=\"line\">                callingPackage, callingFeatureId, verificationBundle, resolvedType, userId);</span><br><span class=\"line\">        resolvedType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        callingUid = realCallingUid;</span><br><span class=\"line\">        callingPid = realCallingPid;</span><br><span class=\"line\">        intentGrants = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, <span class=\"keyword\">null</span> <span class=\"comment\">/*profilerInfo*/</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//每一个 activity 的信息都将记录在 ActivityRecord 中</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord r = <span class=\"keyword\">new</span> ActivityRecord.Builder(mService)</span><br><span class=\"line\">            .setCaller(callerApp)</span><br><span class=\"line\">            .setLaunchedFromPid(callingPid)</span><br><span class=\"line\">            .setLaunchedFromUid(callingUid)</span><br><span class=\"line\">            .setLaunchedFromPackage(callingPackage)</span><br><span class=\"line\">            .setLaunchedFromFeature(callingFeatureId)</span><br><span class=\"line\">            .setIntent(intent)</span><br><span class=\"line\">            .setResolvedType(resolvedType)</span><br><span class=\"line\">            .setActivityInfo(aInfo)</span><br><span class=\"line\">            .setConfiguration(mService.getGlobalConfiguration())</span><br><span class=\"line\">            .setResultTo(resultRecord)</span><br><span class=\"line\">            .setResultWho(resultWho)</span><br><span class=\"line\">            .setRequestCode(requestCode)</span><br><span class=\"line\">            .setComponentSpecified(request.componentSpecified)</span><br><span class=\"line\">            .setRootVoiceInteraction(voiceSession != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            .setActivityOptions(checkedOptions)</span><br><span class=\"line\">            .setSourceRecord(sourceRecord)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    mLastStartActivityRecord = r;</span><br><span class=\"line\">    <span class=\"comment\">//‼️好了，又到下一个启动阶段</span></span><br><span class=\"line\">    mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,</span><br><span class=\"line\">            request.voiceInteractor, startFlags, <span class=\"keyword\">true</span> <span class=\"comment\">/* doResume */</span>, checkedOptions,</span><br><span class=\"line\">            inTask, inTaskFragment, restrictedBgActivity, intentGrants);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.outActivity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        request.outActivity[<span class=\"number\">0</span>] = mLastStartActivityRecord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mLastStartActivityResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"checkStartAnyActivityPremission\">checkStartAnyActivityPremission</h2>\n<p>任何一个 activity 启动都需要检查权限问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivitTaskSupervisor.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">checkStartAnyActivityPermission</span><span class=\"params\">(Intent intent, ActivityInfo aInfo, String resultWho,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> callingPid, <span class=\"keyword\">int</span> callingUid, String callingPackage,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> String callingFeatureId, <span class=\"keyword\">boolean</span> ignoreTargetSecurity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> launchingInTask, WindowProcessController callerApp, ActivityRecord resultRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Task resultRootTask)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//0、✅如果是最近任务列表中的组件 并且 是当前栈中请求启动是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isCallerRecents = mService.getRecentTasks() != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; mService.getRecentTasks().isCallerRecents(callingUid);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、✅如果是具有超级用户权限的应用请求启动是允许的 appID=Process.ROOT_UID</span></span><br><span class=\"line\"><span class=\"comment\">        2、✅如果是系统应用请求启动是允许的 appID=Process.SYSTEM_UID</span></span><br><span class=\"line\"><span class=\"comment\">        3、❌如果是不同进程是不允许的 UserHandle.isIsolated(uid)</span></span><br><span class=\"line\"><span class=\"comment\">        4、✅如果是设备所有者请求启动是允许的 UserHandle.isSameApp(uid, owningUid)</span></span><br><span class=\"line\"><span class=\"comment\">        5、❌如果目标 activity exported=false 是不被允许启动的</span></span><br><span class=\"line\"><span class=\"comment\">        6、❌如果检查的权限存在 ‘禁止权限列表’中是不被允许的  [至于列表中都有哪些权限我们以后讨论]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> startAnyPerm = mService.checkPermission(START_ANY_ACTIVITY, callingPid,</span><br><span class=\"line\">            callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startAnyPerm == PERMISSION_GRANTED || (isCallerRecents &amp;&amp; launchingInTask)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//❌component 限制 【跟上述限制差不多，会调用到 checkComponentPermission】</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> componentRestriction = getComponentRestrictionForCallingPackage(aInfo,</span><br><span class=\"line\">            callingPackage, callingFeatureId, callingPid, callingUid, ignoreTargetSecurity);</span><br><span class=\"line\">    <span class=\"comment\">//❌action 限制  【跟上述限制差不多，会调用到 checkPermission】</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionRestriction = getActionRestrictionForCallingPackage(</span><br><span class=\"line\">            intent.getAction(), callingPackage, callingFeatureId, callingPid, callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (componentRestriction == ACTIVITY_RESTRICTION_PERMISSION</span><br><span class=\"line\">            || actionRestriction == ACTIVITY_RESTRICTION_PERMISSION) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resultRecord != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            resultRecord.sendResult(INVALID_UID, resultWho, requestCode,</span><br><span class=\"line\">                    Activity.RESULT_CANCELED, <span class=\"keyword\">null</span> <span class=\"comment\">/* data */</span>, <span class=\"keyword\">null</span> <span class=\"comment\">/* dataGrants */</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SecurityException(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (actionRestriction == ACTIVITY_RESTRICTION_APPOP) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (componentRestriction == ACTIVITY_RESTRICTION_APPOP) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"checkIntent\">checkIntent</h2>\n<p>mService.mIntentFirewall.checkStartActivity 最终调用的就是 intent 过滤。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//IntentFirewall.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkIntent</span><span class=\"params\">(FirewallIntentResolver resolver, ComponentName resolvedComponent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> intentType, Intent intent, <span class=\"keyword\">int</span> callerUid, <span class=\"keyword\">int</span> callerPid, String resolvedType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> receivingUid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> log = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> block = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Rule&gt; candidateRules;</span><br><span class=\"line\">    candidateRules = resolver.queryIntent(intent, resolvedType, <span class=\"keyword\">false</span> <span class=\"comment\">/*defaultOnly*/</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (candidateRules == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        candidateRules = <span class=\"keyword\">new</span> ArrayList&lt;Rule&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolver.queryByComponent(resolvedComponent, candidateRules);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;candidateRules.size(); i++) &#123;</span><br><span class=\"line\">        Rule rule = candidateRules.get(i);</span><br><span class=\"line\">        <span class=\"comment\">//intent 过滤规则是什么，规则是如何匹配的？不懂————略！</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rule.matches(<span class=\"keyword\">this</span>, resolvedComponent, intent, callerUid, callerPid, resolvedType,</span><br><span class=\"line\">                receivingUid)) &#123;</span><br><span class=\"line\">            block |= rule.getBlock();</span><br><span class=\"line\">            log |= rule.getLog();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (block &amp;&amp; log) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (log) &#123;</span><br><span class=\"line\">        logIntent(intentType, intent, callerUid, resolvedType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"checkStartActivity\">checkStartActivity</h2>\n<p>PermissionPolicyInternal 是一个抽象类，实现类是 PermissionPolicyService 的一个内部类 <code>private class Internal extends PermissionPolicyInternal </code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PermissionPolicyService.java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Internal</span> <span class=\"keyword\">extends</span> <span class=\"title\">PermissionPolicyInternal</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkStartActivity</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Intent intent, <span class=\"keyword\">int</span> callingUid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"meta\">@Nullable</span> String callingPackage)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callingPackage != <span class=\"keyword\">null</span> &amp;&amp; isActionRemovedForCallingPackage(intent, callingUid,</span><br><span class=\"line\">                callingPackage)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PermissionPolicyService.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isActionRemovedForCallingPackage</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Intent intent, <span class=\"keyword\">int</span> callingUid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@NonNull</span> String callingPackage)</span> </span>&#123;</span><br><span class=\"line\">    String action = intent.getAction();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TelecomManager.ACTION_CHANGE_DEFAULT_DIALER:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT: &#123;</span><br><span class=\"line\">            ApplicationInfo applicationInfo;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                applicationInfo = getContext().getPackageManager().getApplicationInfoAsUser(</span><br><span class=\"line\">                        callingPackage, <span class=\"number\">0</span>, UserHandle.getUserId(callingUid));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (applicationInfo.targetSdkVersion &gt;= Build.VERSION_CODES.Q) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//只有高版本才会检查这个问题咯</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            intent.putExtra(Intent.EXTRA_CALLING_PACKAGE, callingPackage);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"shouldAbortBackgroundActivityStart\">shouldAbortBackgroundActivityStart</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldAbortBackgroundActivityStart</span><span class=\"params\">(<span class=\"keyword\">int</span> callingUid, <span class=\"keyword\">int</span> callingPid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">final</span> String callingPackage, <span class=\"keyword\">int</span> realCallingUid, <span class=\"keyword\">int</span> realCallingPid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        WindowProcessController callerApp, PendingIntentRecord originatingPendingIntent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> allowBackgroundActivityStart, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//1、✅系统用户应用、具有 Root 权限的应用、NFC （一般是伴生设备）应用请求启动是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingAppId = UserHandle.getAppId(callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callingUid == Process.ROOT_UID || callingAppId == Process.SYSTEM_UID</span><br><span class=\"line\">            || callingAppId == Process.NFC_UID) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2、✅如果是桌面程序启动是允许的  [正常用户操作不就是点击桌面应用图标然后启动的嘛]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isHomeApp(callingUid, callingPackage)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3、✅设备所有者是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> WindowState imeWindow = mRootWindowContainer.getCurrentInputMethodWindow();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (imeWindow != <span class=\"keyword\">null</span> &amp;&amp; callingAppId == imeWindow.mOwnerUid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4、✅如果有前台应用或可见界面存在前台，这也是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> appSwitchState = mService.getBalAppSwitchesState();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingUidProcState = mService.mActiveUids.getUidState(callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> callingUidHasAnyVisibleWindow = mService.hasActiveVisibleWindow(callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isCallingUidForeground = callingUidHasAnyVisibleWindow</span><br><span class=\"line\">            || callingUidProcState == ActivityManager.PROCESS_STATE_TOP</span><br><span class=\"line\">            || callingUidProcState == ActivityManager.PROCESS_STATE_BOUND_TOP;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isCallingUidPersistentSystemProcess =</span><br><span class=\"line\">            callingUidProcState &lt;= ActivityManager.PROCESS_STATE_PERSISTENT_UI;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//5、✅在应用切换过程中，如果有可见的窗口是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> appSwitchAllowedOrFg =</span><br><span class=\"line\">            appSwitchState == APP_SWITCH_ALLOW || appSwitchState == APP_SWITCH_FG_ONLY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((appSwitchAllowedOrFg || mService.mActiveUids.hasNonAppVisibleWindow(callingUid))</span><br><span class=\"line\">            &amp;&amp; callingUidHasAnyVisibleWindow)</span><br><span class=\"line\">            || isCallingUidPersistentSystemProcess) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> realCallingUidProcState = (callingUid == realCallingUid)</span><br><span class=\"line\">            ? callingUidProcState</span><br><span class=\"line\">            : mService.mActiveUids.getUidState(realCallingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> realCallingUidHasAnyVisibleWindow = (callingUid == realCallingUid)</span><br><span class=\"line\">            ? callingUidHasAnyVisibleWindow</span><br><span class=\"line\">            : mService.hasActiveVisibleWindow(realCallingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isRealCallingUidForeground = (callingUid == realCallingUid)</span><br><span class=\"line\">            ? isCallingUidForeground</span><br><span class=\"line\">            : realCallingUidHasAnyVisibleWindow</span><br><span class=\"line\">                    || realCallingUidProcState == ActivityManager.PROCESS_STATE_TOP;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> realCallingAppId = UserHandle.getAppId(realCallingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isRealCallingUidPersistentSystemProcess = (callingUid == realCallingUid)</span><br><span class=\"line\">            ? isCallingUidPersistentSystemProcess</span><br><span class=\"line\">            : (realCallingAppId == Process.SYSTEM_UID)</span><br><span class=\"line\">                    || realCallingUidProcState &lt;= ActivityManager.PROCESS_STATE_PERSISTENT_UI;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (realCallingUid != callingUid) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//6、✅如果调用的进程有可见的窗口是允许的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (realCallingUidHasAnyVisibleWindow) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_ACTIVITY_STARTS) &#123;</span><br><span class=\"line\">                Slog.d(TAG, <span class=\"string\">&quot;Activity start allowed: realCallingUid (&quot;</span> + realCallingUid</span><br><span class=\"line\">                        + <span class=\"string\">&quot;) has visible (non-toast) window&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//7、✅如果是‘系统持久应用’发起的请求是允许的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRealCallingUidPersistentSystemProcess &amp;&amp; allowBackgroundActivityStart) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//8、✅如果存在伴生设备或者相关可见应用进程是允许的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mService.isAssociatedCompanionApp(UserHandle.getUserId(realCallingUid),</span><br><span class=\"line\">                realCallingUid)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//9、✅具备系统权限 START_ACTIVITIES_FROM_BACKGROUND 是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mService.checkPermission(START_ACTIVITIES_FROM_BACKGROUND, callingPid, callingUid)</span><br><span class=\"line\">            == PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//10、✅如果最近存在相同 uid 进程启动相关组件是允许的（同一个应用）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mSupervisor.mRecentTasks.isCallerRecents(callingUid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//11、✅对于设备所有者请求启动是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mService.isDeviceOwner(callingUid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//12、✅对于伴生设备的请求是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingUserId = UserHandle.getUserId(callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mService.isAssociatedCompanionApp(callingUserId, callingUid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//13、✅具备系统权限 SYSTEM_ALERT_WINDOW 是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mService.hasSystemAlertWindowPermission(callingUid, callingPid, callingPackage)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> callerAppUid = callingUid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callerApp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callerApp = mService.getProcessController(realCallingPid, realCallingUid);</span><br><span class=\"line\">        callerAppUid = realCallingUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callerApp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//‼️来到了新的启动控制类：BackgroundLaunchProcessController#areBackgroundActivityStartsAllowed</span></span><br><span class=\"line\">        <span class=\"comment\">//参考下文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callerApp.areBackgroundActivityStartsAllowed(appSwitchState)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ArraySet&lt;WindowProcessController&gt; uidProcesses =</span><br><span class=\"line\">                mService.mProcessMap.getProcesses(callerAppUid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uidProcesses != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = uidProcesses.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> WindowProcessController proc = uidProcesses.valueAt(i);</span><br><span class=\"line\">                <span class=\"comment\">//参看下文</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (proc != callerApp</span><br><span class=\"line\">                        &amp;&amp; proc.areBackgroundActivityStartsAllowed(appSwitchState)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"areBackgroundActivityStartsAllowed\">areBackgroundActivityStartsAllowed</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BackgroundLaunchProcessController.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">areBackgroundActivityStartsAllowed</span><span class=\"params\">(<span class=\"keyword\">int</span> pid, <span class=\"keyword\">int</span> uid, String packageName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> appSwitchState, <span class=\"keyword\">boolean</span> isCheckingForFgsStart,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> hasActivityInVisibleTask, <span class=\"keyword\">boolean</span> hasBackgroundActivityStartPrivileges,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> lastStopAppSwitchesTime, <span class=\"keyword\">long</span> lastActivityLaunchTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> lastActivityFinishTime)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (appSwitchState == APP_SWITCH_ALLOW) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - lastActivityLaunchTime &lt; ACTIVITY_BG_START_GRACE_PERIOD_MS</span><br><span class=\"line\">                || now - lastActivityFinishTime &lt; ACTIVITY_BG_START_GRACE_PERIOD_MS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastActivityLaunchTime &gt; lastStopAppSwitchesTime</span><br><span class=\"line\">                    || lastActivityFinishTime &gt; lastStopAppSwitchesTime) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasBackgroundActivityStartPrivileges) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasActivityInVisibleTask</span><br><span class=\"line\">            &amp;&amp; (appSwitchState == APP_SWITCH_ALLOW || appSwitchState == APP_SWITCH_FG_ONLY)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isBoundByForegroundUid()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isBackgroundStartAllowedByToken(uid, packageName, isCheckingForFgsStart)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>startActivityUnchecked</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityUnchecked</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskFragment inTaskFragment, <span class=\"keyword\">boolean</span> restrictedBgActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        NeededUriGrants intentGrants)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>Reference</h1>\n<ul>\n<li>输入法控件 IME：<a href=\"https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn\">https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn</a></li>\n<li><a href=\"https://baike.baidu.com/item/%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/16751450#:~:text=%E5%9C%A8%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%A2%86%E5%9F%9F%E4%B8%AD%EF%BC%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E6%8C%87%E7%9A%84%E6%98%AF%E5%9C%A8%E5%85%B6%E7%88%B6%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%88%90%E6%88%96%E8%A2%AB%E7%BB%88%E6%AD%A2%E5%90%8E%E4%BB%8D%E7%BB%A7%E7%BB%AD%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%80%E7%B1%BB%E8%BF%9B%E7%A8%8B%E3%80%82,%E8%BF%99%E4%BA%9B%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E5%B0%86%E8%A2%ABinit%E8%BF%9B%E7%A8%8B%20%28%E8%BF%9B%E7%A8%8B%E5%8F%B7%E4%B8%BA1%29%E6%89%80%E6%94%B6%E5%85%BB%EF%BC%8C%E5%B9%B6%E7%94%B1init%E8%BF%9B%E7%A8%8B%E5%AF%B9%E5%AE%83%E4%BB%AC%E5%AE%8C%E6%88%90%E7%8A%B6%E6%80%81%E6%94%B6%E9%9B%86%E5%B7%A5%E4%BD%9C%E3%80%82\"> 关于孤儿进程、僵尸进程的概念 </a></li>\n<li><a href=\"https://www.cnblogs.com/perseus/articles/2354173.html\"> 关于 UID、PID 的了解</a></li>\n<li><a href=\"https://developer.android.google.cn/guide/topics/text/autofill?hl=zh-cn\">AutofillManager 参考链接 [1]</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>Ready go</h1>\n<p>在系列文章中，上一章我们对 <code>package</code> 目录下的内容有了一定的了解，我们知道设备上的桌面其实就是一个<code>系统应用</code>，AOSP 原生有提供，但是厂商定制的 ROM 往往会自己重写或重新实现，扩展功能；那么继续 Android 系统启动思考往下走，我们是不是应该看看手机桌面是如何显示的———桌面程序是如何启动的？</p>\n<p>虽然我们知道桌面程序是<code>Launcher</code>，但是我们作为刚阅读源码的小白，<strong>如何在源码中快速找到桌面程序启动的入口？</strong> 这是一个可以思考的问题， 当然，站在‘巨人的肩膀’直接使用百度也是可以的，但这里我想到另外一种方式————<code>无障碍服务 Accessebility</code>；在平时开发中，无障碍服务除了满足项目需求应用于项目中外，还有一种就是利用该服务作为我们的辅助工具，提高开发效率，我个人最常用的就是<code>查看系统当前最顶部显示的 activity</code>。作为辅助手段，早已有成熟的软件工具，这里推荐两个工具。</p>\n<ul>\n<li>开发者助手</li>\n<li>Android 开发工具箱</li>\n<li>MT 文件管理器</li>\n</ul>\n<h1>systemReady</h1>\n<p>我们知道，SystemServer 在被调用时先执行 <code>main</code> 函数，紧接着执行当前类的静态方法 <code>run</code>，然后分三个阶段启动 <code>启动服务、核心服务、其他服务</code>，最后进入 <code>Looper().loop</code> 循环忘不停歇的 <s>打工</s> 等待消息到来并处理。启动服务是一部分，难道不做点别的吗？刚好在启动 <strong>其他服务</strong> 这里看到这一段注释：</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We now tell the activity manager it is okay to run third party</span></span><br><span class=\"line\"><span class=\"comment\">// code.  It will call back into us once it has gotten to the state</span></span><br><span class=\"line\"><span class=\"comment\">// where third party code can really run (but before it has actually</span></span><br><span class=\"line\"><span class=\"comment\">// started launching the initial applications), for us to complete our</span></span><br><span class=\"line\"><span class=\"comment\">// initialization.</span></span><br><span class=\"line\"></span><br><span class=\"line\">SystemServer：AMS 你所需的一些服务已准备就绪，可以启动第三方应用了，收到请回答，收到请回答，<span class=\"built_in\">over</span>！<span class=\"built_in\">over</span>！</span><br><span class=\"line\"></span><br><span class=\"line\">AMS：收到！收到！看我回调行事，<span class=\"built_in\">over</span>！</span><br></pre></td></tr></table></figure>\n<p>先是 AMS systemReady 进入准备阶段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityManagerService.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">systemReady</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable goingCallback, <span class=\"meta\">@NonNull</span> TimingsTraceAndSlog t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、管理 activity 的任务栈【这种内容太细了，以后逐个看看，先略过】</span></span><br><span class=\"line\"><span class=\"comment\">        2、包含 RecentTasks 最近运行的任务列表</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    mActivityTaskManager.onSystemReady();</span><br><span class=\"line\">    mUserController.onSystemReady();</span><br><span class=\"line\">    <span class=\"comment\">//访问控制，主要与权限、限制相关</span></span><br><span class=\"line\">    mAppOpsService.systemReady();</span><br><span class=\"line\">    mProcessList.onSystemReady();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、如果进程或进程组被标记为杀死，将调用 Process.killProcessQuiet(mPid);ProcessList.killProcessGroup(uid, mPid);杀死进程，为启动新进程做准备</span></span><br><span class=\"line\"><span class=\"comment\">        2、当然，进程也可能被标记为重启，便不会从进程队列中移除       </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    mProcessList.removeProcessLocked</span><br><span class=\"line\">    <span class=\"comment\">//注册启动监听，ATM：activitTaskManager</span></span><br><span class=\"line\">    mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(mActivityLaunchObserver);</span><br><span class=\"line\">    <span class=\"comment\">//UGM：uri global manager，uri 作为数据访问地址、数据传递也是很常用的</span></span><br><span class=\"line\">    mUgmInternal.onSystemReady();</span><br><span class=\"line\">    <span class=\"comment\">//pmi：power manager internal，低电量监控</span></span><br><span class=\"line\">    pmi.registerLowPowerModeObserver</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//😓执行到一半就返回去执行回调【请参考 —— 回调1】</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (goingCallback != <span class=\"keyword\">null</span>) goingCallback.run();</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、启动持久应用（不会休眠的、启动唤醒程序），待启动的是哪些应用，又来到了 IPackageManager.aidl 的 getPersistentApplications，</span></span><br><span class=\"line\"><span class=\"comment\">           实现类是 PackageManagerService.java</span></span><br><span class=\"line\"><span class=\"comment\">        2、getPersistentApplications 实际上获取到的是一个 ApplicationInfo 列表</span></span><br><span class=\"line\"><span class=\"comment\">        3、通过 applicationInfo 创建 processRecorder，接着通过 ProcessList 一顿判断、调整 processRecorder</span></span><br><span class=\"line\"><span class=\"comment\">        4、最后可能通过 wzygote 或 Process.start 启动</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    startPersistentApps(PackageManager.MATCH_DIRECT_BOOT_AWARE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ActivityTaskManagerInternal.java 实现类在 ActivityManagerService 的一个内部类 LocalService；</span></span><br><span class=\"line\">    <span class=\"comment\">//‼️启动桌面程序</span></span><br><span class=\"line\">    mAtmInternal.startHomeOnAllDisplays(currentUserId, <span class=\"string\">&quot;systemReady&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    mAtmInternal.resumeTopActivities(<span class=\"keyword\">false</span> <span class=\"comment\">/* scheduleIdle */</span>);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AMS 准备完毕，请求 SystemServer 超级管家执行回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SystemServer.java 【回调1】</span></span><br><span class=\"line\">mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//service.onBootPhase(mCurrentPhase=500); 系统服务那么多到底谁在执行 500 这个标记？</span></span><br><span class=\"line\">    <span class=\"comment\">//不用过多关注，这只是一个通知，回调告知其他服务 AMS 启动了，你们可以使用 AMS 做别的事情</span></span><br><span class=\"line\">    mSystemServiceManager.startBootPhase(t, SystemService.PHASE_ACTIVITY_MANAGER_READY);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//AMS 需要监控 native 崩溃，里面启动了一个线程 Thread，内部使用阻塞的 socket 接收崩溃信息并返回给上层或输出</span></span><br><span class=\"line\">    mActivityManagerService.startObservingNativeCrashes();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//看到 ops 往往是跟限制策略有关🚫</span></span><br><span class=\"line\">    mActivityManagerService.setAppOpsPolicy(<span class=\"keyword\">new</span> AppOpsPolicy(mSystemContext));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Wait for all packages to be prepared</span></span><br><span class=\"line\">    mPackageManagerService.waitForAppDataPrepared();</span><br><span class=\"line\">    <span class=\"comment\">//第三方应用准备好了，又发起一个启动第三方应用的回调，让各自实现此状态码的服务执行相应操作【见图1】</span></span><br><span class=\"line\">    mSystemServiceManager.startBootPhase(t, SystemService.PHASE_THIRD_PARTY_APPS_CAN_START);</span><br><span class=\"line\"></span><br><span class=\"line\">    ... etc</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//到这里我们算是回调执行完成，我们又要回到 systemReady 里面去，继续看执行 goingCallback.run(); 之后的代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;, t);</span><br></pre></td></tr></table></figure>\n<h1>startHomeOnAllDisplays</h1>\n<p>我们想知道 startHomeOnAllDisplays 的具体实现在哪里？有谁执行的？不妨找找看。</p>\n<ul>\n<li>ActivityManagerService#mAtmInternal.startHomeOnAllDisplays(currentUserId, “systemReady”); <code>AMS 中调用</code></li>\n<li>ActivityTaskManagerInternal#startHomeOnAllDisplays   <code>这是一个抽象类的抽象方法</code></li>\n<li>ActivityTaskManagerService#LocalService            <code>实现类是 ATMS 的内部类</code></li>\n<li>ActivityTaskManagerService#mInternal; <code>实现类实例赋给了 ATMS 的成员</code></li>\n<li>ActivityTaskManagerService#LocalServices.addService(ActivityTaskManagerInternal.class, mInternal); <code>在 ATMS 启动周期 onStart 中被缓存到本地服务列表</code></li>\n<li>com.android.server#private static final ArrayMap&lt;Class&lt;?&gt;, Object&gt; sLocalServiceObjects <code>本地服务列表就是这么一个简单的数组</code></li>\n<li>ActivityTaskManagerService#mAtmInternal = LocalServices.getService(ActivityTaskManagerInternal.class); <code>从本地服务缓存列表中获取实例赋给 ATMS</code></li>\n</ul>\n<p>了解了，直接找实现类 <code>LocalService</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityTaskManagerService.java#LocalService</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnAllDisplays</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mGlobalLock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mRootWindowContainer.startHomeOnAllDisplays(userId, reason);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RootWindowContainer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnAllDisplays</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//桌面主界面是否启动完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> homeStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//这里的循环表示对应 AllDisplays，设备是可能存在多个显示器的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = getChildCount() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> displayId = getChildAt(i).mDisplayId;</span><br><span class=\"line\">        homeStarted |= startHomeOnDisplay(userId, reason, displayId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> homeStarted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RootWindowContainer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnDisplay</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason, <span class=\"keyword\">int</span> displayId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> startHomeOnDisplay(userId, reason, displayId, <span class=\"keyword\">false</span> <span class=\"comment\">/* allowInstrumenting */</span>,</span><br><span class=\"line\">            <span class=\"keyword\">false</span> <span class=\"comment\">/* fromHomeKey */</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RootWindowContainer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnDisplay</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason, <span class=\"keyword\">int</span> displayId, <span class=\"keyword\">boolean</span> allowInstrumenting,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> fromHomeKey)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果遇到无效的显示设备，则使用默认的或已获得焦点的最顶部显示ID</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (displayId == INVALID_DISPLAY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Task rootTask = getTopDisplayFocusedRootTask();</span><br><span class=\"line\">        displayId = rootTask != <span class=\"keyword\">null</span> ? rootTask.getDisplayId() : DEFAULT_DISPLAY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> DisplayContent display = getDisplayContent(displayId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> display.reduceOnAllTaskDisplayAreas((taskDisplayArea, result) -&gt;</span><br><span class=\"line\">                    result | startHomeOnTaskDisplayArea(userId, reason, taskDisplayArea,</span><br><span class=\"line\">                            allowInstrumenting, fromHomeKey),</span><br><span class=\"line\">            <span class=\"keyword\">false</span> <span class=\"comment\">/* initValue */</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RootWindowContainer.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeOnTaskDisplayArea</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason, TaskDisplayArea taskDisplayArea,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> allowInstrumenting, <span class=\"keyword\">boolean</span> fromHomeKey)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果提供的现实区域无效，同样的恢复默认</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (taskDisplayArea == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Task rootTask = getTopDisplayFocusedRootTask();</span><br><span class=\"line\">        taskDisplayArea = rootTask != <span class=\"keyword\">null</span> ? rootTask.getDisplayArea()</span><br><span class=\"line\">                : getDefaultTaskDisplayArea();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//‼️重要的来了，桌面也是一个 activity，启动一个 activity，最重要的便是启动目标信息</span></span><br><span class=\"line\">    Intent homeIntent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ActivityInfo aInfo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (taskDisplayArea == getDefaultTaskDisplayArea()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、mService 是 ActivityTaskManagerService</span></span><br><span class=\"line\"><span class=\"comment\">            2、【默认】intent.addCategory(Intent.CATEGORY_HOME); mTopAction = Intent.ACTION_MAIN;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        homeIntent = mService.getHomeIntent();</span><br><span class=\"line\">        aInfo = resolveHomeActivity(userId, homeIntent);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shouldPlaceSecondaryHomeOnDisplayArea(taskDisplayArea)) &#123;</span><br><span class=\"line\">        Pair&lt;ActivityInfo, Intent&gt; info = resolveSecondaryHomeActivity(userId, taskDisplayArea);</span><br><span class=\"line\">        aInfo = info.first;</span><br><span class=\"line\">        homeIntent = info.second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aInfo == <span class=\"keyword\">null</span> || homeIntent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示总是有一些显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canStartHomeOnDisplayArea(aInfo, taskDisplayArea, allowInstrumenting)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    homeIntent.setComponent(<span class=\"keyword\">new</span> ComponentName(aInfo.applicationInfo.packageName, aInfo.name));</span><br><span class=\"line\">    homeIntent.setFlags(homeIntent.getFlags() | FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fromHomeKey) &#123;</span><br><span class=\"line\">        homeIntent.putExtra(WindowManagerPolicy.EXTRA_FROM_HOME_KEY, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mWindowManager.getRecentsAnimationController() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mWindowManager.getRecentsAnimationController().cancelAnimationForHomeStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    homeIntent.putExtra(WindowManagerPolicy.EXTRA_START_REASON, reason);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动 activity 还得看 activityStartController</span></span><br><span class=\"line\">    mService.getActivityStartController().startHomeActivity(homeIntent, aInfo, myReason,</span><br><span class=\"line\">            taskDisplayArea);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>activitStartController</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStartController.java</span></span><br><span class=\"line\"><span class=\"comment\">//⚠️：这里启动的是 homeItent</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startHomeActivity</span><span class=\"params\">(Intent intent, ActivityInfo aInfo, String reason,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskDisplayArea taskDisplayArea)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//没有任何附加属性，比如没有 activity 动画</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ActivityOptions options = ActivityOptions.makeBasic();</span><br><span class=\"line\">    <span class=\"comment\">//全屏窗口模式</span></span><br><span class=\"line\">    options.setLaunchWindowingMode(WINDOWING_MODE_FULLSCREEN);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ActivityRecord.isResolverActivity(aInfo.name)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定这是一个桌面 activity </span></span><br><span class=\"line\">        options.setLaunchActivityType(ACTIVITY_TYPE_HOME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示设备ID也指定，似乎 activity 启动需要的参数都将封装到 ActivitOptions </span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> displayId = taskDisplayArea.getDisplayId();</span><br><span class=\"line\">    options.setLaunchDisplayId(displayId);</span><br><span class=\"line\">    options.setLaunchTaskDisplayArea(taskDisplayArea.mRemoteToken</span><br><span class=\"line\">            .toWindowContainerToken());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//只是一个变量递增 mDeferResumeCount++，这如何使用 </span></span><br><span class=\"line\">    mSupervisor.beginDeferResume();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task rootHomeTask;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、activity 需要依赖 task 容器，所以启动前必须确保 Task 已创建</span></span><br><span class=\"line\"><span class=\"comment\">            2、TaskDisplayArea#createRootTask 需指定 activityType=home_activity，ontop=true 在显示器的顶部创建 rootTask</span></span><br><span class=\"line\"><span class=\"comment\">            3、最终创建是通过 Task.Builder()......build();  至此，存储桌面 activity 的 Task 已经有了</span></span><br><span class=\"line\"><span class=\"comment\">            4、mRootWindowContainer 这个很重要，我们所见到的界面都要依附于它</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        rootHomeTask = taskDisplayArea.getOrCreateRootHomeTask(ON_TOP<span class=\"comment\">/*true*/</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这个跟 mDeferResumeCount++ 对应，这里是 mDeferResumeCount--</span></span><br><span class=\"line\">        <span class=\"comment\">//关于这个还有一个方法：readyToResume() &#123;return mDeferResumeCount == 0;&#125; </span></span><br><span class=\"line\">        <span class=\"comment\">//true if resume can be called：那估计是哪里进行轮询监听 readyToResume()</span></span><br><span class=\"line\">        mSupervisor.endDeferResume();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、有了可承载桌面程序的任务栈，接着就要启动桌面 activity</span></span><br><span class=\"line\"><span class=\"comment\">        2、获得一个 activity 启动器 ActivitStarter，开始执行 excute()</span></span><br><span class=\"line\"><span class=\"comment\">        3、启动器似乎使用了工厂模式，默认启动器数量 3 个</span></span><br><span class=\"line\"><span class=\"comment\">        4、启动器主要成员有 ActivityStartController、ActivityTaskManagerService、ActivityTaskSupervisor、ActivityStartInterceptor</span></span><br><span class=\"line\"><span class=\"comment\">        5、在构建请求器过程中还需要构造启动请求参数 mRequest </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    mLastHomeActivityStartResult = obtainStarter(intent, <span class=\"string\">&quot;startHomeActivity: &quot;</span> + reason)</span><br><span class=\"line\">            .setOutActivity(tmpOutRecord)</span><br><span class=\"line\">            .setCallingUid(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .setActivityInfo(aInfo)</span><br><span class=\"line\">            .setActivityOptions(options.toBundle())</span><br><span class=\"line\">            .execute();</span><br><span class=\"line\">    mLastHomeActivityStartRecord = tmpOutRecord[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootHomeTask.mInResumeTopActivity) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始调用 onResume 声明周期方法，回到 activity 最熟悉的地方</span></span><br><span class=\"line\">        mSupervisor.scheduleResumeTopActivities();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>ActivityTaskSupervisor</code> 负责的任务太多了，估计像个版本要分离部分代码吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> This class has become a dumping ground. Let&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">// - Move things relating to the hierarchy to RootWindowContainer</span></span><br><span class=\"line\"><span class=\"comment\">// - Move things relating to activity life cycles to maybe a new class called ActivityLifeCycler</span></span><br><span class=\"line\"><span class=\"comment\">// - Move interface things to ActivityTaskManagerService.</span></span><br><span class=\"line\"><span class=\"comment\">// - All other little things to other files.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityTaskSupervisor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RecentTasks</span>.<span class=\"title\">Callbacks</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>activityStarter</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、如果启动请求信息无效，则重新解析并填充启动请求参数</span></span><br><span class=\"line\"><span class=\"comment\">            2、请求参数包括 pid、uid、resolveInfo、activityInfo  .etc</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mRequest.activityInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mRequest.resolveActivity(mSupervisor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res;</span><br><span class=\"line\">        <span class=\"comment\">//mGlobalLock 全局服务锁，并没有什么特别，就是一个普通对象</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mService.mGlobalLock) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> globalConfigWillChange = mRequest.globalConfig != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mService.getGlobalConfiguration().diff(mRequest.globalConfig) != <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Task rootTask = mRootWindowContainer.getTopDisplayFocusedRootTask();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rootTask != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                rootTask.mConfigWillChange = globalConfigWillChange;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                1、什么重量级进程切换，我都懵了😺</span></span><br><span class=\"line\"><span class=\"comment\">                2、如果找不到调用者 app 进程，则终止启动请求 ATMS.getProcessController(request.caller) == null</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            res = resolveToHeavyWeightSwitcherIfNeeded();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res != START_SUCCESS) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//‼️执行启动请求</span></span><br><span class=\"line\">            res = executeRequest(mRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">            mSupervisor.getActivityMetricsLogger().notifyActivityLaunched(launchingState, res,</span><br><span class=\"line\">                    newActivityCreated, mLastStartActivityRecord, originalOptions);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mRequest.waitResult != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mRequest.waitResult.result = res;</span><br><span class=\"line\">                res = waitResultIfNeeded(mRequest.waitResult, mLastStartActivityRecord,</span><br><span class=\"line\">                        launchingState);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getExternalResult(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行完成最后一定要回收 activity 启动器</span></span><br><span class=\"line\">        onExecutionComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>activity 启动请求正式开始，这里将会有很多的启动限制🚫等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivitStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">executeRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//很好奇这个 reason 这么总要吗？干什么用的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(request.reason)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Need to specify a reason.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//如果中途检测到是非启动成功（触发启动限制），那么立马结束请求，返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> err = ActivityManager.START_SUCCESS;</span><br><span class=\"line\">    <span class=\"comment\">// Pull the optional Ephemeral Installer-only bundle out of the options early.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Bundle verificationBundle =</span><br><span class=\"line\">            options != <span class=\"keyword\">null</span> ? options.popAppVerificationBundle() : <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//❌限制1：根据启动请求调用者 caller 寻找是否存在启动 app 进程，如果不存在则返回拦截请求</span></span><br><span class=\"line\">    WindowProcessController callerApp = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (caller != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callerApp = mService.getProcessController(caller);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callerApp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            callingPid = callerApp.getPid();</span><br><span class=\"line\">            callingUid = callerApp.mInfo.uid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            err = START_PERMISSION_DENIED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> launchFlags = intent.getFlags();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_FORWARD_RESULT) != <span class=\"number\">0</span> &amp;&amp; sourceRecord != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//❌什么请求冲突？？？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            SafeActivityOptions.abort(options);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; intent.getComponent() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//❌启动目标 activity 未知，失败</span></span><br><span class=\"line\">        err = ActivityManager.START_INTENT_NOT_RESOLVED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; aInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//❌同样的，请求所需要的基础信息都未知，自然中断本次请求</span></span><br><span class=\"line\">        err = ActivityManager.START_CLASS_NOT_FOUND;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// voiceSession 语音交互相关 activity【这里其实是 activity 启动都会经过的路途，只是我们本次分析的是‘启动桌面 activity’】</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; sourceRecord != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; sourceRecord.getTask().voiceSession != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((launchFlags &amp; FLAG_ACTIVITY_NEW_TASK) == <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; sourceRecord.info.applicationInfo.uid != aInfo.applicationInfo.uid) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                intent.addCategory(Intent.CATEGORY_VOICE);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mService.getPackageManager().activitySupportsIntent(</span><br><span class=\"line\">                        intent.getComponent(), intent, resolvedType)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//❌不支持语音交互功能？</span></span><br><span class=\"line\">                    err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//❌不支持语音交互功能？</span></span><br><span class=\"line\">                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; voiceSession != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mService.getPackageManager().activitySupportsIntent(intent.getComponent(),</span><br><span class=\"line\">                    intent, resolvedType)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//❌不支持</span></span><br><span class=\"line\">                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//❌不支持</span></span><br><span class=\"line\">            err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err != START_SUCCESS) &#123;</span><br><span class=\"line\">        SafeActivityOptions.abort(options);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//检查 activity 启动是否满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> abort = !mSupervisor.checkStartAnyActivityPermission(intent, aInfo, resultWho,</span><br><span class=\"line\">            requestCode, callingPid, callingUid, callingPackage, callingFeatureId,</span><br><span class=\"line\">            request.ignoreTargetSecurity, inTask != <span class=\"keyword\">null</span>, callerApp, resultRecord,</span><br><span class=\"line\">            resultRootTask);</span><br><span class=\"line\">    abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,</span><br><span class=\"line\">            callingPid, resolvedType, aInfo.applicationInfo);</span><br><span class=\"line\">    abort |= !mService.getPermissionPolicyInternal().checkStartActivity(intent, callingUid,</span><br><span class=\"line\">            callingPackage);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> restrictedBgActivity = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!abort) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//继续检查是否满足启动条件</span></span><br><span class=\"line\">            restrictedBgActivity = shouldAbortBackgroundActivityStart(callingUid,</span><br><span class=\"line\">                    callingPid, callingPackage, realCallingUid, realCallingPid, callerApp,</span><br><span class=\"line\">                    request.originatingPendingIntent, request.allowBackgroundActivityStart,</span><br><span class=\"line\">                    intent);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">//略略略～～～</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//没有通过启动检查就要结束执行了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (abort) &#123;</span><br><span class=\"line\">        ActivityOptions.abort(checkedOptions);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> START_ABORTED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mService.getPackageManagerInternalLocked().isPermissionsReviewRequired(</span><br><span class=\"line\">                aInfo.packageName, userId)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> IIntentSender target = mService.getIntentSenderLocked(</span><br><span class=\"line\">                    ActivityManager.INTENT_SENDER_ACTIVITY, callingPackage, callingFeatureId,</span><br><span class=\"line\">                    callingUid, userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>, <span class=\"keyword\">new</span> Intent[]&#123;intent&#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> String[]&#123;resolvedType&#125;, PendingIntent.FLAG_CANCEL_CURRENT</span><br><span class=\"line\">                            | PendingIntent.FLAG_ONE_SHOT, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Intent newIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_REVIEW_PERMISSIONS);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> flags = intent.getFlags();</span><br><span class=\"line\">            flags |= Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置启动标识，仅设置 NEW_TASK 某些场景不一定会真的创建一个任务栈，但可以置为 MULTIPLE_TASK</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((flags &amp; (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_NEW_DOCUMENT)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                flags |= Intent.FLAG_ACTIVITY_MULTIPLE_TASK;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            newIntent.setFlags(flags);</span><br><span class=\"line\"></span><br><span class=\"line\">            newIntent.putExtra(Intent.EXTRA_PACKAGE_NAME, aInfo.packageName);</span><br><span class=\"line\">            newIntent.putExtra(Intent.EXTRA_INTENT, <span class=\"keyword\">new</span> IntentSender(target));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resultRecord != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                newIntent.putExtra(Intent.EXTRA_RESULT_NEEDED, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            intent = newIntent;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//一堆数据解析和赋值就不看了</span></span><br><span class=\"line\">            intentGrants = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            resolvedType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            callingUid = realCallingUid;</span><br><span class=\"line\">            callingPid = realCallingPid;</span><br><span class=\"line\">            rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId, <span class=\"number\">0</span>,</span><br><span class=\"line\">                    computeResolveFilterUid(</span><br><span class=\"line\">                            callingUid, realCallingUid, request.filterCallingUid));</span><br><span class=\"line\">            aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span> <span class=\"comment\">/*profilerInfo*/</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rInfo != <span class=\"keyword\">null</span> &amp;&amp; rInfo.auxiliaryInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//万事俱备，准备待发，创建一个可以启动的 intent （也就是启动数据每个必要的不可少）</span></span><br><span class=\"line\">        <span class=\"comment\">//应该是有特别之处的，不然为什么不直接使用外部传进来的 intent，具体就不纠结了</span></span><br><span class=\"line\">        intent = createLaunchIntent(rInfo.auxiliaryInfo, request.ephemeralIntent,</span><br><span class=\"line\">                callingPackage, callingFeatureId, verificationBundle, resolvedType, userId);</span><br><span class=\"line\">        resolvedType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        callingUid = realCallingUid;</span><br><span class=\"line\">        callingPid = realCallingPid;</span><br><span class=\"line\">        intentGrants = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, <span class=\"keyword\">null</span> <span class=\"comment\">/*profilerInfo*/</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//每一个 activity 的信息都将记录在 ActivityRecord 中</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord r = <span class=\"keyword\">new</span> ActivityRecord.Builder(mService)</span><br><span class=\"line\">            .setCaller(callerApp)</span><br><span class=\"line\">            .setLaunchedFromPid(callingPid)</span><br><span class=\"line\">            .setLaunchedFromUid(callingUid)</span><br><span class=\"line\">            .setLaunchedFromPackage(callingPackage)</span><br><span class=\"line\">            .setLaunchedFromFeature(callingFeatureId)</span><br><span class=\"line\">            .setIntent(intent)</span><br><span class=\"line\">            .setResolvedType(resolvedType)</span><br><span class=\"line\">            .setActivityInfo(aInfo)</span><br><span class=\"line\">            .setConfiguration(mService.getGlobalConfiguration())</span><br><span class=\"line\">            .setResultTo(resultRecord)</span><br><span class=\"line\">            .setResultWho(resultWho)</span><br><span class=\"line\">            .setRequestCode(requestCode)</span><br><span class=\"line\">            .setComponentSpecified(request.componentSpecified)</span><br><span class=\"line\">            .setRootVoiceInteraction(voiceSession != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            .setActivityOptions(checkedOptions)</span><br><span class=\"line\">            .setSourceRecord(sourceRecord)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    mLastStartActivityRecord = r;</span><br><span class=\"line\">    <span class=\"comment\">//‼️好了，又到下一个启动阶段</span></span><br><span class=\"line\">    mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,</span><br><span class=\"line\">            request.voiceInteractor, startFlags, <span class=\"keyword\">true</span> <span class=\"comment\">/* doResume */</span>, checkedOptions,</span><br><span class=\"line\">            inTask, inTaskFragment, restrictedBgActivity, intentGrants);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.outActivity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        request.outActivity[<span class=\"number\">0</span>] = mLastStartActivityRecord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mLastStartActivityResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"checkStartAnyActivityPremission\">checkStartAnyActivityPremission</h2>\n<p>任何一个 activity 启动都需要检查权限问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivitTaskSupervisor.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">checkStartAnyActivityPermission</span><span class=\"params\">(Intent intent, ActivityInfo aInfo, String resultWho,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> callingPid, <span class=\"keyword\">int</span> callingUid, String callingPackage,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> String callingFeatureId, <span class=\"keyword\">boolean</span> ignoreTargetSecurity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> launchingInTask, WindowProcessController callerApp, ActivityRecord resultRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Task resultRootTask)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//0、✅如果是最近任务列表中的组件 并且 是当前栈中请求启动是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isCallerRecents = mService.getRecentTasks() != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; mService.getRecentTasks().isCallerRecents(callingUid);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、✅如果是具有超级用户权限的应用请求启动是允许的 appID=Process.ROOT_UID</span></span><br><span class=\"line\"><span class=\"comment\">        2、✅如果是系统应用请求启动是允许的 appID=Process.SYSTEM_UID</span></span><br><span class=\"line\"><span class=\"comment\">        3、❌如果是不同进程是不允许的 UserHandle.isIsolated(uid)</span></span><br><span class=\"line\"><span class=\"comment\">        4、✅如果是设备所有者请求启动是允许的 UserHandle.isSameApp(uid, owningUid)</span></span><br><span class=\"line\"><span class=\"comment\">        5、❌如果目标 activity exported=false 是不被允许启动的</span></span><br><span class=\"line\"><span class=\"comment\">        6、❌如果检查的权限存在 ‘禁止权限列表’中是不被允许的  [至于列表中都有哪些权限我们以后讨论]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> startAnyPerm = mService.checkPermission(START_ANY_ACTIVITY, callingPid,</span><br><span class=\"line\">            callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startAnyPerm == PERMISSION_GRANTED || (isCallerRecents &amp;&amp; launchingInTask)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//❌component 限制 【跟上述限制差不多，会调用到 checkComponentPermission】</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> componentRestriction = getComponentRestrictionForCallingPackage(aInfo,</span><br><span class=\"line\">            callingPackage, callingFeatureId, callingPid, callingUid, ignoreTargetSecurity);</span><br><span class=\"line\">    <span class=\"comment\">//❌action 限制  【跟上述限制差不多，会调用到 checkPermission】</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionRestriction = getActionRestrictionForCallingPackage(</span><br><span class=\"line\">            intent.getAction(), callingPackage, callingFeatureId, callingPid, callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (componentRestriction == ACTIVITY_RESTRICTION_PERMISSION</span><br><span class=\"line\">            || actionRestriction == ACTIVITY_RESTRICTION_PERMISSION) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resultRecord != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            resultRecord.sendResult(INVALID_UID, resultWho, requestCode,</span><br><span class=\"line\">                    Activity.RESULT_CANCELED, <span class=\"keyword\">null</span> <span class=\"comment\">/* data */</span>, <span class=\"keyword\">null</span> <span class=\"comment\">/* dataGrants */</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SecurityException(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (actionRestriction == ACTIVITY_RESTRICTION_APPOP) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (componentRestriction == ACTIVITY_RESTRICTION_APPOP) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"checkIntent\">checkIntent</h2>\n<p>mService.mIntentFirewall.checkStartActivity 最终调用的就是 intent 过滤。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//IntentFirewall.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkIntent</span><span class=\"params\">(FirewallIntentResolver resolver, ComponentName resolvedComponent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> intentType, Intent intent, <span class=\"keyword\">int</span> callerUid, <span class=\"keyword\">int</span> callerPid, String resolvedType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> receivingUid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> log = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> block = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Rule&gt; candidateRules;</span><br><span class=\"line\">    candidateRules = resolver.queryIntent(intent, resolvedType, <span class=\"keyword\">false</span> <span class=\"comment\">/*defaultOnly*/</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (candidateRules == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        candidateRules = <span class=\"keyword\">new</span> ArrayList&lt;Rule&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolver.queryByComponent(resolvedComponent, candidateRules);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;candidateRules.size(); i++) &#123;</span><br><span class=\"line\">        Rule rule = candidateRules.get(i);</span><br><span class=\"line\">        <span class=\"comment\">//intent 过滤规则是什么，规则是如何匹配的？不懂————略！</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rule.matches(<span class=\"keyword\">this</span>, resolvedComponent, intent, callerUid, callerPid, resolvedType,</span><br><span class=\"line\">                receivingUid)) &#123;</span><br><span class=\"line\">            block |= rule.getBlock();</span><br><span class=\"line\">            log |= rule.getLog();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (block &amp;&amp; log) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (log) &#123;</span><br><span class=\"line\">        logIntent(intentType, intent, callerUid, resolvedType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"checkStartActivity\">checkStartActivity</h2>\n<p>PermissionPolicyInternal 是一个抽象类，实现类是 PermissionPolicyService 的一个内部类 <code>private class Internal extends PermissionPolicyInternal </code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PermissionPolicyService.java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Internal</span> <span class=\"keyword\">extends</span> <span class=\"title\">PermissionPolicyInternal</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkStartActivity</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Intent intent, <span class=\"keyword\">int</span> callingUid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"meta\">@Nullable</span> String callingPackage)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callingPackage != <span class=\"keyword\">null</span> &amp;&amp; isActionRemovedForCallingPackage(intent, callingUid,</span><br><span class=\"line\">                callingPackage)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PermissionPolicyService.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isActionRemovedForCallingPackage</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Intent intent, <span class=\"keyword\">int</span> callingUid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@NonNull</span> String callingPackage)</span> </span>&#123;</span><br><span class=\"line\">    String action = intent.getAction();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TelecomManager.ACTION_CHANGE_DEFAULT_DIALER:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT: &#123;</span><br><span class=\"line\">            ApplicationInfo applicationInfo;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                applicationInfo = getContext().getPackageManager().getApplicationInfoAsUser(</span><br><span class=\"line\">                        callingPackage, <span class=\"number\">0</span>, UserHandle.getUserId(callingUid));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (applicationInfo.targetSdkVersion &gt;= Build.VERSION_CODES.Q) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//只有高版本才会检查这个问题咯</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">            intent.putExtra(Intent.EXTRA_CALLING_PACKAGE, callingPackage);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"shouldAbortBackgroundActivityStart\">shouldAbortBackgroundActivityStart</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldAbortBackgroundActivityStart</span><span class=\"params\">(<span class=\"keyword\">int</span> callingUid, <span class=\"keyword\">int</span> callingPid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">final</span> String callingPackage, <span class=\"keyword\">int</span> realCallingUid, <span class=\"keyword\">int</span> realCallingPid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        WindowProcessController callerApp, PendingIntentRecord originatingPendingIntent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> allowBackgroundActivityStart, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//1、✅系统用户应用、具有 Root 权限的应用、NFC （一般是伴生设备）应用请求启动是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingAppId = UserHandle.getAppId(callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callingUid == Process.ROOT_UID || callingAppId == Process.SYSTEM_UID</span><br><span class=\"line\">            || callingAppId == Process.NFC_UID) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2、✅如果是桌面程序启动是允许的  [正常用户操作不就是点击桌面应用图标然后启动的嘛]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isHomeApp(callingUid, callingPackage)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3、✅设备所有者是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> WindowState imeWindow = mRootWindowContainer.getCurrentInputMethodWindow();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (imeWindow != <span class=\"keyword\">null</span> &amp;&amp; callingAppId == imeWindow.mOwnerUid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4、✅如果有前台应用或可见界面存在前台，这也是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> appSwitchState = mService.getBalAppSwitchesState();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingUidProcState = mService.mActiveUids.getUidState(callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> callingUidHasAnyVisibleWindow = mService.hasActiveVisibleWindow(callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isCallingUidForeground = callingUidHasAnyVisibleWindow</span><br><span class=\"line\">            || callingUidProcState == ActivityManager.PROCESS_STATE_TOP</span><br><span class=\"line\">            || callingUidProcState == ActivityManager.PROCESS_STATE_BOUND_TOP;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isCallingUidPersistentSystemProcess =</span><br><span class=\"line\">            callingUidProcState &lt;= ActivityManager.PROCESS_STATE_PERSISTENT_UI;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//5、✅在应用切换过程中，如果有可见的窗口是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> appSwitchAllowedOrFg =</span><br><span class=\"line\">            appSwitchState == APP_SWITCH_ALLOW || appSwitchState == APP_SWITCH_FG_ONLY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((appSwitchAllowedOrFg || mService.mActiveUids.hasNonAppVisibleWindow(callingUid))</span><br><span class=\"line\">            &amp;&amp; callingUidHasAnyVisibleWindow)</span><br><span class=\"line\">            || isCallingUidPersistentSystemProcess) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> realCallingUidProcState = (callingUid == realCallingUid)</span><br><span class=\"line\">            ? callingUidProcState</span><br><span class=\"line\">            : mService.mActiveUids.getUidState(realCallingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> realCallingUidHasAnyVisibleWindow = (callingUid == realCallingUid)</span><br><span class=\"line\">            ? callingUidHasAnyVisibleWindow</span><br><span class=\"line\">            : mService.hasActiveVisibleWindow(realCallingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isRealCallingUidForeground = (callingUid == realCallingUid)</span><br><span class=\"line\">            ? isCallingUidForeground</span><br><span class=\"line\">            : realCallingUidHasAnyVisibleWindow</span><br><span class=\"line\">                    || realCallingUidProcState == ActivityManager.PROCESS_STATE_TOP;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> realCallingAppId = UserHandle.getAppId(realCallingUid);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isRealCallingUidPersistentSystemProcess = (callingUid == realCallingUid)</span><br><span class=\"line\">            ? isCallingUidPersistentSystemProcess</span><br><span class=\"line\">            : (realCallingAppId == Process.SYSTEM_UID)</span><br><span class=\"line\">                    || realCallingUidProcState &lt;= ActivityManager.PROCESS_STATE_PERSISTENT_UI;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (realCallingUid != callingUid) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//6、✅如果调用的进程有可见的窗口是允许的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (realCallingUidHasAnyVisibleWindow) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_ACTIVITY_STARTS) &#123;</span><br><span class=\"line\">                Slog.d(TAG, <span class=\"string\">&quot;Activity start allowed: realCallingUid (&quot;</span> + realCallingUid</span><br><span class=\"line\">                        + <span class=\"string\">&quot;) has visible (non-toast) window&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//7、✅如果是‘系统持久应用’发起的请求是允许的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRealCallingUidPersistentSystemProcess &amp;&amp; allowBackgroundActivityStart) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//8、✅如果存在伴生设备或者相关可见应用进程是允许的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mService.isAssociatedCompanionApp(UserHandle.getUserId(realCallingUid),</span><br><span class=\"line\">                realCallingUid)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//9、✅具备系统权限 START_ACTIVITIES_FROM_BACKGROUND 是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mService.checkPermission(START_ACTIVITIES_FROM_BACKGROUND, callingPid, callingUid)</span><br><span class=\"line\">            == PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//10、✅如果最近存在相同 uid 进程启动相关组件是允许的（同一个应用）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mSupervisor.mRecentTasks.isCallerRecents(callingUid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//11、✅对于设备所有者请求启动是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mService.isDeviceOwner(callingUid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//12、✅对于伴生设备的请求是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingUserId = UserHandle.getUserId(callingUid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mService.isAssociatedCompanionApp(callingUserId, callingUid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//13、✅具备系统权限 SYSTEM_ALERT_WINDOW 是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mService.hasSystemAlertWindowPermission(callingUid, callingPid, callingPackage)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> callerAppUid = callingUid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callerApp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callerApp = mService.getProcessController(realCallingPid, realCallingUid);</span><br><span class=\"line\">        callerAppUid = realCallingUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callerApp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//‼️来到了新的启动控制类：BackgroundLaunchProcessController#areBackgroundActivityStartsAllowed</span></span><br><span class=\"line\">        <span class=\"comment\">//参考下文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callerApp.areBackgroundActivityStartsAllowed(appSwitchState)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ArraySet&lt;WindowProcessController&gt; uidProcesses =</span><br><span class=\"line\">                mService.mProcessMap.getProcesses(callerAppUid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uidProcesses != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = uidProcesses.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> WindowProcessController proc = uidProcesses.valueAt(i);</span><br><span class=\"line\">                <span class=\"comment\">//参看下文</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (proc != callerApp</span><br><span class=\"line\">                        &amp;&amp; proc.areBackgroundActivityStartsAllowed(appSwitchState)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"areBackgroundActivityStartsAllowed\">areBackgroundActivityStartsAllowed</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BackgroundLaunchProcessController.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">areBackgroundActivityStartsAllowed</span><span class=\"params\">(<span class=\"keyword\">int</span> pid, <span class=\"keyword\">int</span> uid, String packageName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> appSwitchState, <span class=\"keyword\">boolean</span> isCheckingForFgsStart,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> hasActivityInVisibleTask, <span class=\"keyword\">boolean</span> hasBackgroundActivityStartPrivileges,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> lastStopAppSwitchesTime, <span class=\"keyword\">long</span> lastActivityLaunchTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> lastActivityFinishTime)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (appSwitchState == APP_SWITCH_ALLOW) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - lastActivityLaunchTime &lt; ACTIVITY_BG_START_GRACE_PERIOD_MS</span><br><span class=\"line\">                || now - lastActivityFinishTime &lt; ACTIVITY_BG_START_GRACE_PERIOD_MS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastActivityLaunchTime &gt; lastStopAppSwitchesTime</span><br><span class=\"line\">                    || lastActivityFinishTime &gt; lastStopAppSwitchesTime) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasBackgroundActivityStartPrivileges) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasActivityInVisibleTask</span><br><span class=\"line\">            &amp;&amp; (appSwitchState == APP_SWITCH_ALLOW || appSwitchState == APP_SWITCH_FG_ONLY)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isBoundByForegroundUid()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isBackgroundStartAllowedByToken(uid, packageName, isCheckingForFgsStart)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>startActivityUnchecked</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityUnchecked</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskFragment inTaskFragment, <span class=\"keyword\">boolean</span> restrictedBgActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        NeededUriGrants intentGrants)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>Reference</h1>\n<ul>\n<li>输入法控件 IME：<a href=\"https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn\">https://developer.android.google.cn/guide/topics/text/creating-input-method?hl=zh-cn</a></li>\n<li><a href=\"https://baike.baidu.com/item/%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/16751450#:~:text=%E5%9C%A8%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%A2%86%E5%9F%9F%E4%B8%AD%EF%BC%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E6%8C%87%E7%9A%84%E6%98%AF%E5%9C%A8%E5%85%B6%E7%88%B6%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%88%90%E6%88%96%E8%A2%AB%E7%BB%88%E6%AD%A2%E5%90%8E%E4%BB%8D%E7%BB%A7%E7%BB%AD%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%80%E7%B1%BB%E8%BF%9B%E7%A8%8B%E3%80%82,%E8%BF%99%E4%BA%9B%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E5%B0%86%E8%A2%ABinit%E8%BF%9B%E7%A8%8B%20%28%E8%BF%9B%E7%A8%8B%E5%8F%B7%E4%B8%BA1%29%E6%89%80%E6%94%B6%E5%85%BB%EF%BC%8C%E5%B9%B6%E7%94%B1init%E8%BF%9B%E7%A8%8B%E5%AF%B9%E5%AE%83%E4%BB%AC%E5%AE%8C%E6%88%90%E7%8A%B6%E6%80%81%E6%94%B6%E9%9B%86%E5%B7%A5%E4%BD%9C%E3%80%82\"> 关于孤儿进程、僵尸进程的概念 </a></li>\n<li><a href=\"https://www.cnblogs.com/perseus/articles/2354173.html\"> 关于 UID、PID 的了解</a></li>\n<li><a href=\"https://developer.android.google.cn/guide/topics/text/autofill?hl=zh-cn\">AutofillManager 参考链接 [1]</a></li>\n</ul>\n"},{"title":"Android 系统 Home（二）","catalog":true,"date":"2022-09-29T14:58:04.000Z","subtitle":"启动桌面就是查找并启动 Activity","header-img":"/img/220928/android_sysserver_bg.png","sticky":9,"_content":"\n桌面启动类似 Activity 启动，接着上一章节继续查阅启动流程，启动限制、启动条件检查是重点，Activity 生命周期也会逐步回调给外部，这里只是粗略描述启动过程，除此之外还包括窗口的创建、绘制等等。\n\n# startActivityUnchecked\n\n```java\n//ActivityStarter.java\nprivate int startActivityUnchecked(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        TaskFragment inTaskFragment, boolean restrictedBgActivity,\n        NeededUriGrants intentGrants) {\n    int result = START_CANCELED;\n    boolean startResultSuccessful = false;\n    final Task startedActivityRootTask;\n\n    //TRANSIT_OPEN：创建一个之前不存在的新窗口，并且让窗口可见\n    //transitType 还会影响窗口绘制消息延迟时间，默认是 5秒，如果是 chenge 类型延时将缩短到 2 秒\n    //也会把 windowContain 添加到集合中，等待窗口绘制\n    final TransitionController transitionController = r.mTransitionController;\n    Transition newTransition = (!transitionController.isCollecting()\n            && transitionController.getTransitionPlayer() != null)\n            ? transitionController.createTransition(TRANSIT_OPEN) : null;\n    RemoteTransition remoteTransition = r.takeRemoteTransition();\n    if (newTransition != null && remoteTransition != null) {\n        newTransition.setRemoteTransition(remoteTransition);\n    }\n    transitionController.collect(r);\n    final boolean isTransient = r.getOptions() != null && r.getOptions().getTransientLaunch();\n    \n    \n    try {\n        //延迟窗口测量，又使用一个单独的变量 mDeferDepth++，控制测量、绘制次数，避免递归循环\n        mService.deferWindowLayout();\n        //‼️又是一个启动阶段\n        result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,\n                startFlags, doResume, options, inTask, inTaskFragment, restrictedBgActivity,\n                intentGrants);\n        startResultSuccessful = ActivityManager.isStartResultSuccessful(result);\n        final boolean taskAlwaysOnTop = options != null && options.getTaskAlwaysOnTop();\n        // Apply setAlwaysOnTop when starting an Activity is successful regardless of creating\n        // a new Activity or recycling the existing Activity.\n        if (taskAlwaysOnTop && startResultSuccessful) {\n            final Task targetRootTask =\n                    mTargetRootTask != null ? mTargetRootTask : mTargetTask.getRootTask();\n            targetRootTask.setAlwaysOnTop(true);\n        }\n    } finally {\n        Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);\n        //‼️无论成功失败与否，启动解释都应该分发出去\n        startedActivityRootTask = handleStartResult(r, result);\n        //延时窗口测量将被恢复\n        mService.continueWindowLayout();\n        mSupervisor.mUserLeaving = false;\n    }\n\n    postStartActivityProcessing(r, result, startedActivityRootTask);\n\n    return result;\n}\n```\n\n## about TransitionType\n```\n@IntDef(prefix = { \"TRANSIT_\" }, value = {\n        TRANSIT_NONE,\n        TRANSIT_OPEN,                 //创建一个新的窗口，并且使其可见\n        TRANSIT_CLOSE,                //可见的窗口被关闭（finished 或 destroyed）\n        TRANSIT_TO_FRONT,             //不可见的窗口将变为可见\n        TRANSIT_TO_BACK,              //可见的窗口变为不可见\n        TRANSIT_RELAUNCH,\n        TRANSIT_CHANGE,               //可见窗口发生改变（比如屏幕方向、大小改变）\n        TRANSIT_KEYGUARD_GOING_AWAY,  //（已废弃）\n        TRANSIT_KEYGUARD_OCCLUDE,     //键盘锁定\n        TRANSIT_KEYGUARD_UNOCCLUDE,   //键盘解锁\n        TRANSIT_PIP,                  //画中画\n        TRANSIT_WAKE,                 //（正在打开？）\n        TRANSIT_FIRST_CUSTOM\n})\n@Retention(RetentionPolicy.SOURCE)\n@interface TransitionType {}\n```\n\n# startActivityInner\n\n```java\n//ActivityStarter.java\nint startActivityInner(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        TaskFragment inTaskFragment, boolean restrictedBgActivity,\n        NeededUriGrants intentGrants) {\n    setInitialState(r, options, inTask, inTaskFragment, doResume, startFlags, sourceRecord,\n            voiceSession, voiceInteractor, restrictedBgActivity);\n\n    //确定 activity 所启动的任务栈应该是 NEW_TASK 还是在已有的任务栈启动\n    computeLaunchingTaskFlags();\n    computeSourceRootTask();\n    mIntent.setFlags(mLaunchFlags);\n\n    //如果请求已经开始，应该冻结最近任务列表，等待下次更新\n    final Task prevTopTask = mPreferredTaskDisplayArea.getFocusedRootTask();\n    final Task reusedTask = getReusableTask();\n    if (mOptions != null && mOptions.freezeRecentTasksReordering()\n            && mSupervisor.mRecentTasks.isCallerRecents(r.launchedFromUid)\n            && !mSupervisor.mRecentTasks.isFreezeTaskListReorderingSet()) {\n        mFrozeTaskList = true;\n        mSupervisor.mRecentTasks.setFreezeTaskListReordering();\n    }\n\n    //计算是否有符合条件的任务栈可以复用，否则应该创建新的任务栈\n    final Task targetTask = reusedTask != null ? reusedTask : computeTargetTask();\n    final boolean newTask = targetTask == null;\n    mTargetTask = targetTask;\n\n    //确定启动参数，比如 windowType\n    computeLaunchParams(r, sourceRecord, targetTask);\n\n    //又是一番启动限制，在任务栈层面限制启动🚫\n    int startResult = isAllowedToStart(r, newTask, targetTask);\n    if (startResult != START_SUCCESS) {\n        return startResult;\n    }\n\n    //复用任务栈\n    final ActivityRecord targetTaskTop = newTask\n            ? null : targetTask.getTopNonFinishingActivity();\n    if (targetTaskTop != null) {\n        /*\n            1、resumeTargetRootTaskIfNeeded\n            2、mRootWindowContainer.resumeFocusedTasksTopActivities\n        */\n        startResult = recycleTask(targetTask, targetTaskTop, reusedTask, intentGrants);\n        if (startResult != START_SUCCESS) {\n            return startResult;\n        }\n    } else {\n        mAddingToTask = true;\n    }\n\n    /*\n        1、如果启动的 activity 是在任务栈中已存在，则只需启动一次，并调用 activity 的 onNewIntent 方法即可\n        2、回调方法 deliverNewIntent(top, intentGrants); ActivityRecorder#deliverNewIntentLocked\n        3、mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), appToken,\n        NewIntentItem.obtain(ar, mState == RESUMED));\n    */\n    final Task topRootTask = mPreferredTaskDisplayArea.getFocusedRootTask();\n    if (topRootTask != null) {\n        startResult = deliverToCurrentTopIfNeeded(topRootTask, intentGrants);\n        if (startResult != START_SUCCESS) {\n            return startResult;\n        }\n    }\n\n    //还是一样，如果不存在则创建，如果存在则复用\n    if (mTargetRootTask == null) {\n        mTargetRootTask = getLaunchRootTask(mStartActivity, mLaunchFlags, targetTask, mOptions);\n    }\n    if (newTask) {\n        final Task taskToAffiliate = (mLaunchTaskBehind && mSourceRecord != null)\n                ? mSourceRecord.getTask() : null;\n        setNewTask(taskToAffiliate);\n    } else if (mAddingToTask) {\n        addOrReparentStartingActivity(targetTask, \"adding to task\");\n    }\n\n    //启动的目标任务栈有了，直接看 activity 启动\n    final Task startedTask = mStartActivity.getTask();\n    final boolean isTaskSwitch = startedTask != prevTopTask && !startedTask.isEmbedded();\n    \n    //启动\n    mTargetRootTask.startActivityLocked(mStartActivity,\n            topRootTask != null ? topRootTask.getTopNonFinishingActivity() : null, newTask,\n            isTaskSwitch, mOptions, sourceRecord);\n    if (mDoResume) {\n        final ActivityRecord topTaskActivity = startedTask.topRunningActivityLocked();\n        //如果本次启动的 activity 所在任务栈中并没有获得焦点，并且当前启动的不是本次想启动的，也要确保它显示（它可能是更重要的 activity 抢先显示呢）\n        if (!mTargetRootTask.isTopActivityFocusable()\n                || (topTaskActivity != null && topTaskActivity.isTaskOverlay()\n                && mStartActivity != topTaskActivity)) {\n                \n            mTargetRootTask.ensureActivitiesVisible(null /* starting */,\n            mTargetRootTask.mDisplayContent.executeAppTransition();\n        } else {\n            //如果本次启动的 activity 所在任务栈中并已获得焦点，如果该任务栈没有显示在最前则 moveToFront\n            if (mTargetRootTask.isTopActivityFocusable()\n                    && !mRootWindowContainer.isTopDisplayFocusedRootTask(mTargetRootTask)) {\n                mTargetRootTask.moveToFront(\"startActivityInner\");\n            }\n            \n            //这里和上述 recycleTask 相似，最终也会执行到这个方法。（把 activity 转移为可见状态）\n            mRootWindowContainer.resumeFocusedTasksTopActivities(\n                    mTargetRootTask, mStartActivity, mOptions, mTransientLaunch);\n        }\n    }\n    \n    //启动完毕需要更新最近任务栈等\n    mRootWindowContainer.updateUserRootTask(mStartActivity.mUserId, mTargetRootTask);\n    mSupervisor.mRecentTasks.add(startedTask);\n    mSupervisor.handleNonResizableTaskIfNeeded(startedTask,\n            mPreferredWindowingMode, mPreferredTaskDisplayArea, mTargetRootTask);\n\n    return START_SUCCESS;\n}\n```\n\n## isAllowedToStart\n\n检查 activity 是否可以在已有的任务栈或者新的任务栈中启动。\n\n```java\n//ActivityStarter.java\nprivate int isAllowedToStart(ActivityRecord r, boolean newTask, Task targetTask) {\n    //❌1、没有包名是不允许的（每个 activity 都有所属的包）\n    if (mStartActivity.packageName == null) {\n        if (mStartActivity.resultTo != null) {\n            mStartActivity.resultTo.sendResult(INVALID_UID, mStartActivity.resultWho,\n                    mStartActivity.requestCode, RESULT_CANCELED,\n                    null /* data */, null /* dataGrants */);\n        }\n        ActivityOptions.abort(mOptions);\n        return START_CLASS_NOT_FOUND;\n    }\n\n    /*\n        1、应用处于 instrument 状态时，应该取消启动\n        2、如果是 VR 显示ID或者默认显示ID，允许启动\n        3、launchMode != SINGLE_TASK && launchMode != SINGLE_INSTANCE 属于已有启动状态，应该取消启动\n    */\n    if (r.isActivityTypeHome()) {\n        if (!mRootWindowContainer.canStartHomeOnDisplayArea(r.info, mPreferredTaskDisplayArea,\n                true /* allowInstrumenting */)) {\n            return START_CANCELED;\n        }\n    }\n\n    /*\n        1、❌如果是新的任务栈，从后台启动的 activity 是不允许的\n        2、❌如果调用者 uid 不是当前程序（当前任务栈），启动时不允许的\n        3、❌如果是需要创建新的任务栈，从后台启动的 activity 是不允许的\n    */\n    boolean blockBalInTask = (newTask\n            || !targetTask.isUidPresent(mCallingUid)\n            || (LAUNCH_SINGLE_INSTANCE == mLaunchMode && targetTask.inPinnedWindowingMode()));\n    // mRestrictedBgActivity：严格把控 activity 的启动🚫（该条件前一篇有提到）\n    if (mRestrictedBgActivity && blockBalInTask\n            && handleBackgroundActivityAbort(mStartActivity)) {\n        return START_ABORTED;\n    }\n\n    //还是在不断限制启动，条件苛刻啊\n    final boolean isNewClearTask =\n            (mLaunchFlags & (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))\n                    == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK);\n    if (!newTask) {\n        if (mService.getLockTaskController().isLockTaskModeViolation(targetTask,\n                isNewClearTask)) {\n            return START_RETURN_LOCK_TASK_MODE_VIOLATION;\n        }\n    } else {\n        if (mService.getLockTaskController().isNewTaskLockTaskModeViolation(mStartActivity)) {\n            return START_RETURN_LOCK_TASK_MODE_VIOLATION;\n        }\n    }\n\n    if (mInTaskFragment != null && !canEmbedActivity(mInTaskFragment, r, newTask, targetTask)) {\n        return START_PERMISSION_DENIED;\n    }\n\n    //✅否则，是启动是允许的\n    return START_SUCCESS;\n}\n```\n\n## canEmbedActivity\n\n是否可以嵌入？activity 嵌入？\n\n```java\n//ActivityStarter.java\nprivate boolean canEmbedActivity(@NonNull TaskFragment taskFragment, ActivityRecord starting,\n        boolean newTask, Task targetTask) {\n    final Task hostTask = taskFragment.getTask();\n    if (hostTask == null) {\n        return false;\n    }\n\n    //✅如果是系统应用，是允许嵌入启动的\n    final int hostUid = hostTask.effectiveUid;\n    if (UserHandle.getAppId(hostUid) == Process.SYSTEM_UID) {\n        return true;\n    }\n\n    //❌如果不是当前应用进程启动，是不允许的\n    if (hostUid != starting.getUid()) {\n        return false;\n    }\n\n    //❌如果不是同一个任务栈（主任务栈）中启动，也是不允许的\n    return !newTask && (targetTask == null || targetTask == hostTask);\n}\n```\n\n# startActivityLocked\n```java\n//Task.java\nvoid startActivityLocked(ActivityRecord r, @Nullable ActivityRecord focusedTopActivity,\n        boolean newTask, boolean isTaskSwitch, ActivityOptions options,\n        @Nullable ActivityRecord sourceRecord) {\n    Task rTask = r.getTask();\n    \n    final boolean allowMoveToFront = options == null || !options.getAvoidMoveToFront();\n    final boolean isOrhasTask = rTask == this || hasChild(rTask);\n    \n    //启动的 activity 不能是阻塞的，否则将抛出异常\n    Task task = null;\n    if (!newTask && isOrhasTask) {\n        final ActivityRecord occludingActivity = getOccludingActivityAbove(r);\n        if (occludingActivity != null) {\n            rTask.positionChildAtTop(r);\n            ActivityOptions.abort(options);\n            return;\n        }\n    }\n\n    //允许移动到前台，并且不是桌面程序、是最近任务列表任务栈、任务栈已有activity\n    if ((!isHomeOrRecentsRootTask() || hasActivity()) && allowMoveToFront) {\n        boolean doShow = true;\n        if (newTask) {\n            if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {\n                resetTaskIfNeeded(r, r);\n                doShow = topRunningNonDelayedActivityLocked(null) == r;\n            }\n        } else if (options != null && options.getAnimationType()\n                == ActivityOptions.ANIM_SCENE_TRANSITION) {\n            doShow = false;\n        }\n        if (r.mLaunchTaskBehind) {\n            r.setVisibility(true);\n            ensureActivitiesVisible(null, 0, !PRESERVE_WINDOWS);\n            mDisplayContent.executeAppTransition();\n        } else if (SHOW_APP_STARTING_PREVIEW && doShow) {\n            Task baseTask = r.getTask();\n            //‼️启动\n            final ActivityRecord prev = baseTask.getActivity(\n                    a -> a.mStartingData != null && a.showToCurrentUser());\n            r.showStartingWindow(prev, newTask, isTaskSwitch,\n                    true /* startActivity */, sourceRecord);\n        }\n    } else {\n        //第一个启动的 activity 无需花里胡哨的动画\n        ActivityOptions.abort(options);\n    }\n}\n```\n\n# showStartingWindow\n```java\n//ActivityRecord.java\nvoid showStartingWindow(ActivityRecord prev, boolean newTask, boolean taskSwitch,\n        boolean startActivity, ActivityRecord sourceRecord) {\n    //覆盖时，不会显示\n    if (mTaskOverlay) {\n        return;\n    }\n    \n    //共享元素转换时，不限制（共享元素：Android 动画部分）\n    if (mPendingOptions != null\n            && mPendingOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION) {\n        return;\n    }\n\n    final CompatibilityInfo compatInfo =\n            mAtmService.compatibilityInfoForPackageLocked(info.applicationInfo);\n\n    //是否使用启动页样式\n    mSplashScreenStyleEmpty = shouldUseEmptySplashScreen(sourceRecord, startActivity);\n\n    /*\n        1、我们这就是启动 activity，所以 startActivit = true，那么将会获取启动主题\n        （也就是 Android 高版本每个应用启动都会显示的开屏页？）\n        2、开屏主题是可以重写的，首先尝试获取是否重新了开屏主题，将获取主题资源名称\n        3、如果没有重写，将会通过 ATMS 根据包名和用户ID获取主题资源名称\n        4、如果获取到开屏主题资源名称，那么将根据包名通过 createPackageContext 创建上下文，\n           接着根据上下文和主题名称获取资源ID（0 表示使用默认的开屏主题）\n    */\n    final int splashScreenTheme = startActivity ? getSplashscreenTheme() : 0;\n    \n    //这里会评估应该使用 theme 主题还是 splashScreenTheme 主题\n    final int resolvedTheme = evaluateStartingWindowTheme(prev, packageName, theme,\n            splashScreenTheme);\n\n\n    final boolean activityCreated =\n            mState.ordinal() >= STARTED.ordinal() && mState.ordinal() <= STOPPED.ordinal();\n    //如果不是新的任务栈，activity 也还没创建，那么本次是热启动\n    final boolean newSingleActivity = !newTask && !activityCreated\n            && task.getActivity((r) -> !r.finishing && r != this) == null;\n\n    //‼️启动\n    final boolean scheduled = addStartingWindow(packageName, resolvedTheme,\n            compatInfo, nonLocalizedLabel, labelRes, icon, logo, windowFlags,\n            prev, newTask || newSingleActivity, taskSwitch, isProcessRunning(),\n            allowTaskSnapshot(), activityCreated, mSplashScreenStyleEmpty);\n}\n```\n\n# addStartingWindow\n\n```java\n//ActivityRecord.java\nboolean addStartingWindow(String pkg, int resolvedTheme, CompatibilityInfo compatInfo,\n        CharSequence nonLocalizedLabel, int labelRes, int icon, int logo, int windowFlags,\n        ActivityRecord from, boolean newTask, boolean taskSwitch, boolean processRunning,\n        boolean allowTaskSnapshot, boolean activityCreated, boolean useEmpty) {\n    //窗口被冻结，不能显示\n    if (!okToDisplay()) {\n        return false;\n    }\n\n    if (mStartingData != null) {\n        return false;\n    }\n\n    //已有窗口在显示，不能再显示了\n    final WindowState mainWin = findMainWindow();\n    if (mainWin != null && mainWin.mWinAnimator.getShown()) {\n        return false;\n    }\n\n    final TaskSnapshot snapshot =\n            mWmService.mTaskSnapshotController.getSnapshot(task.mTaskId, task.mUserId,\n                    false /* restoreFromDisk */, false /* isLowResolution */);\n                    \n     //STARTING_WINDOW_TYPE_NONE、STARTING_WINDOW_TYPE_SNAPSHOT、STARTING_WINDOW_TYPE_SPLASH_SCREEN\n    final int type = getStartingWindowType(newTask, taskSwitch, processRunning,\n            allowTaskSnapshot, activityCreated, snapshot);\n\n    //逐渐的，这里似乎更多的是和 window 窗口相关（麻了麻了，我只想看 activity 相关，细节太难了）\n    if (type == STARTING_WINDOW_TYPE_SNAPSHOT) {\n        if (isActivityTypeHome()) {\n            mWmService.mTaskSnapshotController.removeSnapshotCache(task.mTaskId);\n            if ((mDisplayContent.mAppTransition.getTransitFlags()\n                    & WindowManager.TRANSIT_FLAG_KEYGUARD_GOING_AWAY_NO_ANIMATION) == 0) {\n                return false;\n            }\n        }\n        \n        //【分支一】\n        return createSnapshot(snapshot, typeParameter);\n    }\n\n\n    ProtoLog.v(WM_DEBUG_STARTING_WINDOW, \"Creating SplashScreenStartingData\");\n    mStartingData = new SplashScreenStartingData(mWmService, pkg,\n            resolvedTheme, compatInfo, nonLocalizedLabel, labelRes, icon, logo, windowFlags,\n            getMergedOverrideConfiguration(), typeParameter);\n            \n    //【分支二】\n    scheduleAddStartingWindow();\n    return true;\n}\n```\n\n上述无论是**分支一、分支二**，都会走到同一个方法`scheduleAddStartingWindow`。\n\n# scheduleAddStartingWindow\n\n```java\n//ActivityRecord.java\nvoid scheduleAddStartingWindow() {\n    if (StartingSurfaceController.DEBUG_ENABLE_SHELL_DRAWER) {\n        mAddStartingWindow.run();\n    } else {\n        //把消息添加到队列最前面优先处理？\n        if (!mWmService.mAnimationHandler.hasCallbacks(mAddStartingWindow)) {\n            //mWmService：WindowManagerService\n            //mAnimationHandler：final Handler mAnimationHandler = new Handler(AnimationThread.getHandler().getLooper());\n            mWmService.mAnimationHandler.postAtFrontOfQueue(mAddStartingWindow);\n        }\n    }\n}\n```\n\n这里的事情和 window 窗口关系密切，surface 看着绘制相关。\n\n```java\n//ActivityRecord.java\n\nprivate final AddStartingWindow mAddStartingWindow = new AddStartingWindow();\n\nprivate class AddStartingWindow implements Runnable {\n\n    @Override\n    public void run() {\n        //略略略，看不出它干了啥\n    }\n}\n```\n\n窗口相关的到此为止吧，再进入看不懂了。我更关注的是 activity 声明周期回调，可迟迟没有看见💔\n\n---\n\n那么这我们姑且他成功地把 activity 添加到 window 上，现在是时候回头看看**启动成功后做了些什么？** 所以我们回到 `ActivityStarter.java`，自然还是回到这里 ~~（从哪来，回哪去吧）~~\n\n\n# The callback [onNewIntent]\n\n这里讲 `Activity onNewIntent(Intent intent)` 生命周期回调，其实像 onCreat、onResume 等也是相似的，其他的不重复。\n\n## deliverToCurrentTopIfNeeded\n\n```java\n//ActivityStarter.java\nint startActivityInner(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        TaskFragment inTaskFragment, boolean restrictedBgActivity,\n        NeededUriGrants intentGrants) {\n        \n\n    //如果正在启动的 activity 和任务栈顶部的 activity 相同\n    final Task topRootTask = mPreferredTaskDisplayArea.getFocusedRootTask();\n    if (topRootTask != null) {\n        //顶部是同一个 activity，无需重复创建，启动一次就可以，也就是我们知道的应该回调 onNewIntent\n        startResult = deliverToCurrentTopIfNeeded(topRootTask, intentGrants);\n        if (startResult != START_SUCCESS) {\n            return startResult;\n        }\n    }       \n}\n```\n\n## deliverToCurrentTopIfNeeded\n\n```\nprivate int deliverToCurrentTopIfNeeded(Task topRootTask, NeededUriGrants intentGrants) {\n    //获取当前栈顶 activity\n    final ActivityRecord top = topRootTask.topRunningNonDelayedActivityLocked(mNotTop);\n    \n    //activity 相同、启动用户相同、栈顶复用、启动目标\n    final boolean dontStart = top != null\n            && top.mActivityComponent.equals(mStartActivity.mActivityComponent)\n            && top.mUserId == mStartActivity.mUserId\n            && top.attachedToProcess()\n            && ((mLaunchFlags & FLAG_ACTIVITY_SINGLE_TOP) != 0\n            || LAUNCH_SINGLE_TOP == mLaunchMode)\n            && (!top.isActivityTypeHome() || top.getDisplayArea() == mPreferredTaskDisplayArea);\n    if (!dontStart) {\n        return START_SUCCESS;\n    }\n\n    top.getTaskFragment().clearLastPausedActivity();\n    //activity 显示，后面看\n    if (mDoResume) {\n        mRootWindowContainer.resumeFocusedTasksTopActivities();\n    }\n    \n    //这里会进入 ActivitRecord\n    deliverNewIntent(top, intentGrants);\n    return START_DELIVERED_TO_TOP;\n}\n```\n\n## deliverNewIntentLocked\n\n```java\n//ActivityRecord.java\nfinal void deliverNewIntentLocked(int callingUid, Intent intent, NeededUriGrants intentGrants,\n\n    if ((mState == RESUMED || mState == PAUSED || isTopActivityWhileSleeping)\n            && attachedToProcess()) {\n        try {\n            ArrayList<ReferrerIntent> ar = new ArrayList<>(1);\n            ar.add(rintent);\n            //开始调用声明周期相关，通过发送一个客户端事务 ClientTransaction\n            //getLifecycleManager -> ClientLifecycleManager 声明周期相关回调都会通过它\n            mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), appToken,\n                    NewIntentItem.obtain(ar, mState == RESUMED));\n            unsent = false;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Exception thrown sending new intent to \" + this, e);\n        } catch (NullPointerException e) {\n            Slog.w(TAG, \"Exception thrown sending new intent to \" + this, e);\n        }\n    }\n    \n    if (unsent) {\n        addNewIntentLocked(rintent);\n    }\n}\n```\n\n\n```java\n//ClientLfecycleManager.java\nvoid scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n    //创建一个事物之后开始执行，关键是这个是事务（binder)事务传递数据的，或则事务发送后将在哪里处理事务？？？\n    final IApplicationThread client = transaction.getClient();\n    transaction.schedule();\n    if (!(client instanceof Binder)) {\n        transaction.recycle();\n    }\n}\n```\n\n## ClientTransaction.schedule\n\n`ClientTransaction`: A container that holds a sequence of messages, which may be sent to a client. This includes a list of callbacks and a final lifecycle state.\n\n\n```java\n//ClientTransaction.java\n\n/*\n    1、IApplicationThread 这是一个标准的 aidl 接口，接口实现自然是 IApplicationThread.Sub\n    2、实现类在 ActivityThread，private class ApplicationThread extends IApplicationThread.Stub \n*/\nprivate IApplicationThread mClient;\n\n\n/**\n * Schedule the transaction after it was initialized. It will be send to client and all its\n * individual parts will be applied in the following sequence:\n * 1. The client calls {@link #preExecute(ClientTransactionHandler)}, which triggers all work\n *    that needs to be done before actually scheduling the transaction for callbacks and\n *    lifecycle state request.\n * 2. The transaction message is scheduled.\n * 3. The client calls {@link TransactionExecutor#execute(ClientTransaction)}, which executes\n *    all callbacks and necessary lifecycle transitions.\n */\npublic void schedule() throws RemoteException \n    mClient.scheduleTransaction(this);\n}\n```\n\n\n## ApplicationThread.scheduleTransaction\n\n```java\n//ActivityThread.java\nprivate class ApplicationThread extends IApplicationThread.Stub{\n\n    @Override\n    public void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n        //在当前类文件搜索没看到方法定义，差点怀疑人生；然后看看 ActivitThread 还有父类，那方法定义就在父类了\n        ActivityThread.this.scheduleTransaction(transaction);\n    }\n}\n```\n\n```java\npublic final class ActivityThread extends ClientTransactionHandler\n        implements ActivityThreadInternal {  \n}\n```\n\n```java\npublic abstract class ClientTransactionHandler {\n\n    void scheduleTransaction(ClientTransaction transaction) {\n        transaction.preExecute(this);\n        //发送消息，那者就明确很多了\n        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);\n    }\n```\n\n```java\n//ActivityThread.java\nclass H extends Handler {\n    \n    public static final int EXECUTE_TRANSACTION = 159;\n\n    public void handleMessage(Message msg) {\n        switch (msg.what) {\n            case EXECUTE_TRANSACTION:\n                //回头看看 schedule 的注释，下一步应该会到哪里去执行，其实别人是写得很清楚的（熟能生巧，初看确实一头雾水）\n                final ClientTransaction transaction = (ClientTransaction) msg.obj;\n                mTransactionExecutor.execute(transaction);\n                if (isSystem()) {\n                    transaction.recycle();\n                }\n            break;\n        }\n     }\n}\n```\n\n## TransactionExecutor.excute\n\n```java\n//TransactionExecutor.java\npublic void execute(ClientTransaction transaction) {\n    if (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + \"Start resolving transaction\");\n\n    //似乎每一个 activity 都有一个 token，还不清楚从何而来\n    //初学 Android 时，关于 activity token 的报错估计你也遇到过\n    final IBinder token = transaction.getActivityToken();\n    if (token != null) {\n        final Map<IBinder, ClientTransactionItem> activitiesToBeDestroyed =\n                mTransactionHandler.getActivitiesToBeDestroyed();\n        final ClientTransactionItem destroyItem = activitiesToBeDestroyed.get(token);\n        if (destroyItem != null) {\n            if (transaction.getLifecycleStateRequest() == destroyItem) {\n                activitiesToBeDestroyed.remove(token);\n            }\n            if (mTransactionHandler.getActivityClient(token) == null) {\n                return;\n            }\n        }\n    }\n    \n    //这个暂不关注，重点看看下面的生命周期回调吧\n    executeCallbacks(transaction);\n    \n    /*\n        1、cycleToPath(r, lifecycleItem.getTargetState(), true , transaction);  -> performLifecycleSequence\n        \n        //看了一圈，着两个实现应该是在子类\n        2、lifecycleItem.execute(mTransactionHandler, token, mPendingActions);\n        3、lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);\n    */\n    executeLifecycleState(transaction);\n    mPendingActions.clear();\n    if (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + \"End resolving transaction\");\n}\n```\n\n\n```java\n//TransactionExecutor.java\nprivate void performLifecycleSequence(ActivityClientRecord r, IntArray path,\n        ClientTransaction transaction) {\n    final int size = path.size();\n    for (int i = 0, state; i < size; i++) {\n        state = path.get(i);\n        \n        //是吧，几个生命周期的回调都有；那就奇怪了怎么没有 onNewIntent，他不算是生命周期函数吗？\n        //咚咚咚咚（敲黑板～）\n        /*\n            1、onNewIntent 不是生命周期回调方法，只是声明周期回调过程中可能被执行的一个方法\n            2、如果满足某些条件，根据经验我们知道这个方法在 onResume 之前会执行\n            3、那么我们猜测（我看了代码再来猜测的😏），该方法的回调有没有可能在 handleResumeActivity 里面执行？那就去看看吧！\n        */\n        switch (state) {\n            case ON_CREATE:\n                mTransactionHandler.handleLaunchActivity(r, mPendingActions,\n                        null /* customIntent */);\n                break;\n            case ON_START:\n                mTransactionHandler.handleStartActivity(r, mPendingActions,\n                        null /* activityOptions */);\n                break;\n            case ON_RESUME:\n                mTransactionHandler.handleResumeActivity(r, false /* finalStateRequest */,\n                        r.isForward, \"LIFECYCLER_RESUME_ACTIVITY\");\n                break;\n            case ON_PAUSE:\n                mTransactionHandler.handlePauseActivity(r, false /* finished */,\n                        false /* userLeaving */, 0 /* configChanges */, mPendingActions,\n                        \"LIFECYCLER_PAUSE_ACTIVITY\");\n                break;\n            case ON_STOP:\n                mTransactionHandler.handleStopActivity(r, 0 /* configChanges */,\n                        mPendingActions, false /* finalStateRequest */,\n                        \"LIFECYCLER_STOP_ACTIVITY\");\n                break;\n            case ON_DESTROY:\n                mTransactionHandler.handleDestroyActivity(r, false /* finishing */,\n                        0 /* configChanges */, false /* getNonConfigInstance */,\n                        \"performLifecycleSequence. cycling to:\" + path.get(size - 1));\n                break;\n            case ON_RESTART:\n                mTransactionHandler.performRestartActivity(r, false /* start */);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unexpected lifecycle state: \" + state);\n        }\n    }\n}\n```\n\nClientTransactionHandler 是个抽象方法，所以声明周期回调还得找 ClientTransactionHandler 的实现类 `ActivitThread`。\n\n绕一圈又回来，这这这～～～\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69c055d008d74b45bd1205352739f8b9~tplv-k3u1fbpfcp-watermark.image?)\n\n\n## ActivitThread.performResumeActivity\n\n```java\n//ActivityThread.java\npublic boolean performResumeActivity(ActivityClientRecord r, boolean finalStateRequest,\n        String reason) {\n\n    if (r.activity.mFinished) {\n        return false;\n    }\n    \n    //已经 resumed 就不重复了\n    if (r.getLifecycleState() == ON_RESUME) {\n        if (!finalStateRequest) {\n            final RuntimeException e = new IllegalStateException(\n                    \"Trying to resume activity which is already resumed\");\n        }\n        return false;\n    }\n    \n    if (finalStateRequest) {\n        r.hideForNow = false;\n        r.activity.mStartedActivity = false;\n    }\n    \n    try {\n        r.activity.onStateNotSaved();\n        r.activity.mFragments.noteStateNotSaved();\n        checkAndBlockForNetworkAccess();\n        //看到没，满足某些条件情况下是会走 onNewIntent \n        if (r.pendingIntents != null) {\n            deliverNewIntents(r, r.pendingIntents);\n            r.pendingIntents = null;\n        }\n        \n        if (r.pendingResults != null) {\n            deliverResults(r, r.pendingResults, reason);\n            r.pendingResults = null;\n        }\n        \n        //onResume 回调在这里，本次我们暂不关注\n        r.activity.performResume(r.startsNotResumed, reason);\n\n        //把状态设置一下\n        r.state = null;\n        r.persistentState = null;\n        r.setState(ON_RESUME);\n\n        reportTopResumedActivityChanged(r, r.isTopResumedActivity, \"topWhenResuming\");\n    } catch (Exception e) {\n        if (!mInstrumentation.onException(r.activity, e)) {\n            throw new RuntimeException(\"Unable to resume activity \"\n                    + r.intent.getComponent().toShortString() + \": \" + e.toString(), e);\n        }\n    }\n    return true;\n}\n```\n\n```java\n//ActivityThread.java\nprivate void deliverNewIntents(ActivityClientRecord r, List<ReferrerIntent> intents) {\n    final int N = intents.size();\n    for (int i=0; i<N; i++) {\n        ReferrerIntent intent = intents.get(i);\n        intent.setExtrasClassLoader(r.activity.getClassLoader());\n        intent.prepareToEnterProcess(isProtectedComponent(r.activityInfo),\n                r.activity.getAttributionSource());\n        r.activity.mFragments.noteStateNotSaved();\n        //最后还是交给 ‘大管家’ 执行啊，回到了那个熟悉的对象\n        mInstrumentation.callActivityOnNewIntent(r.activity, intent);\n    }\n}\n```\n\n## Instrumentation.callActivityOnNewIntent\n\n```java\n//Instrumentation.java\npublic void callActivityOnNewIntent(Activity activity, ReferrerIntent intent) {\n    final String oldReferrer = activity.mReferrer;\n    try {\n        if (intent != null) {\n            activity.mReferrer = intent.mReferrer;\n        }\n        callActivityOnNewIntent(activity, intent != null ? new Intent(intent) : null);\n    } finally {\n        activity.mReferrer = oldReferrer;\n    }\n}\n```\n\n```java\n//Instrumentation.java\npublic void callActivityOnNewIntent(Activity activity, Intent intent) {\n    //什么？Instrumentation 不熟悉？\n    //那 activity 总该熟悉了吧\n    activity.performNewIntent(intent);\n}\n```\n\n```java\n//Activity.java\nfinal void performNewIntent(@NonNull Intent intent) {\n    mCanEnterPictureInPicture = true;\n    onNewIntent(intent);\n}\n```\n\n```java\n//Activity.java\nprotected void onNewIntent(Intent intent) {\n}\n```\n\n就到这里结束吧，看起来没那么像样。虽然是 `桌面启动`，后来越感觉像是 `Activity 启动`。~~都乱套了~~ ，可是，桌面不也是一个 activity 吗🤔️","source":"_posts/undefined/Android系统桌面启动二.md","raw":"---\ntitle: Android 系统 Home（二）\ncatalog: true\ndate: 2022-09-29 22:58:04\nsubtitle: 启动桌面就是查找并启动 Activity\nheader-img: /img/220928/android_sysserver_bg.png\ntags: AOSP\nsticky: 9\ncategories:\n---\n\n桌面启动类似 Activity 启动，接着上一章节继续查阅启动流程，启动限制、启动条件检查是重点，Activity 生命周期也会逐步回调给外部，这里只是粗略描述启动过程，除此之外还包括窗口的创建、绘制等等。\n\n# startActivityUnchecked\n\n```java\n//ActivityStarter.java\nprivate int startActivityUnchecked(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        TaskFragment inTaskFragment, boolean restrictedBgActivity,\n        NeededUriGrants intentGrants) {\n    int result = START_CANCELED;\n    boolean startResultSuccessful = false;\n    final Task startedActivityRootTask;\n\n    //TRANSIT_OPEN：创建一个之前不存在的新窗口，并且让窗口可见\n    //transitType 还会影响窗口绘制消息延迟时间，默认是 5秒，如果是 chenge 类型延时将缩短到 2 秒\n    //也会把 windowContain 添加到集合中，等待窗口绘制\n    final TransitionController transitionController = r.mTransitionController;\n    Transition newTransition = (!transitionController.isCollecting()\n            && transitionController.getTransitionPlayer() != null)\n            ? transitionController.createTransition(TRANSIT_OPEN) : null;\n    RemoteTransition remoteTransition = r.takeRemoteTransition();\n    if (newTransition != null && remoteTransition != null) {\n        newTransition.setRemoteTransition(remoteTransition);\n    }\n    transitionController.collect(r);\n    final boolean isTransient = r.getOptions() != null && r.getOptions().getTransientLaunch();\n    \n    \n    try {\n        //延迟窗口测量，又使用一个单独的变量 mDeferDepth++，控制测量、绘制次数，避免递归循环\n        mService.deferWindowLayout();\n        //‼️又是一个启动阶段\n        result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,\n                startFlags, doResume, options, inTask, inTaskFragment, restrictedBgActivity,\n                intentGrants);\n        startResultSuccessful = ActivityManager.isStartResultSuccessful(result);\n        final boolean taskAlwaysOnTop = options != null && options.getTaskAlwaysOnTop();\n        // Apply setAlwaysOnTop when starting an Activity is successful regardless of creating\n        // a new Activity or recycling the existing Activity.\n        if (taskAlwaysOnTop && startResultSuccessful) {\n            final Task targetRootTask =\n                    mTargetRootTask != null ? mTargetRootTask : mTargetTask.getRootTask();\n            targetRootTask.setAlwaysOnTop(true);\n        }\n    } finally {\n        Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);\n        //‼️无论成功失败与否，启动解释都应该分发出去\n        startedActivityRootTask = handleStartResult(r, result);\n        //延时窗口测量将被恢复\n        mService.continueWindowLayout();\n        mSupervisor.mUserLeaving = false;\n    }\n\n    postStartActivityProcessing(r, result, startedActivityRootTask);\n\n    return result;\n}\n```\n\n## about TransitionType\n```\n@IntDef(prefix = { \"TRANSIT_\" }, value = {\n        TRANSIT_NONE,\n        TRANSIT_OPEN,                 //创建一个新的窗口，并且使其可见\n        TRANSIT_CLOSE,                //可见的窗口被关闭（finished 或 destroyed）\n        TRANSIT_TO_FRONT,             //不可见的窗口将变为可见\n        TRANSIT_TO_BACK,              //可见的窗口变为不可见\n        TRANSIT_RELAUNCH,\n        TRANSIT_CHANGE,               //可见窗口发生改变（比如屏幕方向、大小改变）\n        TRANSIT_KEYGUARD_GOING_AWAY,  //（已废弃）\n        TRANSIT_KEYGUARD_OCCLUDE,     //键盘锁定\n        TRANSIT_KEYGUARD_UNOCCLUDE,   //键盘解锁\n        TRANSIT_PIP,                  //画中画\n        TRANSIT_WAKE,                 //（正在打开？）\n        TRANSIT_FIRST_CUSTOM\n})\n@Retention(RetentionPolicy.SOURCE)\n@interface TransitionType {}\n```\n\n# startActivityInner\n\n```java\n//ActivityStarter.java\nint startActivityInner(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        TaskFragment inTaskFragment, boolean restrictedBgActivity,\n        NeededUriGrants intentGrants) {\n    setInitialState(r, options, inTask, inTaskFragment, doResume, startFlags, sourceRecord,\n            voiceSession, voiceInteractor, restrictedBgActivity);\n\n    //确定 activity 所启动的任务栈应该是 NEW_TASK 还是在已有的任务栈启动\n    computeLaunchingTaskFlags();\n    computeSourceRootTask();\n    mIntent.setFlags(mLaunchFlags);\n\n    //如果请求已经开始，应该冻结最近任务列表，等待下次更新\n    final Task prevTopTask = mPreferredTaskDisplayArea.getFocusedRootTask();\n    final Task reusedTask = getReusableTask();\n    if (mOptions != null && mOptions.freezeRecentTasksReordering()\n            && mSupervisor.mRecentTasks.isCallerRecents(r.launchedFromUid)\n            && !mSupervisor.mRecentTasks.isFreezeTaskListReorderingSet()) {\n        mFrozeTaskList = true;\n        mSupervisor.mRecentTasks.setFreezeTaskListReordering();\n    }\n\n    //计算是否有符合条件的任务栈可以复用，否则应该创建新的任务栈\n    final Task targetTask = reusedTask != null ? reusedTask : computeTargetTask();\n    final boolean newTask = targetTask == null;\n    mTargetTask = targetTask;\n\n    //确定启动参数，比如 windowType\n    computeLaunchParams(r, sourceRecord, targetTask);\n\n    //又是一番启动限制，在任务栈层面限制启动🚫\n    int startResult = isAllowedToStart(r, newTask, targetTask);\n    if (startResult != START_SUCCESS) {\n        return startResult;\n    }\n\n    //复用任务栈\n    final ActivityRecord targetTaskTop = newTask\n            ? null : targetTask.getTopNonFinishingActivity();\n    if (targetTaskTop != null) {\n        /*\n            1、resumeTargetRootTaskIfNeeded\n            2、mRootWindowContainer.resumeFocusedTasksTopActivities\n        */\n        startResult = recycleTask(targetTask, targetTaskTop, reusedTask, intentGrants);\n        if (startResult != START_SUCCESS) {\n            return startResult;\n        }\n    } else {\n        mAddingToTask = true;\n    }\n\n    /*\n        1、如果启动的 activity 是在任务栈中已存在，则只需启动一次，并调用 activity 的 onNewIntent 方法即可\n        2、回调方法 deliverNewIntent(top, intentGrants); ActivityRecorder#deliverNewIntentLocked\n        3、mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), appToken,\n        NewIntentItem.obtain(ar, mState == RESUMED));\n    */\n    final Task topRootTask = mPreferredTaskDisplayArea.getFocusedRootTask();\n    if (topRootTask != null) {\n        startResult = deliverToCurrentTopIfNeeded(topRootTask, intentGrants);\n        if (startResult != START_SUCCESS) {\n            return startResult;\n        }\n    }\n\n    //还是一样，如果不存在则创建，如果存在则复用\n    if (mTargetRootTask == null) {\n        mTargetRootTask = getLaunchRootTask(mStartActivity, mLaunchFlags, targetTask, mOptions);\n    }\n    if (newTask) {\n        final Task taskToAffiliate = (mLaunchTaskBehind && mSourceRecord != null)\n                ? mSourceRecord.getTask() : null;\n        setNewTask(taskToAffiliate);\n    } else if (mAddingToTask) {\n        addOrReparentStartingActivity(targetTask, \"adding to task\");\n    }\n\n    //启动的目标任务栈有了，直接看 activity 启动\n    final Task startedTask = mStartActivity.getTask();\n    final boolean isTaskSwitch = startedTask != prevTopTask && !startedTask.isEmbedded();\n    \n    //启动\n    mTargetRootTask.startActivityLocked(mStartActivity,\n            topRootTask != null ? topRootTask.getTopNonFinishingActivity() : null, newTask,\n            isTaskSwitch, mOptions, sourceRecord);\n    if (mDoResume) {\n        final ActivityRecord topTaskActivity = startedTask.topRunningActivityLocked();\n        //如果本次启动的 activity 所在任务栈中并没有获得焦点，并且当前启动的不是本次想启动的，也要确保它显示（它可能是更重要的 activity 抢先显示呢）\n        if (!mTargetRootTask.isTopActivityFocusable()\n                || (topTaskActivity != null && topTaskActivity.isTaskOverlay()\n                && mStartActivity != topTaskActivity)) {\n                \n            mTargetRootTask.ensureActivitiesVisible(null /* starting */,\n            mTargetRootTask.mDisplayContent.executeAppTransition();\n        } else {\n            //如果本次启动的 activity 所在任务栈中并已获得焦点，如果该任务栈没有显示在最前则 moveToFront\n            if (mTargetRootTask.isTopActivityFocusable()\n                    && !mRootWindowContainer.isTopDisplayFocusedRootTask(mTargetRootTask)) {\n                mTargetRootTask.moveToFront(\"startActivityInner\");\n            }\n            \n            //这里和上述 recycleTask 相似，最终也会执行到这个方法。（把 activity 转移为可见状态）\n            mRootWindowContainer.resumeFocusedTasksTopActivities(\n                    mTargetRootTask, mStartActivity, mOptions, mTransientLaunch);\n        }\n    }\n    \n    //启动完毕需要更新最近任务栈等\n    mRootWindowContainer.updateUserRootTask(mStartActivity.mUserId, mTargetRootTask);\n    mSupervisor.mRecentTasks.add(startedTask);\n    mSupervisor.handleNonResizableTaskIfNeeded(startedTask,\n            mPreferredWindowingMode, mPreferredTaskDisplayArea, mTargetRootTask);\n\n    return START_SUCCESS;\n}\n```\n\n## isAllowedToStart\n\n检查 activity 是否可以在已有的任务栈或者新的任务栈中启动。\n\n```java\n//ActivityStarter.java\nprivate int isAllowedToStart(ActivityRecord r, boolean newTask, Task targetTask) {\n    //❌1、没有包名是不允许的（每个 activity 都有所属的包）\n    if (mStartActivity.packageName == null) {\n        if (mStartActivity.resultTo != null) {\n            mStartActivity.resultTo.sendResult(INVALID_UID, mStartActivity.resultWho,\n                    mStartActivity.requestCode, RESULT_CANCELED,\n                    null /* data */, null /* dataGrants */);\n        }\n        ActivityOptions.abort(mOptions);\n        return START_CLASS_NOT_FOUND;\n    }\n\n    /*\n        1、应用处于 instrument 状态时，应该取消启动\n        2、如果是 VR 显示ID或者默认显示ID，允许启动\n        3、launchMode != SINGLE_TASK && launchMode != SINGLE_INSTANCE 属于已有启动状态，应该取消启动\n    */\n    if (r.isActivityTypeHome()) {\n        if (!mRootWindowContainer.canStartHomeOnDisplayArea(r.info, mPreferredTaskDisplayArea,\n                true /* allowInstrumenting */)) {\n            return START_CANCELED;\n        }\n    }\n\n    /*\n        1、❌如果是新的任务栈，从后台启动的 activity 是不允许的\n        2、❌如果调用者 uid 不是当前程序（当前任务栈），启动时不允许的\n        3、❌如果是需要创建新的任务栈，从后台启动的 activity 是不允许的\n    */\n    boolean blockBalInTask = (newTask\n            || !targetTask.isUidPresent(mCallingUid)\n            || (LAUNCH_SINGLE_INSTANCE == mLaunchMode && targetTask.inPinnedWindowingMode()));\n    // mRestrictedBgActivity：严格把控 activity 的启动🚫（该条件前一篇有提到）\n    if (mRestrictedBgActivity && blockBalInTask\n            && handleBackgroundActivityAbort(mStartActivity)) {\n        return START_ABORTED;\n    }\n\n    //还是在不断限制启动，条件苛刻啊\n    final boolean isNewClearTask =\n            (mLaunchFlags & (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))\n                    == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK);\n    if (!newTask) {\n        if (mService.getLockTaskController().isLockTaskModeViolation(targetTask,\n                isNewClearTask)) {\n            return START_RETURN_LOCK_TASK_MODE_VIOLATION;\n        }\n    } else {\n        if (mService.getLockTaskController().isNewTaskLockTaskModeViolation(mStartActivity)) {\n            return START_RETURN_LOCK_TASK_MODE_VIOLATION;\n        }\n    }\n\n    if (mInTaskFragment != null && !canEmbedActivity(mInTaskFragment, r, newTask, targetTask)) {\n        return START_PERMISSION_DENIED;\n    }\n\n    //✅否则，是启动是允许的\n    return START_SUCCESS;\n}\n```\n\n## canEmbedActivity\n\n是否可以嵌入？activity 嵌入？\n\n```java\n//ActivityStarter.java\nprivate boolean canEmbedActivity(@NonNull TaskFragment taskFragment, ActivityRecord starting,\n        boolean newTask, Task targetTask) {\n    final Task hostTask = taskFragment.getTask();\n    if (hostTask == null) {\n        return false;\n    }\n\n    //✅如果是系统应用，是允许嵌入启动的\n    final int hostUid = hostTask.effectiveUid;\n    if (UserHandle.getAppId(hostUid) == Process.SYSTEM_UID) {\n        return true;\n    }\n\n    //❌如果不是当前应用进程启动，是不允许的\n    if (hostUid != starting.getUid()) {\n        return false;\n    }\n\n    //❌如果不是同一个任务栈（主任务栈）中启动，也是不允许的\n    return !newTask && (targetTask == null || targetTask == hostTask);\n}\n```\n\n# startActivityLocked\n```java\n//Task.java\nvoid startActivityLocked(ActivityRecord r, @Nullable ActivityRecord focusedTopActivity,\n        boolean newTask, boolean isTaskSwitch, ActivityOptions options,\n        @Nullable ActivityRecord sourceRecord) {\n    Task rTask = r.getTask();\n    \n    final boolean allowMoveToFront = options == null || !options.getAvoidMoveToFront();\n    final boolean isOrhasTask = rTask == this || hasChild(rTask);\n    \n    //启动的 activity 不能是阻塞的，否则将抛出异常\n    Task task = null;\n    if (!newTask && isOrhasTask) {\n        final ActivityRecord occludingActivity = getOccludingActivityAbove(r);\n        if (occludingActivity != null) {\n            rTask.positionChildAtTop(r);\n            ActivityOptions.abort(options);\n            return;\n        }\n    }\n\n    //允许移动到前台，并且不是桌面程序、是最近任务列表任务栈、任务栈已有activity\n    if ((!isHomeOrRecentsRootTask() || hasActivity()) && allowMoveToFront) {\n        boolean doShow = true;\n        if (newTask) {\n            if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {\n                resetTaskIfNeeded(r, r);\n                doShow = topRunningNonDelayedActivityLocked(null) == r;\n            }\n        } else if (options != null && options.getAnimationType()\n                == ActivityOptions.ANIM_SCENE_TRANSITION) {\n            doShow = false;\n        }\n        if (r.mLaunchTaskBehind) {\n            r.setVisibility(true);\n            ensureActivitiesVisible(null, 0, !PRESERVE_WINDOWS);\n            mDisplayContent.executeAppTransition();\n        } else if (SHOW_APP_STARTING_PREVIEW && doShow) {\n            Task baseTask = r.getTask();\n            //‼️启动\n            final ActivityRecord prev = baseTask.getActivity(\n                    a -> a.mStartingData != null && a.showToCurrentUser());\n            r.showStartingWindow(prev, newTask, isTaskSwitch,\n                    true /* startActivity */, sourceRecord);\n        }\n    } else {\n        //第一个启动的 activity 无需花里胡哨的动画\n        ActivityOptions.abort(options);\n    }\n}\n```\n\n# showStartingWindow\n```java\n//ActivityRecord.java\nvoid showStartingWindow(ActivityRecord prev, boolean newTask, boolean taskSwitch,\n        boolean startActivity, ActivityRecord sourceRecord) {\n    //覆盖时，不会显示\n    if (mTaskOverlay) {\n        return;\n    }\n    \n    //共享元素转换时，不限制（共享元素：Android 动画部分）\n    if (mPendingOptions != null\n            && mPendingOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION) {\n        return;\n    }\n\n    final CompatibilityInfo compatInfo =\n            mAtmService.compatibilityInfoForPackageLocked(info.applicationInfo);\n\n    //是否使用启动页样式\n    mSplashScreenStyleEmpty = shouldUseEmptySplashScreen(sourceRecord, startActivity);\n\n    /*\n        1、我们这就是启动 activity，所以 startActivit = true，那么将会获取启动主题\n        （也就是 Android 高版本每个应用启动都会显示的开屏页？）\n        2、开屏主题是可以重写的，首先尝试获取是否重新了开屏主题，将获取主题资源名称\n        3、如果没有重写，将会通过 ATMS 根据包名和用户ID获取主题资源名称\n        4、如果获取到开屏主题资源名称，那么将根据包名通过 createPackageContext 创建上下文，\n           接着根据上下文和主题名称获取资源ID（0 表示使用默认的开屏主题）\n    */\n    final int splashScreenTheme = startActivity ? getSplashscreenTheme() : 0;\n    \n    //这里会评估应该使用 theme 主题还是 splashScreenTheme 主题\n    final int resolvedTheme = evaluateStartingWindowTheme(prev, packageName, theme,\n            splashScreenTheme);\n\n\n    final boolean activityCreated =\n            mState.ordinal() >= STARTED.ordinal() && mState.ordinal() <= STOPPED.ordinal();\n    //如果不是新的任务栈，activity 也还没创建，那么本次是热启动\n    final boolean newSingleActivity = !newTask && !activityCreated\n            && task.getActivity((r) -> !r.finishing && r != this) == null;\n\n    //‼️启动\n    final boolean scheduled = addStartingWindow(packageName, resolvedTheme,\n            compatInfo, nonLocalizedLabel, labelRes, icon, logo, windowFlags,\n            prev, newTask || newSingleActivity, taskSwitch, isProcessRunning(),\n            allowTaskSnapshot(), activityCreated, mSplashScreenStyleEmpty);\n}\n```\n\n# addStartingWindow\n\n```java\n//ActivityRecord.java\nboolean addStartingWindow(String pkg, int resolvedTheme, CompatibilityInfo compatInfo,\n        CharSequence nonLocalizedLabel, int labelRes, int icon, int logo, int windowFlags,\n        ActivityRecord from, boolean newTask, boolean taskSwitch, boolean processRunning,\n        boolean allowTaskSnapshot, boolean activityCreated, boolean useEmpty) {\n    //窗口被冻结，不能显示\n    if (!okToDisplay()) {\n        return false;\n    }\n\n    if (mStartingData != null) {\n        return false;\n    }\n\n    //已有窗口在显示，不能再显示了\n    final WindowState mainWin = findMainWindow();\n    if (mainWin != null && mainWin.mWinAnimator.getShown()) {\n        return false;\n    }\n\n    final TaskSnapshot snapshot =\n            mWmService.mTaskSnapshotController.getSnapshot(task.mTaskId, task.mUserId,\n                    false /* restoreFromDisk */, false /* isLowResolution */);\n                    \n     //STARTING_WINDOW_TYPE_NONE、STARTING_WINDOW_TYPE_SNAPSHOT、STARTING_WINDOW_TYPE_SPLASH_SCREEN\n    final int type = getStartingWindowType(newTask, taskSwitch, processRunning,\n            allowTaskSnapshot, activityCreated, snapshot);\n\n    //逐渐的，这里似乎更多的是和 window 窗口相关（麻了麻了，我只想看 activity 相关，细节太难了）\n    if (type == STARTING_WINDOW_TYPE_SNAPSHOT) {\n        if (isActivityTypeHome()) {\n            mWmService.mTaskSnapshotController.removeSnapshotCache(task.mTaskId);\n            if ((mDisplayContent.mAppTransition.getTransitFlags()\n                    & WindowManager.TRANSIT_FLAG_KEYGUARD_GOING_AWAY_NO_ANIMATION) == 0) {\n                return false;\n            }\n        }\n        \n        //【分支一】\n        return createSnapshot(snapshot, typeParameter);\n    }\n\n\n    ProtoLog.v(WM_DEBUG_STARTING_WINDOW, \"Creating SplashScreenStartingData\");\n    mStartingData = new SplashScreenStartingData(mWmService, pkg,\n            resolvedTheme, compatInfo, nonLocalizedLabel, labelRes, icon, logo, windowFlags,\n            getMergedOverrideConfiguration(), typeParameter);\n            \n    //【分支二】\n    scheduleAddStartingWindow();\n    return true;\n}\n```\n\n上述无论是**分支一、分支二**，都会走到同一个方法`scheduleAddStartingWindow`。\n\n# scheduleAddStartingWindow\n\n```java\n//ActivityRecord.java\nvoid scheduleAddStartingWindow() {\n    if (StartingSurfaceController.DEBUG_ENABLE_SHELL_DRAWER) {\n        mAddStartingWindow.run();\n    } else {\n        //把消息添加到队列最前面优先处理？\n        if (!mWmService.mAnimationHandler.hasCallbacks(mAddStartingWindow)) {\n            //mWmService：WindowManagerService\n            //mAnimationHandler：final Handler mAnimationHandler = new Handler(AnimationThread.getHandler().getLooper());\n            mWmService.mAnimationHandler.postAtFrontOfQueue(mAddStartingWindow);\n        }\n    }\n}\n```\n\n这里的事情和 window 窗口关系密切，surface 看着绘制相关。\n\n```java\n//ActivityRecord.java\n\nprivate final AddStartingWindow mAddStartingWindow = new AddStartingWindow();\n\nprivate class AddStartingWindow implements Runnable {\n\n    @Override\n    public void run() {\n        //略略略，看不出它干了啥\n    }\n}\n```\n\n窗口相关的到此为止吧，再进入看不懂了。我更关注的是 activity 声明周期回调，可迟迟没有看见💔\n\n---\n\n那么这我们姑且他成功地把 activity 添加到 window 上，现在是时候回头看看**启动成功后做了些什么？** 所以我们回到 `ActivityStarter.java`，自然还是回到这里 ~~（从哪来，回哪去吧）~~\n\n\n# The callback [onNewIntent]\n\n这里讲 `Activity onNewIntent(Intent intent)` 生命周期回调，其实像 onCreat、onResume 等也是相似的，其他的不重复。\n\n## deliverToCurrentTopIfNeeded\n\n```java\n//ActivityStarter.java\nint startActivityInner(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, Task inTask,\n        TaskFragment inTaskFragment, boolean restrictedBgActivity,\n        NeededUriGrants intentGrants) {\n        \n\n    //如果正在启动的 activity 和任务栈顶部的 activity 相同\n    final Task topRootTask = mPreferredTaskDisplayArea.getFocusedRootTask();\n    if (topRootTask != null) {\n        //顶部是同一个 activity，无需重复创建，启动一次就可以，也就是我们知道的应该回调 onNewIntent\n        startResult = deliverToCurrentTopIfNeeded(topRootTask, intentGrants);\n        if (startResult != START_SUCCESS) {\n            return startResult;\n        }\n    }       \n}\n```\n\n## deliverToCurrentTopIfNeeded\n\n```\nprivate int deliverToCurrentTopIfNeeded(Task topRootTask, NeededUriGrants intentGrants) {\n    //获取当前栈顶 activity\n    final ActivityRecord top = topRootTask.topRunningNonDelayedActivityLocked(mNotTop);\n    \n    //activity 相同、启动用户相同、栈顶复用、启动目标\n    final boolean dontStart = top != null\n            && top.mActivityComponent.equals(mStartActivity.mActivityComponent)\n            && top.mUserId == mStartActivity.mUserId\n            && top.attachedToProcess()\n            && ((mLaunchFlags & FLAG_ACTIVITY_SINGLE_TOP) != 0\n            || LAUNCH_SINGLE_TOP == mLaunchMode)\n            && (!top.isActivityTypeHome() || top.getDisplayArea() == mPreferredTaskDisplayArea);\n    if (!dontStart) {\n        return START_SUCCESS;\n    }\n\n    top.getTaskFragment().clearLastPausedActivity();\n    //activity 显示，后面看\n    if (mDoResume) {\n        mRootWindowContainer.resumeFocusedTasksTopActivities();\n    }\n    \n    //这里会进入 ActivitRecord\n    deliverNewIntent(top, intentGrants);\n    return START_DELIVERED_TO_TOP;\n}\n```\n\n## deliverNewIntentLocked\n\n```java\n//ActivityRecord.java\nfinal void deliverNewIntentLocked(int callingUid, Intent intent, NeededUriGrants intentGrants,\n\n    if ((mState == RESUMED || mState == PAUSED || isTopActivityWhileSleeping)\n            && attachedToProcess()) {\n        try {\n            ArrayList<ReferrerIntent> ar = new ArrayList<>(1);\n            ar.add(rintent);\n            //开始调用声明周期相关，通过发送一个客户端事务 ClientTransaction\n            //getLifecycleManager -> ClientLifecycleManager 声明周期相关回调都会通过它\n            mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), appToken,\n                    NewIntentItem.obtain(ar, mState == RESUMED));\n            unsent = false;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Exception thrown sending new intent to \" + this, e);\n        } catch (NullPointerException e) {\n            Slog.w(TAG, \"Exception thrown sending new intent to \" + this, e);\n        }\n    }\n    \n    if (unsent) {\n        addNewIntentLocked(rintent);\n    }\n}\n```\n\n\n```java\n//ClientLfecycleManager.java\nvoid scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n    //创建一个事物之后开始执行，关键是这个是事务（binder)事务传递数据的，或则事务发送后将在哪里处理事务？？？\n    final IApplicationThread client = transaction.getClient();\n    transaction.schedule();\n    if (!(client instanceof Binder)) {\n        transaction.recycle();\n    }\n}\n```\n\n## ClientTransaction.schedule\n\n`ClientTransaction`: A container that holds a sequence of messages, which may be sent to a client. This includes a list of callbacks and a final lifecycle state.\n\n\n```java\n//ClientTransaction.java\n\n/*\n    1、IApplicationThread 这是一个标准的 aidl 接口，接口实现自然是 IApplicationThread.Sub\n    2、实现类在 ActivityThread，private class ApplicationThread extends IApplicationThread.Stub \n*/\nprivate IApplicationThread mClient;\n\n\n/**\n * Schedule the transaction after it was initialized. It will be send to client and all its\n * individual parts will be applied in the following sequence:\n * 1. The client calls {@link #preExecute(ClientTransactionHandler)}, which triggers all work\n *    that needs to be done before actually scheduling the transaction for callbacks and\n *    lifecycle state request.\n * 2. The transaction message is scheduled.\n * 3. The client calls {@link TransactionExecutor#execute(ClientTransaction)}, which executes\n *    all callbacks and necessary lifecycle transitions.\n */\npublic void schedule() throws RemoteException \n    mClient.scheduleTransaction(this);\n}\n```\n\n\n## ApplicationThread.scheduleTransaction\n\n```java\n//ActivityThread.java\nprivate class ApplicationThread extends IApplicationThread.Stub{\n\n    @Override\n    public void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\n        //在当前类文件搜索没看到方法定义，差点怀疑人生；然后看看 ActivitThread 还有父类，那方法定义就在父类了\n        ActivityThread.this.scheduleTransaction(transaction);\n    }\n}\n```\n\n```java\npublic final class ActivityThread extends ClientTransactionHandler\n        implements ActivityThreadInternal {  \n}\n```\n\n```java\npublic abstract class ClientTransactionHandler {\n\n    void scheduleTransaction(ClientTransaction transaction) {\n        transaction.preExecute(this);\n        //发送消息，那者就明确很多了\n        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);\n    }\n```\n\n```java\n//ActivityThread.java\nclass H extends Handler {\n    \n    public static final int EXECUTE_TRANSACTION = 159;\n\n    public void handleMessage(Message msg) {\n        switch (msg.what) {\n            case EXECUTE_TRANSACTION:\n                //回头看看 schedule 的注释，下一步应该会到哪里去执行，其实别人是写得很清楚的（熟能生巧，初看确实一头雾水）\n                final ClientTransaction transaction = (ClientTransaction) msg.obj;\n                mTransactionExecutor.execute(transaction);\n                if (isSystem()) {\n                    transaction.recycle();\n                }\n            break;\n        }\n     }\n}\n```\n\n## TransactionExecutor.excute\n\n```java\n//TransactionExecutor.java\npublic void execute(ClientTransaction transaction) {\n    if (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + \"Start resolving transaction\");\n\n    //似乎每一个 activity 都有一个 token，还不清楚从何而来\n    //初学 Android 时，关于 activity token 的报错估计你也遇到过\n    final IBinder token = transaction.getActivityToken();\n    if (token != null) {\n        final Map<IBinder, ClientTransactionItem> activitiesToBeDestroyed =\n                mTransactionHandler.getActivitiesToBeDestroyed();\n        final ClientTransactionItem destroyItem = activitiesToBeDestroyed.get(token);\n        if (destroyItem != null) {\n            if (transaction.getLifecycleStateRequest() == destroyItem) {\n                activitiesToBeDestroyed.remove(token);\n            }\n            if (mTransactionHandler.getActivityClient(token) == null) {\n                return;\n            }\n        }\n    }\n    \n    //这个暂不关注，重点看看下面的生命周期回调吧\n    executeCallbacks(transaction);\n    \n    /*\n        1、cycleToPath(r, lifecycleItem.getTargetState(), true , transaction);  -> performLifecycleSequence\n        \n        //看了一圈，着两个实现应该是在子类\n        2、lifecycleItem.execute(mTransactionHandler, token, mPendingActions);\n        3、lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);\n    */\n    executeLifecycleState(transaction);\n    mPendingActions.clear();\n    if (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + \"End resolving transaction\");\n}\n```\n\n\n```java\n//TransactionExecutor.java\nprivate void performLifecycleSequence(ActivityClientRecord r, IntArray path,\n        ClientTransaction transaction) {\n    final int size = path.size();\n    for (int i = 0, state; i < size; i++) {\n        state = path.get(i);\n        \n        //是吧，几个生命周期的回调都有；那就奇怪了怎么没有 onNewIntent，他不算是生命周期函数吗？\n        //咚咚咚咚（敲黑板～）\n        /*\n            1、onNewIntent 不是生命周期回调方法，只是声明周期回调过程中可能被执行的一个方法\n            2、如果满足某些条件，根据经验我们知道这个方法在 onResume 之前会执行\n            3、那么我们猜测（我看了代码再来猜测的😏），该方法的回调有没有可能在 handleResumeActivity 里面执行？那就去看看吧！\n        */\n        switch (state) {\n            case ON_CREATE:\n                mTransactionHandler.handleLaunchActivity(r, mPendingActions,\n                        null /* customIntent */);\n                break;\n            case ON_START:\n                mTransactionHandler.handleStartActivity(r, mPendingActions,\n                        null /* activityOptions */);\n                break;\n            case ON_RESUME:\n                mTransactionHandler.handleResumeActivity(r, false /* finalStateRequest */,\n                        r.isForward, \"LIFECYCLER_RESUME_ACTIVITY\");\n                break;\n            case ON_PAUSE:\n                mTransactionHandler.handlePauseActivity(r, false /* finished */,\n                        false /* userLeaving */, 0 /* configChanges */, mPendingActions,\n                        \"LIFECYCLER_PAUSE_ACTIVITY\");\n                break;\n            case ON_STOP:\n                mTransactionHandler.handleStopActivity(r, 0 /* configChanges */,\n                        mPendingActions, false /* finalStateRequest */,\n                        \"LIFECYCLER_STOP_ACTIVITY\");\n                break;\n            case ON_DESTROY:\n                mTransactionHandler.handleDestroyActivity(r, false /* finishing */,\n                        0 /* configChanges */, false /* getNonConfigInstance */,\n                        \"performLifecycleSequence. cycling to:\" + path.get(size - 1));\n                break;\n            case ON_RESTART:\n                mTransactionHandler.performRestartActivity(r, false /* start */);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unexpected lifecycle state: \" + state);\n        }\n    }\n}\n```\n\nClientTransactionHandler 是个抽象方法，所以声明周期回调还得找 ClientTransactionHandler 的实现类 `ActivitThread`。\n\n绕一圈又回来，这这这～～～\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69c055d008d74b45bd1205352739f8b9~tplv-k3u1fbpfcp-watermark.image?)\n\n\n## ActivitThread.performResumeActivity\n\n```java\n//ActivityThread.java\npublic boolean performResumeActivity(ActivityClientRecord r, boolean finalStateRequest,\n        String reason) {\n\n    if (r.activity.mFinished) {\n        return false;\n    }\n    \n    //已经 resumed 就不重复了\n    if (r.getLifecycleState() == ON_RESUME) {\n        if (!finalStateRequest) {\n            final RuntimeException e = new IllegalStateException(\n                    \"Trying to resume activity which is already resumed\");\n        }\n        return false;\n    }\n    \n    if (finalStateRequest) {\n        r.hideForNow = false;\n        r.activity.mStartedActivity = false;\n    }\n    \n    try {\n        r.activity.onStateNotSaved();\n        r.activity.mFragments.noteStateNotSaved();\n        checkAndBlockForNetworkAccess();\n        //看到没，满足某些条件情况下是会走 onNewIntent \n        if (r.pendingIntents != null) {\n            deliverNewIntents(r, r.pendingIntents);\n            r.pendingIntents = null;\n        }\n        \n        if (r.pendingResults != null) {\n            deliverResults(r, r.pendingResults, reason);\n            r.pendingResults = null;\n        }\n        \n        //onResume 回调在这里，本次我们暂不关注\n        r.activity.performResume(r.startsNotResumed, reason);\n\n        //把状态设置一下\n        r.state = null;\n        r.persistentState = null;\n        r.setState(ON_RESUME);\n\n        reportTopResumedActivityChanged(r, r.isTopResumedActivity, \"topWhenResuming\");\n    } catch (Exception e) {\n        if (!mInstrumentation.onException(r.activity, e)) {\n            throw new RuntimeException(\"Unable to resume activity \"\n                    + r.intent.getComponent().toShortString() + \": \" + e.toString(), e);\n        }\n    }\n    return true;\n}\n```\n\n```java\n//ActivityThread.java\nprivate void deliverNewIntents(ActivityClientRecord r, List<ReferrerIntent> intents) {\n    final int N = intents.size();\n    for (int i=0; i<N; i++) {\n        ReferrerIntent intent = intents.get(i);\n        intent.setExtrasClassLoader(r.activity.getClassLoader());\n        intent.prepareToEnterProcess(isProtectedComponent(r.activityInfo),\n                r.activity.getAttributionSource());\n        r.activity.mFragments.noteStateNotSaved();\n        //最后还是交给 ‘大管家’ 执行啊，回到了那个熟悉的对象\n        mInstrumentation.callActivityOnNewIntent(r.activity, intent);\n    }\n}\n```\n\n## Instrumentation.callActivityOnNewIntent\n\n```java\n//Instrumentation.java\npublic void callActivityOnNewIntent(Activity activity, ReferrerIntent intent) {\n    final String oldReferrer = activity.mReferrer;\n    try {\n        if (intent != null) {\n            activity.mReferrer = intent.mReferrer;\n        }\n        callActivityOnNewIntent(activity, intent != null ? new Intent(intent) : null);\n    } finally {\n        activity.mReferrer = oldReferrer;\n    }\n}\n```\n\n```java\n//Instrumentation.java\npublic void callActivityOnNewIntent(Activity activity, Intent intent) {\n    //什么？Instrumentation 不熟悉？\n    //那 activity 总该熟悉了吧\n    activity.performNewIntent(intent);\n}\n```\n\n```java\n//Activity.java\nfinal void performNewIntent(@NonNull Intent intent) {\n    mCanEnterPictureInPicture = true;\n    onNewIntent(intent);\n}\n```\n\n```java\n//Activity.java\nprotected void onNewIntent(Intent intent) {\n}\n```\n\n就到这里结束吧，看起来没那么像样。虽然是 `桌面启动`，后来越感觉像是 `Activity 启动`。~~都乱套了~~ ，可是，桌面不也是一个 activity 吗🤔️","slug":"Android系统桌面启动二","published":1,"lang":"undefined","updated":"2022-09-29T14:58:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q8000i7tqpbz1odzy2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>桌面启动类似 Activity 启动，接着上一章节继续查阅启动流程，启动限制、启动条件检查是重点，Activity 生命周期也会逐步回调给外部，这里只是粗略描述启动过程，除此之外还包括窗口的创建、绘制等等。</p>\n<h1>startActivityUnchecked</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityUnchecked</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskFragment inTaskFragment, <span class=\"keyword\">boolean</span> restrictedBgActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        NeededUriGrants intentGrants)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = START_CANCELED;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> startResultSuccessful = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task startedActivityRootTask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//TRANSIT_OPEN：创建一个之前不存在的新窗口，并且让窗口可见</span></span><br><span class=\"line\">    <span class=\"comment\">//transitType 还会影响窗口绘制消息延迟时间，默认是 5秒，如果是 chenge 类型延时将缩短到 2 秒</span></span><br><span class=\"line\">    <span class=\"comment\">//也会把 windowContain 添加到集合中，等待窗口绘制</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> TransitionController transitionController = r.mTransitionController;</span><br><span class=\"line\">    Transition newTransition = (!transitionController.isCollecting()</span><br><span class=\"line\">            &amp;&amp; transitionController.getTransitionPlayer() != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            ? transitionController.createTransition(TRANSIT_OPEN) : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    RemoteTransition remoteTransition = r.takeRemoteTransition();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newTransition != <span class=\"keyword\">null</span> &amp;&amp; remoteTransition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        newTransition.setRemoteTransition(remoteTransition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    transitionController.collect(r);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isTransient = r.getOptions() != <span class=\"keyword\">null</span> &amp;&amp; r.getOptions().getTransientLaunch();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//延迟窗口测量，又使用一个单独的变量 mDeferDepth++，控制测量、绘制次数，避免递归循环</span></span><br><span class=\"line\">        mService.deferWindowLayout();</span><br><span class=\"line\">        <span class=\"comment\">//‼️又是一个启动阶段</span></span><br><span class=\"line\">        result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class=\"line\">                startFlags, doResume, options, inTask, inTaskFragment, restrictedBgActivity,</span><br><span class=\"line\">                intentGrants);</span><br><span class=\"line\">        startResultSuccessful = ActivityManager.isStartResultSuccessful(result);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> taskAlwaysOnTop = options != <span class=\"keyword\">null</span> &amp;&amp; options.getTaskAlwaysOnTop();</span><br><span class=\"line\">        <span class=\"comment\">// Apply setAlwaysOnTop when starting an Activity is successful regardless of creating</span></span><br><span class=\"line\">        <span class=\"comment\">// a new Activity or recycling the existing Activity.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (taskAlwaysOnTop &amp;&amp; startResultSuccessful) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Task targetRootTask =</span><br><span class=\"line\">                    mTargetRootTask != <span class=\"keyword\">null</span> ? mTargetRootTask : mTargetTask.getRootTask();</span><br><span class=\"line\">            targetRootTask.setAlwaysOnTop(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);</span><br><span class=\"line\">        <span class=\"comment\">//‼️无论成功失败与否，启动解释都应该分发出去</span></span><br><span class=\"line\">        startedActivityRootTask = handleStartResult(r, result);</span><br><span class=\"line\">        <span class=\"comment\">//延时窗口测量将被恢复</span></span><br><span class=\"line\">        mService.continueWindowLayout();</span><br><span class=\"line\">        mSupervisor.mUserLeaving = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    postStartActivityProcessing(r, result, startedActivityRootTask);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"about-TransitionType\">about TransitionType</h2>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@IntDef</span>(prefix = &#123; <span class=\"string\">&quot;TRANSIT_&quot;</span> &#125;, value = &#123;</span><br><span class=\"line\">        TRANSIT_NONE,</span><br><span class=\"line\">        TRANSIT_OPEN,                 <span class=\"comment\">//创建一个新的窗口，并且使其可见</span></span><br><span class=\"line\">        TRANSIT_CLOSE,                <span class=\"comment\">//可见的窗口被关闭（finished 或 destroyed）</span></span><br><span class=\"line\">        TRANSIT_TO_FRONT,             <span class=\"comment\">//不可见的窗口将变为可见</span></span><br><span class=\"line\">        TRANSIT_TO_BACK,              <span class=\"comment\">//可见的窗口变为不可见</span></span><br><span class=\"line\">        TRANSIT_RELAUNCH,</span><br><span class=\"line\">        TRANSIT_CHANGE,               <span class=\"comment\">//可见窗口发生改变（比如屏幕方向、大小改变）</span></span><br><span class=\"line\">        TRANSIT_KEYGUARD_GOING_AWAY,  <span class=\"comment\">//（已废弃）</span></span><br><span class=\"line\">        TRANSIT_KEYGUARD_OCCLUDE,     <span class=\"comment\">//键盘锁定</span></span><br><span class=\"line\">        TRANSIT_KEYGUARD_UNOCCLUDE,   <span class=\"comment\">//键盘解锁</span></span><br><span class=\"line\">        TRANSIT_PIP,                  <span class=\"comment\">//画中画</span></span><br><span class=\"line\">        TRANSIT_WAKE,                 <span class=\"comment\">//（正在打开？）</span></span><br><span class=\"line\">        TRANSIT_FIRST_CUSTOM</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable\">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class=\"line\"><span class=\"variable\">@interface</span> TransitionType &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h1>startActivityInner</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">startActivityInner</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskFragment inTaskFragment, <span class=\"keyword\">boolean</span> restrictedBgActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        NeededUriGrants intentGrants)</span> </span>&#123;</span><br><span class=\"line\">    setInitialState(r, options, inTask, inTaskFragment, doResume, startFlags, sourceRecord,</span><br><span class=\"line\">            voiceSession, voiceInteractor, restrictedBgActivity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//确定 activity 所启动的任务栈应该是 NEW_TASK 还是在已有的任务栈启动</span></span><br><span class=\"line\">    computeLaunchingTaskFlags();</span><br><span class=\"line\">    computeSourceRootTask();</span><br><span class=\"line\">    mIntent.setFlags(mLaunchFlags);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果请求已经开始，应该冻结最近任务列表，等待下次更新</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task prevTopTask = mPreferredTaskDisplayArea.getFocusedRootTask();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task reusedTask = getReusableTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOptions != <span class=\"keyword\">null</span> &amp;&amp; mOptions.freezeRecentTasksReordering()</span><br><span class=\"line\">            &amp;&amp; mSupervisor.mRecentTasks.isCallerRecents(r.launchedFromUid)</span><br><span class=\"line\">            &amp;&amp; !mSupervisor.mRecentTasks.isFreezeTaskListReorderingSet()) &#123;</span><br><span class=\"line\">        mFrozeTaskList = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        mSupervisor.mRecentTasks.setFreezeTaskListReordering();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算是否有符合条件的任务栈可以复用，否则应该创建新的任务栈</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task targetTask = reusedTask != <span class=\"keyword\">null</span> ? reusedTask : computeTargetTask();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> newTask = targetTask == <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    mTargetTask = targetTask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//确定启动参数，比如 windowType</span></span><br><span class=\"line\">    computeLaunchParams(r, sourceRecord, targetTask);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//又是一番启动限制，在任务栈层面限制启动🚫</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> startResult = isAllowedToStart(r, newTask, targetTask);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startResult != START_SUCCESS) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> startResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//复用任务栈</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord targetTaskTop = newTask</span><br><span class=\"line\">            ? <span class=\"keyword\">null</span> : targetTask.getTopNonFinishingActivity();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetTaskTop != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、resumeTargetRootTaskIfNeeded</span></span><br><span class=\"line\"><span class=\"comment\">            2、mRootWindowContainer.resumeFocusedTasksTopActivities</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        startResult = recycleTask(targetTask, targetTaskTop, reusedTask, intentGrants);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startResult != START_SUCCESS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> startResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        mAddingToTask = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、如果启动的 activity 是在任务栈中已存在，则只需启动一次，并调用 activity 的 onNewIntent 方法即可</span></span><br><span class=\"line\"><span class=\"comment\">        2、回调方法 deliverNewIntent(top, intentGrants); ActivityRecorder#deliverNewIntentLocked</span></span><br><span class=\"line\"><span class=\"comment\">        3、mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), appToken,</span></span><br><span class=\"line\"><span class=\"comment\">        NewIntentItem.obtain(ar, mState == RESUMED));</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task topRootTask = mPreferredTaskDisplayArea.getFocusedRootTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (topRootTask != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        startResult = deliverToCurrentTopIfNeeded(topRootTask, intentGrants);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startResult != START_SUCCESS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> startResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//还是一样，如果不存在则创建，如果存在则复用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTargetRootTask == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mTargetRootTask = getLaunchRootTask(mStartActivity, mLaunchFlags, targetTask, mOptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Task taskToAffiliate = (mLaunchTaskBehind &amp;&amp; mSourceRecord != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                ? mSourceRecord.getTask() : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        setNewTask(taskToAffiliate);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mAddingToTask) &#123;</span><br><span class=\"line\">        addOrReparentStartingActivity(targetTask, <span class=\"string\">&quot;adding to task&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动的目标任务栈有了，直接看 activity 启动</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task startedTask = mStartActivity.getTask();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isTaskSwitch = startedTask != prevTopTask &amp;&amp; !startedTask.isEmbedded();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//启动</span></span><br><span class=\"line\">    mTargetRootTask.startActivityLocked(mStartActivity,</span><br><span class=\"line\">            topRootTask != <span class=\"keyword\">null</span> ? topRootTask.getTopNonFinishingActivity() : <span class=\"keyword\">null</span>, newTask,</span><br><span class=\"line\">            isTaskSwitch, mOptions, sourceRecord);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDoResume) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ActivityRecord topTaskActivity = startedTask.topRunningActivityLocked();</span><br><span class=\"line\">        <span class=\"comment\">//如果本次启动的 activity 所在任务栈中并没有获得焦点，并且当前启动的不是本次想启动的，也要确保它显示（它可能是更重要的 activity 抢先显示呢）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mTargetRootTask.isTopActivityFocusable()</span><br><span class=\"line\">                || (topTaskActivity != <span class=\"keyword\">null</span> &amp;&amp; topTaskActivity.isTaskOverlay()</span><br><span class=\"line\">                &amp;&amp; mStartActivity != topTaskActivity)) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            mTargetRootTask.ensureActivitiesVisible(<span class=\"keyword\">null</span> <span class=\"comment\">/* starting */</span>,</span><br><span class=\"line\">            mTargetRootTask.mDisplayContent.executeAppTransition();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果本次启动的 activity 所在任务栈中并已获得焦点，如果该任务栈没有显示在最前则 moveToFront</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mTargetRootTask.isTopActivityFocusable()</span><br><span class=\"line\">                    &amp;&amp; !mRootWindowContainer.isTopDisplayFocusedRootTask(mTargetRootTask)) &#123;</span><br><span class=\"line\">                mTargetRootTask.moveToFront(<span class=\"string\">&quot;startActivityInner&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//这里和上述 recycleTask 相似，最终也会执行到这个方法。（把 activity 转移为可见状态）</span></span><br><span class=\"line\">            mRootWindowContainer.resumeFocusedTasksTopActivities(</span><br><span class=\"line\">                    mTargetRootTask, mStartActivity, mOptions, mTransientLaunch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//启动完毕需要更新最近任务栈等</span></span><br><span class=\"line\">    mRootWindowContainer.updateUserRootTask(mStartActivity.mUserId, mTargetRootTask);</span><br><span class=\"line\">    mSupervisor.mRecentTasks.add(startedTask);</span><br><span class=\"line\">    mSupervisor.handleNonResizableTaskIfNeeded(startedTask,</span><br><span class=\"line\">            mPreferredWindowingMode, mPreferredTaskDisplayArea, mTargetRootTask);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> START_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"isAllowedToStart\">isAllowedToStart</h2>\n<p>检查 activity 是否可以在已有的任务栈或者新的任务栈中启动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">isAllowedToStart</span><span class=\"params\">(ActivityRecord r, <span class=\"keyword\">boolean</span> newTask, Task targetTask)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//❌1、没有包名是不允许的（每个 activity 都有所属的包）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mStartActivity.packageName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStartActivity.resultTo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mStartActivity.resultTo.sendResult(INVALID_UID, mStartActivity.resultWho,</span><br><span class=\"line\">                    mStartActivity.requestCode, RESULT_CANCELED,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span> <span class=\"comment\">/* data */</span>, <span class=\"keyword\">null</span> <span class=\"comment\">/* dataGrants */</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ActivityOptions.abort(mOptions);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> START_CLASS_NOT_FOUND;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、应用处于 instrument 状态时，应该取消启动</span></span><br><span class=\"line\"><span class=\"comment\">        2、如果是 VR 显示ID或者默认显示ID，允许启动</span></span><br><span class=\"line\"><span class=\"comment\">        3、launchMode != SINGLE_TASK &amp;&amp; launchMode != SINGLE_INSTANCE 属于已有启动状态，应该取消启动</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r.isActivityTypeHome()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mRootWindowContainer.canStartHomeOnDisplayArea(r.info, mPreferredTaskDisplayArea,</span><br><span class=\"line\">                <span class=\"keyword\">true</span> <span class=\"comment\">/* allowInstrumenting */</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> START_CANCELED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、❌如果是新的任务栈，从后台启动的 activity 是不允许的</span></span><br><span class=\"line\"><span class=\"comment\">        2、❌如果调用者 uid 不是当前程序（当前任务栈），启动时不允许的</span></span><br><span class=\"line\"><span class=\"comment\">        3、❌如果是需要创建新的任务栈，从后台启动的 activity 是不允许的</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> blockBalInTask = (newTask</span><br><span class=\"line\">            || !targetTask.isUidPresent(mCallingUid)</span><br><span class=\"line\">            || (LAUNCH_SINGLE_INSTANCE == mLaunchMode &amp;&amp; targetTask.inPinnedWindowingMode()));</span><br><span class=\"line\">    <span class=\"comment\">// mRestrictedBgActivity：严格把控 activity 的启动🚫（该条件前一篇有提到）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mRestrictedBgActivity &amp;&amp; blockBalInTask</span><br><span class=\"line\">            &amp;&amp; handleBackgroundActivityAbort(mStartActivity)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> START_ABORTED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//还是在不断限制启动，条件苛刻啊</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isNewClearTask =</span><br><span class=\"line\">            (mLaunchFlags &amp; (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))</span><br><span class=\"line\">                    == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mService.getLockTaskController().isLockTaskModeViolation(targetTask,</span><br><span class=\"line\">                isNewClearTask)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> START_RETURN_LOCK_TASK_MODE_VIOLATION;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mService.getLockTaskController().isNewTaskLockTaskModeViolation(mStartActivity)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> START_RETURN_LOCK_TASK_MODE_VIOLATION;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mInTaskFragment != <span class=\"keyword\">null</span> &amp;&amp; !canEmbedActivity(mInTaskFragment, r, newTask, targetTask)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> START_PERMISSION_DENIED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//✅否则，是启动是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> START_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"canEmbedActivity\">canEmbedActivity</h2>\n<p>是否可以嵌入？activity 嵌入？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canEmbedActivity</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> TaskFragment taskFragment, ActivityRecord starting,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> newTask, Task targetTask)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task hostTask = taskFragment.getTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hostTask == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//✅如果是系统应用，是允许嵌入启动的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hostUid = hostTask.effectiveUid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UserHandle.getAppId(hostUid) == Process.SYSTEM_UID) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//❌如果不是当前应用进程启动，是不允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hostUid != starting.getUid()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//❌如果不是同一个任务栈（主任务栈）中启动，也是不允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !newTask &amp;&amp; (targetTask == <span class=\"keyword\">null</span> || targetTask == hostTask);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>startActivityLocked</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Task.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startActivityLocked</span><span class=\"params\">(ActivityRecord r, <span class=\"meta\">@Nullable</span> ActivityRecord focusedTopActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> newTask, <span class=\"keyword\">boolean</span> isTaskSwitch, ActivityOptions options,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> ActivityRecord sourceRecord)</span> </span>&#123;</span><br><span class=\"line\">    Task rTask = r.getTask();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> allowMoveToFront = options == <span class=\"keyword\">null</span> || !options.getAvoidMoveToFront();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isOrhasTask = rTask == <span class=\"keyword\">this</span> || hasChild(rTask);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//启动的 activity 不能是阻塞的，否则将抛出异常</span></span><br><span class=\"line\">    Task task = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newTask &amp;&amp; isOrhasTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ActivityRecord occludingActivity = getOccludingActivityAbove(r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (occludingActivity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            rTask.positionChildAtTop(r);</span><br><span class=\"line\">            ActivityOptions.abort(options);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//允许移动到前台，并且不是桌面程序、是最近任务列表任务栈、任务栈已有activity</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((!isHomeOrRecentsRootTask() || hasActivity()) &amp;&amp; allowMoveToFront) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> doShow = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((r.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                resetTaskIfNeeded(r, r);</span><br><span class=\"line\">                doShow = topRunningNonDelayedActivityLocked(<span class=\"keyword\">null</span>) == r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span> &amp;&amp; options.getAnimationType()</span><br><span class=\"line\">                == ActivityOptions.ANIM_SCENE_TRANSITION) &#123;</span><br><span class=\"line\">            doShow = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.mLaunchTaskBehind) &#123;</span><br><span class=\"line\">            r.setVisibility(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            ensureActivitiesVisible(<span class=\"keyword\">null</span>, <span class=\"number\">0</span>, !PRESERVE_WINDOWS);</span><br><span class=\"line\">            mDisplayContent.executeAppTransition();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (SHOW_APP_STARTING_PREVIEW &amp;&amp; doShow) &#123;</span><br><span class=\"line\">            Task baseTask = r.getTask();</span><br><span class=\"line\">            <span class=\"comment\">//‼️启动</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> ActivityRecord prev = baseTask.getActivity(</span><br><span class=\"line\">                    a -&gt; a.mStartingData != <span class=\"keyword\">null</span> &amp;&amp; a.showToCurrentUser());</span><br><span class=\"line\">            r.showStartingWindow(prev, newTask, isTaskSwitch,</span><br><span class=\"line\">                    <span class=\"keyword\">true</span> <span class=\"comment\">/* startActivity */</span>, sourceRecord);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一个启动的 activity 无需花里胡哨的动画</span></span><br><span class=\"line\">        ActivityOptions.abort(options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>showStartingWindow</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showStartingWindow</span><span class=\"params\">(ActivityRecord prev, <span class=\"keyword\">boolean</span> newTask, <span class=\"keyword\">boolean</span> taskSwitch,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> startActivity, ActivityRecord sourceRecord)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//覆盖时，不会显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTaskOverlay) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//共享元素转换时，不限制（共享元素：Android 动画部分）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mPendingOptions != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; mPendingOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> CompatibilityInfo compatInfo =</span><br><span class=\"line\">            mAtmService.compatibilityInfoForPackageLocked(info.applicationInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否使用启动页样式</span></span><br><span class=\"line\">    mSplashScreenStyleEmpty = shouldUseEmptySplashScreen(sourceRecord, startActivity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、我们这就是启动 activity，所以 startActivit = true，那么将会获取启动主题</span></span><br><span class=\"line\"><span class=\"comment\">        （也就是 Android 高版本每个应用启动都会显示的开屏页？）</span></span><br><span class=\"line\"><span class=\"comment\">        2、开屏主题是可以重写的，首先尝试获取是否重新了开屏主题，将获取主题资源名称</span></span><br><span class=\"line\"><span class=\"comment\">        3、如果没有重写，将会通过 ATMS 根据包名和用户ID获取主题资源名称</span></span><br><span class=\"line\"><span class=\"comment\">        4、如果获取到开屏主题资源名称，那么将根据包名通过 createPackageContext 创建上下文，</span></span><br><span class=\"line\"><span class=\"comment\">           接着根据上下文和主题名称获取资源ID（0 表示使用默认的开屏主题）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> splashScreenTheme = startActivity ? getSplashscreenTheme() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//这里会评估应该使用 theme 主题还是 splashScreenTheme 主题</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resolvedTheme = evaluateStartingWindowTheme(prev, packageName, theme,</span><br><span class=\"line\">            splashScreenTheme);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> activityCreated =</span><br><span class=\"line\">            mState.ordinal() &gt;= STARTED.ordinal() &amp;&amp; mState.ordinal() &lt;= STOPPED.ordinal();</span><br><span class=\"line\">    <span class=\"comment\">//如果不是新的任务栈，activity 也还没创建，那么本次是热启动</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> newSingleActivity = !newTask &amp;&amp; !activityCreated</span><br><span class=\"line\">            &amp;&amp; task.getActivity((r) -&gt; !r.finishing &amp;&amp; r != <span class=\"keyword\">this</span>) == <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//‼️启动</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> scheduled = addStartingWindow(packageName, resolvedTheme,</span><br><span class=\"line\">            compatInfo, nonLocalizedLabel, labelRes, icon, logo, windowFlags,</span><br><span class=\"line\">            prev, newTask || newSingleActivity, taskSwitch, isProcessRunning(),</span><br><span class=\"line\">            allowTaskSnapshot(), activityCreated, mSplashScreenStyleEmpty);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>addStartingWindow</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addStartingWindow</span><span class=\"params\">(String pkg, <span class=\"keyword\">int</span> resolvedTheme, CompatibilityInfo compatInfo,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        CharSequence nonLocalizedLabel, <span class=\"keyword\">int</span> labelRes, <span class=\"keyword\">int</span> icon, <span class=\"keyword\">int</span> logo, <span class=\"keyword\">int</span> windowFlags,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ActivityRecord from, <span class=\"keyword\">boolean</span> newTask, <span class=\"keyword\">boolean</span> taskSwitch, <span class=\"keyword\">boolean</span> processRunning,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> allowTaskSnapshot, <span class=\"keyword\">boolean</span> activityCreated, <span class=\"keyword\">boolean</span> useEmpty)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//窗口被冻结，不能显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!okToDisplay()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mStartingData != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//已有窗口在显示，不能再显示了</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> WindowState mainWin = findMainWindow();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mainWin != <span class=\"keyword\">null</span> &amp;&amp; mainWin.mWinAnimator.getShown()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> TaskSnapshot snapshot =</span><br><span class=\"line\">            mWmService.mTaskSnapshotController.getSnapshot(task.mTaskId, task.mUserId,</span><br><span class=\"line\">                    <span class=\"keyword\">false</span> <span class=\"comment\">/* restoreFromDisk */</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/* isLowResolution */</span>);</span><br><span class=\"line\">                    </span><br><span class=\"line\">     <span class=\"comment\">//STARTING_WINDOW_TYPE_NONE、STARTING_WINDOW_TYPE_SNAPSHOT、STARTING_WINDOW_TYPE_SPLASH_SCREEN</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> type = getStartingWindowType(newTask, taskSwitch, processRunning,</span><br><span class=\"line\">            allowTaskSnapshot, activityCreated, snapshot);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//逐渐的，这里似乎更多的是和 window 窗口相关（麻了麻了，我只想看 activity 相关，细节太难了）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == STARTING_WINDOW_TYPE_SNAPSHOT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isActivityTypeHome()) &#123;</span><br><span class=\"line\">            mWmService.mTaskSnapshotController.removeSnapshotCache(task.mTaskId);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mDisplayContent.mAppTransition.getTransitFlags()</span><br><span class=\"line\">                    &amp; WindowManager.TRANSIT_FLAG_KEYGUARD_GOING_AWAY_NO_ANIMATION) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//【分支一】</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> createSnapshot(snapshot, typeParameter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ProtoLog.v(WM_DEBUG_STARTING_WINDOW, <span class=\"string\">&quot;Creating SplashScreenStartingData&quot;</span>);</span><br><span class=\"line\">    mStartingData = <span class=\"keyword\">new</span> SplashScreenStartingData(mWmService, pkg,</span><br><span class=\"line\">            resolvedTheme, compatInfo, nonLocalizedLabel, labelRes, icon, logo, windowFlags,</span><br><span class=\"line\">            getMergedOverrideConfiguration(), typeParameter);</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"comment\">//【分支二】</span></span><br><span class=\"line\">    scheduleAddStartingWindow();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述无论是<strong>分支一、分支二</strong>，都会走到同一个方法<code>scheduleAddStartingWindow</code>。</p>\n<h1>scheduleAddStartingWindow</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleAddStartingWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StartingSurfaceController.DEBUG_ENABLE_SHELL_DRAWER) &#123;</span><br><span class=\"line\">        mAddStartingWindow.run();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把消息添加到队列最前面优先处理？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mWmService.mAnimationHandler.hasCallbacks(mAddStartingWindow)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//mWmService：WindowManagerService</span></span><br><span class=\"line\">            <span class=\"comment\">//mAnimationHandler：final Handler mAnimationHandler = new Handler(AnimationThread.getHandler().getLooper());</span></span><br><span class=\"line\">            mWmService.mAnimationHandler.postAtFrontOfQueue(mAddStartingWindow);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的事情和 window 窗口关系密切，surface 看着绘制相关。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AddStartingWindow mAddStartingWindow = <span class=\"keyword\">new</span> AddStartingWindow();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddStartingWindow</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略略略，看不出它干了啥</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>窗口相关的到此为止吧，再进入看不懂了。我更关注的是 activity 声明周期回调，可迟迟没有看见💔</p>\n<hr>\n<p>那么这我们姑且他成功地把 activity 添加到 window 上，现在是时候回头看看<strong>启动成功后做了些什么？</strong> 所以我们回到 <code>ActivityStarter.java</code>，自然还是回到这里 <s>（从哪来，回哪去吧）</s></p>\n<h1>The callback [onNewIntent]</h1>\n<p>这里讲 <code>Activity onNewIntent(Intent intent)</code> 生命周期回调，其实像 onCreat、onResume 等也是相似的，其他的不重复。</p>\n<h2 id=\"deliverToCurrentTopIfNeeded\">deliverToCurrentTopIfNeeded</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">startActivityInner</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskFragment inTaskFragment, <span class=\"keyword\">boolean</span> restrictedBgActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        NeededUriGrants intentGrants)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果正在启动的 activity 和任务栈顶部的 activity 相同</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task topRootTask = mPreferredTaskDisplayArea.getFocusedRootTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (topRootTask != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//顶部是同一个 activity，无需重复创建，启动一次就可以，也就是我们知道的应该回调 onNewIntent</span></span><br><span class=\"line\">        startResult = deliverToCurrentTopIfNeeded(topRootTask, intentGrants);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startResult != START_SUCCESS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> startResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deliverToCurrentTopIfNeeded-2\">deliverToCurrentTopIfNeeded</h2>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> deliver<span class=\"constructor\">ToCurrentTopIfNeeded(Task <span class=\"params\">topRootTask</span>, NeededUriGrants <span class=\"params\">intentGrants</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前栈顶 activity</span></span><br><span class=\"line\">    final ActivityRecord top = topRootTask.top<span class=\"constructor\">RunningNonDelayedActivityLocked(<span class=\"params\">mNotTop</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//activity 相同、启动用户相同、栈顶复用、启动目标</span></span><br><span class=\"line\">    final boolean dontStart = top != null</span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>top.mActivityComponent.equals(mStartActivity.mActivityComponent)</span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>top.mUserId<span class=\"operator\"> == </span>mStartActivity.mUserId</span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>top.attached<span class=\"constructor\">ToProcess()</span></span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>((mLaunchFlags &amp; FLAG_ACTIVITY_SINGLE_TOP) != <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"operator\">            || </span>LAUNCH_SINGLE_TOP<span class=\"operator\"> == </span>mLaunchMode)</span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>(!top.is<span class=\"constructor\">ActivityTypeHome()</span><span class=\"operator\"> || </span>top.get<span class=\"constructor\">DisplayArea()</span><span class=\"operator\"> == </span>mPreferredTaskDisplayArea);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dontStart) &#123;</span><br><span class=\"line\">        return START_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    top.get<span class=\"constructor\">TaskFragment()</span>.clear<span class=\"constructor\">LastPausedActivity()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//activity 显示，后面看</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDoResume) &#123;</span><br><span class=\"line\">        mRootWindowContainer.resume<span class=\"constructor\">FocusedTasksTopActivities()</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//这里会进入 ActivitRecord</span></span><br><span class=\"line\">    deliver<span class=\"constructor\">NewIntent(<span class=\"params\">top</span>, <span class=\"params\">intentGrants</span>)</span>;</span><br><span class=\"line\">    return START_DELIVERED_TO_TOP;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deliverNewIntentLocked\">deliverNewIntentLocked</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverNewIntentLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> callingUid, Intent intent, NeededUriGrants intentGrants,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">if</span> ((mState == RESUMED || mState == PAUSED || isTopActivityWhileSleeping)</span></span></span><br><span class=\"line\"><span class=\"function\">            &amp;&amp; <span class=\"title\">attachedToProcess</span><span class=\"params\">()</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ArrayList&lt;ReferrerIntent&gt; ar = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">            ar.add(rintent);</span><br><span class=\"line\">            <span class=\"comment\">//开始调用声明周期相关，通过发送一个客户端事务 ClientTransaction</span></span><br><span class=\"line\">            <span class=\"comment\">//getLifecycleManager -&gt; ClientLifecycleManager 声明周期相关回调都会通过它</span></span><br><span class=\"line\">            mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), appToken,</span><br><span class=\"line\">                    NewIntentItem.obtain(ar, mState == RESUMED));</span><br><span class=\"line\">            unsent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">            Slog.w(TAG, <span class=\"string\">&quot;Exception thrown sending new intent to &quot;</span> + <span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">            Slog.w(TAG, <span class=\"string\">&quot;Exception thrown sending new intent to &quot;</span> + <span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unsent) &#123;</span><br><span class=\"line\">        addNewIntentLocked(rintent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ClientLfecycleManager.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTransaction</span><span class=\"params\">(ClientTransaction transaction)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个事物之后开始执行，关键是这个是事务（binder)事务传递数据的，或则事务发送后将在哪里处理事务？？？</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> IApplicationThread client = transaction.getClient();</span><br><span class=\"line\">    transaction.schedule();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(client <span class=\"keyword\">instanceof</span> Binder)) &#123;</span><br><span class=\"line\">        transaction.recycle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ClientTransaction-schedule\">ClientTransaction.schedule</h2>\n<p><code>ClientTransaction</code>: A container that holds a sequence of messages, which may be sent to a client. This includes a list of callbacks and a final lifecycle state.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ClientTransaction.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1、IApplicationThread 这是一个标准的 aidl 接口，接口实现自然是 IApplicationThread.Sub</span></span><br><span class=\"line\"><span class=\"comment\">    2、实现类在 ActivityThread，private class ApplicationThread extends IApplicationThread.Stub </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> IApplicationThread mClient;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Schedule the transaction after it was initialized. It will be send to client and all its</span></span><br><span class=\"line\"><span class=\"comment\"> * individual parts will be applied in the following sequence:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. The client calls &#123;<span class=\"doctag\">@link</span> #preExecute(ClientTransactionHandler)&#125;, which triggers all work</span></span><br><span class=\"line\"><span class=\"comment\"> *    that needs to be done before actually scheduling the transaction for callbacks and</span></span><br><span class=\"line\"><span class=\"comment\"> *    lifecycle state request.</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. The transaction message is scheduled.</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. The client calls &#123;<span class=\"doctag\">@link</span> TransactionExecutor#execute(ClientTransaction)&#125;, which executes</span></span><br><span class=\"line\"><span class=\"comment\"> *    all callbacks and necessary lifecycle transitions.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span></span><br><span class=\"line\"><span class=\"function\">    mClient.<span class=\"title\">scheduleTransaction</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ApplicationThread-scheduleTransaction\">ApplicationThread.scheduleTransaction</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityThread.java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">IApplicationThread</span>.<span class=\"title\">Stub</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleTransaction</span><span class=\"params\">(ClientTransaction transaction)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//在当前类文件搜索没看到方法定义，差点怀疑人生；然后看看 ActivitThread 还有父类，那方法定义就在父类了</span></span><br><span class=\"line\">        ActivityThread.<span class=\"keyword\">this</span>.scheduleTransaction(transaction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClientTransactionHandler</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">ActivityThreadInternal</span> </span>&#123;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientTransactionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTransaction</span><span class=\"params\">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class=\"line\">        transaction.preExecute(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//发送消息，那者就明确很多了</span></span><br><span class=\"line\">        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityThread.java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXECUTE_TRANSACTION = <span class=\"number\">159</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> EXECUTE_TRANSACTION:</span><br><span class=\"line\">                <span class=\"comment\">//回头看看 schedule 的注释，下一步应该会到哪里去执行，其实别人是写得很清楚的（熟能生巧，初看确实一头雾水）</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> ClientTransaction transaction = (ClientTransaction) msg.obj;</span><br><span class=\"line\">                mTransactionExecutor.execute(transaction);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isSystem()) &#123;</span><br><span class=\"line\">                    transaction.recycle();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionExecutor-excute\">TransactionExecutor.excute</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TransactionExecutor.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class=\"string\">&quot;Start resolving transaction&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//似乎每一个 activity 都有一个 token，还不清楚从何而来</span></span><br><span class=\"line\">    <span class=\"comment\">//初学 Android 时，关于 activity token 的报错估计你也遇到过</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> IBinder token = transaction.getActivityToken();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Map&lt;IBinder, ClientTransactionItem&gt; activitiesToBeDestroyed =</span><br><span class=\"line\">                mTransactionHandler.getActivitiesToBeDestroyed();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ClientTransactionItem destroyItem = activitiesToBeDestroyed.get(token);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (destroyItem != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (transaction.getLifecycleStateRequest() == destroyItem) &#123;</span><br><span class=\"line\">                activitiesToBeDestroyed.remove(token);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mTransactionHandler.getActivityClient(token) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//这个暂不关注，重点看看下面的生命周期回调吧</span></span><br><span class=\"line\">    executeCallbacks(transaction);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、cycleToPath(r, lifecycleItem.getTargetState(), true , transaction);  -&gt; performLifecycleSequence</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        //看了一圈，着两个实现应该是在子类</span></span><br><span class=\"line\"><span class=\"comment\">        2、lifecycleItem.execute(mTransactionHandler, token, mPendingActions);</span></span><br><span class=\"line\"><span class=\"comment\">        3、lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    executeLifecycleState(transaction);</span><br><span class=\"line\">    mPendingActions.clear();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class=\"string\">&quot;End resolving transaction&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TransactionExecutor.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLifecycleSequence</span><span class=\"params\">(ActivityClientRecord r, IntArray path,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ClientTransaction transaction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = path.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, state; i &lt; size; i++) &#123;</span><br><span class=\"line\">        state = path.get(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//是吧，几个生命周期的回调都有；那就奇怪了怎么没有 onNewIntent，他不算是生命周期函数吗？</span></span><br><span class=\"line\">        <span class=\"comment\">//咚咚咚咚（敲黑板～）</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、onNewIntent 不是生命周期回调方法，只是声明周期回调过程中可能被执行的一个方法</span></span><br><span class=\"line\"><span class=\"comment\">            2、如果满足某些条件，根据经验我们知道这个方法在 onResume 之前会执行</span></span><br><span class=\"line\"><span class=\"comment\">            3、那么我们猜测（我看了代码再来猜测的😏），该方法的回调有没有可能在 handleResumeActivity 里面执行？那就去看看吧！</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_CREATE:</span><br><span class=\"line\">                mTransactionHandler.handleLaunchActivity(r, mPendingActions,</span><br><span class=\"line\">                        <span class=\"keyword\">null</span> <span class=\"comment\">/* customIntent */</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_START:</span><br><span class=\"line\">                mTransactionHandler.handleStartActivity(r, mPendingActions,</span><br><span class=\"line\">                        <span class=\"keyword\">null</span> <span class=\"comment\">/* activityOptions */</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_RESUME:</span><br><span class=\"line\">                mTransactionHandler.handleResumeActivity(r, <span class=\"keyword\">false</span> <span class=\"comment\">/* finalStateRequest */</span>,</span><br><span class=\"line\">                        r.isForward, <span class=\"string\">&quot;LIFECYCLER_RESUME_ACTIVITY&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_PAUSE:</span><br><span class=\"line\">                mTransactionHandler.handlePauseActivity(r, <span class=\"keyword\">false</span> <span class=\"comment\">/* finished */</span>,</span><br><span class=\"line\">                        <span class=\"keyword\">false</span> <span class=\"comment\">/* userLeaving */</span>, <span class=\"number\">0</span> <span class=\"comment\">/* configChanges */</span>, mPendingActions,</span><br><span class=\"line\">                        <span class=\"string\">&quot;LIFECYCLER_PAUSE_ACTIVITY&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_STOP:</span><br><span class=\"line\">                mTransactionHandler.handleStopActivity(r, <span class=\"number\">0</span> <span class=\"comment\">/* configChanges */</span>,</span><br><span class=\"line\">                        mPendingActions, <span class=\"keyword\">false</span> <span class=\"comment\">/* finalStateRequest */</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;LIFECYCLER_STOP_ACTIVITY&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_DESTROY:</span><br><span class=\"line\">                mTransactionHandler.handleDestroyActivity(r, <span class=\"keyword\">false</span> <span class=\"comment\">/* finishing */</span>,</span><br><span class=\"line\">                        <span class=\"number\">0</span> <span class=\"comment\">/* configChanges */</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/* getNonConfigInstance */</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;performLifecycleSequence. cycling to:&quot;</span> + path.get(size - <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_RESTART:</span><br><span class=\"line\">                mTransactionHandler.performRestartActivity(r, <span class=\"keyword\">false</span> <span class=\"comment\">/* start */</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Unexpected lifecycle state: &quot;</span> + state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ClientTransactionHandler 是个抽象方法，所以声明周期回调还得找 ClientTransactionHandler 的实现类 <code>ActivitThread</code>。</p>\n<p>绕一圈又回来，这这这～～～</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69c055d008d74b45bd1205352739f8b9~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h2 id=\"ActivitThread-performResumeActivity\">ActivitThread.performResumeActivity</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityThread.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performResumeActivity</span><span class=\"params\">(ActivityClientRecord r, <span class=\"keyword\">boolean</span> finalStateRequest,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String reason)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r.activity.mFinished) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//已经 resumed 就不重复了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r.getLifecycleState() == ON_RESUME) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!finalStateRequest) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> RuntimeException e = <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">                    <span class=\"string\">&quot;Trying to resume activity which is already resumed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finalStateRequest) &#123;</span><br><span class=\"line\">        r.hideForNow = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        r.activity.mStartedActivity = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        r.activity.onStateNotSaved();</span><br><span class=\"line\">        r.activity.mFragments.noteStateNotSaved();</span><br><span class=\"line\">        checkAndBlockForNetworkAccess();</span><br><span class=\"line\">        <span class=\"comment\">//看到没，满足某些条件情况下是会走 onNewIntent </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.pendingIntents != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            deliverNewIntents(r, r.pendingIntents);</span><br><span class=\"line\">            r.pendingIntents = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.pendingResults != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            deliverResults(r, r.pendingResults, reason);</span><br><span class=\"line\">            r.pendingResults = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//onResume 回调在这里，本次我们暂不关注</span></span><br><span class=\"line\">        r.activity.performResume(r.startsNotResumed, reason);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//把状态设置一下</span></span><br><span class=\"line\">        r.state = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        r.persistentState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        r.setState(ON_RESUME);</span><br><span class=\"line\"></span><br><span class=\"line\">        reportTopResumedActivityChanged(r, r.isTopResumedActivity, <span class=\"string\">&quot;topWhenResuming&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;Unable to resume activity &quot;</span></span><br><span class=\"line\">                    + r.intent.getComponent().toShortString() + <span class=\"string\">&quot;: &quot;</span> + e.toString(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityThread.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverNewIntents</span><span class=\"params\">(ActivityClientRecord r, List&lt;ReferrerIntent&gt; intents)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = intents.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</span><br><span class=\"line\">        ReferrerIntent intent = intents.get(i);</span><br><span class=\"line\">        intent.setExtrasClassLoader(r.activity.getClassLoader());</span><br><span class=\"line\">        intent.prepareToEnterProcess(isProtectedComponent(r.activityInfo),</span><br><span class=\"line\">                r.activity.getAttributionSource());</span><br><span class=\"line\">        r.activity.mFragments.noteStateNotSaved();</span><br><span class=\"line\">        <span class=\"comment\">//最后还是交给 ‘大管家’ 执行啊，回到了那个熟悉的对象</span></span><br><span class=\"line\">        mInstrumentation.callActivityOnNewIntent(r.activity, intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Instrumentation-callActivityOnNewIntent\">Instrumentation.callActivityOnNewIntent</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Instrumentation.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnNewIntent</span><span class=\"params\">(Activity activity, ReferrerIntent intent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String oldReferrer = activity.mReferrer;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            activity.mReferrer = intent.mReferrer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callActivityOnNewIntent(activity, intent != <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> Intent(intent) : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        activity.mReferrer = oldReferrer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Instrumentation.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnNewIntent</span><span class=\"params\">(Activity activity, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//什么？Instrumentation 不熟悉？</span></span><br><span class=\"line\">    <span class=\"comment\">//那 activity 总该熟悉了吧</span></span><br><span class=\"line\">    activity.performNewIntent(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Activity.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">performNewIntent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    mCanEnterPictureInPicture = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    onNewIntent(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Activity.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就到这里结束吧，看起来没那么像样。虽然是 <code>桌面启动</code>，后来越感觉像是 <code>Activity 启动</code>。<s>都乱套了</s> ，可是，桌面不也是一个 activity 吗🤔️</p>\n","site":{"data":{}},"excerpt":"","more":"<p>桌面启动类似 Activity 启动，接着上一章节继续查阅启动流程，启动限制、启动条件检查是重点，Activity 生命周期也会逐步回调给外部，这里只是粗略描述启动过程，除此之外还包括窗口的创建、绘制等等。</p>\n<h1>startActivityUnchecked</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityUnchecked</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskFragment inTaskFragment, <span class=\"keyword\">boolean</span> restrictedBgActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        NeededUriGrants intentGrants)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = START_CANCELED;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> startResultSuccessful = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task startedActivityRootTask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//TRANSIT_OPEN：创建一个之前不存在的新窗口，并且让窗口可见</span></span><br><span class=\"line\">    <span class=\"comment\">//transitType 还会影响窗口绘制消息延迟时间，默认是 5秒，如果是 chenge 类型延时将缩短到 2 秒</span></span><br><span class=\"line\">    <span class=\"comment\">//也会把 windowContain 添加到集合中，等待窗口绘制</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> TransitionController transitionController = r.mTransitionController;</span><br><span class=\"line\">    Transition newTransition = (!transitionController.isCollecting()</span><br><span class=\"line\">            &amp;&amp; transitionController.getTransitionPlayer() != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            ? transitionController.createTransition(TRANSIT_OPEN) : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    RemoteTransition remoteTransition = r.takeRemoteTransition();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newTransition != <span class=\"keyword\">null</span> &amp;&amp; remoteTransition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        newTransition.setRemoteTransition(remoteTransition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    transitionController.collect(r);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isTransient = r.getOptions() != <span class=\"keyword\">null</span> &amp;&amp; r.getOptions().getTransientLaunch();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//延迟窗口测量，又使用一个单独的变量 mDeferDepth++，控制测量、绘制次数，避免递归循环</span></span><br><span class=\"line\">        mService.deferWindowLayout();</span><br><span class=\"line\">        <span class=\"comment\">//‼️又是一个启动阶段</span></span><br><span class=\"line\">        result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class=\"line\">                startFlags, doResume, options, inTask, inTaskFragment, restrictedBgActivity,</span><br><span class=\"line\">                intentGrants);</span><br><span class=\"line\">        startResultSuccessful = ActivityManager.isStartResultSuccessful(result);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> taskAlwaysOnTop = options != <span class=\"keyword\">null</span> &amp;&amp; options.getTaskAlwaysOnTop();</span><br><span class=\"line\">        <span class=\"comment\">// Apply setAlwaysOnTop when starting an Activity is successful regardless of creating</span></span><br><span class=\"line\">        <span class=\"comment\">// a new Activity or recycling the existing Activity.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (taskAlwaysOnTop &amp;&amp; startResultSuccessful) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Task targetRootTask =</span><br><span class=\"line\">                    mTargetRootTask != <span class=\"keyword\">null</span> ? mTargetRootTask : mTargetTask.getRootTask();</span><br><span class=\"line\">            targetRootTask.setAlwaysOnTop(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);</span><br><span class=\"line\">        <span class=\"comment\">//‼️无论成功失败与否，启动解释都应该分发出去</span></span><br><span class=\"line\">        startedActivityRootTask = handleStartResult(r, result);</span><br><span class=\"line\">        <span class=\"comment\">//延时窗口测量将被恢复</span></span><br><span class=\"line\">        mService.continueWindowLayout();</span><br><span class=\"line\">        mSupervisor.mUserLeaving = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    postStartActivityProcessing(r, result, startedActivityRootTask);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"about-TransitionType\">about TransitionType</h2>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@IntDef</span>(prefix = &#123; <span class=\"string\">&quot;TRANSIT_&quot;</span> &#125;, value = &#123;</span><br><span class=\"line\">        TRANSIT_NONE,</span><br><span class=\"line\">        TRANSIT_OPEN,                 <span class=\"comment\">//创建一个新的窗口，并且使其可见</span></span><br><span class=\"line\">        TRANSIT_CLOSE,                <span class=\"comment\">//可见的窗口被关闭（finished 或 destroyed）</span></span><br><span class=\"line\">        TRANSIT_TO_FRONT,             <span class=\"comment\">//不可见的窗口将变为可见</span></span><br><span class=\"line\">        TRANSIT_TO_BACK,              <span class=\"comment\">//可见的窗口变为不可见</span></span><br><span class=\"line\">        TRANSIT_RELAUNCH,</span><br><span class=\"line\">        TRANSIT_CHANGE,               <span class=\"comment\">//可见窗口发生改变（比如屏幕方向、大小改变）</span></span><br><span class=\"line\">        TRANSIT_KEYGUARD_GOING_AWAY,  <span class=\"comment\">//（已废弃）</span></span><br><span class=\"line\">        TRANSIT_KEYGUARD_OCCLUDE,     <span class=\"comment\">//键盘锁定</span></span><br><span class=\"line\">        TRANSIT_KEYGUARD_UNOCCLUDE,   <span class=\"comment\">//键盘解锁</span></span><br><span class=\"line\">        TRANSIT_PIP,                  <span class=\"comment\">//画中画</span></span><br><span class=\"line\">        TRANSIT_WAKE,                 <span class=\"comment\">//（正在打开？）</span></span><br><span class=\"line\">        TRANSIT_FIRST_CUSTOM</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable\">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class=\"line\"><span class=\"variable\">@interface</span> TransitionType &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h1>startActivityInner</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">startActivityInner</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskFragment inTaskFragment, <span class=\"keyword\">boolean</span> restrictedBgActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        NeededUriGrants intentGrants)</span> </span>&#123;</span><br><span class=\"line\">    setInitialState(r, options, inTask, inTaskFragment, doResume, startFlags, sourceRecord,</span><br><span class=\"line\">            voiceSession, voiceInteractor, restrictedBgActivity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//确定 activity 所启动的任务栈应该是 NEW_TASK 还是在已有的任务栈启动</span></span><br><span class=\"line\">    computeLaunchingTaskFlags();</span><br><span class=\"line\">    computeSourceRootTask();</span><br><span class=\"line\">    mIntent.setFlags(mLaunchFlags);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果请求已经开始，应该冻结最近任务列表，等待下次更新</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task prevTopTask = mPreferredTaskDisplayArea.getFocusedRootTask();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task reusedTask = getReusableTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOptions != <span class=\"keyword\">null</span> &amp;&amp; mOptions.freezeRecentTasksReordering()</span><br><span class=\"line\">            &amp;&amp; mSupervisor.mRecentTasks.isCallerRecents(r.launchedFromUid)</span><br><span class=\"line\">            &amp;&amp; !mSupervisor.mRecentTasks.isFreezeTaskListReorderingSet()) &#123;</span><br><span class=\"line\">        mFrozeTaskList = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        mSupervisor.mRecentTasks.setFreezeTaskListReordering();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算是否有符合条件的任务栈可以复用，否则应该创建新的任务栈</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task targetTask = reusedTask != <span class=\"keyword\">null</span> ? reusedTask : computeTargetTask();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> newTask = targetTask == <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    mTargetTask = targetTask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//确定启动参数，比如 windowType</span></span><br><span class=\"line\">    computeLaunchParams(r, sourceRecord, targetTask);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//又是一番启动限制，在任务栈层面限制启动🚫</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> startResult = isAllowedToStart(r, newTask, targetTask);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startResult != START_SUCCESS) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> startResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//复用任务栈</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ActivityRecord targetTaskTop = newTask</span><br><span class=\"line\">            ? <span class=\"keyword\">null</span> : targetTask.getTopNonFinishingActivity();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetTaskTop != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、resumeTargetRootTaskIfNeeded</span></span><br><span class=\"line\"><span class=\"comment\">            2、mRootWindowContainer.resumeFocusedTasksTopActivities</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        startResult = recycleTask(targetTask, targetTaskTop, reusedTask, intentGrants);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startResult != START_SUCCESS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> startResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        mAddingToTask = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、如果启动的 activity 是在任务栈中已存在，则只需启动一次，并调用 activity 的 onNewIntent 方法即可</span></span><br><span class=\"line\"><span class=\"comment\">        2、回调方法 deliverNewIntent(top, intentGrants); ActivityRecorder#deliverNewIntentLocked</span></span><br><span class=\"line\"><span class=\"comment\">        3、mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), appToken,</span></span><br><span class=\"line\"><span class=\"comment\">        NewIntentItem.obtain(ar, mState == RESUMED));</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task topRootTask = mPreferredTaskDisplayArea.getFocusedRootTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (topRootTask != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        startResult = deliverToCurrentTopIfNeeded(topRootTask, intentGrants);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startResult != START_SUCCESS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> startResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//还是一样，如果不存在则创建，如果存在则复用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTargetRootTask == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mTargetRootTask = getLaunchRootTask(mStartActivity, mLaunchFlags, targetTask, mOptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Task taskToAffiliate = (mLaunchTaskBehind &amp;&amp; mSourceRecord != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                ? mSourceRecord.getTask() : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        setNewTask(taskToAffiliate);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mAddingToTask) &#123;</span><br><span class=\"line\">        addOrReparentStartingActivity(targetTask, <span class=\"string\">&quot;adding to task&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动的目标任务栈有了，直接看 activity 启动</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task startedTask = mStartActivity.getTask();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isTaskSwitch = startedTask != prevTopTask &amp;&amp; !startedTask.isEmbedded();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//启动</span></span><br><span class=\"line\">    mTargetRootTask.startActivityLocked(mStartActivity,</span><br><span class=\"line\">            topRootTask != <span class=\"keyword\">null</span> ? topRootTask.getTopNonFinishingActivity() : <span class=\"keyword\">null</span>, newTask,</span><br><span class=\"line\">            isTaskSwitch, mOptions, sourceRecord);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDoResume) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ActivityRecord topTaskActivity = startedTask.topRunningActivityLocked();</span><br><span class=\"line\">        <span class=\"comment\">//如果本次启动的 activity 所在任务栈中并没有获得焦点，并且当前启动的不是本次想启动的，也要确保它显示（它可能是更重要的 activity 抢先显示呢）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mTargetRootTask.isTopActivityFocusable()</span><br><span class=\"line\">                || (topTaskActivity != <span class=\"keyword\">null</span> &amp;&amp; topTaskActivity.isTaskOverlay()</span><br><span class=\"line\">                &amp;&amp; mStartActivity != topTaskActivity)) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            mTargetRootTask.ensureActivitiesVisible(<span class=\"keyword\">null</span> <span class=\"comment\">/* starting */</span>,</span><br><span class=\"line\">            mTargetRootTask.mDisplayContent.executeAppTransition();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果本次启动的 activity 所在任务栈中并已获得焦点，如果该任务栈没有显示在最前则 moveToFront</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mTargetRootTask.isTopActivityFocusable()</span><br><span class=\"line\">                    &amp;&amp; !mRootWindowContainer.isTopDisplayFocusedRootTask(mTargetRootTask)) &#123;</span><br><span class=\"line\">                mTargetRootTask.moveToFront(<span class=\"string\">&quot;startActivityInner&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//这里和上述 recycleTask 相似，最终也会执行到这个方法。（把 activity 转移为可见状态）</span></span><br><span class=\"line\">            mRootWindowContainer.resumeFocusedTasksTopActivities(</span><br><span class=\"line\">                    mTargetRootTask, mStartActivity, mOptions, mTransientLaunch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//启动完毕需要更新最近任务栈等</span></span><br><span class=\"line\">    mRootWindowContainer.updateUserRootTask(mStartActivity.mUserId, mTargetRootTask);</span><br><span class=\"line\">    mSupervisor.mRecentTasks.add(startedTask);</span><br><span class=\"line\">    mSupervisor.handleNonResizableTaskIfNeeded(startedTask,</span><br><span class=\"line\">            mPreferredWindowingMode, mPreferredTaskDisplayArea, mTargetRootTask);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> START_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"isAllowedToStart\">isAllowedToStart</h2>\n<p>检查 activity 是否可以在已有的任务栈或者新的任务栈中启动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">isAllowedToStart</span><span class=\"params\">(ActivityRecord r, <span class=\"keyword\">boolean</span> newTask, Task targetTask)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//❌1、没有包名是不允许的（每个 activity 都有所属的包）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mStartActivity.packageName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStartActivity.resultTo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mStartActivity.resultTo.sendResult(INVALID_UID, mStartActivity.resultWho,</span><br><span class=\"line\">                    mStartActivity.requestCode, RESULT_CANCELED,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span> <span class=\"comment\">/* data */</span>, <span class=\"keyword\">null</span> <span class=\"comment\">/* dataGrants */</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ActivityOptions.abort(mOptions);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> START_CLASS_NOT_FOUND;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、应用处于 instrument 状态时，应该取消启动</span></span><br><span class=\"line\"><span class=\"comment\">        2、如果是 VR 显示ID或者默认显示ID，允许启动</span></span><br><span class=\"line\"><span class=\"comment\">        3、launchMode != SINGLE_TASK &amp;&amp; launchMode != SINGLE_INSTANCE 属于已有启动状态，应该取消启动</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r.isActivityTypeHome()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mRootWindowContainer.canStartHomeOnDisplayArea(r.info, mPreferredTaskDisplayArea,</span><br><span class=\"line\">                <span class=\"keyword\">true</span> <span class=\"comment\">/* allowInstrumenting */</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> START_CANCELED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、❌如果是新的任务栈，从后台启动的 activity 是不允许的</span></span><br><span class=\"line\"><span class=\"comment\">        2、❌如果调用者 uid 不是当前程序（当前任务栈），启动时不允许的</span></span><br><span class=\"line\"><span class=\"comment\">        3、❌如果是需要创建新的任务栈，从后台启动的 activity 是不允许的</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> blockBalInTask = (newTask</span><br><span class=\"line\">            || !targetTask.isUidPresent(mCallingUid)</span><br><span class=\"line\">            || (LAUNCH_SINGLE_INSTANCE == mLaunchMode &amp;&amp; targetTask.inPinnedWindowingMode()));</span><br><span class=\"line\">    <span class=\"comment\">// mRestrictedBgActivity：严格把控 activity 的启动🚫（该条件前一篇有提到）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mRestrictedBgActivity &amp;&amp; blockBalInTask</span><br><span class=\"line\">            &amp;&amp; handleBackgroundActivityAbort(mStartActivity)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> START_ABORTED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//还是在不断限制启动，条件苛刻啊</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isNewClearTask =</span><br><span class=\"line\">            (mLaunchFlags &amp; (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))</span><br><span class=\"line\">                    == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mService.getLockTaskController().isLockTaskModeViolation(targetTask,</span><br><span class=\"line\">                isNewClearTask)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> START_RETURN_LOCK_TASK_MODE_VIOLATION;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mService.getLockTaskController().isNewTaskLockTaskModeViolation(mStartActivity)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> START_RETURN_LOCK_TASK_MODE_VIOLATION;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mInTaskFragment != <span class=\"keyword\">null</span> &amp;&amp; !canEmbedActivity(mInTaskFragment, r, newTask, targetTask)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> START_PERMISSION_DENIED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//✅否则，是启动是允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> START_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"canEmbedActivity\">canEmbedActivity</h2>\n<p>是否可以嵌入？activity 嵌入？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canEmbedActivity</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> TaskFragment taskFragment, ActivityRecord starting,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> newTask, Task targetTask)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task hostTask = taskFragment.getTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hostTask == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//✅如果是系统应用，是允许嵌入启动的</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hostUid = hostTask.effectiveUid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UserHandle.getAppId(hostUid) == Process.SYSTEM_UID) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//❌如果不是当前应用进程启动，是不允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hostUid != starting.getUid()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//❌如果不是同一个任务栈（主任务栈）中启动，也是不允许的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !newTask &amp;&amp; (targetTask == <span class=\"keyword\">null</span> || targetTask == hostTask);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>startActivityLocked</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Task.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startActivityLocked</span><span class=\"params\">(ActivityRecord r, <span class=\"meta\">@Nullable</span> ActivityRecord focusedTopActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> newTask, <span class=\"keyword\">boolean</span> isTaskSwitch, ActivityOptions options,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> ActivityRecord sourceRecord)</span> </span>&#123;</span><br><span class=\"line\">    Task rTask = r.getTask();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> allowMoveToFront = options == <span class=\"keyword\">null</span> || !options.getAvoidMoveToFront();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isOrhasTask = rTask == <span class=\"keyword\">this</span> || hasChild(rTask);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//启动的 activity 不能是阻塞的，否则将抛出异常</span></span><br><span class=\"line\">    Task task = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newTask &amp;&amp; isOrhasTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ActivityRecord occludingActivity = getOccludingActivityAbove(r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (occludingActivity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            rTask.positionChildAtTop(r);</span><br><span class=\"line\">            ActivityOptions.abort(options);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//允许移动到前台，并且不是桌面程序、是最近任务列表任务栈、任务栈已有activity</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((!isHomeOrRecentsRootTask() || hasActivity()) &amp;&amp; allowMoveToFront) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> doShow = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((r.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                resetTaskIfNeeded(r, r);</span><br><span class=\"line\">                doShow = topRunningNonDelayedActivityLocked(<span class=\"keyword\">null</span>) == r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span> &amp;&amp; options.getAnimationType()</span><br><span class=\"line\">                == ActivityOptions.ANIM_SCENE_TRANSITION) &#123;</span><br><span class=\"line\">            doShow = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.mLaunchTaskBehind) &#123;</span><br><span class=\"line\">            r.setVisibility(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            ensureActivitiesVisible(<span class=\"keyword\">null</span>, <span class=\"number\">0</span>, !PRESERVE_WINDOWS);</span><br><span class=\"line\">            mDisplayContent.executeAppTransition();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (SHOW_APP_STARTING_PREVIEW &amp;&amp; doShow) &#123;</span><br><span class=\"line\">            Task baseTask = r.getTask();</span><br><span class=\"line\">            <span class=\"comment\">//‼️启动</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> ActivityRecord prev = baseTask.getActivity(</span><br><span class=\"line\">                    a -&gt; a.mStartingData != <span class=\"keyword\">null</span> &amp;&amp; a.showToCurrentUser());</span><br><span class=\"line\">            r.showStartingWindow(prev, newTask, isTaskSwitch,</span><br><span class=\"line\">                    <span class=\"keyword\">true</span> <span class=\"comment\">/* startActivity */</span>, sourceRecord);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一个启动的 activity 无需花里胡哨的动画</span></span><br><span class=\"line\">        ActivityOptions.abort(options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>showStartingWindow</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showStartingWindow</span><span class=\"params\">(ActivityRecord prev, <span class=\"keyword\">boolean</span> newTask, <span class=\"keyword\">boolean</span> taskSwitch,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> startActivity, ActivityRecord sourceRecord)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//覆盖时，不会显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTaskOverlay) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//共享元素转换时，不限制（共享元素：Android 动画部分）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mPendingOptions != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; mPendingOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> CompatibilityInfo compatInfo =</span><br><span class=\"line\">            mAtmService.compatibilityInfoForPackageLocked(info.applicationInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否使用启动页样式</span></span><br><span class=\"line\">    mSplashScreenStyleEmpty = shouldUseEmptySplashScreen(sourceRecord, startActivity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、我们这就是启动 activity，所以 startActivit = true，那么将会获取启动主题</span></span><br><span class=\"line\"><span class=\"comment\">        （也就是 Android 高版本每个应用启动都会显示的开屏页？）</span></span><br><span class=\"line\"><span class=\"comment\">        2、开屏主题是可以重写的，首先尝试获取是否重新了开屏主题，将获取主题资源名称</span></span><br><span class=\"line\"><span class=\"comment\">        3、如果没有重写，将会通过 ATMS 根据包名和用户ID获取主题资源名称</span></span><br><span class=\"line\"><span class=\"comment\">        4、如果获取到开屏主题资源名称，那么将根据包名通过 createPackageContext 创建上下文，</span></span><br><span class=\"line\"><span class=\"comment\">           接着根据上下文和主题名称获取资源ID（0 表示使用默认的开屏主题）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> splashScreenTheme = startActivity ? getSplashscreenTheme() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//这里会评估应该使用 theme 主题还是 splashScreenTheme 主题</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resolvedTheme = evaluateStartingWindowTheme(prev, packageName, theme,</span><br><span class=\"line\">            splashScreenTheme);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> activityCreated =</span><br><span class=\"line\">            mState.ordinal() &gt;= STARTED.ordinal() &amp;&amp; mState.ordinal() &lt;= STOPPED.ordinal();</span><br><span class=\"line\">    <span class=\"comment\">//如果不是新的任务栈，activity 也还没创建，那么本次是热启动</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> newSingleActivity = !newTask &amp;&amp; !activityCreated</span><br><span class=\"line\">            &amp;&amp; task.getActivity((r) -&gt; !r.finishing &amp;&amp; r != <span class=\"keyword\">this</span>) == <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//‼️启动</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> scheduled = addStartingWindow(packageName, resolvedTheme,</span><br><span class=\"line\">            compatInfo, nonLocalizedLabel, labelRes, icon, logo, windowFlags,</span><br><span class=\"line\">            prev, newTask || newSingleActivity, taskSwitch, isProcessRunning(),</span><br><span class=\"line\">            allowTaskSnapshot(), activityCreated, mSplashScreenStyleEmpty);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>addStartingWindow</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addStartingWindow</span><span class=\"params\">(String pkg, <span class=\"keyword\">int</span> resolvedTheme, CompatibilityInfo compatInfo,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        CharSequence nonLocalizedLabel, <span class=\"keyword\">int</span> labelRes, <span class=\"keyword\">int</span> icon, <span class=\"keyword\">int</span> logo, <span class=\"keyword\">int</span> windowFlags,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ActivityRecord from, <span class=\"keyword\">boolean</span> newTask, <span class=\"keyword\">boolean</span> taskSwitch, <span class=\"keyword\">boolean</span> processRunning,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> allowTaskSnapshot, <span class=\"keyword\">boolean</span> activityCreated, <span class=\"keyword\">boolean</span> useEmpty)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//窗口被冻结，不能显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!okToDisplay()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mStartingData != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//已有窗口在显示，不能再显示了</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> WindowState mainWin = findMainWindow();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mainWin != <span class=\"keyword\">null</span> &amp;&amp; mainWin.mWinAnimator.getShown()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> TaskSnapshot snapshot =</span><br><span class=\"line\">            mWmService.mTaskSnapshotController.getSnapshot(task.mTaskId, task.mUserId,</span><br><span class=\"line\">                    <span class=\"keyword\">false</span> <span class=\"comment\">/* restoreFromDisk */</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/* isLowResolution */</span>);</span><br><span class=\"line\">                    </span><br><span class=\"line\">     <span class=\"comment\">//STARTING_WINDOW_TYPE_NONE、STARTING_WINDOW_TYPE_SNAPSHOT、STARTING_WINDOW_TYPE_SPLASH_SCREEN</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> type = getStartingWindowType(newTask, taskSwitch, processRunning,</span><br><span class=\"line\">            allowTaskSnapshot, activityCreated, snapshot);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//逐渐的，这里似乎更多的是和 window 窗口相关（麻了麻了，我只想看 activity 相关，细节太难了）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == STARTING_WINDOW_TYPE_SNAPSHOT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isActivityTypeHome()) &#123;</span><br><span class=\"line\">            mWmService.mTaskSnapshotController.removeSnapshotCache(task.mTaskId);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mDisplayContent.mAppTransition.getTransitFlags()</span><br><span class=\"line\">                    &amp; WindowManager.TRANSIT_FLAG_KEYGUARD_GOING_AWAY_NO_ANIMATION) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//【分支一】</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> createSnapshot(snapshot, typeParameter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ProtoLog.v(WM_DEBUG_STARTING_WINDOW, <span class=\"string\">&quot;Creating SplashScreenStartingData&quot;</span>);</span><br><span class=\"line\">    mStartingData = <span class=\"keyword\">new</span> SplashScreenStartingData(mWmService, pkg,</span><br><span class=\"line\">            resolvedTheme, compatInfo, nonLocalizedLabel, labelRes, icon, logo, windowFlags,</span><br><span class=\"line\">            getMergedOverrideConfiguration(), typeParameter);</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"comment\">//【分支二】</span></span><br><span class=\"line\">    scheduleAddStartingWindow();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述无论是<strong>分支一、分支二</strong>，都会走到同一个方法<code>scheduleAddStartingWindow</code>。</p>\n<h1>scheduleAddStartingWindow</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleAddStartingWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StartingSurfaceController.DEBUG_ENABLE_SHELL_DRAWER) &#123;</span><br><span class=\"line\">        mAddStartingWindow.run();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把消息添加到队列最前面优先处理？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mWmService.mAnimationHandler.hasCallbacks(mAddStartingWindow)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//mWmService：WindowManagerService</span></span><br><span class=\"line\">            <span class=\"comment\">//mAnimationHandler：final Handler mAnimationHandler = new Handler(AnimationThread.getHandler().getLooper());</span></span><br><span class=\"line\">            mWmService.mAnimationHandler.postAtFrontOfQueue(mAddStartingWindow);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的事情和 window 窗口关系密切，surface 看着绘制相关。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AddStartingWindow mAddStartingWindow = <span class=\"keyword\">new</span> AddStartingWindow();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddStartingWindow</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略略略，看不出它干了啥</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>窗口相关的到此为止吧，再进入看不懂了。我更关注的是 activity 声明周期回调，可迟迟没有看见💔</p>\n<hr>\n<p>那么这我们姑且他成功地把 activity 添加到 window 上，现在是时候回头看看<strong>启动成功后做了些什么？</strong> 所以我们回到 <code>ActivityStarter.java</code>，自然还是回到这里 <s>（从哪来，回哪去吧）</s></p>\n<h1>The callback [onNewIntent]</h1>\n<p>这里讲 <code>Activity onNewIntent(Intent intent)</code> 生命周期回调，其实像 onCreat、onResume 等也是相似的，其他的不重复。</p>\n<h2 id=\"deliverToCurrentTopIfNeeded\">deliverToCurrentTopIfNeeded</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityStarter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">startActivityInner</span><span class=\"params\">(<span class=\"keyword\">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TaskFragment inTaskFragment, <span class=\"keyword\">boolean</span> restrictedBgActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        NeededUriGrants intentGrants)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果正在启动的 activity 和任务栈顶部的 activity 相同</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Task topRootTask = mPreferredTaskDisplayArea.getFocusedRootTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (topRootTask != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//顶部是同一个 activity，无需重复创建，启动一次就可以，也就是我们知道的应该回调 onNewIntent</span></span><br><span class=\"line\">        startResult = deliverToCurrentTopIfNeeded(topRootTask, intentGrants);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startResult != START_SUCCESS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> startResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deliverToCurrentTopIfNeeded-2\">deliverToCurrentTopIfNeeded</h2>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> deliver<span class=\"constructor\">ToCurrentTopIfNeeded(Task <span class=\"params\">topRootTask</span>, NeededUriGrants <span class=\"params\">intentGrants</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前栈顶 activity</span></span><br><span class=\"line\">    final ActivityRecord top = topRootTask.top<span class=\"constructor\">RunningNonDelayedActivityLocked(<span class=\"params\">mNotTop</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//activity 相同、启动用户相同、栈顶复用、启动目标</span></span><br><span class=\"line\">    final boolean dontStart = top != null</span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>top.mActivityComponent.equals(mStartActivity.mActivityComponent)</span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>top.mUserId<span class=\"operator\"> == </span>mStartActivity.mUserId</span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>top.attached<span class=\"constructor\">ToProcess()</span></span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>((mLaunchFlags &amp; FLAG_ACTIVITY_SINGLE_TOP) != <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"operator\">            || </span>LAUNCH_SINGLE_TOP<span class=\"operator\"> == </span>mLaunchMode)</span><br><span class=\"line\"><span class=\"operator\">            &amp;&amp; </span>(!top.is<span class=\"constructor\">ActivityTypeHome()</span><span class=\"operator\"> || </span>top.get<span class=\"constructor\">DisplayArea()</span><span class=\"operator\"> == </span>mPreferredTaskDisplayArea);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dontStart) &#123;</span><br><span class=\"line\">        return START_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    top.get<span class=\"constructor\">TaskFragment()</span>.clear<span class=\"constructor\">LastPausedActivity()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//activity 显示，后面看</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDoResume) &#123;</span><br><span class=\"line\">        mRootWindowContainer.resume<span class=\"constructor\">FocusedTasksTopActivities()</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//这里会进入 ActivitRecord</span></span><br><span class=\"line\">    deliver<span class=\"constructor\">NewIntent(<span class=\"params\">top</span>, <span class=\"params\">intentGrants</span>)</span>;</span><br><span class=\"line\">    return START_DELIVERED_TO_TOP;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deliverNewIntentLocked\">deliverNewIntentLocked</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityRecord.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverNewIntentLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> callingUid, Intent intent, NeededUriGrants intentGrants,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">if</span> ((mState == RESUMED || mState == PAUSED || isTopActivityWhileSleeping)</span></span></span><br><span class=\"line\"><span class=\"function\">            &amp;&amp; <span class=\"title\">attachedToProcess</span><span class=\"params\">()</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ArrayList&lt;ReferrerIntent&gt; ar = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">            ar.add(rintent);</span><br><span class=\"line\">            <span class=\"comment\">//开始调用声明周期相关，通过发送一个客户端事务 ClientTransaction</span></span><br><span class=\"line\">            <span class=\"comment\">//getLifecycleManager -&gt; ClientLifecycleManager 声明周期相关回调都会通过它</span></span><br><span class=\"line\">            mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), appToken,</span><br><span class=\"line\">                    NewIntentItem.obtain(ar, mState == RESUMED));</span><br><span class=\"line\">            unsent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">            Slog.w(TAG, <span class=\"string\">&quot;Exception thrown sending new intent to &quot;</span> + <span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">            Slog.w(TAG, <span class=\"string\">&quot;Exception thrown sending new intent to &quot;</span> + <span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unsent) &#123;</span><br><span class=\"line\">        addNewIntentLocked(rintent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ClientLfecycleManager.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTransaction</span><span class=\"params\">(ClientTransaction transaction)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个事物之后开始执行，关键是这个是事务（binder)事务传递数据的，或则事务发送后将在哪里处理事务？？？</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> IApplicationThread client = transaction.getClient();</span><br><span class=\"line\">    transaction.schedule();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(client <span class=\"keyword\">instanceof</span> Binder)) &#123;</span><br><span class=\"line\">        transaction.recycle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ClientTransaction-schedule\">ClientTransaction.schedule</h2>\n<p><code>ClientTransaction</code>: A container that holds a sequence of messages, which may be sent to a client. This includes a list of callbacks and a final lifecycle state.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ClientTransaction.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1、IApplicationThread 这是一个标准的 aidl 接口，接口实现自然是 IApplicationThread.Sub</span></span><br><span class=\"line\"><span class=\"comment\">    2、实现类在 ActivityThread，private class ApplicationThread extends IApplicationThread.Stub </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> IApplicationThread mClient;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Schedule the transaction after it was initialized. It will be send to client and all its</span></span><br><span class=\"line\"><span class=\"comment\"> * individual parts will be applied in the following sequence:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. The client calls &#123;<span class=\"doctag\">@link</span> #preExecute(ClientTransactionHandler)&#125;, which triggers all work</span></span><br><span class=\"line\"><span class=\"comment\"> *    that needs to be done before actually scheduling the transaction for callbacks and</span></span><br><span class=\"line\"><span class=\"comment\"> *    lifecycle state request.</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. The transaction message is scheduled.</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. The client calls &#123;<span class=\"doctag\">@link</span> TransactionExecutor#execute(ClientTransaction)&#125;, which executes</span></span><br><span class=\"line\"><span class=\"comment\"> *    all callbacks and necessary lifecycle transitions.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span></span><br><span class=\"line\"><span class=\"function\">    mClient.<span class=\"title\">scheduleTransaction</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ApplicationThread-scheduleTransaction\">ApplicationThread.scheduleTransaction</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityThread.java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">IApplicationThread</span>.<span class=\"title\">Stub</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleTransaction</span><span class=\"params\">(ClientTransaction transaction)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//在当前类文件搜索没看到方法定义，差点怀疑人生；然后看看 ActivitThread 还有父类，那方法定义就在父类了</span></span><br><span class=\"line\">        ActivityThread.<span class=\"keyword\">this</span>.scheduleTransaction(transaction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClientTransactionHandler</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">ActivityThreadInternal</span> </span>&#123;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientTransactionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTransaction</span><span class=\"params\">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class=\"line\">        transaction.preExecute(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//发送消息，那者就明确很多了</span></span><br><span class=\"line\">        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityThread.java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXECUTE_TRANSACTION = <span class=\"number\">159</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> EXECUTE_TRANSACTION:</span><br><span class=\"line\">                <span class=\"comment\">//回头看看 schedule 的注释，下一步应该会到哪里去执行，其实别人是写得很清楚的（熟能生巧，初看确实一头雾水）</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> ClientTransaction transaction = (ClientTransaction) msg.obj;</span><br><span class=\"line\">                mTransactionExecutor.execute(transaction);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isSystem()) &#123;</span><br><span class=\"line\">                    transaction.recycle();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionExecutor-excute\">TransactionExecutor.excute</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TransactionExecutor.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class=\"string\">&quot;Start resolving transaction&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//似乎每一个 activity 都有一个 token，还不清楚从何而来</span></span><br><span class=\"line\">    <span class=\"comment\">//初学 Android 时，关于 activity token 的报错估计你也遇到过</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> IBinder token = transaction.getActivityToken();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Map&lt;IBinder, ClientTransactionItem&gt; activitiesToBeDestroyed =</span><br><span class=\"line\">                mTransactionHandler.getActivitiesToBeDestroyed();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ClientTransactionItem destroyItem = activitiesToBeDestroyed.get(token);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (destroyItem != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (transaction.getLifecycleStateRequest() == destroyItem) &#123;</span><br><span class=\"line\">                activitiesToBeDestroyed.remove(token);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mTransactionHandler.getActivityClient(token) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//这个暂不关注，重点看看下面的生命周期回调吧</span></span><br><span class=\"line\">    executeCallbacks(transaction);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1、cycleToPath(r, lifecycleItem.getTargetState(), true , transaction);  -&gt; performLifecycleSequence</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        //看了一圈，着两个实现应该是在子类</span></span><br><span class=\"line\"><span class=\"comment\">        2、lifecycleItem.execute(mTransactionHandler, token, mPendingActions);</span></span><br><span class=\"line\"><span class=\"comment\">        3、lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    executeLifecycleState(transaction);</span><br><span class=\"line\">    mPendingActions.clear();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class=\"string\">&quot;End resolving transaction&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TransactionExecutor.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLifecycleSequence</span><span class=\"params\">(ActivityClientRecord r, IntArray path,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ClientTransaction transaction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = path.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, state; i &lt; size; i++) &#123;</span><br><span class=\"line\">        state = path.get(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//是吧，几个生命周期的回调都有；那就奇怪了怎么没有 onNewIntent，他不算是生命周期函数吗？</span></span><br><span class=\"line\">        <span class=\"comment\">//咚咚咚咚（敲黑板～）</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            1、onNewIntent 不是生命周期回调方法，只是声明周期回调过程中可能被执行的一个方法</span></span><br><span class=\"line\"><span class=\"comment\">            2、如果满足某些条件，根据经验我们知道这个方法在 onResume 之前会执行</span></span><br><span class=\"line\"><span class=\"comment\">            3、那么我们猜测（我看了代码再来猜测的😏），该方法的回调有没有可能在 handleResumeActivity 里面执行？那就去看看吧！</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_CREATE:</span><br><span class=\"line\">                mTransactionHandler.handleLaunchActivity(r, mPendingActions,</span><br><span class=\"line\">                        <span class=\"keyword\">null</span> <span class=\"comment\">/* customIntent */</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_START:</span><br><span class=\"line\">                mTransactionHandler.handleStartActivity(r, mPendingActions,</span><br><span class=\"line\">                        <span class=\"keyword\">null</span> <span class=\"comment\">/* activityOptions */</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_RESUME:</span><br><span class=\"line\">                mTransactionHandler.handleResumeActivity(r, <span class=\"keyword\">false</span> <span class=\"comment\">/* finalStateRequest */</span>,</span><br><span class=\"line\">                        r.isForward, <span class=\"string\">&quot;LIFECYCLER_RESUME_ACTIVITY&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_PAUSE:</span><br><span class=\"line\">                mTransactionHandler.handlePauseActivity(r, <span class=\"keyword\">false</span> <span class=\"comment\">/* finished */</span>,</span><br><span class=\"line\">                        <span class=\"keyword\">false</span> <span class=\"comment\">/* userLeaving */</span>, <span class=\"number\">0</span> <span class=\"comment\">/* configChanges */</span>, mPendingActions,</span><br><span class=\"line\">                        <span class=\"string\">&quot;LIFECYCLER_PAUSE_ACTIVITY&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_STOP:</span><br><span class=\"line\">                mTransactionHandler.handleStopActivity(r, <span class=\"number\">0</span> <span class=\"comment\">/* configChanges */</span>,</span><br><span class=\"line\">                        mPendingActions, <span class=\"keyword\">false</span> <span class=\"comment\">/* finalStateRequest */</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;LIFECYCLER_STOP_ACTIVITY&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_DESTROY:</span><br><span class=\"line\">                mTransactionHandler.handleDestroyActivity(r, <span class=\"keyword\">false</span> <span class=\"comment\">/* finishing */</span>,</span><br><span class=\"line\">                        <span class=\"number\">0</span> <span class=\"comment\">/* configChanges */</span>, <span class=\"keyword\">false</span> <span class=\"comment\">/* getNonConfigInstance */</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;performLifecycleSequence. cycling to:&quot;</span> + path.get(size - <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_RESTART:</span><br><span class=\"line\">                mTransactionHandler.performRestartActivity(r, <span class=\"keyword\">false</span> <span class=\"comment\">/* start */</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Unexpected lifecycle state: &quot;</span> + state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ClientTransactionHandler 是个抽象方法，所以声明周期回调还得找 ClientTransactionHandler 的实现类 <code>ActivitThread</code>。</p>\n<p>绕一圈又回来，这这这～～～</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69c055d008d74b45bd1205352739f8b9~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h2 id=\"ActivitThread-performResumeActivity\">ActivitThread.performResumeActivity</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityThread.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performResumeActivity</span><span class=\"params\">(ActivityClientRecord r, <span class=\"keyword\">boolean</span> finalStateRequest,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String reason)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r.activity.mFinished) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//已经 resumed 就不重复了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r.getLifecycleState() == ON_RESUME) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!finalStateRequest) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> RuntimeException e = <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">                    <span class=\"string\">&quot;Trying to resume activity which is already resumed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finalStateRequest) &#123;</span><br><span class=\"line\">        r.hideForNow = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        r.activity.mStartedActivity = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        r.activity.onStateNotSaved();</span><br><span class=\"line\">        r.activity.mFragments.noteStateNotSaved();</span><br><span class=\"line\">        checkAndBlockForNetworkAccess();</span><br><span class=\"line\">        <span class=\"comment\">//看到没，满足某些条件情况下是会走 onNewIntent </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.pendingIntents != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            deliverNewIntents(r, r.pendingIntents);</span><br><span class=\"line\">            r.pendingIntents = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.pendingResults != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            deliverResults(r, r.pendingResults, reason);</span><br><span class=\"line\">            r.pendingResults = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//onResume 回调在这里，本次我们暂不关注</span></span><br><span class=\"line\">        r.activity.performResume(r.startsNotResumed, reason);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//把状态设置一下</span></span><br><span class=\"line\">        r.state = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        r.persistentState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        r.setState(ON_RESUME);</span><br><span class=\"line\"></span><br><span class=\"line\">        reportTopResumedActivityChanged(r, r.isTopResumedActivity, <span class=\"string\">&quot;topWhenResuming&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;Unable to resume activity &quot;</span></span><br><span class=\"line\">                    + r.intent.getComponent().toShortString() + <span class=\"string\">&quot;: &quot;</span> + e.toString(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ActivityThread.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverNewIntents</span><span class=\"params\">(ActivityClientRecord r, List&lt;ReferrerIntent&gt; intents)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = intents.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</span><br><span class=\"line\">        ReferrerIntent intent = intents.get(i);</span><br><span class=\"line\">        intent.setExtrasClassLoader(r.activity.getClassLoader());</span><br><span class=\"line\">        intent.prepareToEnterProcess(isProtectedComponent(r.activityInfo),</span><br><span class=\"line\">                r.activity.getAttributionSource());</span><br><span class=\"line\">        r.activity.mFragments.noteStateNotSaved();</span><br><span class=\"line\">        <span class=\"comment\">//最后还是交给 ‘大管家’ 执行啊，回到了那个熟悉的对象</span></span><br><span class=\"line\">        mInstrumentation.callActivityOnNewIntent(r.activity, intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Instrumentation-callActivityOnNewIntent\">Instrumentation.callActivityOnNewIntent</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Instrumentation.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnNewIntent</span><span class=\"params\">(Activity activity, ReferrerIntent intent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String oldReferrer = activity.mReferrer;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            activity.mReferrer = intent.mReferrer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callActivityOnNewIntent(activity, intent != <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> Intent(intent) : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        activity.mReferrer = oldReferrer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Instrumentation.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnNewIntent</span><span class=\"params\">(Activity activity, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//什么？Instrumentation 不熟悉？</span></span><br><span class=\"line\">    <span class=\"comment\">//那 activity 总该熟悉了吧</span></span><br><span class=\"line\">    activity.performNewIntent(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Activity.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">performNewIntent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    mCanEnterPictureInPicture = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    onNewIntent(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Activity.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就到这里结束吧，看起来没那么像样。虽然是 <code>桌面启动</code>，后来越感觉像是 <code>Activity 启动</code>。<s>都乱套了</s> ，可是，桌面不也是一个 activity 吗🤔️</p>\n"},{"title":"pm 应用程序安装管理（三）","catalog":true,"date":"2022-10-23T02:00:16.000Z","subtitle":"基于 android-11-r21","header-img":"/img/2210/page-native.jpg","_content":"\n# Warm-up\n\n1、安装方式（系统）\n- adb 安装（程序）\n- 点击安装（用户）\n- 第三方应用安装（用户）\n\n2、安装入口流程\n- InstallStart 被匹配到开始执行安装，pm 的清单配置文件匹配到特定的 action 和 mimeType 会启动对应的 activity\n- 跳转到 InstallStaging activity\n- 再跳转到 PackageInstallerActivity\n\n3、安装包类型\n- 普通型\n- 系统（使用系统签名 Application.FLAGE_SYSYEM）\n    - 具有特定 shareUID 的应用\n    - 在特定目录安装的应用（如 /system/app、/vendor/app、//oem/app）\n- 特权（Application.PRIVATE_FLAG_PRIVILEGEN）\n    - 具有特定 shareUID 的应用\n    - 在特定目录安装的应用（如 /system/framework、/system/friv-app、/vendor/priv-app）\n\n4、主要管理类\n- PackageManager：\n- IPackageManager：aidl 接口，实现类 packageManagerService（implement IPackageManager.Sub）\n- AppOpsManager：动态权限监测\n- UserManager：安装包升级、卸载、安装\n- PackageInstaller：多用户管理\n\n5、安装后的流程\n- 成功\n- 失败\n\n6、代码位置\n\n> 重要路径\n- base/core/java/android/content/pm\n- base/services/core/java/com/android/server/pm【服务】\n- base/packages/PackageInstaller【入口】\n\n> 目录结构\n- pm\n    - dex\n    - overlay\n    - parsing\n    - permission\n    - split\n    - verify\n        - domain\n\n# InstallStart\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java\n\n此类是安装流程开始第一个可见的界面 activity，负责把外部传入的 intent 进行分发。\n\n关于 InstallStart 在 AndroidManifest 的配置：\n- exported=true\n- excludeFromRecents=true\n- scheme=content\n- action=action.VIEW\n- action=action.INSTALL_PACKAGE\n- mimeType=application/vnd.android.package-archive【数据类型匹配规则：mimeType + url,此 mimeType 的值即表示 data 数据是安装包】\n\n```java\npublic class InstallStart extends Activity {\n\n    pm;\n    um;\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n\n        //携带安装包信息\n        Intent intent = getIntent();\n        //需知道是哪个应用调用安装，返回调用者包名，进一步知道调用者 uid\n        String callingPackage = getCallingPackage();\n        //确保调用者是可信任的\n        boolean isTrustedSource = false;\n\n        //不可信任、无权限、未知 sdk 版本\n        if (!isTrustedSource && originatingUid != PackageInstaller.SessionParams.UID_UNKNOWN) {\n            final int targetSdkVersion = getMaxTargetSdkVersionForUid(this, originatingUid);\n            if (targetSdkVersion < 0) {\n                mAbortInstall = true;\n            } else if (targetSdkVersion >= Build.VERSION_CODES.O && !isUidRequestingPermission(\n                    originatingUid, Manifest.permission.REQUEST_INSTALL_PACKAGES)) {\n                mAbortInstall = true;\n            }\n        }\n        if (mAbortInstall) {\n            setResult(RESULT_CANCELED);\n            finish();\n            return;\n        }\n\n        //此处主要是关注 intent 被转发的下一个 activity\n        Intent nextActivity = new Intent(intent);\n       \n        if (isSessionInstall) {\n            nextActivity.setClass(this, PackageInstallerActivity.class);\n         } else {\n            Uri packageUri = intent.getData();\n            //androidManifest 配置了两个 action，看外部调用者如何配置\n            if (packageUri != null && packageUri.getScheme().equals(\n                    ContentResolver.SCHEME_CONTENT)) {\n                nextActivity.setClass(this, InstallStaging.class);\n            } else if (packageUri != null && packageUri.getScheme().equals(\n                    PackageInstallerActivity.SCHEME_PACKAGE)) {\n                nextActivity.setClass(this, PackageInstallerActivity.class);\n            } else {\n                Intent result = new Intent();\n                result.putExtra(Intent.EXTRA_INSTALL_RESULT,\n                        PackageManager.INSTALL_FAILED_INVALID_URI);\n                setResult(RESULT_FIRST_USER, result);\n                nextActivity = null;\n            }\n        }\n\n        if (nextActivity != null) {\n            startActivity(nextActivity);\n        }\n        finish();\n    }\n\n}\n```\n\n很明显，InstallStart 选择将 intent 分发给那个界面：\n- PackageInstallerActivity【根据 session 判断选择，我们认为用户首次安装时候不会走此分支】\n- InstallStaging【用户第一次安装应当走此分支】\n\n## InstallStaging\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java\n\n```java\npublic class InstallStaging extends AlertActivity {\n    //异步任务\n    private @Nullable StagingAsyncTask mStagingTask;\n\n    protected void onResume() {\n        super.onResume();\n        if (mStagingTask == null) {\n            if (mStagedFile == null) {\n                try {\n                    mStagedFile = TemporaryFileManager.getStagedFile(this);\n                } catch (IOException e) {\n                    showError();\n                    return;\n                }\n            }\n\n            //启动任务\n            mStagingTask = new StagingAsyncTask();\n            mStagingTask.execute(getIntent().getData());\n        }\n    }\n\n    private final class StagingAsyncTask extends AsyncTask<Uri, Void, Boolean> {\n        @Override\n        protected Boolean doInBackground(Uri... params) {\n            if (params == null || params.length <= 0) {\n                return false;\n            }\n\n            Uri packageUri = params[0];\n            try (InputStream in = getContentResolver().openInputStream(packageUri)) {\n                try (OutputStream out = new FileOutputStream(mStagedFile)) {\n                    //把 data 数据写入文件中\n                }\n            } catch (IOException | SecurityException | IllegalStateException e) {\n                return false;\n            }\n            return true;\n        }\n\n        @Override\n        protected void onPostExecute(Boolean success) {\n            if (success) {\n                Intent installIntent = new Intent(getIntent());\n                installIntent.setClass(InstallStaging.this, DeleteStagedFileOnResult.class);\n                //数据\n                installIntent.setData(Uri.fromFile(mStagedFile));\n\n                if (installIntent.getBooleanExtra(Intent.EXTRA_RETURN_RESULT, false)) {\n                    installIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n                }\n\n                installIntent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n                startActivity(installIntent);\n\n                InstallStaging.this.finish();\n            }\n        }\n    }\n}\n```\n\n文件写入成功，接着跳转到下一个界面 DeleteStagedFileOnResult。\n\n### DeleteStagedFileOnResult\n> base/packages/PackageInstaller/src/com/android/packageinstaller/DeleteStagedFileOnResult.java\n\n删除安装包文件要单独起一个跳板？\n\n```java\npublic class DeleteStagedFileOnResult extends Activity {\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        if (savedInstanceState == null) {\n            Intent installIntent = new Intent(getIntent());\n            installIntent.setClass(this, PackageInstallerActivity.class);\n            installIntent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n            startActivityForResult(installIntent, 0);\n        }\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        setResult(resultCode, data);\n        finish();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        if (isFinishing()) {\n            File sourceFile = new File(getIntent().getData().getPath());\n            new Thread(sourceFile::delete).start();\n        }\n    }\n}\n```\n\n# PackageInstallerActivity\n> base/packages/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java\n\n主要负责解析安装包信息，解析失败则提示错误，解析成功提示安装‘未知应用’，如果内存许可则进行下一步安装。\n\n```java\npublic class PackageInstallerActivity extends AlertActivity {\n\n    pm;\n    ipm;//pms packageManagerService\n    ops;\n    um;\n\n    protected void onCreate(Bundle icicle) {\n        final Intent intent = getIntent();\n        //安装包 uri\n        final Uri packageUri;\n\n        if (PackageInstaller.ACTION_CONFIRM_INSTALL.equals(intent.getAction())) {\n            final PackageInstaller.SessionInfo info = mInstaller.getSessionInfo(sessionId);\n            packageUri = Uri.fromFile(new File(info.resolvedBaseCodePath));\n        } else {\n            packageUri = intent.getData();\n        }\n\n        if (packageUri == null) {\n            setPmResult(PackageManager.INSTALL_FAILED_INVALID_URI);\n            finish();\n            return;\n        }\n\n        boolean wasSetUp = processPackageUri(packageUri);\n        if (!wasSetUp) {\n            return;\n        }\n    }\n\n    /*\n        解析获得数据\n        mAppSnippet：应用图标和名称\n        mPkgInfo：\n        mPackageURI：\n    */\n    private boolean processPackageUri(final Uri packageUri) {\n        final String scheme = packageUri.getScheme();\n        switch (scheme) {\n            case SCHEME_PACKAGE: {\n                try {\n                    mPkgInfo = mPm.getPackageInfo(packageUri.getSchemeSpecificPart(),\n                            PackageManager.GET_PERMISSIONS\n                                    | PackageManager.MATCH_UNINSTALLED_PACKAGES);\n                } catch (NameNotFoundException e) {\n                }\n                if (mPkgInfo == null) {\n                    setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);\n                    return false;\n                }\n                CharSequence label = mPm.getApplicationLabel(mPkgInfo.applicationInfo);\n                mAppSnippet = new PackageUtil.AppSnippet(label,\n                        mPm.getApplicationIcon(mPkgInfo.applicationInfo));\n            } break;\n\n            case ContentResolver.SCHEME_FILE: {\n                File sourceFile = new File(packageUri.getPath());\n                mPkgInfo = PackageUtil.getPackageInfo(this, sourceFile,\n                        PackageManager.GET_PERMISSIONS);\n                if (mPkgInfo == null) {\n                    setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);\n                    return false;\n                }\n                mAppSnippet = PackageUtil.getAppSnippet(this, mPkgInfo.applicationInfo, sourceFile);\n            } break;\n\n            default: {\n                throw new IllegalArgumentException(\"Unexpected URI scheme \" + packageUri);\n            }\n        }\n\n        return true;\n    }\n\n        @Override\n    protected void onResume() {\n        if (mAppSnippet != null) {\n            //安装提示界面，设置包名、图标，点击确认开始安装：startInstall();\n            bindUi();\n            //如果已安装有相同包名的应用，则更新 UI 为‘更新应用’，\n            checkIfAllowedAndInitiateInstall();\n        }\n    }\n\n    //该方法是点击‘安装’执行，将跳转到下一个 activity\n    private void startInstall() {\n        Intent newIntent = new Intent();\n        newIntent.putExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO,\n                mPkgInfo.applicationInfo);\n        newIntent.setData(mPackageURI);\n        newIntent.setClass(this, InstallInstalling.class);\n        String installerPackageName = getIntent().getStringExtra(\n                Intent.EXTRA_INSTALLER_PACKAGE_NAME);\n        if (installerPackageName != null) {\n            newIntent.putExtra(Intent.EXTRA_INSTALLER_PACKAGE_NAME,\n                    installerPackageName);\n        }\n        newIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n        startActivity(newIntent);\n        finish();\n    }\n}\n```\n\n# InstallInstalling\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallInstalling.java\n\nPackageManager 实现类 ApplicationPackageManager。\n\n```java\npublic class InstallInstalling extends AlertActivity {\n\n    //异步任务\n    private InstallingAsyncTask mInstallingTask;\n    //安装包\n    private Uri mPackageURI;\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n\n        mPackageURI = getIntent().getData();\n        if (\"package\".equals(mPackageURI.getScheme())) {\n            try {\n                getPackageManager().installExistingPackage(appInfo.packageName);\n                //分支1，应用已经安装，将进入 InstallSuccess activity\n                launchSuccess();\n            } catch (PackageManager.NameNotFoundException e) {\n                //分支2\n                launchFailure(PackageInstaller.STATUS_FAILURE,\n                        PackageManager.INSTALL_FAILED_INTERNAL_ERROR, null);\n            }\n        } else {            \n            if (savedInstanceState != null) {\n                try {\n                    //注册安装事件监听\n                    InstallEventReceiver.addObserver(this, mInstallId,this::launchFinishBasedOnResult);\n                } catch (EventResultPersister.OutOfIdsException e) {\n                    // Does not happen\n                }\n            } else {\n                PackageInstaller.SessionParams params = new PackageInstaller.SessionParams(\n                        PackageInstaller.SessionParams.MODE_FULL_INSTALL);\n                //解析安装包\n                File file = new File(mPackageURI.getPath());\n                try {\n                    final ParseTypeImpl input = ParseTypeImpl.forDefaultParsing();\n                    //开始解析，一种是解析目录下的文件，另一种是解析 apk 本身\n                    final ParseResult<PackageLite> result = ApkLiteParseUtils.parsePackageLite(\n                            input.reset(), file, /* flags */ 0);\n                    if (result.isError()) {\n                        //解析错误为什么设置长度为文件大小？\n                        params.setSize(file.length());\n                    } else {\n                        final PackageLite pkg = result.getResult();\n                        params.setAppPackageName(pkg.getPackageName());\n                        params.setInstallLocation(pkg.getInstallLocation());\n                        params.setSize(\n                                PackageHelper.calculateInstalledSize(pkg, params.abiOverride));\n                    }\n                } catch (IOException e) {\n                    params.setSize(file.length());\n                }\n\n                //解析成功，同样需要监听安装事件\n                try {\n                    //这是一个系统广播\n                    mInstallId = InstallEventReceiver\n                            .addObserver(this, EventResultPersister.GENERATE_NEW_ID,\n                                    this::launchFinishBasedOnResult);\n                } catch (EventResultPersister.OutOfIdsException e) {\n                    launchFailure(PackageInstaller.STATUS_FAILURE,\n                            PackageManager.INSTALL_FAILED_INTERNAL_ERROR, null);\n                }\n            }\n        }\n    }\n\n    //开始安装\n    protected void onResume() {\n        if (mInstallingTask == null) {\n            PackageInstaller installer = getPackageManager().getPackageInstaller();\n            PackageInstaller.SessionInfo sessionInfo = installer.getSessionInfo(mSessionId);\n\n            if (sessionInfo != null && !sessionInfo.isActive()) {\n                mInstallingTask = new InstallingAsyncTask();\n                mInstallingTask.execute();\n            }\n        }\n    }\n}\n```\n\n## parsePackageLite\n> base/core/java/android/content/pm/parsing/ApkLiteParseUtils.java\n\n```java\n    //一种是目录，另一种是文件\n    public static ParseResult<PackageLite> parsePackageLite(ParseInput input,\n            File packageFile, int flags) {\n        //无论哪个分支，最终都会走 parseApkLite\n        if (packageFile.isDirectory()) {\n            return parseClusterPackageLite(input, packageFile, flags);\n        } else {\n            return parseMonolithicPackageLite(input, packageFile, flags);\n        }\n    }\n\n    public static ParseResult<PackageLite> parseClusterPackageLite(ParseInput input,\n            File packageDir, int flags) {\n        for (File file : files) {\n            //XmlResourceParser: 解析 AndroidManifest.xml，versioncode、安装位置等\n            //ApkAssets: 主要实现在 ApkAssets.cpp，ApkAssets.nativeLoad、ApkAssets.nativeLoadFd\n            //ParsingPackageUtils.getSigningDetails：解析获取签名信息\n            final ParseResult<ApkLite> result = parseApkLite(input, file, flags);\n        }\n    }\n```\n\n## InstallingAsyncTask\n\n```java\n\n    protected PackageInstaller.Session doInBackground(Void... params) {\n        //把安装包数据写入\n        PackageInstaller.Session session;\n        File file = new File(mPackageURI.getPath());\n        OutputStream out = session.openWrite(\"PackageInstaller\", 0, sizeBytes)\n        out.write(buffer, 0, numRead);\n    }\n\n    protected void onPostExecute(PackageInstaller.Session session) {\n        //提交安装\n        Intent broadcastIntent = new Intent(BROADCAST_ACTION);\n        broadcastIntent.setPackage(getPackageName());\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(\n                        InstallInstalling.this,\n                        mInstallId,\n                        broadcastIntent,\n                        PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE);\n        //提交到 PackageInstallerSession.commit 执行\n            //1、启动安装流程 send message MSG_ON_SESSION_SEALED\n            //2、安装前的检验 send message MSG_STREAM_VALIDATE_AND_COMMIT，handleSessionSealed、handleStreamValidateAndCommit();【apk 或 apex】\n            //3、开始安装 send message MSG_STREAM_VALIDATE_AND_COMMIT，StagingManager.commitSession\n            //4、重启验证 PreRebootVerificationHandler.startPreRebootVerification，send message MSG_PRE_REBOOT_VERIFICATION_START，验证 apex、apk\n            //5、重启验证结束，启动检查点服务 onPreRebootVerificationComplete\n            //6、蒙圈了，不知道执行到哪里去了\n            //7、通过广告回调安装成功 dispatchSessionFinished、mPm.sendSessionCommitBroadcast、mContext.sendBroadcastAsUser\n        session.commit(pendingIntent.getIntentSender());\n    }\n```\n\n\n## InstallSuccess\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallSuccess.java\n\n```java\npublic class InstallSuccess extends AlertActivity {\n\n    //如果已安装该引用，则根据包名获取 intent 并启动（是在不需要返回安装结果的情况下）\n    private Intent mLaunchIntent;\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n\n        if (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, false)) {\n            Intent result = new Intent();\n            result.putExtra(Intent.EXTRA_INSTALL_RESULT, PackageManager.INSTALL_SUCCEEDED);\n            setResult(Activity.RESULT_OK, result);\n            finish();\n        } else {\n            Intent intent = getIntent();\n            ApplicationInfo appInfo =\n                    intent.getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);\n            mAppPackageName = appInfo.packageName;\n            PackageManager pm = getPackageManager();\n            mLaunchIntent = getPackageManager().getLaunchIntentForPackage(mAppPackageName);\n            //条件允许情况将显示打开已安装应用按钮，startActivity(mLaunchIntent);\n            bindUi();\n        }\n    }\n}\n```\n\n## InstallFailed\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallFailed.java\n\n安装失败没有太多的其他逻辑，只会想用户展示安装失败的对话框以及说明失败原因\n\n\n","source":"_posts/undefined/android-pm.md","raw":"---\ntitle: pm 应用程序安装管理（三）\ncatalog: true\ndate: 2022-10-23 10:00:16\nsubtitle: 基于 android-11-r21\nheader-img: /img/2210/page-native.jpg\ntags: AOSP\ncategories:\n---\n\n# Warm-up\n\n1、安装方式（系统）\n- adb 安装（程序）\n- 点击安装（用户）\n- 第三方应用安装（用户）\n\n2、安装入口流程\n- InstallStart 被匹配到开始执行安装，pm 的清单配置文件匹配到特定的 action 和 mimeType 会启动对应的 activity\n- 跳转到 InstallStaging activity\n- 再跳转到 PackageInstallerActivity\n\n3、安装包类型\n- 普通型\n- 系统（使用系统签名 Application.FLAGE_SYSYEM）\n    - 具有特定 shareUID 的应用\n    - 在特定目录安装的应用（如 /system/app、/vendor/app、//oem/app）\n- 特权（Application.PRIVATE_FLAG_PRIVILEGEN）\n    - 具有特定 shareUID 的应用\n    - 在特定目录安装的应用（如 /system/framework、/system/friv-app、/vendor/priv-app）\n\n4、主要管理类\n- PackageManager：\n- IPackageManager：aidl 接口，实现类 packageManagerService（implement IPackageManager.Sub）\n- AppOpsManager：动态权限监测\n- UserManager：安装包升级、卸载、安装\n- PackageInstaller：多用户管理\n\n5、安装后的流程\n- 成功\n- 失败\n\n6、代码位置\n\n> 重要路径\n- base/core/java/android/content/pm\n- base/services/core/java/com/android/server/pm【服务】\n- base/packages/PackageInstaller【入口】\n\n> 目录结构\n- pm\n    - dex\n    - overlay\n    - parsing\n    - permission\n    - split\n    - verify\n        - domain\n\n# InstallStart\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java\n\n此类是安装流程开始第一个可见的界面 activity，负责把外部传入的 intent 进行分发。\n\n关于 InstallStart 在 AndroidManifest 的配置：\n- exported=true\n- excludeFromRecents=true\n- scheme=content\n- action=action.VIEW\n- action=action.INSTALL_PACKAGE\n- mimeType=application/vnd.android.package-archive【数据类型匹配规则：mimeType + url,此 mimeType 的值即表示 data 数据是安装包】\n\n```java\npublic class InstallStart extends Activity {\n\n    pm;\n    um;\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n\n        //携带安装包信息\n        Intent intent = getIntent();\n        //需知道是哪个应用调用安装，返回调用者包名，进一步知道调用者 uid\n        String callingPackage = getCallingPackage();\n        //确保调用者是可信任的\n        boolean isTrustedSource = false;\n\n        //不可信任、无权限、未知 sdk 版本\n        if (!isTrustedSource && originatingUid != PackageInstaller.SessionParams.UID_UNKNOWN) {\n            final int targetSdkVersion = getMaxTargetSdkVersionForUid(this, originatingUid);\n            if (targetSdkVersion < 0) {\n                mAbortInstall = true;\n            } else if (targetSdkVersion >= Build.VERSION_CODES.O && !isUidRequestingPermission(\n                    originatingUid, Manifest.permission.REQUEST_INSTALL_PACKAGES)) {\n                mAbortInstall = true;\n            }\n        }\n        if (mAbortInstall) {\n            setResult(RESULT_CANCELED);\n            finish();\n            return;\n        }\n\n        //此处主要是关注 intent 被转发的下一个 activity\n        Intent nextActivity = new Intent(intent);\n       \n        if (isSessionInstall) {\n            nextActivity.setClass(this, PackageInstallerActivity.class);\n         } else {\n            Uri packageUri = intent.getData();\n            //androidManifest 配置了两个 action，看外部调用者如何配置\n            if (packageUri != null && packageUri.getScheme().equals(\n                    ContentResolver.SCHEME_CONTENT)) {\n                nextActivity.setClass(this, InstallStaging.class);\n            } else if (packageUri != null && packageUri.getScheme().equals(\n                    PackageInstallerActivity.SCHEME_PACKAGE)) {\n                nextActivity.setClass(this, PackageInstallerActivity.class);\n            } else {\n                Intent result = new Intent();\n                result.putExtra(Intent.EXTRA_INSTALL_RESULT,\n                        PackageManager.INSTALL_FAILED_INVALID_URI);\n                setResult(RESULT_FIRST_USER, result);\n                nextActivity = null;\n            }\n        }\n\n        if (nextActivity != null) {\n            startActivity(nextActivity);\n        }\n        finish();\n    }\n\n}\n```\n\n很明显，InstallStart 选择将 intent 分发给那个界面：\n- PackageInstallerActivity【根据 session 判断选择，我们认为用户首次安装时候不会走此分支】\n- InstallStaging【用户第一次安装应当走此分支】\n\n## InstallStaging\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java\n\n```java\npublic class InstallStaging extends AlertActivity {\n    //异步任务\n    private @Nullable StagingAsyncTask mStagingTask;\n\n    protected void onResume() {\n        super.onResume();\n        if (mStagingTask == null) {\n            if (mStagedFile == null) {\n                try {\n                    mStagedFile = TemporaryFileManager.getStagedFile(this);\n                } catch (IOException e) {\n                    showError();\n                    return;\n                }\n            }\n\n            //启动任务\n            mStagingTask = new StagingAsyncTask();\n            mStagingTask.execute(getIntent().getData());\n        }\n    }\n\n    private final class StagingAsyncTask extends AsyncTask<Uri, Void, Boolean> {\n        @Override\n        protected Boolean doInBackground(Uri... params) {\n            if (params == null || params.length <= 0) {\n                return false;\n            }\n\n            Uri packageUri = params[0];\n            try (InputStream in = getContentResolver().openInputStream(packageUri)) {\n                try (OutputStream out = new FileOutputStream(mStagedFile)) {\n                    //把 data 数据写入文件中\n                }\n            } catch (IOException | SecurityException | IllegalStateException e) {\n                return false;\n            }\n            return true;\n        }\n\n        @Override\n        protected void onPostExecute(Boolean success) {\n            if (success) {\n                Intent installIntent = new Intent(getIntent());\n                installIntent.setClass(InstallStaging.this, DeleteStagedFileOnResult.class);\n                //数据\n                installIntent.setData(Uri.fromFile(mStagedFile));\n\n                if (installIntent.getBooleanExtra(Intent.EXTRA_RETURN_RESULT, false)) {\n                    installIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n                }\n\n                installIntent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n                startActivity(installIntent);\n\n                InstallStaging.this.finish();\n            }\n        }\n    }\n}\n```\n\n文件写入成功，接着跳转到下一个界面 DeleteStagedFileOnResult。\n\n### DeleteStagedFileOnResult\n> base/packages/PackageInstaller/src/com/android/packageinstaller/DeleteStagedFileOnResult.java\n\n删除安装包文件要单独起一个跳板？\n\n```java\npublic class DeleteStagedFileOnResult extends Activity {\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        if (savedInstanceState == null) {\n            Intent installIntent = new Intent(getIntent());\n            installIntent.setClass(this, PackageInstallerActivity.class);\n            installIntent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n            startActivityForResult(installIntent, 0);\n        }\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        setResult(resultCode, data);\n        finish();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        if (isFinishing()) {\n            File sourceFile = new File(getIntent().getData().getPath());\n            new Thread(sourceFile::delete).start();\n        }\n    }\n}\n```\n\n# PackageInstallerActivity\n> base/packages/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java\n\n主要负责解析安装包信息，解析失败则提示错误，解析成功提示安装‘未知应用’，如果内存许可则进行下一步安装。\n\n```java\npublic class PackageInstallerActivity extends AlertActivity {\n\n    pm;\n    ipm;//pms packageManagerService\n    ops;\n    um;\n\n    protected void onCreate(Bundle icicle) {\n        final Intent intent = getIntent();\n        //安装包 uri\n        final Uri packageUri;\n\n        if (PackageInstaller.ACTION_CONFIRM_INSTALL.equals(intent.getAction())) {\n            final PackageInstaller.SessionInfo info = mInstaller.getSessionInfo(sessionId);\n            packageUri = Uri.fromFile(new File(info.resolvedBaseCodePath));\n        } else {\n            packageUri = intent.getData();\n        }\n\n        if (packageUri == null) {\n            setPmResult(PackageManager.INSTALL_FAILED_INVALID_URI);\n            finish();\n            return;\n        }\n\n        boolean wasSetUp = processPackageUri(packageUri);\n        if (!wasSetUp) {\n            return;\n        }\n    }\n\n    /*\n        解析获得数据\n        mAppSnippet：应用图标和名称\n        mPkgInfo：\n        mPackageURI：\n    */\n    private boolean processPackageUri(final Uri packageUri) {\n        final String scheme = packageUri.getScheme();\n        switch (scheme) {\n            case SCHEME_PACKAGE: {\n                try {\n                    mPkgInfo = mPm.getPackageInfo(packageUri.getSchemeSpecificPart(),\n                            PackageManager.GET_PERMISSIONS\n                                    | PackageManager.MATCH_UNINSTALLED_PACKAGES);\n                } catch (NameNotFoundException e) {\n                }\n                if (mPkgInfo == null) {\n                    setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);\n                    return false;\n                }\n                CharSequence label = mPm.getApplicationLabel(mPkgInfo.applicationInfo);\n                mAppSnippet = new PackageUtil.AppSnippet(label,\n                        mPm.getApplicationIcon(mPkgInfo.applicationInfo));\n            } break;\n\n            case ContentResolver.SCHEME_FILE: {\n                File sourceFile = new File(packageUri.getPath());\n                mPkgInfo = PackageUtil.getPackageInfo(this, sourceFile,\n                        PackageManager.GET_PERMISSIONS);\n                if (mPkgInfo == null) {\n                    setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);\n                    return false;\n                }\n                mAppSnippet = PackageUtil.getAppSnippet(this, mPkgInfo.applicationInfo, sourceFile);\n            } break;\n\n            default: {\n                throw new IllegalArgumentException(\"Unexpected URI scheme \" + packageUri);\n            }\n        }\n\n        return true;\n    }\n\n        @Override\n    protected void onResume() {\n        if (mAppSnippet != null) {\n            //安装提示界面，设置包名、图标，点击确认开始安装：startInstall();\n            bindUi();\n            //如果已安装有相同包名的应用，则更新 UI 为‘更新应用’，\n            checkIfAllowedAndInitiateInstall();\n        }\n    }\n\n    //该方法是点击‘安装’执行，将跳转到下一个 activity\n    private void startInstall() {\n        Intent newIntent = new Intent();\n        newIntent.putExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO,\n                mPkgInfo.applicationInfo);\n        newIntent.setData(mPackageURI);\n        newIntent.setClass(this, InstallInstalling.class);\n        String installerPackageName = getIntent().getStringExtra(\n                Intent.EXTRA_INSTALLER_PACKAGE_NAME);\n        if (installerPackageName != null) {\n            newIntent.putExtra(Intent.EXTRA_INSTALLER_PACKAGE_NAME,\n                    installerPackageName);\n        }\n        newIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n        startActivity(newIntent);\n        finish();\n    }\n}\n```\n\n# InstallInstalling\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallInstalling.java\n\nPackageManager 实现类 ApplicationPackageManager。\n\n```java\npublic class InstallInstalling extends AlertActivity {\n\n    //异步任务\n    private InstallingAsyncTask mInstallingTask;\n    //安装包\n    private Uri mPackageURI;\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n\n        mPackageURI = getIntent().getData();\n        if (\"package\".equals(mPackageURI.getScheme())) {\n            try {\n                getPackageManager().installExistingPackage(appInfo.packageName);\n                //分支1，应用已经安装，将进入 InstallSuccess activity\n                launchSuccess();\n            } catch (PackageManager.NameNotFoundException e) {\n                //分支2\n                launchFailure(PackageInstaller.STATUS_FAILURE,\n                        PackageManager.INSTALL_FAILED_INTERNAL_ERROR, null);\n            }\n        } else {            \n            if (savedInstanceState != null) {\n                try {\n                    //注册安装事件监听\n                    InstallEventReceiver.addObserver(this, mInstallId,this::launchFinishBasedOnResult);\n                } catch (EventResultPersister.OutOfIdsException e) {\n                    // Does not happen\n                }\n            } else {\n                PackageInstaller.SessionParams params = new PackageInstaller.SessionParams(\n                        PackageInstaller.SessionParams.MODE_FULL_INSTALL);\n                //解析安装包\n                File file = new File(mPackageURI.getPath());\n                try {\n                    final ParseTypeImpl input = ParseTypeImpl.forDefaultParsing();\n                    //开始解析，一种是解析目录下的文件，另一种是解析 apk 本身\n                    final ParseResult<PackageLite> result = ApkLiteParseUtils.parsePackageLite(\n                            input.reset(), file, /* flags */ 0);\n                    if (result.isError()) {\n                        //解析错误为什么设置长度为文件大小？\n                        params.setSize(file.length());\n                    } else {\n                        final PackageLite pkg = result.getResult();\n                        params.setAppPackageName(pkg.getPackageName());\n                        params.setInstallLocation(pkg.getInstallLocation());\n                        params.setSize(\n                                PackageHelper.calculateInstalledSize(pkg, params.abiOverride));\n                    }\n                } catch (IOException e) {\n                    params.setSize(file.length());\n                }\n\n                //解析成功，同样需要监听安装事件\n                try {\n                    //这是一个系统广播\n                    mInstallId = InstallEventReceiver\n                            .addObserver(this, EventResultPersister.GENERATE_NEW_ID,\n                                    this::launchFinishBasedOnResult);\n                } catch (EventResultPersister.OutOfIdsException e) {\n                    launchFailure(PackageInstaller.STATUS_FAILURE,\n                            PackageManager.INSTALL_FAILED_INTERNAL_ERROR, null);\n                }\n            }\n        }\n    }\n\n    //开始安装\n    protected void onResume() {\n        if (mInstallingTask == null) {\n            PackageInstaller installer = getPackageManager().getPackageInstaller();\n            PackageInstaller.SessionInfo sessionInfo = installer.getSessionInfo(mSessionId);\n\n            if (sessionInfo != null && !sessionInfo.isActive()) {\n                mInstallingTask = new InstallingAsyncTask();\n                mInstallingTask.execute();\n            }\n        }\n    }\n}\n```\n\n## parsePackageLite\n> base/core/java/android/content/pm/parsing/ApkLiteParseUtils.java\n\n```java\n    //一种是目录，另一种是文件\n    public static ParseResult<PackageLite> parsePackageLite(ParseInput input,\n            File packageFile, int flags) {\n        //无论哪个分支，最终都会走 parseApkLite\n        if (packageFile.isDirectory()) {\n            return parseClusterPackageLite(input, packageFile, flags);\n        } else {\n            return parseMonolithicPackageLite(input, packageFile, flags);\n        }\n    }\n\n    public static ParseResult<PackageLite> parseClusterPackageLite(ParseInput input,\n            File packageDir, int flags) {\n        for (File file : files) {\n            //XmlResourceParser: 解析 AndroidManifest.xml，versioncode、安装位置等\n            //ApkAssets: 主要实现在 ApkAssets.cpp，ApkAssets.nativeLoad、ApkAssets.nativeLoadFd\n            //ParsingPackageUtils.getSigningDetails：解析获取签名信息\n            final ParseResult<ApkLite> result = parseApkLite(input, file, flags);\n        }\n    }\n```\n\n## InstallingAsyncTask\n\n```java\n\n    protected PackageInstaller.Session doInBackground(Void... params) {\n        //把安装包数据写入\n        PackageInstaller.Session session;\n        File file = new File(mPackageURI.getPath());\n        OutputStream out = session.openWrite(\"PackageInstaller\", 0, sizeBytes)\n        out.write(buffer, 0, numRead);\n    }\n\n    protected void onPostExecute(PackageInstaller.Session session) {\n        //提交安装\n        Intent broadcastIntent = new Intent(BROADCAST_ACTION);\n        broadcastIntent.setPackage(getPackageName());\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(\n                        InstallInstalling.this,\n                        mInstallId,\n                        broadcastIntent,\n                        PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE);\n        //提交到 PackageInstallerSession.commit 执行\n            //1、启动安装流程 send message MSG_ON_SESSION_SEALED\n            //2、安装前的检验 send message MSG_STREAM_VALIDATE_AND_COMMIT，handleSessionSealed、handleStreamValidateAndCommit();【apk 或 apex】\n            //3、开始安装 send message MSG_STREAM_VALIDATE_AND_COMMIT，StagingManager.commitSession\n            //4、重启验证 PreRebootVerificationHandler.startPreRebootVerification，send message MSG_PRE_REBOOT_VERIFICATION_START，验证 apex、apk\n            //5、重启验证结束，启动检查点服务 onPreRebootVerificationComplete\n            //6、蒙圈了，不知道执行到哪里去了\n            //7、通过广告回调安装成功 dispatchSessionFinished、mPm.sendSessionCommitBroadcast、mContext.sendBroadcastAsUser\n        session.commit(pendingIntent.getIntentSender());\n    }\n```\n\n\n## InstallSuccess\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallSuccess.java\n\n```java\npublic class InstallSuccess extends AlertActivity {\n\n    //如果已安装该引用，则根据包名获取 intent 并启动（是在不需要返回安装结果的情况下）\n    private Intent mLaunchIntent;\n\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n\n        if (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, false)) {\n            Intent result = new Intent();\n            result.putExtra(Intent.EXTRA_INSTALL_RESULT, PackageManager.INSTALL_SUCCEEDED);\n            setResult(Activity.RESULT_OK, result);\n            finish();\n        } else {\n            Intent intent = getIntent();\n            ApplicationInfo appInfo =\n                    intent.getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);\n            mAppPackageName = appInfo.packageName;\n            PackageManager pm = getPackageManager();\n            mLaunchIntent = getPackageManager().getLaunchIntentForPackage(mAppPackageName);\n            //条件允许情况将显示打开已安装应用按钮，startActivity(mLaunchIntent);\n            bindUi();\n        }\n    }\n}\n```\n\n## InstallFailed\n> base/packages/PackageInstaller/src/com/android/packageinstaller/InstallFailed.java\n\n安装失败没有太多的其他逻辑，只会想用户展示安装失败的对话框以及说明失败原因\n\n\n","slug":"android-pm","published":1,"lang":"undefined","updated":"2022-10-23T02:00:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56q9000l7tqp45kac1u9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>Warm-up</h1>\n<p>1、安装方式（系统）</p>\n<ul>\n<li>adb 安装（程序）</li>\n<li>点击安装（用户）</li>\n<li>第三方应用安装（用户）</li>\n</ul>\n<p>2、安装入口流程</p>\n<ul>\n<li>InstallStart 被匹配到开始执行安装，pm 的清单配置文件匹配到特定的 action 和 mimeType 会启动对应的 activity</li>\n<li>跳转到 InstallStaging activity</li>\n<li>再跳转到 PackageInstallerActivity</li>\n</ul>\n<p>3、安装包类型</p>\n<ul>\n<li>普通型</li>\n<li>系统（使用系统签名 Application.FLAGE_SYSYEM）\n<ul>\n<li>具有特定 shareUID 的应用</li>\n<li>在特定目录安装的应用（如 /system/app、/vendor/app、//oem/app）</li>\n</ul>\n</li>\n<li>特权（Application.PRIVATE_FLAG_PRIVILEGEN）\n<ul>\n<li>具有特定 shareUID 的应用</li>\n<li>在特定目录安装的应用（如 /system/framework、/system/friv-app、/vendor/priv-app）</li>\n</ul>\n</li>\n</ul>\n<p>4、主要管理类</p>\n<ul>\n<li>PackageManager：</li>\n<li>IPackageManager：aidl 接口，实现类 packageManagerService（implement IPackageManager.Sub）</li>\n<li>AppOpsManager：动态权限监测</li>\n<li>UserManager：安装包升级、卸载、安装</li>\n<li>PackageInstaller：多用户管理</li>\n</ul>\n<p>5、安装后的流程</p>\n<ul>\n<li>成功</li>\n<li>失败</li>\n</ul>\n<p>6、代码位置</p>\n<blockquote>\n<p>重要路径</p>\n</blockquote>\n<ul>\n<li>base/core/java/android/content/pm</li>\n<li>base/services/core/java/com/android/server/pm【服务】</li>\n<li>base/packages/PackageInstaller【入口】</li>\n</ul>\n<blockquote>\n<p>目录结构</p>\n</blockquote>\n<ul>\n<li>pm\n<ul>\n<li>dex</li>\n<li>overlay</li>\n<li>parsing</li>\n<li>permission</li>\n<li>split</li>\n<li>verify\n<ul>\n<li>domain</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>InstallStart</h1>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java</p>\n</blockquote>\n<p>此类是安装流程开始第一个可见的界面 activity，负责把外部传入的 intent 进行分发。</p>\n<p>关于 InstallStart 在 AndroidManifest 的配置：</p>\n<ul>\n<li>exported=true</li>\n<li>excludeFromRecents=true</li>\n<li>scheme=content</li>\n<li>action=action.VIEW</li>\n<li>action=action.INSTALL_PACKAGE</li>\n<li>mimeType=application/vnd.android.package-archive【数据类型匹配规则：mimeType + url,此 mimeType 的值即表示 data 数据是安装包】</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstallStart</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pm;</span><br><span class=\"line\">    um;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//携带安装包信息</span></span><br><span class=\"line\">        Intent intent = getIntent();</span><br><span class=\"line\">        <span class=\"comment\">//需知道是哪个应用调用安装，返回调用者包名，进一步知道调用者 uid</span></span><br><span class=\"line\">        String callingPackage = getCallingPackage();</span><br><span class=\"line\">        <span class=\"comment\">//确保调用者是可信任的</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isTrustedSource = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//不可信任、无权限、未知 sdk 版本</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isTrustedSource &amp;&amp; originatingUid != PackageInstaller.SessionParams.UID_UNKNOWN) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> targetSdkVersion = getMaxTargetSdkVersionForUid(<span class=\"keyword\">this</span>, originatingUid);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetSdkVersion &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                mAbortInstall = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetSdkVersion &gt;= Build.VERSION_CODES.O &amp;&amp; !isUidRequestingPermission(</span><br><span class=\"line\">                    originatingUid, Manifest.permission.REQUEST_INSTALL_PACKAGES)) &#123;</span><br><span class=\"line\">                mAbortInstall = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mAbortInstall) &#123;</span><br><span class=\"line\">            setResult(RESULT_CANCELED);</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//此处主要是关注 intent 被转发的下一个 activity</span></span><br><span class=\"line\">        Intent nextActivity = <span class=\"keyword\">new</span> Intent(intent);</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSessionInstall) &#123;</span><br><span class=\"line\">            nextActivity.setClass(<span class=\"keyword\">this</span>, PackageInstallerActivity.class);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Uri packageUri = intent.getData();</span><br><span class=\"line\">            <span class=\"comment\">//androidManifest 配置了两个 action，看外部调用者如何配置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (packageUri != <span class=\"keyword\">null</span> &amp;&amp; packageUri.getScheme().equals(</span><br><span class=\"line\">                    ContentResolver.SCHEME_CONTENT)) &#123;</span><br><span class=\"line\">                nextActivity.setClass(<span class=\"keyword\">this</span>, InstallStaging.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (packageUri != <span class=\"keyword\">null</span> &amp;&amp; packageUri.getScheme().equals(</span><br><span class=\"line\">                    PackageInstallerActivity.SCHEME_PACKAGE)) &#123;</span><br><span class=\"line\">                nextActivity.setClass(<span class=\"keyword\">this</span>, PackageInstallerActivity.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Intent result = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                result.putExtra(Intent.EXTRA_INSTALL_RESULT,</span><br><span class=\"line\">                        PackageManager.INSTALL_FAILED_INVALID_URI);</span><br><span class=\"line\">                setResult(RESULT_FIRST_USER, result);</span><br><span class=\"line\">                nextActivity = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextActivity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            startActivity(nextActivity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很明显，InstallStart 选择将 intent 分发给那个界面：</p>\n<ul>\n<li>PackageInstallerActivity【根据 session 判断选择，我们认为用户首次安装时候不会走此分支】</li>\n<li>InstallStaging【用户第一次安装应当走此分支】</li>\n</ul>\n<h2 id=\"InstallStaging\">InstallStaging</h2>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstallStaging</span> <span class=\"keyword\">extends</span> <span class=\"title\">AlertActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//异步任务</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"meta\">@Nullable</span> StagingAsyncTask mStagingTask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStagingTask == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mStagedFile == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    mStagedFile = TemporaryFileManager.getStagedFile(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    showError();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动任务</span></span><br><span class=\"line\">            mStagingTask = <span class=\"keyword\">new</span> StagingAsyncTask();</span><br><span class=\"line\">            mStagingTask.execute(getIntent().getData());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StagingAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Uri</span>, <span class=\"title\">Void</span>, <span class=\"title\">Boolean</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Boolean <span class=\"title\">doInBackground</span><span class=\"params\">(Uri... params)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (params == <span class=\"keyword\">null</span> || params.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Uri packageUri = params[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (InputStream in = getContentResolver().openInputStream(packageUri)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> (OutputStream out = <span class=\"keyword\">new</span> FileOutputStream(mStagedFile)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//把 data 数据写入文件中</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | SecurityException | IllegalStateException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Boolean success)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">                Intent installIntent = <span class=\"keyword\">new</span> Intent(getIntent());</span><br><span class=\"line\">                installIntent.setClass(InstallStaging.<span class=\"keyword\">this</span>, DeleteStagedFileOnResult.class);</span><br><span class=\"line\">                <span class=\"comment\">//数据</span></span><br><span class=\"line\">                installIntent.setData(Uri.fromFile(mStagedFile));</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (installIntent.getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class=\"keyword\">false</span>)) &#123;</span><br><span class=\"line\">                    installIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                installIntent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);</span><br><span class=\"line\">                startActivity(installIntent);</span><br><span class=\"line\"></span><br><span class=\"line\">                InstallStaging.<span class=\"keyword\">this</span>.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文件写入成功，接着跳转到下一个界面 DeleteStagedFileOnResult。</p>\n<h3 id=\"DeleteStagedFileOnResult\">DeleteStagedFileOnResult</h3>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/DeleteStagedFileOnResult.java</p>\n</blockquote>\n<p>删除安装包文件要单独起一个跳板？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeleteStagedFileOnResult</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (savedInstanceState == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Intent installIntent = <span class=\"keyword\">new</span> Intent(getIntent());</span><br><span class=\"line\">            installIntent.setClass(<span class=\"keyword\">this</span>, PackageInstallerActivity.class);</span><br><span class=\"line\">            installIntent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);</span><br><span class=\"line\">            startActivityForResult(installIntent, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">        setResult(resultCode, data);</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFinishing()) &#123;</span><br><span class=\"line\">            File sourceFile = <span class=\"keyword\">new</span> File(getIntent().getData().getPath());</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(sourceFile::delete).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>PackageInstallerActivity</h1>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</p>\n</blockquote>\n<p>主要负责解析安装包信息，解析失败则提示错误，解析成功提示安装‘未知应用’，如果内存许可则进行下一步安装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageInstallerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AlertActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pm;</span><br><span class=\"line\">    ipm;<span class=\"comment\">//pms packageManagerService</span></span><br><span class=\"line\">    ops;</span><br><span class=\"line\">    um;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle icicle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Intent intent = getIntent();</span><br><span class=\"line\">        <span class=\"comment\">//安装包 uri</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Uri packageUri;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (PackageInstaller.ACTION_CONFIRM_INSTALL.equals(intent.getAction())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> PackageInstaller.SessionInfo info = mInstaller.getSessionInfo(sessionId);</span><br><span class=\"line\">            packageUri = Uri.fromFile(<span class=\"keyword\">new</span> File(info.resolvedBaseCodePath));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            packageUri = intent.getData();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (packageUri == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            setPmResult(PackageManager.INSTALL_FAILED_INVALID_URI);</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> wasSetUp = processPackageUri(packageUri);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!wasSetUp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        解析获得数据</span></span><br><span class=\"line\"><span class=\"comment\">        mAppSnippet：应用图标和名称</span></span><br><span class=\"line\"><span class=\"comment\">        mPkgInfo：</span></span><br><span class=\"line\"><span class=\"comment\">        mPackageURI：</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">processPackageUri</span><span class=\"params\">(<span class=\"keyword\">final</span> Uri packageUri)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String scheme = packageUri.getScheme();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (scheme) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SCHEME_PACKAGE: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    mPkgInfo = mPm.getPackageInfo(packageUri.getSchemeSpecificPart(),</span><br><span class=\"line\">                            PackageManager.GET_PERMISSIONS</span><br><span class=\"line\">                                    | PackageManager.MATCH_UNINSTALLED_PACKAGES);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (NameNotFoundException e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mPkgInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                CharSequence label = mPm.getApplicationLabel(mPkgInfo.applicationInfo);</span><br><span class=\"line\">                mAppSnippet = <span class=\"keyword\">new</span> PackageUtil.AppSnippet(label,</span><br><span class=\"line\">                        mPm.getApplicationIcon(mPkgInfo.applicationInfo));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> ContentResolver.SCHEME_FILE: &#123;</span><br><span class=\"line\">                File sourceFile = <span class=\"keyword\">new</span> File(packageUri.getPath());</span><br><span class=\"line\">                mPkgInfo = PackageUtil.getPackageInfo(<span class=\"keyword\">this</span>, sourceFile,</span><br><span class=\"line\">                        PackageManager.GET_PERMISSIONS);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mPkgInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mAppSnippet = PackageUtil.getAppSnippet(<span class=\"keyword\">this</span>, mPkgInfo.applicationInfo, sourceFile);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Unexpected URI scheme &quot;</span> + packageUri);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mAppSnippet != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//安装提示界面，设置包名、图标，点击确认开始安装：startInstall();</span></span><br><span class=\"line\">            bindUi();</span><br><span class=\"line\">            <span class=\"comment\">//如果已安装有相同包名的应用，则更新 UI 为‘更新应用’，</span></span><br><span class=\"line\">            checkIfAllowedAndInitiateInstall();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//该方法是点击‘安装’执行，将跳转到下一个 activity</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startInstall</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Intent newIntent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">        newIntent.putExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO,</span><br><span class=\"line\">                mPkgInfo.applicationInfo);</span><br><span class=\"line\">        newIntent.setData(mPackageURI);</span><br><span class=\"line\">        newIntent.setClass(<span class=\"keyword\">this</span>, InstallInstalling.class);</span><br><span class=\"line\">        String installerPackageName = getIntent().getStringExtra(</span><br><span class=\"line\">                Intent.EXTRA_INSTALLER_PACKAGE_NAME);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (installerPackageName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            newIntent.putExtra(Intent.EXTRA_INSTALLER_PACKAGE_NAME,</span><br><span class=\"line\">                    installerPackageName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);</span><br><span class=\"line\">        startActivity(newIntent);</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>InstallInstalling</h1>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallInstalling.java</p>\n</blockquote>\n<p>PackageManager 实现类 ApplicationPackageManager。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstallInstalling</span> <span class=\"keyword\">extends</span> <span class=\"title\">AlertActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//异步任务</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InstallingAsyncTask mInstallingTask;</span><br><span class=\"line\">    <span class=\"comment\">//安装包</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Uri mPackageURI;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        mPackageURI = getIntent().getData();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;package&quot;</span>.equals(mPackageURI.getScheme())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                getPackageManager().installExistingPackage(appInfo.packageName);</span><br><span class=\"line\">                <span class=\"comment\">//分支1，应用已经安装，将进入 InstallSuccess activity</span></span><br><span class=\"line\">                launchSuccess();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//分支2</span></span><br><span class=\"line\">                launchFailure(PackageInstaller.STATUS_FAILURE,</span><br><span class=\"line\">                        PackageManager.INSTALL_FAILED_INTERNAL_ERROR, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (savedInstanceState != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//注册安装事件监听</span></span><br><span class=\"line\">                    InstallEventReceiver.addObserver(<span class=\"keyword\">this</span>, mInstallId,<span class=\"keyword\">this</span>::launchFinishBasedOnResult);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (EventResultPersister.OutOfIdsException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Does not happen</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                PackageInstaller.SessionParams params = <span class=\"keyword\">new</span> PackageInstaller.SessionParams(</span><br><span class=\"line\">                        PackageInstaller.SessionParams.MODE_FULL_INSTALL);</span><br><span class=\"line\">                <span class=\"comment\">//解析安装包</span></span><br><span class=\"line\">                File file = <span class=\"keyword\">new</span> File(mPackageURI.getPath());</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> ParseTypeImpl input = ParseTypeImpl.forDefaultParsing();</span><br><span class=\"line\">                    <span class=\"comment\">//开始解析，一种是解析目录下的文件，另一种是解析 apk 本身</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> ParseResult&lt;PackageLite&gt; result = ApkLiteParseUtils.parsePackageLite(</span><br><span class=\"line\">                            input.reset(), file, <span class=\"comment\">/* flags */</span> <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (result.isError()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//解析错误为什么设置长度为文件大小？</span></span><br><span class=\"line\">                        params.setSize(file.length());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> PackageLite pkg = result.getResult();</span><br><span class=\"line\">                        params.setAppPackageName(pkg.getPackageName());</span><br><span class=\"line\">                        params.setInstallLocation(pkg.getInstallLocation());</span><br><span class=\"line\">                        params.setSize(</span><br><span class=\"line\">                                PackageHelper.calculateInstalledSize(pkg, params.abiOverride));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    params.setSize(file.length());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//解析成功，同样需要监听安装事件</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//这是一个系统广播</span></span><br><span class=\"line\">                    mInstallId = InstallEventReceiver</span><br><span class=\"line\">                            .addObserver(<span class=\"keyword\">this</span>, EventResultPersister.GENERATE_NEW_ID,</span><br><span class=\"line\">                                    <span class=\"keyword\">this</span>::launchFinishBasedOnResult);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (EventResultPersister.OutOfIdsException e) &#123;</span><br><span class=\"line\">                    launchFailure(PackageInstaller.STATUS_FAILURE,</span><br><span class=\"line\">                            PackageManager.INSTALL_FAILED_INTERNAL_ERROR, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始安装</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mInstallingTask == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            PackageInstaller installer = getPackageManager().getPackageInstaller();</span><br><span class=\"line\">            PackageInstaller.SessionInfo sessionInfo = installer.getSessionInfo(mSessionId);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sessionInfo != <span class=\"keyword\">null</span> &amp;&amp; !sessionInfo.isActive()) &#123;</span><br><span class=\"line\">                mInstallingTask = <span class=\"keyword\">new</span> InstallingAsyncTask();</span><br><span class=\"line\">                mInstallingTask.execute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"parsePackageLite\">parsePackageLite</h2>\n<blockquote>\n<p>base/core/java/android/content/pm/parsing/ApkLiteParseUtils.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一种是目录，另一种是文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ParseResult&lt;PackageLite&gt; <span class=\"title\">parsePackageLite</span><span class=\"params\">(ParseInput input,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        File packageFile, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//无论哪个分支，最终都会走 parseApkLite</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (packageFile.isDirectory()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseClusterPackageLite(input, packageFile, flags);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseMonolithicPackageLite(input, packageFile, flags);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ParseResult&lt;PackageLite&gt; <span class=\"title\">parseClusterPackageLite</span><span class=\"params\">(ParseInput input,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        File packageDir, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File file : files) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//XmlResourceParser: 解析 AndroidManifest.xml，versioncode、安装位置等</span></span><br><span class=\"line\">        <span class=\"comment\">//ApkAssets: 主要实现在 ApkAssets.cpp，ApkAssets.nativeLoad、ApkAssets.nativeLoadFd</span></span><br><span class=\"line\">        <span class=\"comment\">//ParsingPackageUtils.getSigningDetails：解析获取签名信息</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ParseResult&lt;ApkLite&gt; result = parseApkLite(input, file, flags);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InstallingAsyncTask\">InstallingAsyncTask</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> PackageInstaller.<span class=\"function\">Session <span class=\"title\">doInBackground</span><span class=\"params\">(Void... params)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//把安装包数据写入</span></span><br><span class=\"line\">    PackageInstaller.Session session;</span><br><span class=\"line\">    File file = <span class=\"keyword\">new</span> File(mPackageURI.getPath());</span><br><span class=\"line\">    OutputStream out = session.openWrite(<span class=\"string\">&quot;PackageInstaller&quot;</span>, <span class=\"number\">0</span>, sizeBytes)</span><br><span class=\"line\">    out.write(buffer, <span class=\"number\">0</span>, numRead);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(PackageInstaller.Session session)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//提交安装</span></span><br><span class=\"line\">    Intent broadcastIntent = <span class=\"keyword\">new</span> Intent(BROADCAST_ACTION);</span><br><span class=\"line\">    broadcastIntent.setPackage(getPackageName());</span><br><span class=\"line\">    PendingIntent pendingIntent = PendingIntent.getBroadcast(</span><br><span class=\"line\">                    InstallInstalling.<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                    mInstallId,</span><br><span class=\"line\">                    broadcastIntent,</span><br><span class=\"line\">                    PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE);</span><br><span class=\"line\">    <span class=\"comment\">//提交到 PackageInstallerSession.commit 执行</span></span><br><span class=\"line\">        <span class=\"comment\">//1、启动安装流程 send message MSG_ON_SESSION_SEALED</span></span><br><span class=\"line\">        <span class=\"comment\">//2、安装前的检验 send message MSG_STREAM_VALIDATE_AND_COMMIT，handleSessionSealed、handleStreamValidateAndCommit();【apk 或 apex】</span></span><br><span class=\"line\">        <span class=\"comment\">//3、开始安装 send message MSG_STREAM_VALIDATE_AND_COMMIT，StagingManager.commitSession</span></span><br><span class=\"line\">        <span class=\"comment\">//4、重启验证 PreRebootVerificationHandler.startPreRebootVerification，send message MSG_PRE_REBOOT_VERIFICATION_START，验证 apex、apk</span></span><br><span class=\"line\">        <span class=\"comment\">//5、重启验证结束，启动检查点服务 onPreRebootVerificationComplete</span></span><br><span class=\"line\">        <span class=\"comment\">//6、蒙圈了，不知道执行到哪里去了</span></span><br><span class=\"line\">        <span class=\"comment\">//7、通过广告回调安装成功 dispatchSessionFinished、mPm.sendSessionCommitBroadcast、mContext.sendBroadcastAsUser</span></span><br><span class=\"line\">    session.commit(pendingIntent.getIntentSender());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InstallSuccess\">InstallSuccess</h2>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallSuccess.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstallSuccess</span> <span class=\"keyword\">extends</span> <span class=\"title\">AlertActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果已安装该引用，则根据包名获取 intent 并启动（是在不需要返回安装结果的情况下）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Intent mLaunchIntent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class=\"keyword\">false</span>)) &#123;</span><br><span class=\"line\">            Intent result = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">            result.putExtra(Intent.EXTRA_INSTALL_RESULT, PackageManager.INSTALL_SUCCEEDED);</span><br><span class=\"line\">            setResult(Activity.RESULT_OK, result);</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Intent intent = getIntent();</span><br><span class=\"line\">            ApplicationInfo appInfo =</span><br><span class=\"line\">                    intent.getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);</span><br><span class=\"line\">            mAppPackageName = appInfo.packageName;</span><br><span class=\"line\">            PackageManager pm = getPackageManager();</span><br><span class=\"line\">            mLaunchIntent = getPackageManager().getLaunchIntentForPackage(mAppPackageName);</span><br><span class=\"line\">            <span class=\"comment\">//条件允许情况将显示打开已安装应用按钮，startActivity(mLaunchIntent);</span></span><br><span class=\"line\">            bindUi();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InstallFailed\">InstallFailed</h2>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallFailed.java</p>\n</blockquote>\n<p>安装失败没有太多的其他逻辑，只会想用户展示安装失败的对话框以及说明失败原因</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Warm-up</h1>\n<p>1、安装方式（系统）</p>\n<ul>\n<li>adb 安装（程序）</li>\n<li>点击安装（用户）</li>\n<li>第三方应用安装（用户）</li>\n</ul>\n<p>2、安装入口流程</p>\n<ul>\n<li>InstallStart 被匹配到开始执行安装，pm 的清单配置文件匹配到特定的 action 和 mimeType 会启动对应的 activity</li>\n<li>跳转到 InstallStaging activity</li>\n<li>再跳转到 PackageInstallerActivity</li>\n</ul>\n<p>3、安装包类型</p>\n<ul>\n<li>普通型</li>\n<li>系统（使用系统签名 Application.FLAGE_SYSYEM）\n<ul>\n<li>具有特定 shareUID 的应用</li>\n<li>在特定目录安装的应用（如 /system/app、/vendor/app、//oem/app）</li>\n</ul>\n</li>\n<li>特权（Application.PRIVATE_FLAG_PRIVILEGEN）\n<ul>\n<li>具有特定 shareUID 的应用</li>\n<li>在特定目录安装的应用（如 /system/framework、/system/friv-app、/vendor/priv-app）</li>\n</ul>\n</li>\n</ul>\n<p>4、主要管理类</p>\n<ul>\n<li>PackageManager：</li>\n<li>IPackageManager：aidl 接口，实现类 packageManagerService（implement IPackageManager.Sub）</li>\n<li>AppOpsManager：动态权限监测</li>\n<li>UserManager：安装包升级、卸载、安装</li>\n<li>PackageInstaller：多用户管理</li>\n</ul>\n<p>5、安装后的流程</p>\n<ul>\n<li>成功</li>\n<li>失败</li>\n</ul>\n<p>6、代码位置</p>\n<blockquote>\n<p>重要路径</p>\n</blockquote>\n<ul>\n<li>base/core/java/android/content/pm</li>\n<li>base/services/core/java/com/android/server/pm【服务】</li>\n<li>base/packages/PackageInstaller【入口】</li>\n</ul>\n<blockquote>\n<p>目录结构</p>\n</blockquote>\n<ul>\n<li>pm\n<ul>\n<li>dex</li>\n<li>overlay</li>\n<li>parsing</li>\n<li>permission</li>\n<li>split</li>\n<li>verify\n<ul>\n<li>domain</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>InstallStart</h1>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java</p>\n</blockquote>\n<p>此类是安装流程开始第一个可见的界面 activity，负责把外部传入的 intent 进行分发。</p>\n<p>关于 InstallStart 在 AndroidManifest 的配置：</p>\n<ul>\n<li>exported=true</li>\n<li>excludeFromRecents=true</li>\n<li>scheme=content</li>\n<li>action=action.VIEW</li>\n<li>action=action.INSTALL_PACKAGE</li>\n<li>mimeType=application/vnd.android.package-archive【数据类型匹配规则：mimeType + url,此 mimeType 的值即表示 data 数据是安装包】</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstallStart</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pm;</span><br><span class=\"line\">    um;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//携带安装包信息</span></span><br><span class=\"line\">        Intent intent = getIntent();</span><br><span class=\"line\">        <span class=\"comment\">//需知道是哪个应用调用安装，返回调用者包名，进一步知道调用者 uid</span></span><br><span class=\"line\">        String callingPackage = getCallingPackage();</span><br><span class=\"line\">        <span class=\"comment\">//确保调用者是可信任的</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isTrustedSource = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//不可信任、无权限、未知 sdk 版本</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isTrustedSource &amp;&amp; originatingUid != PackageInstaller.SessionParams.UID_UNKNOWN) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> targetSdkVersion = getMaxTargetSdkVersionForUid(<span class=\"keyword\">this</span>, originatingUid);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetSdkVersion &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                mAbortInstall = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetSdkVersion &gt;= Build.VERSION_CODES.O &amp;&amp; !isUidRequestingPermission(</span><br><span class=\"line\">                    originatingUid, Manifest.permission.REQUEST_INSTALL_PACKAGES)) &#123;</span><br><span class=\"line\">                mAbortInstall = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mAbortInstall) &#123;</span><br><span class=\"line\">            setResult(RESULT_CANCELED);</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//此处主要是关注 intent 被转发的下一个 activity</span></span><br><span class=\"line\">        Intent nextActivity = <span class=\"keyword\">new</span> Intent(intent);</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSessionInstall) &#123;</span><br><span class=\"line\">            nextActivity.setClass(<span class=\"keyword\">this</span>, PackageInstallerActivity.class);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Uri packageUri = intent.getData();</span><br><span class=\"line\">            <span class=\"comment\">//androidManifest 配置了两个 action，看外部调用者如何配置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (packageUri != <span class=\"keyword\">null</span> &amp;&amp; packageUri.getScheme().equals(</span><br><span class=\"line\">                    ContentResolver.SCHEME_CONTENT)) &#123;</span><br><span class=\"line\">                nextActivity.setClass(<span class=\"keyword\">this</span>, InstallStaging.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (packageUri != <span class=\"keyword\">null</span> &amp;&amp; packageUri.getScheme().equals(</span><br><span class=\"line\">                    PackageInstallerActivity.SCHEME_PACKAGE)) &#123;</span><br><span class=\"line\">                nextActivity.setClass(<span class=\"keyword\">this</span>, PackageInstallerActivity.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Intent result = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                result.putExtra(Intent.EXTRA_INSTALL_RESULT,</span><br><span class=\"line\">                        PackageManager.INSTALL_FAILED_INVALID_URI);</span><br><span class=\"line\">                setResult(RESULT_FIRST_USER, result);</span><br><span class=\"line\">                nextActivity = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextActivity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            startActivity(nextActivity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很明显，InstallStart 选择将 intent 分发给那个界面：</p>\n<ul>\n<li>PackageInstallerActivity【根据 session 判断选择，我们认为用户首次安装时候不会走此分支】</li>\n<li>InstallStaging【用户第一次安装应当走此分支】</li>\n</ul>\n<h2 id=\"InstallStaging\">InstallStaging</h2>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstallStaging</span> <span class=\"keyword\">extends</span> <span class=\"title\">AlertActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//异步任务</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"meta\">@Nullable</span> StagingAsyncTask mStagingTask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStagingTask == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mStagedFile == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    mStagedFile = TemporaryFileManager.getStagedFile(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    showError();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动任务</span></span><br><span class=\"line\">            mStagingTask = <span class=\"keyword\">new</span> StagingAsyncTask();</span><br><span class=\"line\">            mStagingTask.execute(getIntent().getData());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StagingAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Uri</span>, <span class=\"title\">Void</span>, <span class=\"title\">Boolean</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Boolean <span class=\"title\">doInBackground</span><span class=\"params\">(Uri... params)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (params == <span class=\"keyword\">null</span> || params.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Uri packageUri = params[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (InputStream in = getContentResolver().openInputStream(packageUri)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> (OutputStream out = <span class=\"keyword\">new</span> FileOutputStream(mStagedFile)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//把 data 数据写入文件中</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | SecurityException | IllegalStateException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Boolean success)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">                Intent installIntent = <span class=\"keyword\">new</span> Intent(getIntent());</span><br><span class=\"line\">                installIntent.setClass(InstallStaging.<span class=\"keyword\">this</span>, DeleteStagedFileOnResult.class);</span><br><span class=\"line\">                <span class=\"comment\">//数据</span></span><br><span class=\"line\">                installIntent.setData(Uri.fromFile(mStagedFile));</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (installIntent.getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class=\"keyword\">false</span>)) &#123;</span><br><span class=\"line\">                    installIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                installIntent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);</span><br><span class=\"line\">                startActivity(installIntent);</span><br><span class=\"line\"></span><br><span class=\"line\">                InstallStaging.<span class=\"keyword\">this</span>.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文件写入成功，接着跳转到下一个界面 DeleteStagedFileOnResult。</p>\n<h3 id=\"DeleteStagedFileOnResult\">DeleteStagedFileOnResult</h3>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/DeleteStagedFileOnResult.java</p>\n</blockquote>\n<p>删除安装包文件要单独起一个跳板？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeleteStagedFileOnResult</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (savedInstanceState == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Intent installIntent = <span class=\"keyword\">new</span> Intent(getIntent());</span><br><span class=\"line\">            installIntent.setClass(<span class=\"keyword\">this</span>, PackageInstallerActivity.class);</span><br><span class=\"line\">            installIntent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);</span><br><span class=\"line\">            startActivityForResult(installIntent, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">        setResult(resultCode, data);</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFinishing()) &#123;</span><br><span class=\"line\">            File sourceFile = <span class=\"keyword\">new</span> File(getIntent().getData().getPath());</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(sourceFile::delete).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>PackageInstallerActivity</h1>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/PackageInstallerActivity.java</p>\n</blockquote>\n<p>主要负责解析安装包信息，解析失败则提示错误，解析成功提示安装‘未知应用’，如果内存许可则进行下一步安装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageInstallerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AlertActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pm;</span><br><span class=\"line\">    ipm;<span class=\"comment\">//pms packageManagerService</span></span><br><span class=\"line\">    ops;</span><br><span class=\"line\">    um;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle icicle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Intent intent = getIntent();</span><br><span class=\"line\">        <span class=\"comment\">//安装包 uri</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Uri packageUri;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (PackageInstaller.ACTION_CONFIRM_INSTALL.equals(intent.getAction())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> PackageInstaller.SessionInfo info = mInstaller.getSessionInfo(sessionId);</span><br><span class=\"line\">            packageUri = Uri.fromFile(<span class=\"keyword\">new</span> File(info.resolvedBaseCodePath));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            packageUri = intent.getData();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (packageUri == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            setPmResult(PackageManager.INSTALL_FAILED_INVALID_URI);</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> wasSetUp = processPackageUri(packageUri);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!wasSetUp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        解析获得数据</span></span><br><span class=\"line\"><span class=\"comment\">        mAppSnippet：应用图标和名称</span></span><br><span class=\"line\"><span class=\"comment\">        mPkgInfo：</span></span><br><span class=\"line\"><span class=\"comment\">        mPackageURI：</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">processPackageUri</span><span class=\"params\">(<span class=\"keyword\">final</span> Uri packageUri)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String scheme = packageUri.getScheme();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (scheme) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SCHEME_PACKAGE: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    mPkgInfo = mPm.getPackageInfo(packageUri.getSchemeSpecificPart(),</span><br><span class=\"line\">                            PackageManager.GET_PERMISSIONS</span><br><span class=\"line\">                                    | PackageManager.MATCH_UNINSTALLED_PACKAGES);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (NameNotFoundException e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mPkgInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                CharSequence label = mPm.getApplicationLabel(mPkgInfo.applicationInfo);</span><br><span class=\"line\">                mAppSnippet = <span class=\"keyword\">new</span> PackageUtil.AppSnippet(label,</span><br><span class=\"line\">                        mPm.getApplicationIcon(mPkgInfo.applicationInfo));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> ContentResolver.SCHEME_FILE: &#123;</span><br><span class=\"line\">                File sourceFile = <span class=\"keyword\">new</span> File(packageUri.getPath());</span><br><span class=\"line\">                mPkgInfo = PackageUtil.getPackageInfo(<span class=\"keyword\">this</span>, sourceFile,</span><br><span class=\"line\">                        PackageManager.GET_PERMISSIONS);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mPkgInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mAppSnippet = PackageUtil.getAppSnippet(<span class=\"keyword\">this</span>, mPkgInfo.applicationInfo, sourceFile);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Unexpected URI scheme &quot;</span> + packageUri);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mAppSnippet != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//安装提示界面，设置包名、图标，点击确认开始安装：startInstall();</span></span><br><span class=\"line\">            bindUi();</span><br><span class=\"line\">            <span class=\"comment\">//如果已安装有相同包名的应用，则更新 UI 为‘更新应用’，</span></span><br><span class=\"line\">            checkIfAllowedAndInitiateInstall();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//该方法是点击‘安装’执行，将跳转到下一个 activity</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startInstall</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Intent newIntent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">        newIntent.putExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO,</span><br><span class=\"line\">                mPkgInfo.applicationInfo);</span><br><span class=\"line\">        newIntent.setData(mPackageURI);</span><br><span class=\"line\">        newIntent.setClass(<span class=\"keyword\">this</span>, InstallInstalling.class);</span><br><span class=\"line\">        String installerPackageName = getIntent().getStringExtra(</span><br><span class=\"line\">                Intent.EXTRA_INSTALLER_PACKAGE_NAME);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (installerPackageName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            newIntent.putExtra(Intent.EXTRA_INSTALLER_PACKAGE_NAME,</span><br><span class=\"line\">                    installerPackageName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);</span><br><span class=\"line\">        startActivity(newIntent);</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>InstallInstalling</h1>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallInstalling.java</p>\n</blockquote>\n<p>PackageManager 实现类 ApplicationPackageManager。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstallInstalling</span> <span class=\"keyword\">extends</span> <span class=\"title\">AlertActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//异步任务</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InstallingAsyncTask mInstallingTask;</span><br><span class=\"line\">    <span class=\"comment\">//安装包</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Uri mPackageURI;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        mPackageURI = getIntent().getData();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;package&quot;</span>.equals(mPackageURI.getScheme())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                getPackageManager().installExistingPackage(appInfo.packageName);</span><br><span class=\"line\">                <span class=\"comment\">//分支1，应用已经安装，将进入 InstallSuccess activity</span></span><br><span class=\"line\">                launchSuccess();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//分支2</span></span><br><span class=\"line\">                launchFailure(PackageInstaller.STATUS_FAILURE,</span><br><span class=\"line\">                        PackageManager.INSTALL_FAILED_INTERNAL_ERROR, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (savedInstanceState != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//注册安装事件监听</span></span><br><span class=\"line\">                    InstallEventReceiver.addObserver(<span class=\"keyword\">this</span>, mInstallId,<span class=\"keyword\">this</span>::launchFinishBasedOnResult);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (EventResultPersister.OutOfIdsException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Does not happen</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                PackageInstaller.SessionParams params = <span class=\"keyword\">new</span> PackageInstaller.SessionParams(</span><br><span class=\"line\">                        PackageInstaller.SessionParams.MODE_FULL_INSTALL);</span><br><span class=\"line\">                <span class=\"comment\">//解析安装包</span></span><br><span class=\"line\">                File file = <span class=\"keyword\">new</span> File(mPackageURI.getPath());</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> ParseTypeImpl input = ParseTypeImpl.forDefaultParsing();</span><br><span class=\"line\">                    <span class=\"comment\">//开始解析，一种是解析目录下的文件，另一种是解析 apk 本身</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> ParseResult&lt;PackageLite&gt; result = ApkLiteParseUtils.parsePackageLite(</span><br><span class=\"line\">                            input.reset(), file, <span class=\"comment\">/* flags */</span> <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (result.isError()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//解析错误为什么设置长度为文件大小？</span></span><br><span class=\"line\">                        params.setSize(file.length());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> PackageLite pkg = result.getResult();</span><br><span class=\"line\">                        params.setAppPackageName(pkg.getPackageName());</span><br><span class=\"line\">                        params.setInstallLocation(pkg.getInstallLocation());</span><br><span class=\"line\">                        params.setSize(</span><br><span class=\"line\">                                PackageHelper.calculateInstalledSize(pkg, params.abiOverride));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    params.setSize(file.length());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//解析成功，同样需要监听安装事件</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//这是一个系统广播</span></span><br><span class=\"line\">                    mInstallId = InstallEventReceiver</span><br><span class=\"line\">                            .addObserver(<span class=\"keyword\">this</span>, EventResultPersister.GENERATE_NEW_ID,</span><br><span class=\"line\">                                    <span class=\"keyword\">this</span>::launchFinishBasedOnResult);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (EventResultPersister.OutOfIdsException e) &#123;</span><br><span class=\"line\">                    launchFailure(PackageInstaller.STATUS_FAILURE,</span><br><span class=\"line\">                            PackageManager.INSTALL_FAILED_INTERNAL_ERROR, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始安装</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mInstallingTask == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            PackageInstaller installer = getPackageManager().getPackageInstaller();</span><br><span class=\"line\">            PackageInstaller.SessionInfo sessionInfo = installer.getSessionInfo(mSessionId);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sessionInfo != <span class=\"keyword\">null</span> &amp;&amp; !sessionInfo.isActive()) &#123;</span><br><span class=\"line\">                mInstallingTask = <span class=\"keyword\">new</span> InstallingAsyncTask();</span><br><span class=\"line\">                mInstallingTask.execute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"parsePackageLite\">parsePackageLite</h2>\n<blockquote>\n<p>base/core/java/android/content/pm/parsing/ApkLiteParseUtils.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一种是目录，另一种是文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ParseResult&lt;PackageLite&gt; <span class=\"title\">parsePackageLite</span><span class=\"params\">(ParseInput input,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        File packageFile, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//无论哪个分支，最终都会走 parseApkLite</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (packageFile.isDirectory()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseClusterPackageLite(input, packageFile, flags);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseMonolithicPackageLite(input, packageFile, flags);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ParseResult&lt;PackageLite&gt; <span class=\"title\">parseClusterPackageLite</span><span class=\"params\">(ParseInput input,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        File packageDir, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File file : files) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//XmlResourceParser: 解析 AndroidManifest.xml，versioncode、安装位置等</span></span><br><span class=\"line\">        <span class=\"comment\">//ApkAssets: 主要实现在 ApkAssets.cpp，ApkAssets.nativeLoad、ApkAssets.nativeLoadFd</span></span><br><span class=\"line\">        <span class=\"comment\">//ParsingPackageUtils.getSigningDetails：解析获取签名信息</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ParseResult&lt;ApkLite&gt; result = parseApkLite(input, file, flags);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InstallingAsyncTask\">InstallingAsyncTask</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> PackageInstaller.<span class=\"function\">Session <span class=\"title\">doInBackground</span><span class=\"params\">(Void... params)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//把安装包数据写入</span></span><br><span class=\"line\">    PackageInstaller.Session session;</span><br><span class=\"line\">    File file = <span class=\"keyword\">new</span> File(mPackageURI.getPath());</span><br><span class=\"line\">    OutputStream out = session.openWrite(<span class=\"string\">&quot;PackageInstaller&quot;</span>, <span class=\"number\">0</span>, sizeBytes)</span><br><span class=\"line\">    out.write(buffer, <span class=\"number\">0</span>, numRead);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(PackageInstaller.Session session)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//提交安装</span></span><br><span class=\"line\">    Intent broadcastIntent = <span class=\"keyword\">new</span> Intent(BROADCAST_ACTION);</span><br><span class=\"line\">    broadcastIntent.setPackage(getPackageName());</span><br><span class=\"line\">    PendingIntent pendingIntent = PendingIntent.getBroadcast(</span><br><span class=\"line\">                    InstallInstalling.<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                    mInstallId,</span><br><span class=\"line\">                    broadcastIntent,</span><br><span class=\"line\">                    PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE);</span><br><span class=\"line\">    <span class=\"comment\">//提交到 PackageInstallerSession.commit 执行</span></span><br><span class=\"line\">        <span class=\"comment\">//1、启动安装流程 send message MSG_ON_SESSION_SEALED</span></span><br><span class=\"line\">        <span class=\"comment\">//2、安装前的检验 send message MSG_STREAM_VALIDATE_AND_COMMIT，handleSessionSealed、handleStreamValidateAndCommit();【apk 或 apex】</span></span><br><span class=\"line\">        <span class=\"comment\">//3、开始安装 send message MSG_STREAM_VALIDATE_AND_COMMIT，StagingManager.commitSession</span></span><br><span class=\"line\">        <span class=\"comment\">//4、重启验证 PreRebootVerificationHandler.startPreRebootVerification，send message MSG_PRE_REBOOT_VERIFICATION_START，验证 apex、apk</span></span><br><span class=\"line\">        <span class=\"comment\">//5、重启验证结束，启动检查点服务 onPreRebootVerificationComplete</span></span><br><span class=\"line\">        <span class=\"comment\">//6、蒙圈了，不知道执行到哪里去了</span></span><br><span class=\"line\">        <span class=\"comment\">//7、通过广告回调安装成功 dispatchSessionFinished、mPm.sendSessionCommitBroadcast、mContext.sendBroadcastAsUser</span></span><br><span class=\"line\">    session.commit(pendingIntent.getIntentSender());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InstallSuccess\">InstallSuccess</h2>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallSuccess.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstallSuccess</span> <span class=\"keyword\">extends</span> <span class=\"title\">AlertActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果已安装该引用，则根据包名获取 intent 并启动（是在不需要返回安装结果的情况下）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Intent mLaunchIntent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class=\"keyword\">false</span>)) &#123;</span><br><span class=\"line\">            Intent result = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">            result.putExtra(Intent.EXTRA_INSTALL_RESULT, PackageManager.INSTALL_SUCCEEDED);</span><br><span class=\"line\">            setResult(Activity.RESULT_OK, result);</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Intent intent = getIntent();</span><br><span class=\"line\">            ApplicationInfo appInfo =</span><br><span class=\"line\">                    intent.getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);</span><br><span class=\"line\">            mAppPackageName = appInfo.packageName;</span><br><span class=\"line\">            PackageManager pm = getPackageManager();</span><br><span class=\"line\">            mLaunchIntent = getPackageManager().getLaunchIntentForPackage(mAppPackageName);</span><br><span class=\"line\">            <span class=\"comment\">//条件允许情况将显示打开已安装应用按钮，startActivity(mLaunchIntent);</span></span><br><span class=\"line\">            bindUi();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InstallFailed\">InstallFailed</h2>\n<blockquote>\n<p>base/packages/PackageInstaller/src/com/android/packageinstaller/InstallFailed.java</p>\n</blockquote>\n<p>安装失败没有太多的其他逻辑，只会想用户展示安装失败的对话框以及说明失败原因</p>\n"},{"title":"字节码 Class","catalog":true,"date":"2022-10-16T05:40:49.000Z","subtitle":null,"header-img":"/img/2210/page-native.jpg","_content":"\n# 字节码 Class\n \n> [关于 class 字节码](https://docs.oracle.com/javase/specs/jvms/se11/html/index.html)\n\n## Java 虚拟机结构\n\n**1、class 文件格式**\nclass 文件格式定义了类和接口的表示形式。\n\n**2、数据类型**\n主要包括两种数据类型`原始类型、引用类型`。类型检查在运行时之前，编译器进行类型检查。\n&emsp;&emsp;2.1、原始类型\n原始类型包括整形、浮点类型、布尔类型，jvm 中布尔类型使用整型 true=1  false=0 表示。\n&emsp;&emsp;2.2、引用类型\n引用类型包括类类型、数组类型和接口类型，引用类型可以是 null，默认也是 null，可以转换为任意类型。\n\n**3、运行时数据**\n&emsp;&emsp;3.1、程序计数器（pc 寄存器)\n每个线程创建时都可以拥有的，当执行 Java 方法时该寄存器存放的是当前正在执行的 jvm 指令地址，当执行 native 方法时不存放值。\n&emsp;&emsp;3.2、虚拟机堆栈\n每个线程创建时都可以拥有的，存储局部变量和中间计算结果，常用在方法调用和返回。\n&emsp;&emsp;3.3、堆\n在虚拟机启动时创建所有线程共享，主要分配给类实例和数组，堆的对象存储由垃圾收集器回收。\n&emsp;&emsp;3.4、方法区\n在虚拟机启动时创建所有线程共享，在逻辑上是堆的一部分，存储类结构信息。\n&emsp;&emsp;3.5、运行时常量池\n主要存储包括编译时已知的数字、字符和运行时需要解析的方法、字段引用符号。\n&emsp;&emsp;3.6、native 方法堆栈\n每个线程创建时分配，服务于非 Java 语言实现 jvm 指令集解析。\n\n**4、栈帧**\n每次方法调用时都会创建帧，当方法正常执行完成或异常退出方法时帧都会被销毁，帧的创建从虚拟机堆栈中分配内存（3.2），每个帧拥有自己的局部变量数组、操作数堆栈、当前方法运行时常量的引用。局部变量数组和操作数组的大小在编译时确定，当前执行的方法帧属于活跃状态又叫当前帧，对局部变量数组和操作数堆栈的操作都在当前帧上进行。\n&emsp;&emsp;4.1、局部变量\n方法内使用到的值被存储在局部变量数组中，⚠️注意 long、double 类型的值占用两个连续的局部变量，其他类型占用一个，在非静态方法中局部变量数组索引 0 的值表示当前对象的 this 引用。\n&emsp;&emsp;4.2、操作数堆栈\n常用于辅助计算。把要操作的数据（常量、局部变量值）推送到操作数栈，jvm 指令从操作数栈获取操作数进行操作（计算），再把操作结果推送到操作数栈上。\n&emsp;&emsp;4.3、动态链接\n当前帧包含当前方法类型的运行时常量引用（方法类型常量就是一字符串，存储在常量池中），支持方法的解析并能正确链接。\n&emsp;&emsp;4.4、方法返回\n如果方法正常执行完成，如果有返回值，则把返回值推送到调用该方法的帧操作数堆栈顶部；如果方法执行过程中出现异常并且内部没有捕获异常（try），那么不会向调用者返回值。\n\n**5、特殊方法**\n&emsp;&emsp;5.1、实例初始化方法 `<init>`\n该方法的声明和使用受 jvm 的限制，无需外部调用。\n&emsp;&emsp;5.2、类初始化方法 `<clinit>`\n无需外部调用。\n\n**6、其他说明**\n1、指令注记符：\ni - int\nl - ong\ns - short\nb - byte\nc - char\nf - float\nd - double\na - reference\n[ - array\n\n2、加载和存储：\n通常包含 `load` 相关指令表示`把本地变量加载到操作数堆栈`，通常包含 `store` 相关指令表示`把值从操作数堆栈存储到本地变量`，还有部分指定表示`将常量加载到操作数堆栈`。\n\n3、算数指令：\n算数指令通常是从操作数堆栈获取两个操作数进行计算，然后把计算结果推送到操作数堆栈顶部。\n\n4、操作数堆栈管理：\n表示可以直接操作操作数堆栈的指令，如 dup 复制一份栈顶数据。\n\n5、其他常用指令：\nnew —— 创建对象\nnewarray —— 创建数组\nf2i —— 浮点型转整型\ngetstatic —— 访问静态字段\ninstanceof —— 检查类实例\ncheckcast —— 检查数组\nifeq —— 条件分支\ngoto —— 无条件分支\ninvokevirtual —— 调用对象实例方法\ninvokeinterface —— 调用接口方法\ninvokespecial —— 调用实例初始化方法、当前类方法、超类方法\ninvokestatic —— 调用静态方法\ninvokedynamic —— 动态调用\n\n## Java 虚拟机编译\n\n**1、每一条字节码**\n&emsp;&emsp;格式：`<当前方法操作码指令索引> <操作码注记符> [[可选的操作数1] ...] [可选的注释]`\n&emsp;&emsp;例子：8 bipush 100 //把常量 100 推送到操作数堆栈顶部\n\n**2、访问运行时常量池**\nldc/ldc_w —— 访问 double、long 以为类型的运行时常量值（可以访问 string 类型）\nldc2_w —— 访问 double、long 类型的值（占两个连续的局部变量）\niconst —— 通常用于访问字面值较小的整型常量值\nfcmpl —— float 浮点型比较\ndcmpl —— double \n\n**3、方法参数**\n⚠️注意局部变量表大小以及使用的 iload 指令区别，关键是非静态的实例方法局部变量表内第一个索引处是当前对象 this 引用。\n```java\n//非静态方法\npublic int addA(int i,int j){\n    return i+j;\n}\n\n//对应字节码\npublic int addA(int, int);\n    descriptor: (II)I\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=3, args_size=3\n         0: iload_1\n         1: iload_2\n         2: iadd\n         3: ireturn\n      LineNumberTable:\n        line 9: 0\n```\n\n```java\n//静态方法\npublic static int addB(int i,int j){\n    return i+j;\n}\n\n//对应字节码\npublic static int addB(int, int);\n    descriptor: (II)I\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=2, args_size=2\n         0: iload_0\n         1: iload_1\n         2: iadd\n         3: ireturn\n      LineNumberTable:\n        line 13: 0\n```\n\n上述知识列举一小部分，更多详细内容可以参考官方文档，比如还有方法调用、创建类对象、创建数组、switch int、switch string、try 异常、throw 异常、finally 等。\n\n\n## class 文件格式\n\n**1、基本组成结构**\n\n```java\nClassFile {\n    u4             magic;         //class 文件格式编码 0xCAFEBABE\n    u2             minor_version; //次版本 m\n    u2             major_version; //主版本 M\n                                  //class 文件格式版本：M.m\n\n    u2             constant_pool_count;                   //常量池大小\n    cp_info        constant_pool[constant_pool_count-1];  //常量池数组\n    u2             access_flags;                          //访问权限标识 \n                  \n                  //public\\final\\super\\interface\\abstract\n                  //synthetic\\annomation\\enum\\module\n\n    u2             this_class;                    //当前类，CONSTANT_Class_info\n    u2             super_class;                   //父类，CONSTANT_Class_info\n    u2             interfaces_count;              //接口数量\n    u2             interfaces[interfaces_count];  //接口数组，CONSTANT_Class_info\n\n    u2             fields_count;                  //字段数量，包括静态变量和实例变量\n    field_info     fields[fields_count];          //字段数组，元素结构 field_info\n    u2             methods_count;                 //方法数量\n    method_info    methods[methods_count];        //方法数组，元素结构 method_info\n    u2             attributes_count;              //属性个数\n    attribute_info attributes[attributes_count];  //属性数组，元素结构 attribute_info\n}\n```\n\n\n**2、描述符**\n\n> 完全限定形式：字节码中类和接口名称表现形式，如 java.lang.String 表示为 Ljava/lang/String;\n\n- 字段类型字符串描述\n```java\nB byte    字节\nC char    字符\nD double    双精度\nF float   单精度\nI int   整数\nJ long    长整数\nL 类名;   对象（必须紧跟分号）\nS short   短整型\nZ boolean   布尔\n[ reference   一维数组（多个 [ 表示多维数组）\n```\n\n- 方法类型字符串描述（包括参数类型、返回值类型）\n```java\n//方法\nString append(int age,String name){}\n\n//方法类型签名\n(ILjava/lang/String;)Ljava/lang/String;\n```\n\n**3、常量池**\n> cp_info {\n&emsp;u1 tag; \n&emsp;u1 info[];\n}\n\n标签：\n```java\nCONSTANT_Utf8\t1\t\nCONSTANT_Integer\t3\t\nCONSTANT_Float\t4\t\nCONSTANT_Long\t5\t\nCONSTANT_Double\t6\t\nCONSTANT_Class\t7\t\nCONSTANT_String\t8\nCONSTANT_Fieldref\t9\t\nCONSTANT_Methodref\t10\t\n\nCONSTANT_InterfaceMethodref\t11\nCONSTANT_NameAndType\t12\t\nCONSTANT_MethodHandle\t15\t\nCONSTANT_MethodType\t16\t\nCONSTANT_Dynamic\t17\t\nCONSTANT_InvokeDynamic\t18\t\nCONSTANT_Module\t19\t\nCONSTANT_Package\t20\n```\n\n**4、结构体**\n> CONSTANT_Class_info {\n    u1 tag;\n    u2 name_index\n}\n\n> CONSTANT_Fieldref_info {\n    u1 tag;\n    u2 class_index;\n    u2 name_and_type_index;\n}\n\n> CONSTANT_Methodref_info {\n    u1 tag;\n    u2 class_index;\n    u2 name_and_type_index;\n}\n\n> CONSTANT_InterfaceMethodref_info {\n    u1 tag;\n    u2 class_index;\n    u2 name_and_type_index;\n}\n\n> CONSTANT_String_info {\n    u1 tag;\n    u2 string_index;\n}\n\n> CONSTANT_Integer_info {\n    u1 tag;\n    u4 bytes;\n}\n\n> CONSTANT_Long_info {\n    u1 tag;\n    u4 high_bytes;\n    u4 low_bytes;\n}\n\n等等等\n\n**5、字段**\n一个 class 文件中没有两个字段具有相同的名称和描述，方法也是如此。\n> field_info {\n    u2             access_flags; //表示访问权限或字段属性，public、static\n    u2             name_index;\n    u2             descriptor_index;\n    u2             attributes_count;\n    attribute_info attributes[attributes_count];\n}\n\n\n略略略\n\n\n# [JVM 指令集](https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html)","source":"_posts/undefined/class和dalvik字节码.md","raw":"---\ntitle: 字节码 Class\ncatalog: true\ndate: 2022-10-16 13:40:49\nsubtitle:\nheader-img: /img/2210/page-native.jpg\ntags: 字节码\ncategories:\n---\n\n# 字节码 Class\n \n> [关于 class 字节码](https://docs.oracle.com/javase/specs/jvms/se11/html/index.html)\n\n## Java 虚拟机结构\n\n**1、class 文件格式**\nclass 文件格式定义了类和接口的表示形式。\n\n**2、数据类型**\n主要包括两种数据类型`原始类型、引用类型`。类型检查在运行时之前，编译器进行类型检查。\n&emsp;&emsp;2.1、原始类型\n原始类型包括整形、浮点类型、布尔类型，jvm 中布尔类型使用整型 true=1  false=0 表示。\n&emsp;&emsp;2.2、引用类型\n引用类型包括类类型、数组类型和接口类型，引用类型可以是 null，默认也是 null，可以转换为任意类型。\n\n**3、运行时数据**\n&emsp;&emsp;3.1、程序计数器（pc 寄存器)\n每个线程创建时都可以拥有的，当执行 Java 方法时该寄存器存放的是当前正在执行的 jvm 指令地址，当执行 native 方法时不存放值。\n&emsp;&emsp;3.2、虚拟机堆栈\n每个线程创建时都可以拥有的，存储局部变量和中间计算结果，常用在方法调用和返回。\n&emsp;&emsp;3.3、堆\n在虚拟机启动时创建所有线程共享，主要分配给类实例和数组，堆的对象存储由垃圾收集器回收。\n&emsp;&emsp;3.4、方法区\n在虚拟机启动时创建所有线程共享，在逻辑上是堆的一部分，存储类结构信息。\n&emsp;&emsp;3.5、运行时常量池\n主要存储包括编译时已知的数字、字符和运行时需要解析的方法、字段引用符号。\n&emsp;&emsp;3.6、native 方法堆栈\n每个线程创建时分配，服务于非 Java 语言实现 jvm 指令集解析。\n\n**4、栈帧**\n每次方法调用时都会创建帧，当方法正常执行完成或异常退出方法时帧都会被销毁，帧的创建从虚拟机堆栈中分配内存（3.2），每个帧拥有自己的局部变量数组、操作数堆栈、当前方法运行时常量的引用。局部变量数组和操作数组的大小在编译时确定，当前执行的方法帧属于活跃状态又叫当前帧，对局部变量数组和操作数堆栈的操作都在当前帧上进行。\n&emsp;&emsp;4.1、局部变量\n方法内使用到的值被存储在局部变量数组中，⚠️注意 long、double 类型的值占用两个连续的局部变量，其他类型占用一个，在非静态方法中局部变量数组索引 0 的值表示当前对象的 this 引用。\n&emsp;&emsp;4.2、操作数堆栈\n常用于辅助计算。把要操作的数据（常量、局部变量值）推送到操作数栈，jvm 指令从操作数栈获取操作数进行操作（计算），再把操作结果推送到操作数栈上。\n&emsp;&emsp;4.3、动态链接\n当前帧包含当前方法类型的运行时常量引用（方法类型常量就是一字符串，存储在常量池中），支持方法的解析并能正确链接。\n&emsp;&emsp;4.4、方法返回\n如果方法正常执行完成，如果有返回值，则把返回值推送到调用该方法的帧操作数堆栈顶部；如果方法执行过程中出现异常并且内部没有捕获异常（try），那么不会向调用者返回值。\n\n**5、特殊方法**\n&emsp;&emsp;5.1、实例初始化方法 `<init>`\n该方法的声明和使用受 jvm 的限制，无需外部调用。\n&emsp;&emsp;5.2、类初始化方法 `<clinit>`\n无需外部调用。\n\n**6、其他说明**\n1、指令注记符：\ni - int\nl - ong\ns - short\nb - byte\nc - char\nf - float\nd - double\na - reference\n[ - array\n\n2、加载和存储：\n通常包含 `load` 相关指令表示`把本地变量加载到操作数堆栈`，通常包含 `store` 相关指令表示`把值从操作数堆栈存储到本地变量`，还有部分指定表示`将常量加载到操作数堆栈`。\n\n3、算数指令：\n算数指令通常是从操作数堆栈获取两个操作数进行计算，然后把计算结果推送到操作数堆栈顶部。\n\n4、操作数堆栈管理：\n表示可以直接操作操作数堆栈的指令，如 dup 复制一份栈顶数据。\n\n5、其他常用指令：\nnew —— 创建对象\nnewarray —— 创建数组\nf2i —— 浮点型转整型\ngetstatic —— 访问静态字段\ninstanceof —— 检查类实例\ncheckcast —— 检查数组\nifeq —— 条件分支\ngoto —— 无条件分支\ninvokevirtual —— 调用对象实例方法\ninvokeinterface —— 调用接口方法\ninvokespecial —— 调用实例初始化方法、当前类方法、超类方法\ninvokestatic —— 调用静态方法\ninvokedynamic —— 动态调用\n\n## Java 虚拟机编译\n\n**1、每一条字节码**\n&emsp;&emsp;格式：`<当前方法操作码指令索引> <操作码注记符> [[可选的操作数1] ...] [可选的注释]`\n&emsp;&emsp;例子：8 bipush 100 //把常量 100 推送到操作数堆栈顶部\n\n**2、访问运行时常量池**\nldc/ldc_w —— 访问 double、long 以为类型的运行时常量值（可以访问 string 类型）\nldc2_w —— 访问 double、long 类型的值（占两个连续的局部变量）\niconst —— 通常用于访问字面值较小的整型常量值\nfcmpl —— float 浮点型比较\ndcmpl —— double \n\n**3、方法参数**\n⚠️注意局部变量表大小以及使用的 iload 指令区别，关键是非静态的实例方法局部变量表内第一个索引处是当前对象 this 引用。\n```java\n//非静态方法\npublic int addA(int i,int j){\n    return i+j;\n}\n\n//对应字节码\npublic int addA(int, int);\n    descriptor: (II)I\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=3, args_size=3\n         0: iload_1\n         1: iload_2\n         2: iadd\n         3: ireturn\n      LineNumberTable:\n        line 9: 0\n```\n\n```java\n//静态方法\npublic static int addB(int i,int j){\n    return i+j;\n}\n\n//对应字节码\npublic static int addB(int, int);\n    descriptor: (II)I\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=2, args_size=2\n         0: iload_0\n         1: iload_1\n         2: iadd\n         3: ireturn\n      LineNumberTable:\n        line 13: 0\n```\n\n上述知识列举一小部分，更多详细内容可以参考官方文档，比如还有方法调用、创建类对象、创建数组、switch int、switch string、try 异常、throw 异常、finally 等。\n\n\n## class 文件格式\n\n**1、基本组成结构**\n\n```java\nClassFile {\n    u4             magic;         //class 文件格式编码 0xCAFEBABE\n    u2             minor_version; //次版本 m\n    u2             major_version; //主版本 M\n                                  //class 文件格式版本：M.m\n\n    u2             constant_pool_count;                   //常量池大小\n    cp_info        constant_pool[constant_pool_count-1];  //常量池数组\n    u2             access_flags;                          //访问权限标识 \n                  \n                  //public\\final\\super\\interface\\abstract\n                  //synthetic\\annomation\\enum\\module\n\n    u2             this_class;                    //当前类，CONSTANT_Class_info\n    u2             super_class;                   //父类，CONSTANT_Class_info\n    u2             interfaces_count;              //接口数量\n    u2             interfaces[interfaces_count];  //接口数组，CONSTANT_Class_info\n\n    u2             fields_count;                  //字段数量，包括静态变量和实例变量\n    field_info     fields[fields_count];          //字段数组，元素结构 field_info\n    u2             methods_count;                 //方法数量\n    method_info    methods[methods_count];        //方法数组，元素结构 method_info\n    u2             attributes_count;              //属性个数\n    attribute_info attributes[attributes_count];  //属性数组，元素结构 attribute_info\n}\n```\n\n\n**2、描述符**\n\n> 完全限定形式：字节码中类和接口名称表现形式，如 java.lang.String 表示为 Ljava/lang/String;\n\n- 字段类型字符串描述\n```java\nB byte    字节\nC char    字符\nD double    双精度\nF float   单精度\nI int   整数\nJ long    长整数\nL 类名;   对象（必须紧跟分号）\nS short   短整型\nZ boolean   布尔\n[ reference   一维数组（多个 [ 表示多维数组）\n```\n\n- 方法类型字符串描述（包括参数类型、返回值类型）\n```java\n//方法\nString append(int age,String name){}\n\n//方法类型签名\n(ILjava/lang/String;)Ljava/lang/String;\n```\n\n**3、常量池**\n> cp_info {\n&emsp;u1 tag; \n&emsp;u1 info[];\n}\n\n标签：\n```java\nCONSTANT_Utf8\t1\t\nCONSTANT_Integer\t3\t\nCONSTANT_Float\t4\t\nCONSTANT_Long\t5\t\nCONSTANT_Double\t6\t\nCONSTANT_Class\t7\t\nCONSTANT_String\t8\nCONSTANT_Fieldref\t9\t\nCONSTANT_Methodref\t10\t\n\nCONSTANT_InterfaceMethodref\t11\nCONSTANT_NameAndType\t12\t\nCONSTANT_MethodHandle\t15\t\nCONSTANT_MethodType\t16\t\nCONSTANT_Dynamic\t17\t\nCONSTANT_InvokeDynamic\t18\t\nCONSTANT_Module\t19\t\nCONSTANT_Package\t20\n```\n\n**4、结构体**\n> CONSTANT_Class_info {\n    u1 tag;\n    u2 name_index\n}\n\n> CONSTANT_Fieldref_info {\n    u1 tag;\n    u2 class_index;\n    u2 name_and_type_index;\n}\n\n> CONSTANT_Methodref_info {\n    u1 tag;\n    u2 class_index;\n    u2 name_and_type_index;\n}\n\n> CONSTANT_InterfaceMethodref_info {\n    u1 tag;\n    u2 class_index;\n    u2 name_and_type_index;\n}\n\n> CONSTANT_String_info {\n    u1 tag;\n    u2 string_index;\n}\n\n> CONSTANT_Integer_info {\n    u1 tag;\n    u4 bytes;\n}\n\n> CONSTANT_Long_info {\n    u1 tag;\n    u4 high_bytes;\n    u4 low_bytes;\n}\n\n等等等\n\n**5、字段**\n一个 class 文件中没有两个字段具有相同的名称和描述，方法也是如此。\n> field_info {\n    u2             access_flags; //表示访问权限或字段属性，public、static\n    u2             name_index;\n    u2             descriptor_index;\n    u2             attributes_count;\n    attribute_info attributes[attributes_count];\n}\n\n\n略略略\n\n\n# [JVM 指令集](https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html)","slug":"class和dalvik字节码","published":1,"lang":"undefined","updated":"2022-10-16T05:40:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qa000n7tqp44jd0v8o","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>字节码 Class</h1>\n<blockquote>\n<p><a href=\"https://docs.oracle.com/javase/specs/jvms/se11/html/index.html\">关于 class 字节码</a></p>\n</blockquote>\n<h2 id=\"Java-虚拟机结构\">Java 虚拟机结构</h2>\n<p><strong>1、class 文件格式</strong><br>\nclass 文件格式定义了类和接口的表示形式。</p>\n<p><strong>2、数据类型</strong><br>\n主要包括两种数据类型<code>原始类型、引用类型</code>。类型检查在运行时之前，编译器进行类型检查。<br>\n  2.1、原始类型<br>\n原始类型包括整形、浮点类型、布尔类型，jvm 中布尔类型使用整型 true=1  false=0 表示。<br>\n  2.2、引用类型<br>\n引用类型包括类类型、数组类型和接口类型，引用类型可以是 null，默认也是 null，可以转换为任意类型。</p>\n<p><strong>3、运行时数据</strong><br>\n  3.1、程序计数器（pc 寄存器)<br>\n每个线程创建时都可以拥有的，当执行 Java 方法时该寄存器存放的是当前正在执行的 jvm 指令地址，当执行 native 方法时不存放值。<br>\n  3.2、虚拟机堆栈<br>\n每个线程创建时都可以拥有的，存储局部变量和中间计算结果，常用在方法调用和返回。<br>\n  3.3、堆<br>\n在虚拟机启动时创建所有线程共享，主要分配给类实例和数组，堆的对象存储由垃圾收集器回收。<br>\n  3.4、方法区<br>\n在虚拟机启动时创建所有线程共享，在逻辑上是堆的一部分，存储类结构信息。<br>\n  3.5、运行时常量池<br>\n主要存储包括编译时已知的数字、字符和运行时需要解析的方法、字段引用符号。<br>\n  3.6、native 方法堆栈<br>\n每个线程创建时分配，服务于非 Java 语言实现 jvm 指令集解析。</p>\n<p><strong>4、栈帧</strong><br>\n每次方法调用时都会创建帧，当方法正常执行完成或异常退出方法时帧都会被销毁，帧的创建从虚拟机堆栈中分配内存（3.2），每个帧拥有自己的局部变量数组、操作数堆栈、当前方法运行时常量的引用。局部变量数组和操作数组的大小在编译时确定，当前执行的方法帧属于活跃状态又叫当前帧，对局部变量数组和操作数堆栈的操作都在当前帧上进行。<br>\n  4.1、局部变量<br>\n方法内使用到的值被存储在局部变量数组中，⚠️注意 long、double 类型的值占用两个连续的局部变量，其他类型占用一个，在非静态方法中局部变量数组索引 0 的值表示当前对象的 this 引用。<br>\n  4.2、操作数堆栈<br>\n常用于辅助计算。把要操作的数据（常量、局部变量值）推送到操作数栈，jvm 指令从操作数栈获取操作数进行操作（计算），再把操作结果推送到操作数栈上。<br>\n  4.3、动态链接<br>\n当前帧包含当前方法类型的运行时常量引用（方法类型常量就是一字符串，存储在常量池中），支持方法的解析并能正确链接。<br>\n  4.4、方法返回<br>\n如果方法正常执行完成，如果有返回值，则把返回值推送到调用该方法的帧操作数堆栈顶部；如果方法执行过程中出现异常并且内部没有捕获异常（try），那么不会向调用者返回值。</p>\n<p><strong>5、特殊方法</strong><br>\n  5.1、实例初始化方法 <code>&lt;init&gt;</code><br>\n该方法的声明和使用受 jvm 的限制，无需外部调用。<br>\n  5.2、类初始化方法 <code>&lt;clinit&gt;</code><br>\n无需外部调用。</p>\n<p><strong>6、其他说明</strong><br>\n1、指令注记符：<br>\ni - int<br>\nl - ong<br>\ns - short<br>\nb - byte<br>\nc - char<br>\nf - float<br>\nd - double<br>\na - reference<br>\n[ - array</p>\n<p>2、加载和存储：<br>\n通常包含 <code>load</code> 相关指令表示<code>把本地变量加载到操作数堆栈</code>，通常包含 <code>store</code> 相关指令表示<code>把值从操作数堆栈存储到本地变量</code>，还有部分指定表示<code>将常量加载到操作数堆栈</code>。</p>\n<p>3、算数指令：<br>\n算数指令通常是从操作数堆栈获取两个操作数进行计算，然后把计算结果推送到操作数堆栈顶部。</p>\n<p>4、操作数堆栈管理：<br>\n表示可以直接操作操作数堆栈的指令，如 dup 复制一份栈顶数据。</p>\n<p>5、其他常用指令：<br>\nnew —— 创建对象<br>\nnewarray —— 创建数组<br>\nf2i —— 浮点型转整型<br>\ngetstatic —— 访问静态字段<br>\ninstanceof —— 检查类实例<br>\ncheckcast —— 检查数组<br>\nifeq —— 条件分支<br>\ngoto —— 无条件分支<br>\ninvokevirtual —— 调用对象实例方法<br>\ninvokeinterface —— 调用接口方法<br>\ninvokespecial —— 调用实例初始化方法、当前类方法、超类方法<br>\ninvokestatic —— 调用静态方法<br>\ninvokedynamic —— 动态调用</p>\n<h2 id=\"Java-虚拟机编译\">Java 虚拟机编译</h2>\n<p><strong>1、每一条字节码</strong><br>\n  格式：<code>&lt;当前方法操作码指令索引&gt; &lt;操作码注记符&gt; [[可选的操作数1] ...] [可选的注释]</code><br>\n  例子：8 bipush 100 //把常量 100 推送到操作数堆栈顶部</p>\n<p><strong>2、访问运行时常量池</strong><br>\nldc/ldc_w —— 访问 double、long 以为类型的运行时常量值（可以访问 string 类型）<br>\nldc2_w —— 访问 double、long 类型的值（占两个连续的局部变量）<br>\niconst —— 通常用于访问字面值较小的整型常量值<br>\nfcmpl —— float 浮点型比较<br>\ndcmpl —— double</p>\n<p><strong>3、方法参数</strong><br>\n⚠️注意局部变量表大小以及使用的 iload 指令区别，关键是非静态的实例方法局部变量表内第一个索引处是当前对象 this 引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非静态方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addA</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对应字节码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addA</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">    descriptor: (II)I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">3</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iload_1</span><br><span class=\"line\">         <span class=\"number\">1</span>: iload_2</span><br><span class=\"line\">         <span class=\"number\">2</span>: iadd</span><br><span class=\"line\">         <span class=\"number\">3</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">9</span>: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addB</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对应字节码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addB</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">    descriptor: (II)I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">2</span>, args_size=<span class=\"number\">2</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: iload_1</span><br><span class=\"line\">         <span class=\"number\">2</span>: iadd</span><br><span class=\"line\">         <span class=\"number\">3</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">13</span>: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>上述知识列举一小部分，更多详细内容可以参考官方文档，比如还有方法调用、创建类对象、创建数组、switch int、switch string、try 异常、throw 异常、finally 等。</p>\n<h2 id=\"class-文件格式\">class 文件格式</h2>\n<p><strong>1、基本组成结构</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">    u4             magic;         <span class=\"comment\">//class 文件格式编码 0xCAFEBABE</span></span><br><span class=\"line\">    u2             minor_version; <span class=\"comment\">//次版本 m</span></span><br><span class=\"line\">    u2             major_version; <span class=\"comment\">//主版本 M</span></span><br><span class=\"line\">                                  <span class=\"comment\">//class 文件格式版本：M.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">    u2             constant_pool_count;                   <span class=\"comment\">//常量池大小</span></span><br><span class=\"line\">    cp_info        constant_pool[constant_pool_count-<span class=\"number\">1</span>];  <span class=\"comment\">//常量池数组</span></span><br><span class=\"line\">    u2             access_flags;                          <span class=\"comment\">//访问权限标识 </span></span><br><span class=\"line\">                  </span><br><span class=\"line\">                  <span class=\"comment\">//public\\final\\super\\interface\\abstract</span></span><br><span class=\"line\">                  <span class=\"comment\">//synthetic\\annomation\\enum\\module</span></span><br><span class=\"line\"></span><br><span class=\"line\">    u2             this_class;                    <span class=\"comment\">//当前类，CONSTANT_Class_info</span></span><br><span class=\"line\">    u2             super_class;                   <span class=\"comment\">//父类，CONSTANT_Class_info</span></span><br><span class=\"line\">    u2             interfaces_count;              <span class=\"comment\">//接口数量</span></span><br><span class=\"line\">    u2             interfaces[interfaces_count];  <span class=\"comment\">//接口数组，CONSTANT_Class_info</span></span><br><span class=\"line\"></span><br><span class=\"line\">    u2             fields_count;                  <span class=\"comment\">//字段数量，包括静态变量和实例变量</span></span><br><span class=\"line\">    field_info     fields[fields_count];          <span class=\"comment\">//字段数组，元素结构 field_info</span></span><br><span class=\"line\">    u2             methods_count;                 <span class=\"comment\">//方法数量</span></span><br><span class=\"line\">    method_info    methods[methods_count];        <span class=\"comment\">//方法数组，元素结构 method_info</span></span><br><span class=\"line\">    u2             attributes_count;              <span class=\"comment\">//属性个数</span></span><br><span class=\"line\">    attribute_info attributes[attributes_count];  <span class=\"comment\">//属性数组，元素结构 attribute_info</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、描述符</strong></p>\n<blockquote>\n<p>完全限定形式：字节码中类和接口名称表现形式，如 java.lang.String 表示为 Ljava/lang/String;</p>\n</blockquote>\n<ul>\n<li>字段类型字符串描述</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B <span class=\"keyword\">byte</span>    字节</span><br><span class=\"line\">C <span class=\"keyword\">char</span>    字符</span><br><span class=\"line\">D <span class=\"keyword\">double</span>    双精度</span><br><span class=\"line\">F <span class=\"keyword\">float</span>   单精度</span><br><span class=\"line\">I <span class=\"keyword\">int</span>   整数</span><br><span class=\"line\">J <span class=\"keyword\">long</span>    长整数</span><br><span class=\"line\">L 类名;   对象（必须紧跟分号）</span><br><span class=\"line\">S <span class=\"keyword\">short</span>   短整型</span><br><span class=\"line\">Z <span class=\"keyword\">boolean</span>   布尔</span><br><span class=\"line\">[ reference   一维数组（多个 [ 表示多维数组）</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法类型字符串描述（包括参数类型、返回值类型）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">int</span> age,String name)</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法类型签名</span></span><br><span class=\"line\">(ILjava/lang/String;)Ljava/lang/String;</span><br></pre></td></tr></table></figure>\n<p><strong>3、常量池</strong></p>\n<blockquote>\n<p>cp_info {<br>\n u1 tag;<br>\n u1 info[];<br>\n}</p>\n</blockquote>\n<p>标签：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Utf8\t<span class=\"number\">1</span>\t</span><br><span class=\"line\">CONSTANT_Integer\t<span class=\"number\">3</span>\t</span><br><span class=\"line\">CONSTANT_Float\t<span class=\"number\">4</span>\t</span><br><span class=\"line\">CONSTANT_Long\t<span class=\"number\">5</span>\t</span><br><span class=\"line\">CONSTANT_Double\t<span class=\"number\">6</span>\t</span><br><span class=\"line\">CONSTANT_Class\t<span class=\"number\">7</span>\t</span><br><span class=\"line\">CONSTANT_String\t<span class=\"number\">8</span></span><br><span class=\"line\">CONSTANT_Fieldref\t<span class=\"number\">9</span>\t</span><br><span class=\"line\">CONSTANT_Methodref\t<span class=\"number\">10</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">CONSTANT_InterfaceMethodref\t<span class=\"number\">11</span></span><br><span class=\"line\">CONSTANT_NameAndType\t<span class=\"number\">12</span>\t</span><br><span class=\"line\">CONSTANT_MethodHandle\t<span class=\"number\">15</span>\t</span><br><span class=\"line\">CONSTANT_MethodType\t<span class=\"number\">16</span>\t</span><br><span class=\"line\">CONSTANT_Dynamic\t<span class=\"number\">17</span>\t</span><br><span class=\"line\">CONSTANT_InvokeDynamic\t<span class=\"number\">18</span>\t</span><br><span class=\"line\">CONSTANT_Module\t<span class=\"number\">19</span>\t</span><br><span class=\"line\">CONSTANT_Package\t<span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<p><strong>4、结构体</strong></p>\n<blockquote>\n<p>CONSTANT_Class_info {<br>\nu1 tag;<br>\nu2 name_index<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_Fieldref_info {<br>\nu1 tag;<br>\nu2 class_index;<br>\nu2 name_and_type_index;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_Methodref_info {<br>\nu1 tag;<br>\nu2 class_index;<br>\nu2 name_and_type_index;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_InterfaceMethodref_info {<br>\nu1 tag;<br>\nu2 class_index;<br>\nu2 name_and_type_index;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_String_info {<br>\nu1 tag;<br>\nu2 string_index;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_Integer_info {<br>\nu1 tag;<br>\nu4 bytes;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_Long_info {<br>\nu1 tag;<br>\nu4 high_bytes;<br>\nu4 low_bytes;<br>\n}</p>\n</blockquote>\n<p>等等等</p>\n<p><strong>5、字段</strong><br>\n一个 class 文件中没有两个字段具有相同的名称和描述，方法也是如此。</p>\n<blockquote>\n<p>field_info {<br>\nu2             access_flags; //表示访问权限或字段属性，public、static<br>\nu2             name_index;<br>\nu2             descriptor_index;<br>\nu2             attributes_count;<br>\nattribute_info attributes[attributes_count];<br>\n}</p>\n</blockquote>\n<p>略略略</p>\n<h1><a href=\"https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html\">JVM 指令集</a></h1>\n","site":{"data":{}},"excerpt":"","more":"<h1>字节码 Class</h1>\n<blockquote>\n<p><a href=\"https://docs.oracle.com/javase/specs/jvms/se11/html/index.html\">关于 class 字节码</a></p>\n</blockquote>\n<h2 id=\"Java-虚拟机结构\">Java 虚拟机结构</h2>\n<p><strong>1、class 文件格式</strong><br>\nclass 文件格式定义了类和接口的表示形式。</p>\n<p><strong>2、数据类型</strong><br>\n主要包括两种数据类型<code>原始类型、引用类型</code>。类型检查在运行时之前，编译器进行类型检查。<br>\n  2.1、原始类型<br>\n原始类型包括整形、浮点类型、布尔类型，jvm 中布尔类型使用整型 true=1  false=0 表示。<br>\n  2.2、引用类型<br>\n引用类型包括类类型、数组类型和接口类型，引用类型可以是 null，默认也是 null，可以转换为任意类型。</p>\n<p><strong>3、运行时数据</strong><br>\n  3.1、程序计数器（pc 寄存器)<br>\n每个线程创建时都可以拥有的，当执行 Java 方法时该寄存器存放的是当前正在执行的 jvm 指令地址，当执行 native 方法时不存放值。<br>\n  3.2、虚拟机堆栈<br>\n每个线程创建时都可以拥有的，存储局部变量和中间计算结果，常用在方法调用和返回。<br>\n  3.3、堆<br>\n在虚拟机启动时创建所有线程共享，主要分配给类实例和数组，堆的对象存储由垃圾收集器回收。<br>\n  3.4、方法区<br>\n在虚拟机启动时创建所有线程共享，在逻辑上是堆的一部分，存储类结构信息。<br>\n  3.5、运行时常量池<br>\n主要存储包括编译时已知的数字、字符和运行时需要解析的方法、字段引用符号。<br>\n  3.6、native 方法堆栈<br>\n每个线程创建时分配，服务于非 Java 语言实现 jvm 指令集解析。</p>\n<p><strong>4、栈帧</strong><br>\n每次方法调用时都会创建帧，当方法正常执行完成或异常退出方法时帧都会被销毁，帧的创建从虚拟机堆栈中分配内存（3.2），每个帧拥有自己的局部变量数组、操作数堆栈、当前方法运行时常量的引用。局部变量数组和操作数组的大小在编译时确定，当前执行的方法帧属于活跃状态又叫当前帧，对局部变量数组和操作数堆栈的操作都在当前帧上进行。<br>\n  4.1、局部变量<br>\n方法内使用到的值被存储在局部变量数组中，⚠️注意 long、double 类型的值占用两个连续的局部变量，其他类型占用一个，在非静态方法中局部变量数组索引 0 的值表示当前对象的 this 引用。<br>\n  4.2、操作数堆栈<br>\n常用于辅助计算。把要操作的数据（常量、局部变量值）推送到操作数栈，jvm 指令从操作数栈获取操作数进行操作（计算），再把操作结果推送到操作数栈上。<br>\n  4.3、动态链接<br>\n当前帧包含当前方法类型的运行时常量引用（方法类型常量就是一字符串，存储在常量池中），支持方法的解析并能正确链接。<br>\n  4.4、方法返回<br>\n如果方法正常执行完成，如果有返回值，则把返回值推送到调用该方法的帧操作数堆栈顶部；如果方法执行过程中出现异常并且内部没有捕获异常（try），那么不会向调用者返回值。</p>\n<p><strong>5、特殊方法</strong><br>\n  5.1、实例初始化方法 <code>&lt;init&gt;</code><br>\n该方法的声明和使用受 jvm 的限制，无需外部调用。<br>\n  5.2、类初始化方法 <code>&lt;clinit&gt;</code><br>\n无需外部调用。</p>\n<p><strong>6、其他说明</strong><br>\n1、指令注记符：<br>\ni - int<br>\nl - ong<br>\ns - short<br>\nb - byte<br>\nc - char<br>\nf - float<br>\nd - double<br>\na - reference<br>\n[ - array</p>\n<p>2、加载和存储：<br>\n通常包含 <code>load</code> 相关指令表示<code>把本地变量加载到操作数堆栈</code>，通常包含 <code>store</code> 相关指令表示<code>把值从操作数堆栈存储到本地变量</code>，还有部分指定表示<code>将常量加载到操作数堆栈</code>。</p>\n<p>3、算数指令：<br>\n算数指令通常是从操作数堆栈获取两个操作数进行计算，然后把计算结果推送到操作数堆栈顶部。</p>\n<p>4、操作数堆栈管理：<br>\n表示可以直接操作操作数堆栈的指令，如 dup 复制一份栈顶数据。</p>\n<p>5、其他常用指令：<br>\nnew —— 创建对象<br>\nnewarray —— 创建数组<br>\nf2i —— 浮点型转整型<br>\ngetstatic —— 访问静态字段<br>\ninstanceof —— 检查类实例<br>\ncheckcast —— 检查数组<br>\nifeq —— 条件分支<br>\ngoto —— 无条件分支<br>\ninvokevirtual —— 调用对象实例方法<br>\ninvokeinterface —— 调用接口方法<br>\ninvokespecial —— 调用实例初始化方法、当前类方法、超类方法<br>\ninvokestatic —— 调用静态方法<br>\ninvokedynamic —— 动态调用</p>\n<h2 id=\"Java-虚拟机编译\">Java 虚拟机编译</h2>\n<p><strong>1、每一条字节码</strong><br>\n  格式：<code>&lt;当前方法操作码指令索引&gt; &lt;操作码注记符&gt; [[可选的操作数1] ...] [可选的注释]</code><br>\n  例子：8 bipush 100 //把常量 100 推送到操作数堆栈顶部</p>\n<p><strong>2、访问运行时常量池</strong><br>\nldc/ldc_w —— 访问 double、long 以为类型的运行时常量值（可以访问 string 类型）<br>\nldc2_w —— 访问 double、long 类型的值（占两个连续的局部变量）<br>\niconst —— 通常用于访问字面值较小的整型常量值<br>\nfcmpl —— float 浮点型比较<br>\ndcmpl —— double</p>\n<p><strong>3、方法参数</strong><br>\n⚠️注意局部变量表大小以及使用的 iload 指令区别，关键是非静态的实例方法局部变量表内第一个索引处是当前对象 this 引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非静态方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addA</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对应字节码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addA</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">    descriptor: (II)I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">3</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iload_1</span><br><span class=\"line\">         <span class=\"number\">1</span>: iload_2</span><br><span class=\"line\">         <span class=\"number\">2</span>: iadd</span><br><span class=\"line\">         <span class=\"number\">3</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">9</span>: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addB</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对应字节码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addB</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">    descriptor: (II)I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">2</span>, args_size=<span class=\"number\">2</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: iload_1</span><br><span class=\"line\">         <span class=\"number\">2</span>: iadd</span><br><span class=\"line\">         <span class=\"number\">3</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">13</span>: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>上述知识列举一小部分，更多详细内容可以参考官方文档，比如还有方法调用、创建类对象、创建数组、switch int、switch string、try 异常、throw 异常、finally 等。</p>\n<h2 id=\"class-文件格式\">class 文件格式</h2>\n<p><strong>1、基本组成结构</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">    u4             magic;         <span class=\"comment\">//class 文件格式编码 0xCAFEBABE</span></span><br><span class=\"line\">    u2             minor_version; <span class=\"comment\">//次版本 m</span></span><br><span class=\"line\">    u2             major_version; <span class=\"comment\">//主版本 M</span></span><br><span class=\"line\">                                  <span class=\"comment\">//class 文件格式版本：M.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">    u2             constant_pool_count;                   <span class=\"comment\">//常量池大小</span></span><br><span class=\"line\">    cp_info        constant_pool[constant_pool_count-<span class=\"number\">1</span>];  <span class=\"comment\">//常量池数组</span></span><br><span class=\"line\">    u2             access_flags;                          <span class=\"comment\">//访问权限标识 </span></span><br><span class=\"line\">                  </span><br><span class=\"line\">                  <span class=\"comment\">//public\\final\\super\\interface\\abstract</span></span><br><span class=\"line\">                  <span class=\"comment\">//synthetic\\annomation\\enum\\module</span></span><br><span class=\"line\"></span><br><span class=\"line\">    u2             this_class;                    <span class=\"comment\">//当前类，CONSTANT_Class_info</span></span><br><span class=\"line\">    u2             super_class;                   <span class=\"comment\">//父类，CONSTANT_Class_info</span></span><br><span class=\"line\">    u2             interfaces_count;              <span class=\"comment\">//接口数量</span></span><br><span class=\"line\">    u2             interfaces[interfaces_count];  <span class=\"comment\">//接口数组，CONSTANT_Class_info</span></span><br><span class=\"line\"></span><br><span class=\"line\">    u2             fields_count;                  <span class=\"comment\">//字段数量，包括静态变量和实例变量</span></span><br><span class=\"line\">    field_info     fields[fields_count];          <span class=\"comment\">//字段数组，元素结构 field_info</span></span><br><span class=\"line\">    u2             methods_count;                 <span class=\"comment\">//方法数量</span></span><br><span class=\"line\">    method_info    methods[methods_count];        <span class=\"comment\">//方法数组，元素结构 method_info</span></span><br><span class=\"line\">    u2             attributes_count;              <span class=\"comment\">//属性个数</span></span><br><span class=\"line\">    attribute_info attributes[attributes_count];  <span class=\"comment\">//属性数组，元素结构 attribute_info</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、描述符</strong></p>\n<blockquote>\n<p>完全限定形式：字节码中类和接口名称表现形式，如 java.lang.String 表示为 Ljava/lang/String;</p>\n</blockquote>\n<ul>\n<li>字段类型字符串描述</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B <span class=\"keyword\">byte</span>    字节</span><br><span class=\"line\">C <span class=\"keyword\">char</span>    字符</span><br><span class=\"line\">D <span class=\"keyword\">double</span>    双精度</span><br><span class=\"line\">F <span class=\"keyword\">float</span>   单精度</span><br><span class=\"line\">I <span class=\"keyword\">int</span>   整数</span><br><span class=\"line\">J <span class=\"keyword\">long</span>    长整数</span><br><span class=\"line\">L 类名;   对象（必须紧跟分号）</span><br><span class=\"line\">S <span class=\"keyword\">short</span>   短整型</span><br><span class=\"line\">Z <span class=\"keyword\">boolean</span>   布尔</span><br><span class=\"line\">[ reference   一维数组（多个 [ 表示多维数组）</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法类型字符串描述（包括参数类型、返回值类型）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">int</span> age,String name)</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法类型签名</span></span><br><span class=\"line\">(ILjava/lang/String;)Ljava/lang/String;</span><br></pre></td></tr></table></figure>\n<p><strong>3、常量池</strong></p>\n<blockquote>\n<p>cp_info {<br>\n u1 tag;<br>\n u1 info[];<br>\n}</p>\n</blockquote>\n<p>标签：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Utf8\t<span class=\"number\">1</span>\t</span><br><span class=\"line\">CONSTANT_Integer\t<span class=\"number\">3</span>\t</span><br><span class=\"line\">CONSTANT_Float\t<span class=\"number\">4</span>\t</span><br><span class=\"line\">CONSTANT_Long\t<span class=\"number\">5</span>\t</span><br><span class=\"line\">CONSTANT_Double\t<span class=\"number\">6</span>\t</span><br><span class=\"line\">CONSTANT_Class\t<span class=\"number\">7</span>\t</span><br><span class=\"line\">CONSTANT_String\t<span class=\"number\">8</span></span><br><span class=\"line\">CONSTANT_Fieldref\t<span class=\"number\">9</span>\t</span><br><span class=\"line\">CONSTANT_Methodref\t<span class=\"number\">10</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">CONSTANT_InterfaceMethodref\t<span class=\"number\">11</span></span><br><span class=\"line\">CONSTANT_NameAndType\t<span class=\"number\">12</span>\t</span><br><span class=\"line\">CONSTANT_MethodHandle\t<span class=\"number\">15</span>\t</span><br><span class=\"line\">CONSTANT_MethodType\t<span class=\"number\">16</span>\t</span><br><span class=\"line\">CONSTANT_Dynamic\t<span class=\"number\">17</span>\t</span><br><span class=\"line\">CONSTANT_InvokeDynamic\t<span class=\"number\">18</span>\t</span><br><span class=\"line\">CONSTANT_Module\t<span class=\"number\">19</span>\t</span><br><span class=\"line\">CONSTANT_Package\t<span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<p><strong>4、结构体</strong></p>\n<blockquote>\n<p>CONSTANT_Class_info {<br>\nu1 tag;<br>\nu2 name_index<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_Fieldref_info {<br>\nu1 tag;<br>\nu2 class_index;<br>\nu2 name_and_type_index;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_Methodref_info {<br>\nu1 tag;<br>\nu2 class_index;<br>\nu2 name_and_type_index;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_InterfaceMethodref_info {<br>\nu1 tag;<br>\nu2 class_index;<br>\nu2 name_and_type_index;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_String_info {<br>\nu1 tag;<br>\nu2 string_index;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_Integer_info {<br>\nu1 tag;<br>\nu4 bytes;<br>\n}</p>\n</blockquote>\n<blockquote>\n<p>CONSTANT_Long_info {<br>\nu1 tag;<br>\nu4 high_bytes;<br>\nu4 low_bytes;<br>\n}</p>\n</blockquote>\n<p>等等等</p>\n<p><strong>5、字段</strong><br>\n一个 class 文件中没有两个字段具有相同的名称和描述，方法也是如此。</p>\n<blockquote>\n<p>field_info {<br>\nu2             access_flags; //表示访问权限或字段属性，public、static<br>\nu2             name_index;<br>\nu2             descriptor_index;<br>\nu2             attributes_count;<br>\nattribute_info attributes[attributes_count];<br>\n}</p>\n</blockquote>\n<p>略略略</p>\n<h1><a href=\"https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html\">JVM 指令集</a></h1>\n"},{"title":"了解程序员口中的 - 插桩","catalog":true,"date":"2022-10-16T05:11:13.000Z","subtitle":"编译期字节码操作看起来很神秘，也很酷","header-img":"/img/2210/page-native.jpg","sticky":15,"_content":"\n都知道 Android Java 代码的编译过程包括：java ->  class -> dex\n\nJava 到 class 是通过工具 javac，class 到 dex 是通过工具 dx，编译插桩是在编译期间修改已有代码或生成新的代码（常见的注解框架）。（d8、r8）`d8 用来取代 dx, r8 用来取代 d8 和 proguard`\n\n# 编译插桩场景\n\n- 代码生成：注解生成框架 ButterKnife，编译期间生成容易冗余代码，减少重复工作量。\n- 代码分析：监控线程创建、网络监控、电量监控。\n- 代码修改：插入代码实现需求，神策、数数实现无痕埋点。\n\n> 进一步了解字节码之后再回头看看，基础是前提","source":"_posts/undefined/了解插桩.md","raw":"---\ntitle: 了解程序员口中的 - 插桩\ncatalog: true\ndate: 2022-10-16 13:11:13\nsubtitle: 编译期字节码操作看起来很神秘，也很酷\nheader-img: /img/2210/page-native.jpg\ntags: 字节码\nsticky: 15\ncategories:\n---\n\n都知道 Android Java 代码的编译过程包括：java ->  class -> dex\n\nJava 到 class 是通过工具 javac，class 到 dex 是通过工具 dx，编译插桩是在编译期间修改已有代码或生成新的代码（常见的注解框架）。（d8、r8）`d8 用来取代 dx, r8 用来取代 d8 和 proguard`\n\n# 编译插桩场景\n\n- 代码生成：注解生成框架 ButterKnife，编译期间生成容易冗余代码，减少重复工作量。\n- 代码分析：监控线程创建、网络监控、电量监控。\n- 代码修改：插入代码实现需求，神策、数数实现无痕埋点。\n\n> 进一步了解字节码之后再回头看看，基础是前提","slug":"了解插桩","published":1,"lang":"undefined","updated":"2022-10-16T05:11:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qa000q7tqp3v2jh6s8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>都知道 Android Java 代码的编译过程包括：java -&gt;  class -&gt; dex</p>\n<p>Java 到 class 是通过工具 javac，class 到 dex 是通过工具 dx，编译插桩是在编译期间修改已有代码或生成新的代码（常见的注解框架）。（d8、r8）<code>d8 用来取代 dx, r8 用来取代 d8 和 proguard</code></p>\n<h1>编译插桩场景</h1>\n<ul>\n<li>代码生成：注解生成框架 ButterKnife，编译期间生成容易冗余代码，减少重复工作量。</li>\n<li>代码分析：监控线程创建、网络监控、电量监控。</li>\n<li>代码修改：插入代码实现需求，神策、数数实现无痕埋点。</li>\n</ul>\n<blockquote>\n<p>进一步了解字节码之后再回头看看，基础是前提</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>都知道 Android Java 代码的编译过程包括：java -&gt;  class -&gt; dex</p>\n<p>Java 到 class 是通过工具 javac，class 到 dex 是通过工具 dx，编译插桩是在编译期间修改已有代码或生成新的代码（常见的注解框架）。（d8、r8）<code>d8 用来取代 dx, r8 用来取代 d8 和 proguard</code></p>\n<h1>编译插桩场景</h1>\n<ul>\n<li>代码生成：注解生成框架 ButterKnife，编译期间生成容易冗余代码，减少重复工作量。</li>\n<li>代码分析：监控线程创建、网络监控、电量监控。</li>\n<li>代码修改：插入代码实现需求，神策、数数实现无痕埋点。</li>\n</ul>\n<blockquote>\n<p>进一步了解字节码之后再回头看看，基础是前提</p>\n</blockquote>\n"},{"title":"从 smail 接入第三方 SDK","catalog":true,"date":"2022-09-26T12:56:19.000Z","subtitle":"有时通过查看、修改第三方库能更好解决问题","header-img":"/img/220926_smailsdk/smail_bg.webp","sticky":3,"_content":"\n# 遇到过这种场景吗\n\n什么时候要利用 smali 语言层面接入第三方 sdk ？一般都是使用 java 接口，一目了然，搞个 smali 不是没事找事？场景不同，在没有办法的时候这就是一种方法。\n\nprogramer A：   发你一个 apk 文件，帮我看下\nprogramer A：   因为我们没有原工程，只有一个 APK，我想把咋们的 sdk 接入到里面，怎么搞？\nprogramer B：   应该可以，可以试试以字节码、smail 形式接入\nprogramer A：   smail ？这是啥啊！\nprogramer B：   自己查资料。。。。。。\n\n\n**嗯？没有思路，不然写个 Demo 看看吧**\n\n1、准备一个 sdk: `gcsdk-1.0.0.jar`\n2、准备一个 apk: `app-0.apk`（假设是我们的应用）\n3、创建一个空白 Android 项目，预备接入 sdk: `app-1.apk`（备用） \n\n模拟几个对外的接口简单生成一个 jar，实际中接入的第三方 sdk 接口也不会很复杂。\n\n---\n\n> gcsdk-1.0.0（示例） \n\n```java\n// 初始化\nGCSDK.getInstance().init(new InitCallback() {\n            @Override\n            public void initSuccess() {\n                System.out.println(\"gcsdk-初始化成功\");\n            }\n            @Override\n            public void initFail(int code, String error) {\n                System.out.println(\"gcsdk-初始化失败：code = \" + code + \"  error = \" + error);\n            }\n});\n\n//登录\nGCSDK.getInstance().login(new LoginCallback() {\n            @Override\n            public void onLoginSuccess() {\n                System.out.println(\"登录-成功\");\n            }\n            @Override\n            public void inLoginFail(int code, String error) {\n                System.out.println(\"登录-失败：code = \" + code + \" error = \" + error);\n            }\n});\n\n//广告        \nAdParams adParams = new AdParams();\nGCSDK.getInstance().openAd(adParams, new AdCallback() {\n            @Override\n            public void onClick() {\n                System.out.println(\"广告-点击\");\n            }\n            @Override\n            public void onClickSkip() {\n                System.out.println(\"广告-点击跳过\");\n            }\n            @Override\n            public void onClose() {\n                System.out.println(\"广告-关闭\");\n            }\n            @Override\n            public void onOpenFaild(int code, String error) {\n                System.out.println(\"广告-打开失败：code = \" + code + \" error = \" + error);\n            }\n            @Override\n            public void onOpenSuccess() {\n                System.out.println(\"广告-打开成功\");\n            }\n            @Override\n            public void onLoadBegin() {\n                System.out.println(\"广告-加载开始\");\n            }\n            @Override\n            public void onLoadFaild(int code, String error) {\n                System.out.println(\"广告-加载失败：code = \" + code + \" error = \" + error);\n            }\n            @Override\n            public void onLoadComplete() {\n                System.out.println(\"广告-加载完成\");\n            }\n            @Override\n            public void onDownloadBegin() {\n                System.out.println(\"广告-下载开始\");\n            }\n            @Override\n            public void onDownloadFail(int code, String error) {\n                System.out.println(\"广告-下载失败：code =\" + code + \" error = \" + error);\n            }\n\n            @Override\n            public void onDownloadComplete() {\n                System.out.println(\"广告-下载完成\");\n            }\n});\n\n//支付\nPayParams payParams = new PayParams();\nPayManager.getInstance().pay(payParams, new PayCallback() {\n            @Override\n            public void onPaySuccess() {\n                System.out.println(\"支付-成功\");\n            }\n            @Override\n            public void onPayFail(int code, String error) {\n                System.out.println(\"支付-失败：code = \" + code + \" error = \" + error);\n            }\n});\n```\n\n> 空白 Android 项目，模拟接入 gcsdk，接入完成后打包备用，生成的 apk 用于获取 smali 代码\n\n```java\n// App.java\npackage com.example.gcsdkdemo;\nimport android.app.Application;\nimport android.util.Log;\nimport com.primer.jsonlili.callback.InitCallback;\nimport com.primer.jsonlili.core.GCSDK;\n\npublic class App extends Application {\n    private final String TAG = \"cunzhang\";\n    //初始化回调\n    private InitCallback mInitCallback = new InitCallback() {\n        @Override\n        public void initSuccess() {\n            Log.d(TAG, \"initSuccess: \");\n        }\n\n        @Override\n        public void initFail(int i, String s) {\n            Log.d(TAG, \"initFail: \");\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        //gcsdk 初始化\n        GCSDK.getInstance().init(mInitCallback);\n    }\n}\n```\n```java\n//MainActivity.java\npackage com.example.gcsdkdemo;\nimport androidx.appcompat.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport com.primer.jsonlili.callback.AdCallback;\nimport com.primer.jsonlili.callback.LoginCallback;\nimport com.primer.jsonlili.callback.PayCallback;\nimport com.primer.jsonlili.core.GCSDK;\nimport com.primer.jsonlili.params.AdParams;\nimport com.primer.jsonlili.params.PayParams;\n\npublic class MainActivity extends AppCompatActivity {\n    private final String TAG = \"cunzhang\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    public void onPay(View view) {\n        Log.d(TAG, \"onPay: \");\n        //支付接口\n        PayParams payParams = new PayParams();\n        GCSDK.getInstance().pay(payParams, new PayCallback() {\n            @Override\n            public void onPaySuccess() {\n                Log.d(TAG, \"onPaySuccess: \");\n            }\n            @Override\n            public void onPayFail(int i, String s) {\n                Log.d(TAG, \"onPayFail: \");\n            }\n        });\n    }\n\n    public void onLogin(View view) {\n        Log.d(TAG, \"onLogin: \");\n        //登录接口\n        GCSDK.getInstance().login(new LoginCallback() {\n            @Override\n            public void onLoginSuccess() {\n                Log.d(TAG, \"onLoginSuccess: \");\n            }\n            @Override\n            public void inLoginFail(int i, String s) {\n                Log.d(TAG, \"inLoginFail: \");\n            }\n        });\n    }\n    \n    public void onOpenAd(View view) {\n        Log.d(TAG, \"onOpenAd: \");\n        //广告接口\n        AdParams adParams = new AdParams();\n        GCSDK.getInstance().openAd(adParams, new AdCallback() {\n            @Override\n            public void onClick() {\n                Log.d(TAG, \"onClick: \");\n            }\n            @Override\n            public void onClickSkip() {\n                Log.d(TAG, \"onClickSkip: \");\n            }\n            @Override\n            public void onClose() {\n                Log.d(TAG, \"onClose: \");\n            }\n            @Override\n            public void onOpenFaild(int i, String s) {\n                Log.d(TAG, \"onOpenFaild: \");\n            }\n            @Override\n            public void onOpenSuccess() {\n                Log.d(TAG, \"onOpenSuccess: \");\n            }\n            @Override\n            public void onLoadBegin() {\n                Log.d(TAG, \"onLoadBegin: \");\n            }\n            @Override\n            public void onLoadFaild(int i, String s) {\n                Log.d(TAG, \"onLoadFaild: \");\n            }\n            @Override\n            public void onLoadComplete() {\n                Log.d(TAG, \"onLoadComplete: \");\n            }\n            @Override\n            public void onDownloadBegin() {\n                Log.d(TAG, \"onDownloadBegin: \");\n            }\n            @Override\n            public void onDownloadFail(int i, String s) {\n                Log.d(TAG, \"onDownloadFail: \");\n            }\n            @Override\n            public void onDownloadComplete() {\n                Log.d(TAG, \"onDownloadComplete: \");\n            }\n        });\n    }\n}\n```\n\n依次触发按钮点击事件\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/f13a6793367598f0a03c93cb84c3a781.png)\n\n假设这是咋们的应用，接着要预备接入\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/c999c536a59d0ae7df378a1c36b140f6.png)\n\n\n# 了解下 smali\n\n**1、获得 smali**\n两个安装包的代码都要反编译获得 \n\n```java\njava -jar apktool_2.6.0.jar [-r] d app-0.apk\n\njava -jar apktool_2.6.0.jar [-r] d app-1.apk\n```\n\n我们的应用\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/f45e85873cea6435fddc0548f82af6ee.png)\n\n空白项目模拟 Java 接口模拟接入\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/b6ff5a0f01ab90cb1132849cb6d138f0.png)\n\n**2、了解项目的 smali**\n\n可以使用 VSCode 插件 smali、smali2java 方便查看 smali 代码，以下 smali 主要是列举与 sdk 相关，了解 smali 具体实现\n\n```java\n//App.java & App.smal\npackage com.example.gcsdkdemo;\nimport android.app.Application;\nimport android.util.Log;\nimport com.primer.jsonlili.callback.InitCallback;\nimport com.primer.jsonlili.core.GCSDK;\n\npublic class App extends Application {\n    private final String TAG = \"cunzhang\"; \n\n    //定义属性 mInitCallback：      .field private mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n    //创建对象：                    new-instance v0, Lcom/example/gcsdkdemo/App$1;\n    //调用类隐藏初始化方法 <init>：   invoke-direct {v0, p0}, Lcom/example/gcsdkdemo/App$1;-><init>(Lcom/example/gcsdkdemo/App;)V\n    //把创建的对象赋值给本地变量：     iput-object v0, p0, Lcom/example/gcsdkdemo/App;->mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n    private InitCallback mInitCallback = new InitCallback() {\n        @Override\n        public void initSuccess() {\n            Log.d(TAG, \"initSuccess: \");\n        }\n        @Override\n        public void initFail(int i, String s) {\n            Log.d(TAG, \"initFail: \");\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        \n        //调用类的静态方法：         invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n        //移动操作数：              move-result-object v0\n        //从操作数栈获取两个操作数：  iget-object v1, p0, Lcom/example/gcsdkdemo/App;->mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n        //调用实现方法：            invoke-virtual {v0, v1}, Lcom/primer/jsonlili/core/GCSDK;->init(Lcom/primer/jsonlili/callback/InitCallback;)V\n        GCSDK.getInstance().init(mInitCallback);\n    }\n}\n```\n\nInitCallback 内部类实现\n\n```java\n# 表明类限定名\n.class Lcom/example/gcsdkdemo/App$1;\n# 父类\n.super Ljava/lang/Object;\n# 源文件名称\n.source \"App.java\"\n\n# interfaces\n.implements Lcom/primer/jsonlili/callback/InitCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingClass;\nvalue = Lcom/example/gcsdkdemo/App;\n.end annotation\n\n# 内部类\n.annotation system Ldalvik/annotation/InnerClass;\naccessFlags = 0x0\nname = null\n.end annotation\n\n# 内部类持有外部类 this 引用\n# instance fields\n.field final synthetic this$0:Lcom/example/gcsdkdemo/App;\n\n# direct methods\n.method constructor <init>(Lcom/example/gcsdkdemo/App;)V\n.locals 0\n.param p1, \"this$0\" # Lcom/example/gcsdkdemo/App;\n# 行数，删除不影响代码执行\n.line 13\niput-object p1, p0, Lcom/example/gcsdkdemo/App$1;->this$0:Lcom/example/gcsdkdemo/App;\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\nreturn-void\n.end method\n\n# virtual methods\n.method public initFail(ILjava/lang/String;)V\n\n# 指定方法中可用的非参寄存器数量\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 21\nconst-string v0, \"cunzhang\"\nconst-string v1, \"initFail: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 22\nreturn-void\n.end method\n\n.method public initSuccess()V\n.locals 2\n.line 16\nconst-string v0, \"cunzhang\"\nconst-string v1, \"initSuccess: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 17\nreturn-void\n.end method\n```\n\n```java\n//MainActivity.java $ MainActivity.smali\npackage com.example.gcsdkdemo;\nimport androidx.appcompat.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport com.primer.jsonlili.callback.AdCallback;\nimport com.primer.jsonlili.callback.LoginCallback;\nimport com.primer.jsonlili.callback.PayCallback;\nimport com.primer.jsonlili.core.GCSDK;\nimport com.primer.jsonlili.params.AdParams;\nimport com.primer.jsonlili.params.PayParams;\n\npublic class MainActivity extends AppCompatActivity {\n    private final String TAG = \"cunzhang\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    public void onPay(View view) {\n        Log.d(TAG, \"onPay: \");\n        //创建 PayParams 对象并存储到 v0，\n        //new-instance v0, Lcom/primer/jsonlili/params/PayParams;\n        //invoke-direct {v0}, Lcom/primer/jsonlili/params/PayParams;-><init>()V\n        \n        //.local v0, \"payParams\":Lcom/primer/jsonlili/params/PayParams;\n        //invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n        //move-result-object v1\n        //new-instance v2, Lcom/example/gcsdkdemo/MainActivity$1;\n        //invoke-direct {v2, p0}, Lcom/example/gcsdkdemo/MainActivity$1;-><init>(Lcom/example/gcsdkdemo/MainActivity;)V\n        //invoke-virtual {v1, v0, v2}, Lcom/primer/jsonlili/core/GCSDK;->pay(Lcom/primer/jsonlili/params/PayParams;Lcom/primer/jsonlili/callback/PayCallback;)V\n        \n        PayParams payParams = new PayParams();\n        GCSDK.getInstance().pay(payParams, new PayCallback() {\n            @Override\n            public void onPaySuccess() {\n                Log.d(TAG, \"onPaySuccess: \");\n            }\n\n            @Override\n            public void onPayFail(int i, String s) {\n                Log.d(TAG, \"onPayFail: \");\n            }\n        });\n    }\n\n    public void onLogin(View view) {\n        Log.d(TAG, \"onLogin: \");\n        //调用 getInstance，把 getInstance 返回的对象存储到 v0，创建内部类 LoginCallback 对象，调用内部类初始化，调用登录方法\n        //invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n        //move-result-object v0\n        //new-instance v1, Lcom/example/gcsdkdemo/MainActivity$2;\n        //invoke-direct {v1, p0}, Lcom/example/gcsdkdemo/MainActivity$2;-><init>(Lcom/example/gcsdkdemo/MainActivity;)V\n        //invoke-virtual {v0, v1}, Lcom/primer/jsonlili/core/GCSDK;->login(Lcom/primer/jsonlili/callback/LoginCallback;)V\n        \n        GCSDK.getInstance().login(new LoginCallback() {\n            @Override\n            public void onLoginSuccess() {\n                Log.d(TAG, \"onLoginSuccess: \");\n            }\n\n            @Override\n            public void inLoginFail(int i, String s) {\n                Log.d(TAG, \"inLoginFail: \");\n            }\n        });\n    }\n    \n\n    public void onOpenAd(View view) {\n        Log.d(TAG, \"onOpenAd: \");\n        \n        //new-instance v0, Lcom/primer/jsonlili/params/AdParams;\n        //invoke-direct {v0}, Lcom/primer/jsonlili/params/AdParams;-><init>()V\n        //.line 60\n        //.local v0, \"adParams\":Lcom/primer/jsonlili/params/AdParams;\n        //invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n        //move-result-object v1\n        //new-instance v2, Lcom/example/gcsdkdemo/MainActivity$3;\n        //invoke-direct {v2, p0}, Lcom/example/gcsdkdemo/MainActivity$3;-><init>(Lcom/example/gcsdkdemo/MainActivity;)V\n        //invoke-virtual {v1, v0, v2}, Lcom/primer/jsonlili/core/GCSDK;->openAd(Lcom/primer/jsonlili/params/AdParams;Lcom/primer/jsonlili/callback/AdCallback;)V\n\n        AdParams adParams = new AdParams();\n        GCSDK.getInstance().openAd(adParams, new AdCallback() {\n            @Override\n            public void onClick() {\n                Log.d(TAG, \"onClick: \");\n            }\n            @Override\n            public void onClickSkip() {\n                Log.d(TAG, \"onClickSkip: \");\n            }\n            @Override\n            public void onClose() {\n                Log.d(TAG, \"onClose: \");\n            }\n            @Override\n            public void onOpenFaild(int i, String s) {\n                Log.d(TAG, \"onOpenFaild: \");\n            }\n            @Override\n            public void onOpenSuccess() {\n                Log.d(TAG, \"onOpenSuccess: \");\n            }\n            @Override\n            public void onLoadBegin() {\n                Log.d(TAG, \"onLoadBegin: \");\n            }\n            @Override\n            public void onLoadFaild(int i, String s) {\n                Log.d(TAG, \"onLoadFaild: \");\n            }\n            @Override\n            public void onLoadComplete() {\n                Log.d(TAG, \"onLoadComplete: \");\n            }\n            @Override\n            public void onDownloadBegin() {\n                Log.d(TAG, \"onDownloadBegin: \");\n            }\n            @Override\n            public void onDownloadFail(int i, String s) {\n                Log.d(TAG, \"onDownloadFail: \");\n            }\n            @Override\n            public void onDownloadComplete() {\n                Log.d(TAG, \"onDownloadComplete: \");\n            }\n        });\n    }\n}\n```\n\nPayCallback 内部类实现\n\n```java\n.class Lcom/example/gcsdkdemo/MainActivity$1;\n.super Ljava/lang/Object;\n.source \"MainActivity.java\"\n\n# interfaces\n.implements Lcom/primer/jsonlili/callback/PayCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\nvalue = Lcom/example/gcsdkdemo/MainActivity;->onPay(Landroid/view/View;)V\n.end annotation\n\n.annotation system Ldalvik/annotation/InnerClass;\naccessFlags = 0x0\nname = null\n.end annotation\n\n# instance fields\n.field final synthetic this$0:Lcom/example/gcsdkdemo/MainActivity;\n\n# direct methods\n.method constructor <init>(Lcom/example/gcsdkdemo/MainActivity;)V\n.locals 0\n.param p1, \"this$0\" # Lcom/example/gcsdkdemo/MainActivity;\n.line 28\niput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$1;->this$0:Lcom/example/gcsdkdemo/MainActivity;\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\nreturn-void\n.end method\n\n# virtual methods\n.method public onPayFail(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 36\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onPayFail: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 37\nreturn-void\n.end method\n\n.method public onPaySuccess()V\n.locals 2\n.line 31\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onPaySuccess: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 32\nreturn-void\n.end method\n```\n\n内部类 LoginCallback 实现\n\n```java\n.class Lcom/example/gcsdkdemo/MainActivity$2;\n.super Ljava/lang/Object;\n.source \"MainActivity.java\"\n\n# interfaces\n.implements Lcom/primer/jsonlili/callback/LoginCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\nvalue = Lcom/example/gcsdkdemo/MainActivity;->onLogin(Landroid/view/View;)V\n.end annotation\n\n.annotation system Ldalvik/annotation/InnerClass;\naccessFlags = 0x0\nname = null\n.end annotation\n\n# instance fields\n.field final synthetic this$0:Lcom/example/gcsdkdemo/MainActivity;\n\n# direct methods\n.method constructor <init>(Lcom/example/gcsdkdemo/MainActivity;)V\n.locals 0\n.param p1, \"this$0\" # Lcom/example/gcsdkdemo/MainActivity;\n.line 43\niput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$2;->this$0:Lcom/example/gcsdkdemo/MainActivity;\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\nreturn-void\n.end method\n\n# virtual methods\n.method public inLoginFail(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 51\nconst-string v0, \"cunzhang\"\nconst-string v1, \"inLoginFail: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 52\nreturn-void\n.end method\n\n.method public onLoginSuccess()V\n.locals 2\n.line 46\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onLoginSuccess: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 47\nreturn-void\n.end method\n```\n\nAdCallback 内部类实现\n\n```java\n.class Lcom/example/gcsdkdemo/MainActivity$3;\n.super Ljava/lang/Object;\n.source \"MainActivity.java\"\n\n# interfaces\n.implements Lcom/primer/jsonlili/callback/AdCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\nvalue = Lcom/example/gcsdkdemo/MainActivity;->onOpenAd(Landroid/view/View;)V\n.end annotation\n\n.annotation system Ldalvik/annotation/InnerClass;\naccessFlags = 0x0\nname = null\n.end annotation\n\n# instance fields\n.field final synthetic this$0:Lcom/example/gcsdkdemo/MainActivity;\n\n# direct methods\n.method constructor <init>(Lcom/example/gcsdkdemo/MainActivity;)V\n.locals 0\n.param p1, \"this$0\" # Lcom/example/gcsdkdemo/MainActivity;\n.line 60\niput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$3;->this$0:Lcom/example/gcsdkdemo/MainActivity;\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\nreturn-void\n.end method\n\n# virtual methods\n.method public onClick()V\n.locals 2\n.line 63\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onClick: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 64\nreturn-void\n.end method\n\n.method public onClickSkip()V\n.locals 2\n.line 68\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onClickSkip: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 69\nreturn-void\n.end method\n\n.method public onClose()V\n.locals 2\n.line 73\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onClose: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 74\nreturn-void\n.end method\n\n.method public onDownloadBegin()V\n.locals 2\n.line 103\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onDownloadBegin: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 104\nreturn-void\n.end method\n\n.method public onDownloadComplete()V\n.locals 2\n.line 113\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onDownloadComplete: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 114\nreturn-void\n.end method\n\n.method public onDownloadFail(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 108\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onDownloadFail: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 109\nreturn-void\n.end method\n\n.method public onLoadBegin()V\n.locals 2\n.line 88\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onLoadBegin: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 89\nreturn-void\n.end method\n\n.method public onLoadComplete()V\n.locals 2\n.line 98\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onLoadComplete: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 99\nreturn-void\n.end method\n\n.method public onLoadFaild(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 93\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onLoadFaild: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 94\nreturn-void\n.end method\n\n.method public onOpenFaild(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 78\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onOpenFaild: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 79\nreturn-void\n.end method\n\n.method public onOpenSuccess()V\n.locals 2\n.line 83\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onOpenSuccess: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 84\nreturn-void\n.end method\n```\n\n熟能生巧，这样的代码看多了自然了解和认识的语法等也会越多，读取来就没那么费劲\n\n\n**我们的应用**\n\n假如我们已知代码插入点位置————对应按钮的点击事件，那么我们更应该关注的是`找到对应按钮的点击事件所在位置并插入新的 smali 代码`，插入代码不能引入新的编译器等错误\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/44d85c0db3e3955ffbe9fb8d82b82f72.png)\n\n# 试着接入 smali \n\n**1、把 sdk 相关的 smali 代码复制到我们应用反编译后的工程目录下**\n\n这里我新建 `smali_classes9` 目录，gcsdk 比较简单，只有代码没有资源、so 文件等；如果有，也需要复制到工程的相应目录下，确保项目能够编译成功、运行期间能找到路径正确加载代码，这是项目能够运行的前提。\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/42ce50c1f4987d6caf1dadbb4b1ba80a.png)\n\n下面就开始往应用中插入点处插入 sdk smali 代码。\n\n**2、LeaderApp.java & LeaderApp.smali**\n```java\n.class public Lcom/example/leaderapp/ui/LeaderApp;\n.super Landroid/app/Application;\n.source \"LeaderApp.java\"\n\n# instance fields\n.field private final TAG:Ljava/lang/String;\n# 1、定义初始化回调字段 \n.field private mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n\n# direct methods\n.method public constructor <init>()V\n .locals 1\n .line 6\n invoke-direct {p0}, Landroid/app/Application;-><init>()V\n .line 7\n const-string v0, \"leader\"\n iput-object v0, p0, Lcom/example/leaderapp/ui/LeaderApp;->TAG:Ljava/lang/String;\n# 2、初始化方法中创建内部类对象\n new-instance v0, Lcom/example/leaderapp/ui/LeaderApp$1;\n invoke-direct {v0, p0}, Lcom/example/leaderapp/ui/LeaderApp$1;-><init>(Lcom/example/leaderapp/ui/LeaderApp;)V\n iput-object v0, p0, Lcom/example/leaderapp/ui/LeaderApp;->mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n return-void\n.end method\n\n# virtual methods\n.method public onCreate()V\n .locals 2\n .line 11\n invoke-super {p0}, Landroid/app/Application;->onCreate()V\n .line 12\n const-string v0, \"leader\"\n const-string v1, \"onCreate: \"\n invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n# 3、调用初始化方法\n invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n move-result-object v0\n iget-object v1, p0, Lcom/example/leaderapp/ui/LeaderApp;->mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n invoke-virtual {v0, v1}, Lcom/primer/jsonlili/core/GCSDK;->init(Lcom/primer/jsonlili/callback/InitCallback;)V\n return-void\n.end method\n# 4、创建 LeaderApp$1.smali，并更新路径、类等\n```\n\n检验插入是否正确并符合期望，可使用 VSCODE smali 插件通过代码转换验证\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/4c945faf21ac85feb9392dbba3f9f527.png)\n\n对比原始项目和插入后的效果是否一致\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/36199a2e95b678da1afe678f4f9ed9f3.png)\n\n对安装包手动签名，运行查看日志，能看到 sdk 初始化正确，说明上述接入是无误的。\n\njarsigner -verbose -keystore [aa.keystore] [sign-app0.apk] [app-0.apk] key0\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/d9a2aa7640b31bea5158a5c79d08c34b.png)\n\n\n**注意⚠️：**\n\n反编译使用 `java -jar apktool.jar d ***.apk`，在回编译时候可能出现错误，日志中发现 `res/` 目录像是资源问题。\n\n```java\nW: invalid resource directory name: >/Users/jsonli/Desktop/demo/0603/app-0/app-0/res navigation\nbrut.androlib.AndrolibException: brut.common.BrutException: could not exec (exit code = 1):\n/Users/jsonli/Library/apktool/framework/1.apk, -S, \n/Users/jsonli/Desktop/demo/0603/app-0/app-0/res, -M, \n/Users/jsonli/Desktop/demo/0603/app-0/app-0/AndroidManifest.xml]\n```\n\n尝试在反编译时不处理资源命令加上 -r 参数`java -jar apktool.jar -r d ***.apk` 果然能够正常打包，继续完成剩下的接入吧 :)\n\n**3、HomeFragment$1.smali、HomeFrgment$2.smali**\n\n`HomeFragment$1.smali`: button 点击事件实现类，登录调用处\n`HomeFragment$2.smali`: gcsdk 登录回调\n\n```java\n.class Lcom/example/leaderapp/ui/home/HomeFragment$1;\n.super Ljava/lang/Object;\n.source \"HomeFragment.java\"\n\n# interfaces\n.implements Landroid/view/View$OnClickListener;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\n value = Lcom/example/leaderapp/ui/home/HomeFragment;->onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;\n.end annotation\n.annotation system Ldalvik/annotation/InnerClass;\n accessFlags = 0x0\n name = null\n.end annotation\n\n# instance fields\n.field final synthetic this$0:Lcom/example/leaderapp/ui/home/HomeFragment;\n\n# direct methods\n.method constructor <init>(Lcom/example/leaderapp/ui/home/HomeFragment;)V\n .locals 0\n .param p1, \"this$0\" # Lcom/example/leaderapp/ui/home/HomeFragment;\n .line 40\n iput-object p1, p0, Lcom/example/leaderapp/ui/home/HomeFragment$1;->this$0:Lcom/example/leaderapp/ui/home/HomeFragment;\n invoke-direct {p0}, Ljava/lang/Object;-><init>()V\n return-void\n.end method\n\n# virtual methods\n.method public onClick(Landroid/view/View;)V\n .locals 3\n .param p1, \"view\" # Landroid/view/View;\n .line 43\n invoke-virtual {p1}, Landroid/view/View;->getContext()Landroid/content/Context;\n move-result-object v0\n const-string v1, \"\\u767b\\u5f55\"\n const/4 v2, 0x0\n invoke-static {v0, v1, v2}, Landroid/widget/Toast;->makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;\n move-result-object v0\n invoke-virtual {v0}, Landroid/widget/Toast;->show()V\n .line 44\n const-string v0, \"leader\"\n const-string v1, \"onClick: login\"\n invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n\n# 1、调用登录接口，修改类路径、内部类（登录回调实现类）\n invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n move-result-object v0\n new-instance v1, Lcom/example/leaderapp/ui/home/HomeFragment$2;\n \n# 内部类持有外部类引用，这里的外部类是 button 的点击事件实现类，因此传入 HomeFragment$1，而不是 HomeFragment\n invoke-direct {v1, p0}, Lcom/example/leaderapp/ui/home/HomeFragment$2;-><init>(Lcom/example/leaderapp/ui/home/HomeFragment$1;)V\n invoke-virtual {v0, v1}, Lcom/primer/jsonlili/core/GCSDK;->login(Lcom/primer/jsonlili/callback/LoginCallback;)V\n return-void\n.end method\n```\n```java\n.class Lcom/example/leaderapp/ui/home/HomeFragment$2;\n.super Ljava/lang/Object;\n.source \"HomeFragment.java\"\n\n# 2、创建内部类文件，并把对应的登录回调代码复制过来\n# 3、修改类路径 .class、.source、\n# interfaces\n.implements Lcom/primer/jsonlili/callback/LoginCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\n value = Lcom/example/leaderapp/ui/home/HomeFragment;->onLogin(Landroid/view/View;)V\n.end annotation\n.annotation system Ldalvik/annotation/InnerClass;\n accessFlags = 0x0\n name = null\n.end annotation\n\n# 这里传入的外部类是 button 点击事件实现类，因此初始化函数和 this 类型应该是 \n# instance fields\n.field final synthetic this$0:Lcom/example/leaderapp/ui/home/HomeFragment$1;\n\n# direct methods\n.method constructor <init>(Lcom/example/leaderapp/ui/home/HomeFragment$1;)V\n .locals 0\n .param p1, \"this$0\"\n \n# 这里也是 HomeFragment$1\n iput-object p1, p0, Lcom/example/leaderapp/ui/home/HomeFragment$2;->this$0:Lcom/example/leaderapp/ui/home/HomeFragment$1;\n invoke-direct {p0}, Ljava/lang/Object;-><init>()V\n return-void\n.end method\n\n# virtual methods\n.method public inLoginFail(ILjava/lang/String;)V\n .locals 2\n .param p1, \"i\" # I\n .param p2, \"s\" # Ljava/lang/String;\n .line 51\n const-string v0, \"cunzhang\"\n const-string v1, \"inLoginFail: \"\n invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n .line 52\n return-void\n.end method\n\n.method public onLoginSuccess()V\n .locals 2\n .line 46\n const-string v0, \"cunzhang\"\n const-string v1, \"onLoginSuccess: \"\n invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n .line 47\n return-void\n.end method\n```\n\n**4、NotificationsFragment.smali、DashboardFragment.smali**\n\n因为代码简单，且逻辑一致，剩下的支付和广告接口代码就不贴了\n\n# 最后的最后\n\n`0、`获取 smail 代码（一般是根据 java 代码获取 smail 代码，同理根据 java 代码获取字节码，在代码量多的时候较难直接写出完整的 smail、字节码）\n`1、`寻找插入点，smali 代码插入、保存、插入检验\n`2、`打包、签名、运行调试查看效果（依此点击按钮，触发点击事件，运行结果和预期一致）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/831157f13e5c535bafa42839e3f80257.png)\n\n\n思考：\n\nA：为什么搞 smali 接入，这不是给自己找坑嘛\nB：这是需求，为了解决问题；我觉得重点是可以扩展知识\nA：既然你已有 apk，可以把它转换为 java 代码，在 java 代码上接入不更清晰、省事，避免盲区不好吗，还是不方便\nB：好像...也 可 以❓\nA：我觉得可以，AndroidFk 工具可以把 apk 直接反编译为 android 项目（若加固、加密的 apk 可能就没那么容易，那是另一个话题了）\nB：也是，在 java 代码上接入方便多了\nA：我又有疑问了：如果接入的第三方 sdk 是一个 aar资源文件（包含资源等文件） 而不是 jar（纯 Java 代码），接入会不会遇到其他问题\nB：区别肯定是有，实操方知晓\nA：下次你来一个试试\nB：... ...\nA：这不可怕啊，持续学习，提升广度办法总比困难多\n","source":"_posts/undefined/从smail接入第三方.md","raw":"---\ntitle: 从 smail 接入第三方 SDK\ncatalog: true\ndate: 2022-09-26 20:56:19\nsubtitle: 有时通过查看、修改第三方库能更好解决问题\nheader-img: /img/220926_smailsdk/smail_bg.webp\ntags: SDK\nsticky: 3\ncategories:\n---\n\n# 遇到过这种场景吗\n\n什么时候要利用 smali 语言层面接入第三方 sdk ？一般都是使用 java 接口，一目了然，搞个 smali 不是没事找事？场景不同，在没有办法的时候这就是一种方法。\n\nprogramer A：   发你一个 apk 文件，帮我看下\nprogramer A：   因为我们没有原工程，只有一个 APK，我想把咋们的 sdk 接入到里面，怎么搞？\nprogramer B：   应该可以，可以试试以字节码、smail 形式接入\nprogramer A：   smail ？这是啥啊！\nprogramer B：   自己查资料。。。。。。\n\n\n**嗯？没有思路，不然写个 Demo 看看吧**\n\n1、准备一个 sdk: `gcsdk-1.0.0.jar`\n2、准备一个 apk: `app-0.apk`（假设是我们的应用）\n3、创建一个空白 Android 项目，预备接入 sdk: `app-1.apk`（备用） \n\n模拟几个对外的接口简单生成一个 jar，实际中接入的第三方 sdk 接口也不会很复杂。\n\n---\n\n> gcsdk-1.0.0（示例） \n\n```java\n// 初始化\nGCSDK.getInstance().init(new InitCallback() {\n            @Override\n            public void initSuccess() {\n                System.out.println(\"gcsdk-初始化成功\");\n            }\n            @Override\n            public void initFail(int code, String error) {\n                System.out.println(\"gcsdk-初始化失败：code = \" + code + \"  error = \" + error);\n            }\n});\n\n//登录\nGCSDK.getInstance().login(new LoginCallback() {\n            @Override\n            public void onLoginSuccess() {\n                System.out.println(\"登录-成功\");\n            }\n            @Override\n            public void inLoginFail(int code, String error) {\n                System.out.println(\"登录-失败：code = \" + code + \" error = \" + error);\n            }\n});\n\n//广告        \nAdParams adParams = new AdParams();\nGCSDK.getInstance().openAd(adParams, new AdCallback() {\n            @Override\n            public void onClick() {\n                System.out.println(\"广告-点击\");\n            }\n            @Override\n            public void onClickSkip() {\n                System.out.println(\"广告-点击跳过\");\n            }\n            @Override\n            public void onClose() {\n                System.out.println(\"广告-关闭\");\n            }\n            @Override\n            public void onOpenFaild(int code, String error) {\n                System.out.println(\"广告-打开失败：code = \" + code + \" error = \" + error);\n            }\n            @Override\n            public void onOpenSuccess() {\n                System.out.println(\"广告-打开成功\");\n            }\n            @Override\n            public void onLoadBegin() {\n                System.out.println(\"广告-加载开始\");\n            }\n            @Override\n            public void onLoadFaild(int code, String error) {\n                System.out.println(\"广告-加载失败：code = \" + code + \" error = \" + error);\n            }\n            @Override\n            public void onLoadComplete() {\n                System.out.println(\"广告-加载完成\");\n            }\n            @Override\n            public void onDownloadBegin() {\n                System.out.println(\"广告-下载开始\");\n            }\n            @Override\n            public void onDownloadFail(int code, String error) {\n                System.out.println(\"广告-下载失败：code =\" + code + \" error = \" + error);\n            }\n\n            @Override\n            public void onDownloadComplete() {\n                System.out.println(\"广告-下载完成\");\n            }\n});\n\n//支付\nPayParams payParams = new PayParams();\nPayManager.getInstance().pay(payParams, new PayCallback() {\n            @Override\n            public void onPaySuccess() {\n                System.out.println(\"支付-成功\");\n            }\n            @Override\n            public void onPayFail(int code, String error) {\n                System.out.println(\"支付-失败：code = \" + code + \" error = \" + error);\n            }\n});\n```\n\n> 空白 Android 项目，模拟接入 gcsdk，接入完成后打包备用，生成的 apk 用于获取 smali 代码\n\n```java\n// App.java\npackage com.example.gcsdkdemo;\nimport android.app.Application;\nimport android.util.Log;\nimport com.primer.jsonlili.callback.InitCallback;\nimport com.primer.jsonlili.core.GCSDK;\n\npublic class App extends Application {\n    private final String TAG = \"cunzhang\";\n    //初始化回调\n    private InitCallback mInitCallback = new InitCallback() {\n        @Override\n        public void initSuccess() {\n            Log.d(TAG, \"initSuccess: \");\n        }\n\n        @Override\n        public void initFail(int i, String s) {\n            Log.d(TAG, \"initFail: \");\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        //gcsdk 初始化\n        GCSDK.getInstance().init(mInitCallback);\n    }\n}\n```\n```java\n//MainActivity.java\npackage com.example.gcsdkdemo;\nimport androidx.appcompat.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport com.primer.jsonlili.callback.AdCallback;\nimport com.primer.jsonlili.callback.LoginCallback;\nimport com.primer.jsonlili.callback.PayCallback;\nimport com.primer.jsonlili.core.GCSDK;\nimport com.primer.jsonlili.params.AdParams;\nimport com.primer.jsonlili.params.PayParams;\n\npublic class MainActivity extends AppCompatActivity {\n    private final String TAG = \"cunzhang\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    public void onPay(View view) {\n        Log.d(TAG, \"onPay: \");\n        //支付接口\n        PayParams payParams = new PayParams();\n        GCSDK.getInstance().pay(payParams, new PayCallback() {\n            @Override\n            public void onPaySuccess() {\n                Log.d(TAG, \"onPaySuccess: \");\n            }\n            @Override\n            public void onPayFail(int i, String s) {\n                Log.d(TAG, \"onPayFail: \");\n            }\n        });\n    }\n\n    public void onLogin(View view) {\n        Log.d(TAG, \"onLogin: \");\n        //登录接口\n        GCSDK.getInstance().login(new LoginCallback() {\n            @Override\n            public void onLoginSuccess() {\n                Log.d(TAG, \"onLoginSuccess: \");\n            }\n            @Override\n            public void inLoginFail(int i, String s) {\n                Log.d(TAG, \"inLoginFail: \");\n            }\n        });\n    }\n    \n    public void onOpenAd(View view) {\n        Log.d(TAG, \"onOpenAd: \");\n        //广告接口\n        AdParams adParams = new AdParams();\n        GCSDK.getInstance().openAd(adParams, new AdCallback() {\n            @Override\n            public void onClick() {\n                Log.d(TAG, \"onClick: \");\n            }\n            @Override\n            public void onClickSkip() {\n                Log.d(TAG, \"onClickSkip: \");\n            }\n            @Override\n            public void onClose() {\n                Log.d(TAG, \"onClose: \");\n            }\n            @Override\n            public void onOpenFaild(int i, String s) {\n                Log.d(TAG, \"onOpenFaild: \");\n            }\n            @Override\n            public void onOpenSuccess() {\n                Log.d(TAG, \"onOpenSuccess: \");\n            }\n            @Override\n            public void onLoadBegin() {\n                Log.d(TAG, \"onLoadBegin: \");\n            }\n            @Override\n            public void onLoadFaild(int i, String s) {\n                Log.d(TAG, \"onLoadFaild: \");\n            }\n            @Override\n            public void onLoadComplete() {\n                Log.d(TAG, \"onLoadComplete: \");\n            }\n            @Override\n            public void onDownloadBegin() {\n                Log.d(TAG, \"onDownloadBegin: \");\n            }\n            @Override\n            public void onDownloadFail(int i, String s) {\n                Log.d(TAG, \"onDownloadFail: \");\n            }\n            @Override\n            public void onDownloadComplete() {\n                Log.d(TAG, \"onDownloadComplete: \");\n            }\n        });\n    }\n}\n```\n\n依次触发按钮点击事件\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/f13a6793367598f0a03c93cb84c3a781.png)\n\n假设这是咋们的应用，接着要预备接入\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/c999c536a59d0ae7df378a1c36b140f6.png)\n\n\n# 了解下 smali\n\n**1、获得 smali**\n两个安装包的代码都要反编译获得 \n\n```java\njava -jar apktool_2.6.0.jar [-r] d app-0.apk\n\njava -jar apktool_2.6.0.jar [-r] d app-1.apk\n```\n\n我们的应用\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/f45e85873cea6435fddc0548f82af6ee.png)\n\n空白项目模拟 Java 接口模拟接入\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/b6ff5a0f01ab90cb1132849cb6d138f0.png)\n\n**2、了解项目的 smali**\n\n可以使用 VSCode 插件 smali、smali2java 方便查看 smali 代码，以下 smali 主要是列举与 sdk 相关，了解 smali 具体实现\n\n```java\n//App.java & App.smal\npackage com.example.gcsdkdemo;\nimport android.app.Application;\nimport android.util.Log;\nimport com.primer.jsonlili.callback.InitCallback;\nimport com.primer.jsonlili.core.GCSDK;\n\npublic class App extends Application {\n    private final String TAG = \"cunzhang\"; \n\n    //定义属性 mInitCallback：      .field private mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n    //创建对象：                    new-instance v0, Lcom/example/gcsdkdemo/App$1;\n    //调用类隐藏初始化方法 <init>：   invoke-direct {v0, p0}, Lcom/example/gcsdkdemo/App$1;-><init>(Lcom/example/gcsdkdemo/App;)V\n    //把创建的对象赋值给本地变量：     iput-object v0, p0, Lcom/example/gcsdkdemo/App;->mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n    private InitCallback mInitCallback = new InitCallback() {\n        @Override\n        public void initSuccess() {\n            Log.d(TAG, \"initSuccess: \");\n        }\n        @Override\n        public void initFail(int i, String s) {\n            Log.d(TAG, \"initFail: \");\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        \n        //调用类的静态方法：         invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n        //移动操作数：              move-result-object v0\n        //从操作数栈获取两个操作数：  iget-object v1, p0, Lcom/example/gcsdkdemo/App;->mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n        //调用实现方法：            invoke-virtual {v0, v1}, Lcom/primer/jsonlili/core/GCSDK;->init(Lcom/primer/jsonlili/callback/InitCallback;)V\n        GCSDK.getInstance().init(mInitCallback);\n    }\n}\n```\n\nInitCallback 内部类实现\n\n```java\n# 表明类限定名\n.class Lcom/example/gcsdkdemo/App$1;\n# 父类\n.super Ljava/lang/Object;\n# 源文件名称\n.source \"App.java\"\n\n# interfaces\n.implements Lcom/primer/jsonlili/callback/InitCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingClass;\nvalue = Lcom/example/gcsdkdemo/App;\n.end annotation\n\n# 内部类\n.annotation system Ldalvik/annotation/InnerClass;\naccessFlags = 0x0\nname = null\n.end annotation\n\n# 内部类持有外部类 this 引用\n# instance fields\n.field final synthetic this$0:Lcom/example/gcsdkdemo/App;\n\n# direct methods\n.method constructor <init>(Lcom/example/gcsdkdemo/App;)V\n.locals 0\n.param p1, \"this$0\" # Lcom/example/gcsdkdemo/App;\n# 行数，删除不影响代码执行\n.line 13\niput-object p1, p0, Lcom/example/gcsdkdemo/App$1;->this$0:Lcom/example/gcsdkdemo/App;\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\nreturn-void\n.end method\n\n# virtual methods\n.method public initFail(ILjava/lang/String;)V\n\n# 指定方法中可用的非参寄存器数量\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 21\nconst-string v0, \"cunzhang\"\nconst-string v1, \"initFail: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 22\nreturn-void\n.end method\n\n.method public initSuccess()V\n.locals 2\n.line 16\nconst-string v0, \"cunzhang\"\nconst-string v1, \"initSuccess: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 17\nreturn-void\n.end method\n```\n\n```java\n//MainActivity.java $ MainActivity.smali\npackage com.example.gcsdkdemo;\nimport androidx.appcompat.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport com.primer.jsonlili.callback.AdCallback;\nimport com.primer.jsonlili.callback.LoginCallback;\nimport com.primer.jsonlili.callback.PayCallback;\nimport com.primer.jsonlili.core.GCSDK;\nimport com.primer.jsonlili.params.AdParams;\nimport com.primer.jsonlili.params.PayParams;\n\npublic class MainActivity extends AppCompatActivity {\n    private final String TAG = \"cunzhang\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    public void onPay(View view) {\n        Log.d(TAG, \"onPay: \");\n        //创建 PayParams 对象并存储到 v0，\n        //new-instance v0, Lcom/primer/jsonlili/params/PayParams;\n        //invoke-direct {v0}, Lcom/primer/jsonlili/params/PayParams;-><init>()V\n        \n        //.local v0, \"payParams\":Lcom/primer/jsonlili/params/PayParams;\n        //invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n        //move-result-object v1\n        //new-instance v2, Lcom/example/gcsdkdemo/MainActivity$1;\n        //invoke-direct {v2, p0}, Lcom/example/gcsdkdemo/MainActivity$1;-><init>(Lcom/example/gcsdkdemo/MainActivity;)V\n        //invoke-virtual {v1, v0, v2}, Lcom/primer/jsonlili/core/GCSDK;->pay(Lcom/primer/jsonlili/params/PayParams;Lcom/primer/jsonlili/callback/PayCallback;)V\n        \n        PayParams payParams = new PayParams();\n        GCSDK.getInstance().pay(payParams, new PayCallback() {\n            @Override\n            public void onPaySuccess() {\n                Log.d(TAG, \"onPaySuccess: \");\n            }\n\n            @Override\n            public void onPayFail(int i, String s) {\n                Log.d(TAG, \"onPayFail: \");\n            }\n        });\n    }\n\n    public void onLogin(View view) {\n        Log.d(TAG, \"onLogin: \");\n        //调用 getInstance，把 getInstance 返回的对象存储到 v0，创建内部类 LoginCallback 对象，调用内部类初始化，调用登录方法\n        //invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n        //move-result-object v0\n        //new-instance v1, Lcom/example/gcsdkdemo/MainActivity$2;\n        //invoke-direct {v1, p0}, Lcom/example/gcsdkdemo/MainActivity$2;-><init>(Lcom/example/gcsdkdemo/MainActivity;)V\n        //invoke-virtual {v0, v1}, Lcom/primer/jsonlili/core/GCSDK;->login(Lcom/primer/jsonlili/callback/LoginCallback;)V\n        \n        GCSDK.getInstance().login(new LoginCallback() {\n            @Override\n            public void onLoginSuccess() {\n                Log.d(TAG, \"onLoginSuccess: \");\n            }\n\n            @Override\n            public void inLoginFail(int i, String s) {\n                Log.d(TAG, \"inLoginFail: \");\n            }\n        });\n    }\n    \n\n    public void onOpenAd(View view) {\n        Log.d(TAG, \"onOpenAd: \");\n        \n        //new-instance v0, Lcom/primer/jsonlili/params/AdParams;\n        //invoke-direct {v0}, Lcom/primer/jsonlili/params/AdParams;-><init>()V\n        //.line 60\n        //.local v0, \"adParams\":Lcom/primer/jsonlili/params/AdParams;\n        //invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n        //move-result-object v1\n        //new-instance v2, Lcom/example/gcsdkdemo/MainActivity$3;\n        //invoke-direct {v2, p0}, Lcom/example/gcsdkdemo/MainActivity$3;-><init>(Lcom/example/gcsdkdemo/MainActivity;)V\n        //invoke-virtual {v1, v0, v2}, Lcom/primer/jsonlili/core/GCSDK;->openAd(Lcom/primer/jsonlili/params/AdParams;Lcom/primer/jsonlili/callback/AdCallback;)V\n\n        AdParams adParams = new AdParams();\n        GCSDK.getInstance().openAd(adParams, new AdCallback() {\n            @Override\n            public void onClick() {\n                Log.d(TAG, \"onClick: \");\n            }\n            @Override\n            public void onClickSkip() {\n                Log.d(TAG, \"onClickSkip: \");\n            }\n            @Override\n            public void onClose() {\n                Log.d(TAG, \"onClose: \");\n            }\n            @Override\n            public void onOpenFaild(int i, String s) {\n                Log.d(TAG, \"onOpenFaild: \");\n            }\n            @Override\n            public void onOpenSuccess() {\n                Log.d(TAG, \"onOpenSuccess: \");\n            }\n            @Override\n            public void onLoadBegin() {\n                Log.d(TAG, \"onLoadBegin: \");\n            }\n            @Override\n            public void onLoadFaild(int i, String s) {\n                Log.d(TAG, \"onLoadFaild: \");\n            }\n            @Override\n            public void onLoadComplete() {\n                Log.d(TAG, \"onLoadComplete: \");\n            }\n            @Override\n            public void onDownloadBegin() {\n                Log.d(TAG, \"onDownloadBegin: \");\n            }\n            @Override\n            public void onDownloadFail(int i, String s) {\n                Log.d(TAG, \"onDownloadFail: \");\n            }\n            @Override\n            public void onDownloadComplete() {\n                Log.d(TAG, \"onDownloadComplete: \");\n            }\n        });\n    }\n}\n```\n\nPayCallback 内部类实现\n\n```java\n.class Lcom/example/gcsdkdemo/MainActivity$1;\n.super Ljava/lang/Object;\n.source \"MainActivity.java\"\n\n# interfaces\n.implements Lcom/primer/jsonlili/callback/PayCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\nvalue = Lcom/example/gcsdkdemo/MainActivity;->onPay(Landroid/view/View;)V\n.end annotation\n\n.annotation system Ldalvik/annotation/InnerClass;\naccessFlags = 0x0\nname = null\n.end annotation\n\n# instance fields\n.field final synthetic this$0:Lcom/example/gcsdkdemo/MainActivity;\n\n# direct methods\n.method constructor <init>(Lcom/example/gcsdkdemo/MainActivity;)V\n.locals 0\n.param p1, \"this$0\" # Lcom/example/gcsdkdemo/MainActivity;\n.line 28\niput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$1;->this$0:Lcom/example/gcsdkdemo/MainActivity;\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\nreturn-void\n.end method\n\n# virtual methods\n.method public onPayFail(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 36\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onPayFail: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 37\nreturn-void\n.end method\n\n.method public onPaySuccess()V\n.locals 2\n.line 31\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onPaySuccess: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 32\nreturn-void\n.end method\n```\n\n内部类 LoginCallback 实现\n\n```java\n.class Lcom/example/gcsdkdemo/MainActivity$2;\n.super Ljava/lang/Object;\n.source \"MainActivity.java\"\n\n# interfaces\n.implements Lcom/primer/jsonlili/callback/LoginCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\nvalue = Lcom/example/gcsdkdemo/MainActivity;->onLogin(Landroid/view/View;)V\n.end annotation\n\n.annotation system Ldalvik/annotation/InnerClass;\naccessFlags = 0x0\nname = null\n.end annotation\n\n# instance fields\n.field final synthetic this$0:Lcom/example/gcsdkdemo/MainActivity;\n\n# direct methods\n.method constructor <init>(Lcom/example/gcsdkdemo/MainActivity;)V\n.locals 0\n.param p1, \"this$0\" # Lcom/example/gcsdkdemo/MainActivity;\n.line 43\niput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$2;->this$0:Lcom/example/gcsdkdemo/MainActivity;\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\nreturn-void\n.end method\n\n# virtual methods\n.method public inLoginFail(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 51\nconst-string v0, \"cunzhang\"\nconst-string v1, \"inLoginFail: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 52\nreturn-void\n.end method\n\n.method public onLoginSuccess()V\n.locals 2\n.line 46\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onLoginSuccess: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 47\nreturn-void\n.end method\n```\n\nAdCallback 内部类实现\n\n```java\n.class Lcom/example/gcsdkdemo/MainActivity$3;\n.super Ljava/lang/Object;\n.source \"MainActivity.java\"\n\n# interfaces\n.implements Lcom/primer/jsonlili/callback/AdCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\nvalue = Lcom/example/gcsdkdemo/MainActivity;->onOpenAd(Landroid/view/View;)V\n.end annotation\n\n.annotation system Ldalvik/annotation/InnerClass;\naccessFlags = 0x0\nname = null\n.end annotation\n\n# instance fields\n.field final synthetic this$0:Lcom/example/gcsdkdemo/MainActivity;\n\n# direct methods\n.method constructor <init>(Lcom/example/gcsdkdemo/MainActivity;)V\n.locals 0\n.param p1, \"this$0\" # Lcom/example/gcsdkdemo/MainActivity;\n.line 60\niput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$3;->this$0:Lcom/example/gcsdkdemo/MainActivity;\ninvoke-direct {p0}, Ljava/lang/Object;-><init>()V\nreturn-void\n.end method\n\n# virtual methods\n.method public onClick()V\n.locals 2\n.line 63\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onClick: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 64\nreturn-void\n.end method\n\n.method public onClickSkip()V\n.locals 2\n.line 68\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onClickSkip: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 69\nreturn-void\n.end method\n\n.method public onClose()V\n.locals 2\n.line 73\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onClose: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 74\nreturn-void\n.end method\n\n.method public onDownloadBegin()V\n.locals 2\n.line 103\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onDownloadBegin: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 104\nreturn-void\n.end method\n\n.method public onDownloadComplete()V\n.locals 2\n.line 113\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onDownloadComplete: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 114\nreturn-void\n.end method\n\n.method public onDownloadFail(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 108\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onDownloadFail: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 109\nreturn-void\n.end method\n\n.method public onLoadBegin()V\n.locals 2\n.line 88\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onLoadBegin: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 89\nreturn-void\n.end method\n\n.method public onLoadComplete()V\n.locals 2\n.line 98\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onLoadComplete: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 99\nreturn-void\n.end method\n\n.method public onLoadFaild(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 93\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onLoadFaild: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 94\nreturn-void\n.end method\n\n.method public onOpenFaild(ILjava/lang/String;)V\n.locals 2\n.param p1, \"i\" # I\n.param p2, \"s\" # Ljava/lang/String;\n.line 78\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onOpenFaild: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 79\nreturn-void\n.end method\n\n.method public onOpenSuccess()V\n.locals 2\n.line 83\nconst-string v0, \"cunzhang\"\nconst-string v1, \"onOpenSuccess: \"\ninvoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n.line 84\nreturn-void\n.end method\n```\n\n熟能生巧，这样的代码看多了自然了解和认识的语法等也会越多，读取来就没那么费劲\n\n\n**我们的应用**\n\n假如我们已知代码插入点位置————对应按钮的点击事件，那么我们更应该关注的是`找到对应按钮的点击事件所在位置并插入新的 smali 代码`，插入代码不能引入新的编译器等错误\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/44d85c0db3e3955ffbe9fb8d82b82f72.png)\n\n# 试着接入 smali \n\n**1、把 sdk 相关的 smali 代码复制到我们应用反编译后的工程目录下**\n\n这里我新建 `smali_classes9` 目录，gcsdk 比较简单，只有代码没有资源、so 文件等；如果有，也需要复制到工程的相应目录下，确保项目能够编译成功、运行期间能找到路径正确加载代码，这是项目能够运行的前提。\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/42ce50c1f4987d6caf1dadbb4b1ba80a.png)\n\n下面就开始往应用中插入点处插入 sdk smali 代码。\n\n**2、LeaderApp.java & LeaderApp.smali**\n```java\n.class public Lcom/example/leaderapp/ui/LeaderApp;\n.super Landroid/app/Application;\n.source \"LeaderApp.java\"\n\n# instance fields\n.field private final TAG:Ljava/lang/String;\n# 1、定义初始化回调字段 \n.field private mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n\n# direct methods\n.method public constructor <init>()V\n .locals 1\n .line 6\n invoke-direct {p0}, Landroid/app/Application;-><init>()V\n .line 7\n const-string v0, \"leader\"\n iput-object v0, p0, Lcom/example/leaderapp/ui/LeaderApp;->TAG:Ljava/lang/String;\n# 2、初始化方法中创建内部类对象\n new-instance v0, Lcom/example/leaderapp/ui/LeaderApp$1;\n invoke-direct {v0, p0}, Lcom/example/leaderapp/ui/LeaderApp$1;-><init>(Lcom/example/leaderapp/ui/LeaderApp;)V\n iput-object v0, p0, Lcom/example/leaderapp/ui/LeaderApp;->mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n return-void\n.end method\n\n# virtual methods\n.method public onCreate()V\n .locals 2\n .line 11\n invoke-super {p0}, Landroid/app/Application;->onCreate()V\n .line 12\n const-string v0, \"leader\"\n const-string v1, \"onCreate: \"\n invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n# 3、调用初始化方法\n invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n move-result-object v0\n iget-object v1, p0, Lcom/example/leaderapp/ui/LeaderApp;->mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;\n invoke-virtual {v0, v1}, Lcom/primer/jsonlili/core/GCSDK;->init(Lcom/primer/jsonlili/callback/InitCallback;)V\n return-void\n.end method\n# 4、创建 LeaderApp$1.smali，并更新路径、类等\n```\n\n检验插入是否正确并符合期望，可使用 VSCODE smali 插件通过代码转换验证\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/4c945faf21ac85feb9392dbba3f9f527.png)\n\n对比原始项目和插入后的效果是否一致\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/36199a2e95b678da1afe678f4f9ed9f3.png)\n\n对安装包手动签名，运行查看日志，能看到 sdk 初始化正确，说明上述接入是无误的。\n\njarsigner -verbose -keystore [aa.keystore] [sign-app0.apk] [app-0.apk] key0\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/d9a2aa7640b31bea5158a5c79d08c34b.png)\n\n\n**注意⚠️：**\n\n反编译使用 `java -jar apktool.jar d ***.apk`，在回编译时候可能出现错误，日志中发现 `res/` 目录像是资源问题。\n\n```java\nW: invalid resource directory name: >/Users/jsonli/Desktop/demo/0603/app-0/app-0/res navigation\nbrut.androlib.AndrolibException: brut.common.BrutException: could not exec (exit code = 1):\n/Users/jsonli/Library/apktool/framework/1.apk, -S, \n/Users/jsonli/Desktop/demo/0603/app-0/app-0/res, -M, \n/Users/jsonli/Desktop/demo/0603/app-0/app-0/AndroidManifest.xml]\n```\n\n尝试在反编译时不处理资源命令加上 -r 参数`java -jar apktool.jar -r d ***.apk` 果然能够正常打包，继续完成剩下的接入吧 :)\n\n**3、HomeFragment$1.smali、HomeFrgment$2.smali**\n\n`HomeFragment$1.smali`: button 点击事件实现类，登录调用处\n`HomeFragment$2.smali`: gcsdk 登录回调\n\n```java\n.class Lcom/example/leaderapp/ui/home/HomeFragment$1;\n.super Ljava/lang/Object;\n.source \"HomeFragment.java\"\n\n# interfaces\n.implements Landroid/view/View$OnClickListener;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\n value = Lcom/example/leaderapp/ui/home/HomeFragment;->onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;\n.end annotation\n.annotation system Ldalvik/annotation/InnerClass;\n accessFlags = 0x0\n name = null\n.end annotation\n\n# instance fields\n.field final synthetic this$0:Lcom/example/leaderapp/ui/home/HomeFragment;\n\n# direct methods\n.method constructor <init>(Lcom/example/leaderapp/ui/home/HomeFragment;)V\n .locals 0\n .param p1, \"this$0\" # Lcom/example/leaderapp/ui/home/HomeFragment;\n .line 40\n iput-object p1, p0, Lcom/example/leaderapp/ui/home/HomeFragment$1;->this$0:Lcom/example/leaderapp/ui/home/HomeFragment;\n invoke-direct {p0}, Ljava/lang/Object;-><init>()V\n return-void\n.end method\n\n# virtual methods\n.method public onClick(Landroid/view/View;)V\n .locals 3\n .param p1, \"view\" # Landroid/view/View;\n .line 43\n invoke-virtual {p1}, Landroid/view/View;->getContext()Landroid/content/Context;\n move-result-object v0\n const-string v1, \"\\u767b\\u5f55\"\n const/4 v2, 0x0\n invoke-static {v0, v1, v2}, Landroid/widget/Toast;->makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;\n move-result-object v0\n invoke-virtual {v0}, Landroid/widget/Toast;->show()V\n .line 44\n const-string v0, \"leader\"\n const-string v1, \"onClick: login\"\n invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n\n# 1、调用登录接口，修改类路径、内部类（登录回调实现类）\n invoke-static {}, Lcom/primer/jsonlili/core/GCSDK;->getInstance()Lcom/primer/jsonlili/core/GCSDK;\n move-result-object v0\n new-instance v1, Lcom/example/leaderapp/ui/home/HomeFragment$2;\n \n# 内部类持有外部类引用，这里的外部类是 button 的点击事件实现类，因此传入 HomeFragment$1，而不是 HomeFragment\n invoke-direct {v1, p0}, Lcom/example/leaderapp/ui/home/HomeFragment$2;-><init>(Lcom/example/leaderapp/ui/home/HomeFragment$1;)V\n invoke-virtual {v0, v1}, Lcom/primer/jsonlili/core/GCSDK;->login(Lcom/primer/jsonlili/callback/LoginCallback;)V\n return-void\n.end method\n```\n```java\n.class Lcom/example/leaderapp/ui/home/HomeFragment$2;\n.super Ljava/lang/Object;\n.source \"HomeFragment.java\"\n\n# 2、创建内部类文件，并把对应的登录回调代码复制过来\n# 3、修改类路径 .class、.source、\n# interfaces\n.implements Lcom/primer/jsonlili/callback/LoginCallback;\n\n# annotations\n.annotation system Ldalvik/annotation/EnclosingMethod;\n value = Lcom/example/leaderapp/ui/home/HomeFragment;->onLogin(Landroid/view/View;)V\n.end annotation\n.annotation system Ldalvik/annotation/InnerClass;\n accessFlags = 0x0\n name = null\n.end annotation\n\n# 这里传入的外部类是 button 点击事件实现类，因此初始化函数和 this 类型应该是 \n# instance fields\n.field final synthetic this$0:Lcom/example/leaderapp/ui/home/HomeFragment$1;\n\n# direct methods\n.method constructor <init>(Lcom/example/leaderapp/ui/home/HomeFragment$1;)V\n .locals 0\n .param p1, \"this$0\"\n \n# 这里也是 HomeFragment$1\n iput-object p1, p0, Lcom/example/leaderapp/ui/home/HomeFragment$2;->this$0:Lcom/example/leaderapp/ui/home/HomeFragment$1;\n invoke-direct {p0}, Ljava/lang/Object;-><init>()V\n return-void\n.end method\n\n# virtual methods\n.method public inLoginFail(ILjava/lang/String;)V\n .locals 2\n .param p1, \"i\" # I\n .param p2, \"s\" # Ljava/lang/String;\n .line 51\n const-string v0, \"cunzhang\"\n const-string v1, \"inLoginFail: \"\n invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n .line 52\n return-void\n.end method\n\n.method public onLoginSuccess()V\n .locals 2\n .line 46\n const-string v0, \"cunzhang\"\n const-string v1, \"onLoginSuccess: \"\n invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I\n .line 47\n return-void\n.end method\n```\n\n**4、NotificationsFragment.smali、DashboardFragment.smali**\n\n因为代码简单，且逻辑一致，剩下的支付和广告接口代码就不贴了\n\n# 最后的最后\n\n`0、`获取 smail 代码（一般是根据 java 代码获取 smail 代码，同理根据 java 代码获取字节码，在代码量多的时候较难直接写出完整的 smail、字节码）\n`1、`寻找插入点，smali 代码插入、保存、插入检验\n`2、`打包、签名、运行调试查看效果（依此点击按钮，触发点击事件，运行结果和预期一致）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/831157f13e5c535bafa42839e3f80257.png)\n\n\n思考：\n\nA：为什么搞 smali 接入，这不是给自己找坑嘛\nB：这是需求，为了解决问题；我觉得重点是可以扩展知识\nA：既然你已有 apk，可以把它转换为 java 代码，在 java 代码上接入不更清晰、省事，避免盲区不好吗，还是不方便\nB：好像...也 可 以❓\nA：我觉得可以，AndroidFk 工具可以把 apk 直接反编译为 android 项目（若加固、加密的 apk 可能就没那么容易，那是另一个话题了）\nB：也是，在 java 代码上接入方便多了\nA：我又有疑问了：如果接入的第三方 sdk 是一个 aar资源文件（包含资源等文件） 而不是 jar（纯 Java 代码），接入会不会遇到其他问题\nB：区别肯定是有，实操方知晓\nA：下次你来一个试试\nB：... ...\nA：这不可怕啊，持续学习，提升广度办法总比困难多\n","slug":"从smail接入第三方","published":1,"lang":"undefined","updated":"2022-09-26T12:56:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qb000s7tqp9g3f519j","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>遇到过这种场景吗</h1>\n<p>什么时候要利用 smali 语言层面接入第三方 sdk ？一般都是使用 java 接口，一目了然，搞个 smali 不是没事找事？场景不同，在没有办法的时候这就是一种方法。</p>\n<p>programer A：   发你一个 apk 文件，帮我看下<br>\nprogramer A：   因为我们没有原工程，只有一个 APK，我想把咋们的 sdk 接入到里面，怎么搞？<br>\nprogramer B：   应该可以，可以试试以字节码、smail 形式接入<br>\nprogramer A：   smail ？这是啥啊！<br>\nprogramer B：   自己查资料。。。。。。</p>\n<p><strong>嗯？没有思路，不然写个 Demo 看看吧</strong></p>\n<p>1、准备一个 sdk: <code>gcsdk-1.0.0.jar</code><br>\n2、准备一个 apk: <code>app-0.apk</code>（假设是我们的应用）<br>\n3、创建一个空白 Android 项目，预备接入 sdk: <code>app-1.apk</code>（备用）</p>\n<p>模拟几个对外的接口简单生成一个 jar，实际中接入的第三方 sdk 接口也不会很复杂。</p>\n<hr>\n<blockquote>\n<p>gcsdk-1.0.0（示例）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">GCSDK.getInstance().init(<span class=\"keyword\">new</span> InitCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;gcsdk-初始化成功&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initFail</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;gcsdk-初始化失败：code = &quot;</span> + code + <span class=\"string\">&quot;  error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//登录</span></span><br><span class=\"line\">GCSDK.getInstance().login(<span class=\"keyword\">new</span> LoginCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;登录-成功&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;登录-失败：code = &quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广告        </span></span><br><span class=\"line\">AdParams adParams = <span class=\"keyword\">new</span> AdParams();</span><br><span class=\"line\">GCSDK.getInstance().openAd(adParams, <span class=\"keyword\">new</span> AdCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-点击&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickSkip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-点击跳过&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-关闭&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-打开失败：code = &quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-打开成功&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-加载开始&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-加载失败：code = &quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-加载完成&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-下载开始&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadFail</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-下载失败：code =&quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-下载完成&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//支付</span></span><br><span class=\"line\">PayParams payParams = <span class=\"keyword\">new</span> PayParams();</span><br><span class=\"line\">PayManager.getInstance().pay(payParams, <span class=\"keyword\">new</span> PayCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPaySuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;支付-成功&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPayFail</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;支付-失败：code = &quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空白 Android 项目，模拟接入 gcsdk，接入完成后打包备用，生成的 apk 用于获取 smali 代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.gcsdkdemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.InitCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.core.GCSDK;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;cunzhang&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//初始化回调</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InitCallback mInitCallback = <span class=\"keyword\">new</span> InitCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;initSuccess: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;initFail: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        <span class=\"comment\">//gcsdk 初始化</span></span><br><span class=\"line\">        GCSDK.getInstance().init(mInitCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MainActivity.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.gcsdkdemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.AdCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.LoginCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.PayCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.core.GCSDK;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.params.AdParams;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.params.PayParams;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;cunzhang&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPay</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onPay: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//支付接口</span></span><br><span class=\"line\">        PayParams payParams = <span class=\"keyword\">new</span> PayParams();</span><br><span class=\"line\">        GCSDK.getInstance().pay(payParams, <span class=\"keyword\">new</span> PayCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPaySuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onPaySuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPayFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onPayFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogin</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onLogin: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//登录接口</span></span><br><span class=\"line\">        GCSDK.getInstance().login(<span class=\"keyword\">new</span> LoginCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoginSuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;inLoginFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenAd</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onOpenAd: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//广告接口</span></span><br><span class=\"line\">        AdParams adParams = <span class=\"keyword\">new</span> AdParams();</span><br><span class=\"line\">        GCSDK.getInstance().openAd(adParams, <span class=\"keyword\">new</span> AdCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClick: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickSkip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClickSkip: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClose: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onOpenFaild: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onOpenSuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadBegin: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadFaild: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadComplete: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadBegin: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadComplete: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依次触发按钮点击事件</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f13a6793367598f0a03c93cb84c3a781.png\" alt=\"image.png\"></p>\n<p>假设这是咋们的应用，接着要预备接入</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c999c536a59d0ae7df378a1c36b140f6.png\" alt=\"image.png\"></p>\n<h1>了解下 smali</h1>\n<p><strong>1、获得 smali</strong><br>\n两个安装包的代码都要反编译获得</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apktool_2<span class=\"number\">.6</span><span class=\"number\">.0</span>.jar [-r] d app-<span class=\"number\">0.</span>apk</span><br><span class=\"line\"></span><br><span class=\"line\">java -jar apktool_2<span class=\"number\">.6</span><span class=\"number\">.0</span>.jar [-r] d app-<span class=\"number\">1.</span>apk</span><br></pre></td></tr></table></figure>\n<p>我们的应用</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f45e85873cea6435fddc0548f82af6ee.png\" alt=\"image.png\"></p>\n<p>空白项目模拟 Java 接口模拟接入</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b6ff5a0f01ab90cb1132849cb6d138f0.png\" alt=\"image.png\"></p>\n<p><strong>2、了解项目的 smali</strong></p>\n<p>可以使用 VSCode 插件 smali、smali2java 方便查看 smali 代码，以下 smali 主要是列举与 sdk 相关，了解 smali 具体实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//App.java &amp; App.smal</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.gcsdkdemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.InitCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.core.GCSDK;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;cunzhang&quot;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义属性 mInitCallback：      .field private mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span></span><br><span class=\"line\">    <span class=\"comment\">//创建对象：                    new-instance v0, Lcom/example/gcsdkdemo/App$1;</span></span><br><span class=\"line\">    <span class=\"comment\">//调用类隐藏初始化方法 &lt;init&gt;：   invoke-direct &#123;v0, p0&#125;, Lcom/example/gcsdkdemo/App$1;-&gt;&lt;init&gt;(Lcom/example/gcsdkdemo/App;)V</span></span><br><span class=\"line\">    <span class=\"comment\">//把创建的对象赋值给本地变量：     iput-object v0, p0, Lcom/example/gcsdkdemo/App;-&gt;mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InitCallback mInitCallback = <span class=\"keyword\">new</span> InitCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;initSuccess: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;initFail: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//调用类的静态方法：         invoke-static &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span></span><br><span class=\"line\">        <span class=\"comment\">//移动操作数：              move-result-object v0</span></span><br><span class=\"line\">        <span class=\"comment\">//从操作数栈获取两个操作数：  iget-object v1, p0, Lcom/example/gcsdkdemo/App;-&gt;mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span></span><br><span class=\"line\">        <span class=\"comment\">//调用实现方法：            invoke-virtual &#123;v0, v1&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;init(Lcom/primer/jsonlili/callback/InitCallback;)V</span></span><br><span class=\"line\">        GCSDK.getInstance().init(mInitCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>InitCallback 内部类实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 表明类限定名</span><br><span class=\"line\">.class Lcom/example/gcsdkdemo/App$<span class=\"number\">1</span>;</span><br><span class=\"line\"># 父类</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\"># 源文件名称</span><br><span class=\"line\">.source <span class=\"string\">&quot;App.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/InitCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingClass;</span><br><span class=\"line\">value = Lcom/example/gcsdkdemo/App;</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># 内部类</span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\">accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\">name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># 内部类持有外部类 this 引用</span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/App;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/gcsdkdemo/App;)V</span><br><span class=\"line\">.locals <span class=\"number\">0</span></span><br><span class=\"line\">.param p1, &quot;this$0&quot; # Lcom/example/gcsdkdemo/App;</span><br><span class=\"line\"># 行数，删除不影响代码执行</span><br><span class=\"line\">.line <span class=\"number\">13</span></span><br><span class=\"line\">iput-object p1, p0, Lcom/example/gcsdkdemo/App$<span class=\"number\">1</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/App;</span><br><span class=\"line\">invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">initFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 指定方法中可用的非参寄存器数量</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;initFail: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">initSuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 16</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;initSuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MainActivity.java $ MainActivity.smali</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.gcsdkdemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.AdCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.LoginCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.PayCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.core.GCSDK;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.params.AdParams;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.params.PayParams;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;cunzhang&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPay</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onPay: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建 PayParams 对象并存储到 v0，</span></span><br><span class=\"line\">        <span class=\"comment\">//new-instance v0, Lcom/primer/jsonlili/params/PayParams;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v0&#125;, Lcom/primer/jsonlili/params/PayParams;-&gt;&lt;init&gt;()V</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//.local v0, &quot;payParams&quot;:Lcom/primer/jsonlili/params/PayParams;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-static &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span></span><br><span class=\"line\">        <span class=\"comment\">//move-result-object v1</span></span><br><span class=\"line\">        <span class=\"comment\">//new-instance v2, Lcom/example/gcsdkdemo/MainActivity$1;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v2, p0&#125;, Lcom/example/gcsdkdemo/MainActivity$1;-&gt;&lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-virtual &#123;v1, v0, v2&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;pay(Lcom/primer/jsonlili/params/PayParams;Lcom/primer/jsonlili/callback/PayCallback;)V</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        PayParams payParams = <span class=\"keyword\">new</span> PayParams();</span><br><span class=\"line\">        GCSDK.getInstance().pay(payParams, <span class=\"keyword\">new</span> PayCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPaySuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onPaySuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPayFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onPayFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogin</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onLogin: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//调用 getInstance，把 getInstance 返回的对象存储到 v0，创建内部类 LoginCallback 对象，调用内部类初始化，调用登录方法</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-static &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span></span><br><span class=\"line\">        <span class=\"comment\">//move-result-object v0</span></span><br><span class=\"line\">        <span class=\"comment\">//new-instance v1, Lcom/example/gcsdkdemo/MainActivity$2;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v1, p0&#125;, Lcom/example/gcsdkdemo/MainActivity$2;-&gt;&lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-virtual &#123;v0, v1&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;login(Lcom/primer/jsonlili/callback/LoginCallback;)V</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        GCSDK.getInstance().login(<span class=\"keyword\">new</span> LoginCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoginSuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;inLoginFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenAd</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onOpenAd: &quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//new-instance v0, Lcom/primer/jsonlili/params/AdParams;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v0&#125;, Lcom/primer/jsonlili/params/AdParams;-&gt;&lt;init&gt;()V</span></span><br><span class=\"line\">        <span class=\"comment\">//.line 60</span></span><br><span class=\"line\">        <span class=\"comment\">//.local v0, &quot;adParams&quot;:Lcom/primer/jsonlili/params/AdParams;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-static &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span></span><br><span class=\"line\">        <span class=\"comment\">//move-result-object v1</span></span><br><span class=\"line\">        <span class=\"comment\">//new-instance v2, Lcom/example/gcsdkdemo/MainActivity$3;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v2, p0&#125;, Lcom/example/gcsdkdemo/MainActivity$3;-&gt;&lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-virtual &#123;v1, v0, v2&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;openAd(Lcom/primer/jsonlili/params/AdParams;Lcom/primer/jsonlili/callback/AdCallback;)V</span></span><br><span class=\"line\"></span><br><span class=\"line\">        AdParams adParams = <span class=\"keyword\">new</span> AdParams();</span><br><span class=\"line\">        GCSDK.getInstance().openAd(adParams, <span class=\"keyword\">new</span> AdCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClick: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickSkip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClickSkip: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClose: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onOpenFaild: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onOpenSuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadBegin: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadFaild: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadComplete: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadBegin: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadComplete: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PayCallback 内部类实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">1</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;MainActivity.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/PayCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\">value = Lcom/example/gcsdkdemo/MainActivity;-&gt;onPay(Landroid/view/View;)V</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\">accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\">name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span><br><span class=\"line\">.locals <span class=\"number\">0</span></span><br><span class=\"line\">.param p1, &quot;this$0&quot; # Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">.line <span class=\"number\">28</span></span><br><span class=\"line\">iput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">1</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onPayFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onPayFail: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">37</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onPaySuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 31</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onPaySuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<p>内部类 LoginCallback 实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">2</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;MainActivity.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/LoginCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\">value = Lcom/example/gcsdkdemo/MainActivity;-&gt;onLogin(Landroid/view/View;)V</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\">accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\">name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span><br><span class=\"line\">.locals <span class=\"number\">0</span></span><br><span class=\"line\">.param p1, &quot;this$0&quot; # Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">.line <span class=\"number\">43</span></span><br><span class=\"line\">iput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">2</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">51</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;inLoginFail: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">52</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 46</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onLoginSuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">47</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<p>AdCallback 内部类实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">3</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;MainActivity.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/AdCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\">value = Lcom/example/gcsdkdemo/MainActivity;-&gt;onOpenAd(Landroid/view/View;)V</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\">accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\">name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span><br><span class=\"line\">.locals <span class=\"number\">0</span></span><br><span class=\"line\">.param p1, &quot;this$0&quot; # Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">.line <span class=\"number\">60</span></span><br><span class=\"line\">iput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">3</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onClick</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 63</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onClick: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onClickSkip</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 68</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onClickSkip: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">69</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onClose</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 73</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onClose: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">74</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onDownloadBegin</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 103</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onDownloadBegin: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">104</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 113</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onDownloadComplete: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">114</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onDownloadFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">108</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onDownloadFail: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">109</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoadBegin</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 88</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onLoadBegin: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">89</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 98</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onLoadComplete: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoadFaild</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">93</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onLoadFaild: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">94</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onOpenFaild</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">78</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onOpenFaild: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">79</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onOpenSuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 83</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onOpenSuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">84</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<p>熟能生巧，这样的代码看多了自然了解和认识的语法等也会越多，读取来就没那么费劲</p>\n<p><strong>我们的应用</strong></p>\n<p>假如我们已知代码插入点位置————对应按钮的点击事件，那么我们更应该关注的是<code>找到对应按钮的点击事件所在位置并插入新的 smali 代码</code>，插入代码不能引入新的编译器等错误</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44d85c0db3e3955ffbe9fb8d82b82f72.png\" alt=\"image.png\"></p>\n<h1>试着接入 smali</h1>\n<p><strong>1、把 sdk 相关的 smali 代码复制到我们应用反编译后的工程目录下</strong></p>\n<p>这里我新建 <code>smali_classes9</code> 目录，gcsdk 比较简单，只有代码没有资源、so 文件等；如果有，也需要复制到工程的相应目录下，确保项目能够编译成功、运行期间能找到路径正确加载代码，这是项目能够运行的前提。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/42ce50c1f4987d6caf1dadbb4b1ba80a.png\" alt=\"image.png\"></p>\n<p>下面就开始往应用中插入点处插入 sdk smali 代码。</p>\n<p><strong>2、LeaderApp.java &amp; LeaderApp.smali</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class <span class=\"keyword\">public</span> Lcom/example/leaderapp/ui/LeaderApp;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Landroid/app/Application;</span><br><span class=\"line\">.source <span class=\"string\">&quot;LeaderApp.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TAG:Ljava/lang/String;</span><br><span class=\"line\"># 1、定义初始化回调字段 </span><br><span class=\"line\">.field <span class=\"keyword\">private</span> mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method <span class=\"keyword\">public</span> constructor &lt;init&gt;()V</span><br><span class=\"line\"> .locals <span class=\"number\">1</span></span><br><span class=\"line\"> .line <span class=\"number\">6</span></span><br><span class=\"line\"> invoke-direct &#123;p0&#125;, Landroid/app/Application;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"> .line <span class=\"number\">7</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;leader&quot;</span></span><br><span class=\"line\"> iput-object v0, p0, Lcom/example/leaderapp/ui/LeaderApp;-&gt;TAG:Ljava/lang/String;</span><br><span class=\"line\"># 2、初始化方法中创建内部类对象</span><br><span class=\"line\"> <span class=\"keyword\">new</span>-instance v0, Lcom/example/leaderapp/ui/LeaderApp$<span class=\"number\">1</span>;</span><br><span class=\"line\"> invoke-direct &#123;v0, p0&#125;, Lcom/example/leaderapp/ui/LeaderApp$<span class=\"number\">1</span>;-&gt;&lt;init&gt;(Lcom/example/leaderapp/ui/LeaderApp;)V</span><br><span class=\"line\"> iput-object v0, p0, Lcom/example/leaderapp/ui/LeaderApp;-&gt;mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\"> .locals 2</span></span><br><span class=\"line\"><span class=\"function\"> .line 11</span></span><br><span class=\"line\"><span class=\"function\"> invoke-<span class=\"keyword\">super</span> </span>&#123;p0&#125;, Landroid/app/Application;-&gt;onCreate()V</span><br><span class=\"line\"> .line <span class=\"number\">12</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;leader&quot;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onCreate: &quot;</span></span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\"># 3、调用初始化方法</span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span><br><span class=\"line\"> move-result-object v0</span><br><span class=\"line\"> iget-object v1, p0, Lcom/example/leaderapp/ui/LeaderApp;-&gt;mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span><br><span class=\"line\"> invoke-virtual &#123;v0, v1&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;init(Lcom/primer/jsonlili/callback/InitCallback;)V</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"># 4、创建 LeaderApp$1.smali，并更新路径、类等</span><br></pre></td></tr></table></figure>\n<p>检验插入是否正确并符合期望，可使用 VSCODE smali 插件通过代码转换验证</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c945faf21ac85feb9392dbba3f9f527.png\" alt=\"image.png\"></p>\n<p>对比原始项目和插入后的效果是否一致</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/36199a2e95b678da1afe678f4f9ed9f3.png\" alt=\"image.png\"></p>\n<p>对安装包手动签名，运行查看日志，能看到 sdk 初始化正确，说明上述接入是无误的。</p>\n<p>jarsigner -verbose -keystore [aa.keystore] [sign-app0.apk] [app-0.apk] key0</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d9a2aa7640b31bea5158a5c79d08c34b.png\" alt=\"image.png\"></p>\n<p><strong>注意⚠️：</strong></p>\n<p>反编译使用 <code>java -jar apktool.jar d ***.apk</code>，在回编译时候可能出现错误，日志中发现 <code>res/</code> 目录像是资源问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W: invalid resource directory name: &gt;/Users/jsonli/Desktop/demo/<span class=\"number\">0603</span>/app-<span class=\"number\">0</span>/app-<span class=\"number\">0</span>/res navigation</span><br><span class=\"line\">brut.androlib.AndrolibException: brut.common.BrutException: <span class=\"function\">could not <span class=\"title\">exec</span> <span class=\"params\">(exit code = <span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\"><span class=\"function\">/Users/jsonli/Library/apktool/framework/1.apk, -S, </span></span><br><span class=\"line\"><span class=\"function\">/Users/jsonli/Desktop/demo/0603/app-0/app-0/res, -M, </span></span><br><span class=\"line\"><span class=\"function\">/Users/jsonli/Desktop/demo/0603/app-0/app-0/AndroidManifest.xml]</span></span><br></pre></td></tr></table></figure>\n<p>尝试在反编译时不处理资源命令加上 -r 参数<code>java -jar apktool.jar -r d ***.apk</code> 果然能够正常打包，继续完成剩下的接入吧 :)</p>\n<p><strong>3、HomeFragment$1.smali、HomeFrgment$2.smali</strong></p>\n<p><code>HomeFragment$1.smali</code>: button 点击事件实现类，登录调用处<br>\n<code>HomeFragment$2.smali</code>: gcsdk 登录回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;HomeFragment.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Landroid/view/View$OnClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\"> value = Lcom/example/leaderapp/ui/home/HomeFragment;-&gt;onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\"> accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\"> name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/leaderapp/ui/home/HomeFragment;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/leaderapp/ui/home/HomeFragment;)V</span><br><span class=\"line\"> .locals <span class=\"number\">0</span></span><br><span class=\"line\"> .param p1, &quot;this$0&quot; # Lcom/example/leaderapp/ui/home/HomeFragment;</span><br><span class=\"line\"> .line <span class=\"number\">40</span></span><br><span class=\"line\"> iput-object p1, p0, Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/leaderapp/ui/home/HomeFragment;</span><br><span class=\"line\"> invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onClick</span><span class=\"params\">(Landroid/view/View;)</span>V</span></span><br><span class=\"line\"><span class=\"function\"> .locals 3</span></span><br><span class=\"line\"><span class=\"function\"> .param p1, &quot;view&quot; # Landroid/view/View</span>;</span><br><span class=\"line\"> .line <span class=\"number\">43</span></span><br><span class=\"line\"> invoke-virtual &#123;p1&#125;, Landroid/view/View;-&gt;getContext()Landroid/content/Context;</span><br><span class=\"line\"> move-result-object v0</span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;\\u767b\\u5f55&quot;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>/<span class=\"number\">4</span> v2, <span class=\"number\">0x0</span></span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;v0, v1, v2&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;</span><br><span class=\"line\"> move-result-object v0</span><br><span class=\"line\"> invoke-virtual &#123;v0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br><span class=\"line\"> .line <span class=\"number\">44</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;leader&quot;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onClick: login&quot;</span></span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\"></span><br><span class=\"line\"># 1、调用登录接口，修改类路径、内部类（登录回调实现类）</span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span><br><span class=\"line\"> move-result-object v0</span><br><span class=\"line\"> <span class=\"keyword\">new</span>-instance v1, Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">2</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 内部类持有外部类引用，这里的外部类是 button 的点击事件实现类，因此传入 HomeFragment$1，而不是 HomeFragment</span><br><span class=\"line\"> invoke-direct &#123;v1, p0&#125;, Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">2</span>;-&gt;&lt;init&gt;(Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;)V</span><br><span class=\"line\"> invoke-virtual &#123;v0, v1&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;login(Lcom/primer/jsonlili/callback/LoginCallback;)V</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">2</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;HomeFragment.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 2、创建内部类文件，并把对应的登录回调代码复制过来</span><br><span class=\"line\"># 3、修改类路径 .class、.source、</span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/LoginCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\"> value = Lcom/example/leaderapp/ui/home/HomeFragment;-&gt;onLogin(Landroid/view/View;)V</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\"> accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\"> name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里传入的外部类是 button 点击事件实现类，因此初始化函数和 this 类型应该是 </span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;)V</span><br><span class=\"line\"> .locals <span class=\"number\">0</span></span><br><span class=\"line\"> .param p1, <span class=\"string\">&quot;this$0&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"># 这里也是 HomeFragment$1</span><br><span class=\"line\"> iput-object p1, p0, Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">2</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;</span><br><span class=\"line\"> invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\"> .locals 2</span></span><br><span class=\"line\"><span class=\"function\"> .param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\"> .param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\"> .line <span class=\"number\">51</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;inLoginFail: &quot;</span></span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\"> .line <span class=\"number\">52</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\"> .locals 2</span></span><br><span class=\"line\"><span class=\"function\"> .line 46</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">const</span>-string v1, &quot;onLoginSuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\"> invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\"> .line <span class=\"number\">47</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<p><strong>4、NotificationsFragment.smali、DashboardFragment.smali</strong></p>\n<p>因为代码简单，且逻辑一致，剩下的支付和广告接口代码就不贴了</p>\n<h1>最后的最后</h1>\n<p><code>0、</code>获取 smail 代码（一般是根据 java 代码获取 smail 代码，同理根据 java 代码获取字节码，在代码量多的时候较难直接写出完整的 smail、字节码）<br>\n<code>1、</code>寻找插入点，smali 代码插入、保存、插入检验<br>\n<code>2、</code>打包、签名、运行调试查看效果（依此点击按钮，触发点击事件，运行结果和预期一致）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/831157f13e5c535bafa42839e3f80257.png\" alt=\"image.png\"></p>\n<p>思考：</p>\n<p>A：为什么搞 smali 接入，这不是给自己找坑嘛<br>\nB：这是需求，为了解决问题；我觉得重点是可以扩展知识<br>\nA：既然你已有 apk，可以把它转换为 java 代码，在 java 代码上接入不更清晰、省事，避免盲区不好吗，还是不方便<br>\nB：好像…也 可 以❓<br>\nA：我觉得可以，AndroidFk 工具可以把 apk 直接反编译为 android 项目（若加固、加密的 apk 可能就没那么容易，那是另一个话题了）<br>\nB：也是，在 java 代码上接入方便多了<br>\nA：我又有疑问了：如果接入的第三方 sdk 是一个 aar资源文件（包含资源等文件） 而不是 jar（纯 Java 代码），接入会不会遇到其他问题<br>\nB：区别肯定是有，实操方知晓<br>\nA：下次你来一个试试<br>\nB：… …<br>\nA：这不可怕啊，持续学习，提升广度办法总比困难多</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>遇到过这种场景吗</h1>\n<p>什么时候要利用 smali 语言层面接入第三方 sdk ？一般都是使用 java 接口，一目了然，搞个 smali 不是没事找事？场景不同，在没有办法的时候这就是一种方法。</p>\n<p>programer A：   发你一个 apk 文件，帮我看下<br>\nprogramer A：   因为我们没有原工程，只有一个 APK，我想把咋们的 sdk 接入到里面，怎么搞？<br>\nprogramer B：   应该可以，可以试试以字节码、smail 形式接入<br>\nprogramer A：   smail ？这是啥啊！<br>\nprogramer B：   自己查资料。。。。。。</p>\n<p><strong>嗯？没有思路，不然写个 Demo 看看吧</strong></p>\n<p>1、准备一个 sdk: <code>gcsdk-1.0.0.jar</code><br>\n2、准备一个 apk: <code>app-0.apk</code>（假设是我们的应用）<br>\n3、创建一个空白 Android 项目，预备接入 sdk: <code>app-1.apk</code>（备用）</p>\n<p>模拟几个对外的接口简单生成一个 jar，实际中接入的第三方 sdk 接口也不会很复杂。</p>\n<hr>\n<blockquote>\n<p>gcsdk-1.0.0（示例）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">GCSDK.getInstance().init(<span class=\"keyword\">new</span> InitCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;gcsdk-初始化成功&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initFail</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;gcsdk-初始化失败：code = &quot;</span> + code + <span class=\"string\">&quot;  error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//登录</span></span><br><span class=\"line\">GCSDK.getInstance().login(<span class=\"keyword\">new</span> LoginCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;登录-成功&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;登录-失败：code = &quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广告        </span></span><br><span class=\"line\">AdParams adParams = <span class=\"keyword\">new</span> AdParams();</span><br><span class=\"line\">GCSDK.getInstance().openAd(adParams, <span class=\"keyword\">new</span> AdCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-点击&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickSkip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-点击跳过&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-关闭&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-打开失败：code = &quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-打开成功&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-加载开始&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-加载失败：code = &quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-加载完成&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-下载开始&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadFail</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-下载失败：code =&quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;广告-下载完成&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//支付</span></span><br><span class=\"line\">PayParams payParams = <span class=\"keyword\">new</span> PayParams();</span><br><span class=\"line\">PayManager.getInstance().pay(payParams, <span class=\"keyword\">new</span> PayCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPaySuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;支付-成功&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPayFail</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String error)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;支付-失败：code = &quot;</span> + code + <span class=\"string\">&quot; error = &quot;</span> + error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空白 Android 项目，模拟接入 gcsdk，接入完成后打包备用，生成的 apk 用于获取 smali 代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.gcsdkdemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.InitCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.core.GCSDK;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;cunzhang&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//初始化回调</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InitCallback mInitCallback = <span class=\"keyword\">new</span> InitCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;initSuccess: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;initFail: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        <span class=\"comment\">//gcsdk 初始化</span></span><br><span class=\"line\">        GCSDK.getInstance().init(mInitCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MainActivity.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.gcsdkdemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.AdCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.LoginCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.PayCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.core.GCSDK;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.params.AdParams;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.params.PayParams;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;cunzhang&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPay</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onPay: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//支付接口</span></span><br><span class=\"line\">        PayParams payParams = <span class=\"keyword\">new</span> PayParams();</span><br><span class=\"line\">        GCSDK.getInstance().pay(payParams, <span class=\"keyword\">new</span> PayCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPaySuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onPaySuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPayFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onPayFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogin</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onLogin: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//登录接口</span></span><br><span class=\"line\">        GCSDK.getInstance().login(<span class=\"keyword\">new</span> LoginCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoginSuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;inLoginFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenAd</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onOpenAd: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//广告接口</span></span><br><span class=\"line\">        AdParams adParams = <span class=\"keyword\">new</span> AdParams();</span><br><span class=\"line\">        GCSDK.getInstance().openAd(adParams, <span class=\"keyword\">new</span> AdCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClick: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickSkip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClickSkip: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClose: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onOpenFaild: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onOpenSuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadBegin: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadFaild: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadComplete: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadBegin: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadComplete: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依次触发按钮点击事件</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f13a6793367598f0a03c93cb84c3a781.png\" alt=\"image.png\"></p>\n<p>假设这是咋们的应用，接着要预备接入</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c999c536a59d0ae7df378a1c36b140f6.png\" alt=\"image.png\"></p>\n<h1>了解下 smali</h1>\n<p><strong>1、获得 smali</strong><br>\n两个安装包的代码都要反编译获得</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apktool_2<span class=\"number\">.6</span><span class=\"number\">.0</span>.jar [-r] d app-<span class=\"number\">0.</span>apk</span><br><span class=\"line\"></span><br><span class=\"line\">java -jar apktool_2<span class=\"number\">.6</span><span class=\"number\">.0</span>.jar [-r] d app-<span class=\"number\">1.</span>apk</span><br></pre></td></tr></table></figure>\n<p>我们的应用</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f45e85873cea6435fddc0548f82af6ee.png\" alt=\"image.png\"></p>\n<p>空白项目模拟 Java 接口模拟接入</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b6ff5a0f01ab90cb1132849cb6d138f0.png\" alt=\"image.png\"></p>\n<p><strong>2、了解项目的 smali</strong></p>\n<p>可以使用 VSCode 插件 smali、smali2java 方便查看 smali 代码，以下 smali 主要是列举与 sdk 相关，了解 smali 具体实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//App.java &amp; App.smal</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.gcsdkdemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.InitCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.core.GCSDK;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;cunzhang&quot;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义属性 mInitCallback：      .field private mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span></span><br><span class=\"line\">    <span class=\"comment\">//创建对象：                    new-instance v0, Lcom/example/gcsdkdemo/App$1;</span></span><br><span class=\"line\">    <span class=\"comment\">//调用类隐藏初始化方法 &lt;init&gt;：   invoke-direct &#123;v0, p0&#125;, Lcom/example/gcsdkdemo/App$1;-&gt;&lt;init&gt;(Lcom/example/gcsdkdemo/App;)V</span></span><br><span class=\"line\">    <span class=\"comment\">//把创建的对象赋值给本地变量：     iput-object v0, p0, Lcom/example/gcsdkdemo/App;-&gt;mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InitCallback mInitCallback = <span class=\"keyword\">new</span> InitCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;initSuccess: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;initFail: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//调用类的静态方法：         invoke-static &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span></span><br><span class=\"line\">        <span class=\"comment\">//移动操作数：              move-result-object v0</span></span><br><span class=\"line\">        <span class=\"comment\">//从操作数栈获取两个操作数：  iget-object v1, p0, Lcom/example/gcsdkdemo/App;-&gt;mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span></span><br><span class=\"line\">        <span class=\"comment\">//调用实现方法：            invoke-virtual &#123;v0, v1&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;init(Lcom/primer/jsonlili/callback/InitCallback;)V</span></span><br><span class=\"line\">        GCSDK.getInstance().init(mInitCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>InitCallback 内部类实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 表明类限定名</span><br><span class=\"line\">.class Lcom/example/gcsdkdemo/App$<span class=\"number\">1</span>;</span><br><span class=\"line\"># 父类</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\"># 源文件名称</span><br><span class=\"line\">.source <span class=\"string\">&quot;App.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/InitCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingClass;</span><br><span class=\"line\">value = Lcom/example/gcsdkdemo/App;</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># 内部类</span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\">accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\">name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># 内部类持有外部类 this 引用</span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/App;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/gcsdkdemo/App;)V</span><br><span class=\"line\">.locals <span class=\"number\">0</span></span><br><span class=\"line\">.param p1, &quot;this$0&quot; # Lcom/example/gcsdkdemo/App;</span><br><span class=\"line\"># 行数，删除不影响代码执行</span><br><span class=\"line\">.line <span class=\"number\">13</span></span><br><span class=\"line\">iput-object p1, p0, Lcom/example/gcsdkdemo/App$<span class=\"number\">1</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/App;</span><br><span class=\"line\">invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">initFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 指定方法中可用的非参寄存器数量</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;initFail: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">initSuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 16</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;initSuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MainActivity.java $ MainActivity.smali</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.gcsdkdemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.AdCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.LoginCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.callback.PayCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.core.GCSDK;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.params.AdParams;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.primer.jsonlili.params.PayParams;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;cunzhang&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPay</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onPay: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建 PayParams 对象并存储到 v0，</span></span><br><span class=\"line\">        <span class=\"comment\">//new-instance v0, Lcom/primer/jsonlili/params/PayParams;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v0&#125;, Lcom/primer/jsonlili/params/PayParams;-&gt;&lt;init&gt;()V</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//.local v0, &quot;payParams&quot;:Lcom/primer/jsonlili/params/PayParams;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-static &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span></span><br><span class=\"line\">        <span class=\"comment\">//move-result-object v1</span></span><br><span class=\"line\">        <span class=\"comment\">//new-instance v2, Lcom/example/gcsdkdemo/MainActivity$1;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v2, p0&#125;, Lcom/example/gcsdkdemo/MainActivity$1;-&gt;&lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-virtual &#123;v1, v0, v2&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;pay(Lcom/primer/jsonlili/params/PayParams;Lcom/primer/jsonlili/callback/PayCallback;)V</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        PayParams payParams = <span class=\"keyword\">new</span> PayParams();</span><br><span class=\"line\">        GCSDK.getInstance().pay(payParams, <span class=\"keyword\">new</span> PayCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPaySuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onPaySuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPayFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onPayFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogin</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onLogin: &quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//调用 getInstance，把 getInstance 返回的对象存储到 v0，创建内部类 LoginCallback 对象，调用内部类初始化，调用登录方法</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-static &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span></span><br><span class=\"line\">        <span class=\"comment\">//move-result-object v0</span></span><br><span class=\"line\">        <span class=\"comment\">//new-instance v1, Lcom/example/gcsdkdemo/MainActivity$2;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v1, p0&#125;, Lcom/example/gcsdkdemo/MainActivity$2;-&gt;&lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-virtual &#123;v0, v1&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;login(Lcom/primer/jsonlili/callback/LoginCallback;)V</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        GCSDK.getInstance().login(<span class=\"keyword\">new</span> LoginCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoginSuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;inLoginFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenAd</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onOpenAd: &quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//new-instance v0, Lcom/primer/jsonlili/params/AdParams;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v0&#125;, Lcom/primer/jsonlili/params/AdParams;-&gt;&lt;init&gt;()V</span></span><br><span class=\"line\">        <span class=\"comment\">//.line 60</span></span><br><span class=\"line\">        <span class=\"comment\">//.local v0, &quot;adParams&quot;:Lcom/primer/jsonlili/params/AdParams;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-static &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span></span><br><span class=\"line\">        <span class=\"comment\">//move-result-object v1</span></span><br><span class=\"line\">        <span class=\"comment\">//new-instance v2, Lcom/example/gcsdkdemo/MainActivity$3;</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-direct &#123;v2, p0&#125;, Lcom/example/gcsdkdemo/MainActivity$3;-&gt;&lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span></span><br><span class=\"line\">        <span class=\"comment\">//invoke-virtual &#123;v1, v0, v2&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;openAd(Lcom/primer/jsonlili/params/AdParams;Lcom/primer/jsonlili/callback/AdCallback;)V</span></span><br><span class=\"line\"></span><br><span class=\"line\">        AdParams adParams = <span class=\"keyword\">new</span> AdParams();</span><br><span class=\"line\">        GCSDK.getInstance().openAd(adParams, <span class=\"keyword\">new</span> AdCallback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClick: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickSkip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClickSkip: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onClose: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onOpenFaild: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpenSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onOpenSuccess: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadBegin: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFaild</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadFaild: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onLoadComplete: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadBegin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadBegin: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadFail</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadFail: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">&quot;onDownloadComplete: &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PayCallback 内部类实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">1</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;MainActivity.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/PayCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\">value = Lcom/example/gcsdkdemo/MainActivity;-&gt;onPay(Landroid/view/View;)V</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\">accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\">name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span><br><span class=\"line\">.locals <span class=\"number\">0</span></span><br><span class=\"line\">.param p1, &quot;this$0&quot; # Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">.line <span class=\"number\">28</span></span><br><span class=\"line\">iput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">1</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onPayFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onPayFail: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">37</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onPaySuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 31</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onPaySuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<p>内部类 LoginCallback 实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">2</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;MainActivity.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/LoginCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\">value = Lcom/example/gcsdkdemo/MainActivity;-&gt;onLogin(Landroid/view/View;)V</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\">accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\">name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span><br><span class=\"line\">.locals <span class=\"number\">0</span></span><br><span class=\"line\">.param p1, &quot;this$0&quot; # Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">.line <span class=\"number\">43</span></span><br><span class=\"line\">iput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">2</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">51</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;inLoginFail: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">52</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 46</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onLoginSuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">47</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<p>AdCallback 内部类实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">3</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;MainActivity.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/AdCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\">value = Lcom/example/gcsdkdemo/MainActivity;-&gt;onOpenAd(Landroid/view/View;)V</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\">accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\">name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/gcsdkdemo/MainActivity;)V</span><br><span class=\"line\">.locals <span class=\"number\">0</span></span><br><span class=\"line\">.param p1, &quot;this$0&quot; # Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">.line <span class=\"number\">60</span></span><br><span class=\"line\">iput-object p1, p0, Lcom/example/gcsdkdemo/MainActivity$<span class=\"number\">3</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/gcsdkdemo/MainActivity;</span><br><span class=\"line\">invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onClick</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 63</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onClick: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onClickSkip</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 68</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onClickSkip: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">69</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onClose</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 73</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onClose: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">74</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onDownloadBegin</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 103</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onDownloadBegin: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">104</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 113</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onDownloadComplete: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">114</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onDownloadFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">108</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onDownloadFail: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">109</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoadBegin</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 88</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onLoadBegin: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">89</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 98</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onLoadComplete: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoadFaild</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">93</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onLoadFaild: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">94</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onOpenFaild</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\">.param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\">.line <span class=\"number\">78</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onOpenFaild: &quot;</span></span><br><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">79</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onOpenSuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\">.locals 2</span></span><br><span class=\"line\"><span class=\"function\">.line 83</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span>-string v1, &quot;onOpenSuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\">invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\">.line <span class=\"number\">84</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<p>熟能生巧，这样的代码看多了自然了解和认识的语法等也会越多，读取来就没那么费劲</p>\n<p><strong>我们的应用</strong></p>\n<p>假如我们已知代码插入点位置————对应按钮的点击事件，那么我们更应该关注的是<code>找到对应按钮的点击事件所在位置并插入新的 smali 代码</code>，插入代码不能引入新的编译器等错误</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44d85c0db3e3955ffbe9fb8d82b82f72.png\" alt=\"image.png\"></p>\n<h1>试着接入 smali</h1>\n<p><strong>1、把 sdk 相关的 smali 代码复制到我们应用反编译后的工程目录下</strong></p>\n<p>这里我新建 <code>smali_classes9</code> 目录，gcsdk 比较简单，只有代码没有资源、so 文件等；如果有，也需要复制到工程的相应目录下，确保项目能够编译成功、运行期间能找到路径正确加载代码，这是项目能够运行的前提。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/42ce50c1f4987d6caf1dadbb4b1ba80a.png\" alt=\"image.png\"></p>\n<p>下面就开始往应用中插入点处插入 sdk smali 代码。</p>\n<p><strong>2、LeaderApp.java &amp; LeaderApp.smali</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class <span class=\"keyword\">public</span> Lcom/example/leaderapp/ui/LeaderApp;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Landroid/app/Application;</span><br><span class=\"line\">.source <span class=\"string\">&quot;LeaderApp.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TAG:Ljava/lang/String;</span><br><span class=\"line\"># 1、定义初始化回调字段 </span><br><span class=\"line\">.field <span class=\"keyword\">private</span> mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method <span class=\"keyword\">public</span> constructor &lt;init&gt;()V</span><br><span class=\"line\"> .locals <span class=\"number\">1</span></span><br><span class=\"line\"> .line <span class=\"number\">6</span></span><br><span class=\"line\"> invoke-direct &#123;p0&#125;, Landroid/app/Application;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"> .line <span class=\"number\">7</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;leader&quot;</span></span><br><span class=\"line\"> iput-object v0, p0, Lcom/example/leaderapp/ui/LeaderApp;-&gt;TAG:Ljava/lang/String;</span><br><span class=\"line\"># 2、初始化方法中创建内部类对象</span><br><span class=\"line\"> <span class=\"keyword\">new</span>-instance v0, Lcom/example/leaderapp/ui/LeaderApp$<span class=\"number\">1</span>;</span><br><span class=\"line\"> invoke-direct &#123;v0, p0&#125;, Lcom/example/leaderapp/ui/LeaderApp$<span class=\"number\">1</span>;-&gt;&lt;init&gt;(Lcom/example/leaderapp/ui/LeaderApp;)V</span><br><span class=\"line\"> iput-object v0, p0, Lcom/example/leaderapp/ui/LeaderApp;-&gt;mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\"> .locals 2</span></span><br><span class=\"line\"><span class=\"function\"> .line 11</span></span><br><span class=\"line\"><span class=\"function\"> invoke-<span class=\"keyword\">super</span> </span>&#123;p0&#125;, Landroid/app/Application;-&gt;onCreate()V</span><br><span class=\"line\"> .line <span class=\"number\">12</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;leader&quot;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onCreate: &quot;</span></span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\"># 3、调用初始化方法</span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span><br><span class=\"line\"> move-result-object v0</span><br><span class=\"line\"> iget-object v1, p0, Lcom/example/leaderapp/ui/LeaderApp;-&gt;mInitCallback:Lcom/primer/jsonlili/callback/InitCallback;</span><br><span class=\"line\"> invoke-virtual &#123;v0, v1&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;init(Lcom/primer/jsonlili/callback/InitCallback;)V</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"># 4、创建 LeaderApp$1.smali，并更新路径、类等</span><br></pre></td></tr></table></figure>\n<p>检验插入是否正确并符合期望，可使用 VSCODE smali 插件通过代码转换验证</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c945faf21ac85feb9392dbba3f9f527.png\" alt=\"image.png\"></p>\n<p>对比原始项目和插入后的效果是否一致</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/36199a2e95b678da1afe678f4f9ed9f3.png\" alt=\"image.png\"></p>\n<p>对安装包手动签名，运行查看日志，能看到 sdk 初始化正确，说明上述接入是无误的。</p>\n<p>jarsigner -verbose -keystore [aa.keystore] [sign-app0.apk] [app-0.apk] key0</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d9a2aa7640b31bea5158a5c79d08c34b.png\" alt=\"image.png\"></p>\n<p><strong>注意⚠️：</strong></p>\n<p>反编译使用 <code>java -jar apktool.jar d ***.apk</code>，在回编译时候可能出现错误，日志中发现 <code>res/</code> 目录像是资源问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W: invalid resource directory name: &gt;/Users/jsonli/Desktop/demo/<span class=\"number\">0603</span>/app-<span class=\"number\">0</span>/app-<span class=\"number\">0</span>/res navigation</span><br><span class=\"line\">brut.androlib.AndrolibException: brut.common.BrutException: <span class=\"function\">could not <span class=\"title\">exec</span> <span class=\"params\">(exit code = <span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\"><span class=\"function\">/Users/jsonli/Library/apktool/framework/1.apk, -S, </span></span><br><span class=\"line\"><span class=\"function\">/Users/jsonli/Desktop/demo/0603/app-0/app-0/res, -M, </span></span><br><span class=\"line\"><span class=\"function\">/Users/jsonli/Desktop/demo/0603/app-0/app-0/AndroidManifest.xml]</span></span><br></pre></td></tr></table></figure>\n<p>尝试在反编译时不处理资源命令加上 -r 参数<code>java -jar apktool.jar -r d ***.apk</code> 果然能够正常打包，继续完成剩下的接入吧 :)</p>\n<p><strong>3、HomeFragment$1.smali、HomeFrgment$2.smali</strong></p>\n<p><code>HomeFragment$1.smali</code>: button 点击事件实现类，登录调用处<br>\n<code>HomeFragment$2.smali</code>: gcsdk 登录回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;HomeFragment.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Landroid/view/View$OnClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\"> value = Lcom/example/leaderapp/ui/home/HomeFragment;-&gt;onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\"> accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\"> name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/leaderapp/ui/home/HomeFragment;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/leaderapp/ui/home/HomeFragment;)V</span><br><span class=\"line\"> .locals <span class=\"number\">0</span></span><br><span class=\"line\"> .param p1, &quot;this$0&quot; # Lcom/example/leaderapp/ui/home/HomeFragment;</span><br><span class=\"line\"> .line <span class=\"number\">40</span></span><br><span class=\"line\"> iput-object p1, p0, Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/leaderapp/ui/home/HomeFragment;</span><br><span class=\"line\"> invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onClick</span><span class=\"params\">(Landroid/view/View;)</span>V</span></span><br><span class=\"line\"><span class=\"function\"> .locals 3</span></span><br><span class=\"line\"><span class=\"function\"> .param p1, &quot;view&quot; # Landroid/view/View</span>;</span><br><span class=\"line\"> .line <span class=\"number\">43</span></span><br><span class=\"line\"> invoke-virtual &#123;p1&#125;, Landroid/view/View;-&gt;getContext()Landroid/content/Context;</span><br><span class=\"line\"> move-result-object v0</span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;\\u767b\\u5f55&quot;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>/<span class=\"number\">4</span> v2, <span class=\"number\">0x0</span></span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;v0, v1, v2&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;</span><br><span class=\"line\"> move-result-object v0</span><br><span class=\"line\"> invoke-virtual &#123;v0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br><span class=\"line\"> .line <span class=\"number\">44</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;leader&quot;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;onClick: login&quot;</span></span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\"></span><br><span class=\"line\"># 1、调用登录接口，修改类路径、内部类（登录回调实现类）</span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;getInstance()Lcom/primer/jsonlili/core/GCSDK;</span><br><span class=\"line\"> move-result-object v0</span><br><span class=\"line\"> <span class=\"keyword\">new</span>-instance v1, Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">2</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 内部类持有外部类引用，这里的外部类是 button 的点击事件实现类，因此传入 HomeFragment$1，而不是 HomeFragment</span><br><span class=\"line\"> invoke-direct &#123;v1, p0&#125;, Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">2</span>;-&gt;&lt;init&gt;(Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;)V</span><br><span class=\"line\"> invoke-virtual &#123;v0, v1&#125;, Lcom/primer/jsonlili/core/GCSDK;-&gt;login(Lcom/primer/jsonlili/callback/LoginCallback;)V</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">2</span>;</span><br><span class=\"line\">.<span class=\"keyword\">super</span> Ljava/lang/Object;</span><br><span class=\"line\">.source <span class=\"string\">&quot;HomeFragment.java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 2、创建内部类文件，并把对应的登录回调代码复制过来</span><br><span class=\"line\"># 3、修改类路径 .class、.source、</span><br><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Lcom/primer/jsonlili/callback/LoginCallback;</span><br><span class=\"line\"></span><br><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class=\"line\"> value = Lcom/example/leaderapp/ui/home/HomeFragment;-&gt;onLogin(Landroid/view/View;)V</span><br><span class=\"line\">.end annotation</span><br><span class=\"line\">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class=\"line\"> accessFlags = <span class=\"number\">0x0</span></span><br><span class=\"line\"> name = <span class=\"keyword\">null</span></span><br><span class=\"line\">.end annotation</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里传入的外部类是 button 点击事件实现类，因此初始化函数和 this 类型应该是 </span><br><span class=\"line\"># instance fields</span><br><span class=\"line\">.field <span class=\"keyword\">final</span> synthetic <span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># direct methods</span><br><span class=\"line\">.method constructor &lt;init&gt;(Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;)V</span><br><span class=\"line\"> .locals <span class=\"number\">0</span></span><br><span class=\"line\"> .param p1, <span class=\"string\">&quot;this$0&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"># 这里也是 HomeFragment$1</span><br><span class=\"line\"> iput-object p1, p0, Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">2</span>;-&gt;<span class=\"keyword\">this</span>$<span class=\"number\">0</span>:Lcom/example/leaderapp/ui/home/HomeFragment$<span class=\"number\">1</span>;</span><br><span class=\"line\"> invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\"># virtual methods</span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">inLoginFail</span><span class=\"params\">(ILjava/lang/String;)</span>V</span></span><br><span class=\"line\"><span class=\"function\"> .locals 2</span></span><br><span class=\"line\"><span class=\"function\"> .param p1, &quot;i&quot; # I</span></span><br><span class=\"line\"><span class=\"function\"> .param p2, &quot;s&quot; # Ljava/lang/String</span>;</span><br><span class=\"line\"> .line <span class=\"number\">51</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v0, <span class=\"string\">&quot;cunzhang&quot;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span>-string v1, <span class=\"string\">&quot;inLoginFail: &quot;</span></span><br><span class=\"line\"> invoke-<span class=\"keyword\">static</span> &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\"> .line <span class=\"number\">52</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"function\">method <span class=\"keyword\">public</span> <span class=\"title\">onLoginSuccess</span><span class=\"params\">()</span>V</span></span><br><span class=\"line\"><span class=\"function\"> .locals 2</span></span><br><span class=\"line\"><span class=\"function\"> .line 46</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">const</span>-string v0, &quot;cunzhang&quot;</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">const</span>-string v1, &quot;onLoginSuccess: &quot;</span></span><br><span class=\"line\"><span class=\"function\"> invoke-<span class=\"keyword\">static</span> </span>&#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class=\"line\"> .line <span class=\"number\">47</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span>-<span class=\"keyword\">void</span></span><br><span class=\"line\">.end method</span><br></pre></td></tr></table></figure>\n<p><strong>4、NotificationsFragment.smali、DashboardFragment.smali</strong></p>\n<p>因为代码简单，且逻辑一致，剩下的支付和广告接口代码就不贴了</p>\n<h1>最后的最后</h1>\n<p><code>0、</code>获取 smail 代码（一般是根据 java 代码获取 smail 代码，同理根据 java 代码获取字节码，在代码量多的时候较难直接写出完整的 smail、字节码）<br>\n<code>1、</code>寻找插入点，smali 代码插入、保存、插入检验<br>\n<code>2、</code>打包、签名、运行调试查看效果（依此点击按钮，触发点击事件，运行结果和预期一致）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/831157f13e5c535bafa42839e3f80257.png\" alt=\"image.png\"></p>\n<p>思考：</p>\n<p>A：为什么搞 smali 接入，这不是给自己找坑嘛<br>\nB：这是需求，为了解决问题；我觉得重点是可以扩展知识<br>\nA：既然你已有 apk，可以把它转换为 java 代码，在 java 代码上接入不更清晰、省事，避免盲区不好吗，还是不方便<br>\nB：好像…也 可 以❓<br>\nA：我觉得可以，AndroidFk 工具可以把 apk 直接反编译为 android 项目（若加固、加密的 apk 可能就没那么容易，那是另一个话题了）<br>\nB：也是，在 java 代码上接入方便多了<br>\nA：我又有疑问了：如果接入的第三方 sdk 是一个 aar资源文件（包含资源等文件） 而不是 jar（纯 Java 代码），接入会不会遇到其他问题<br>\nB：区别肯定是有，实操方知晓<br>\nA：下次你来一个试试<br>\nB：… …<br>\nA：这不可怕啊，持续学习，提升广度办法总比困难多</p>\n"},{"title":"再探 jclasslib 修改字节码","catalog":true,"date":"2022-09-25T15:11:20.000Z","subtitle":"夏天的海边，再美不过落日余晖","header-img":"/img/220923_classmodify/ymclass_bg.png","sticky":3,"_content":"\n\n# 从 jclasslib 认识 Hello world\n\n那年，再熟悉不过的 Hello world。\n\n可能很多人的第一个 java 程序都从‘你好世界’开始，从此踏上了一条***不归路***，多年以后（大概毕业半年），我以另一种方式重新认识它，这种方式叫**字节码**。\n\n> Test.java\n\n```java\npackage primer;\n\n//比如 Test 类的组成：\n//主版本号 + 常量池 + 访问标识 + 当前类签名 + 父类签名 + 接口集合 + 方法集合 + 字段集合 + 属性集合（仅列举部分）\npublic class Test{\n    //方法一：<init>()V   【默认构造器】\n    \n    //方法二：main([Ljava/lang/String;)V   【main 方法、V 表示 void、L 表示数组、String 变成类的全路径】（仅列举部分；String 作为对象结尾必须是逗号）\n    \n    //比如 main 方法（仅列举部分）\n    // 组成： \n    //    - 方法名 + 方法签名 + 访问标识（main + ([Ljava/lang/String;)V + public static）\n    //    - 异常表\n    //    - 字节码【我们讨论的重点】\n    \n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n```\n\n> `javac Test.java` 编译得到 Test.class 字节码文件\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/6fd777b8a85ec867a59fdb307082595b.png)\n\n也可以直接使用 `java <类全路径>` 直接运行查看效果，类全路径：包名 + 类名\n\n\n**举个例子：**\n\nTest 启动类的包名是 `package primer`，我本地目录是`primer/primer/Test.class`\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/ec87c8988833fd4f5d34a8f9edb76d8c.png)\n\n1、在 class 所在目录下运行 ❌\n\n如果你在 Test.class 同级目录下执行命令运行，可惜报错了，大概意思是你的 Test 类全路径不对，当存在主类存在包名时，不能在当前 class 文件所在路径执行命令，需要在包名所在目录执行，否则报错，java 命令认为在当前目录下找***包名路径***，如果文件夹存在，则继续根据包名往下查找，直到找到主类，否则抛出异常。\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/421255941965168858b22ae04aebe4d6.png)\n\n前面提到，直接执行字节码是这样 **`java <类全路径>`**，全路径是要包含包名在内，比如 `com.tencent.mmkv.MMKV`，如果 MMKV 类有执行入口，想要通过 java 命令执行它必须确保路径正确。**JVM 在加载类过程中是如何确定唯一个类的？**比如，有两个类名相同但包名（全路径）不同的 Test 类，JVM 通过`包名限定符 + 是否同一个虚拟机`唯一确定一个类（一般情况下，我们运行的程序只有一个虚拟机）\n\n2、在 class 启动类最外层包名的上一层目录运行 ☑️\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/ec6fbd643ecb13cd555200dc4ab5fbd2.png)\n\n## 邂逅的 jclasslib\n\n这里开始涉及到具体的 JVM 指令，先奉上官方文档 [ORACLE - JVM 指令集 ](https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-6.html#jvms-6.5.getstatic)，全部指令记住一般不会这么干，通常是用时查阅，熟能生巧；对于 jclasslib 工具可以右击跳转到官方文档特定指令位置`show JVM spec`。以上面的`Hello World`为例子进行操作。\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/160147efe7c8029f9f254df0e0d853e1.png)\n\n**1、修改字符串常量**\n\n先看 main 方法的 java 代码，输出的第一个字符串常量是 `Hello World`\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/cceaaf6bd80b26ff3667900fc47cb4cc.png)\n\n再看 main 方法的 class 字节码，也可以使用 javap 命令查看字节码\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/34699591dd1e5ae793d6b15d803951c0.png)\n\n```java\ngetstatic：     获取静态字段 out（System 类中的 out 声明是 `public final static PrintStream out = null;`）\nldc：           从常量池中获取值并压入操作数栈（此处常量是 `Hello World`）\ninvokevirtual： 类级别的方法调用（可以是通过类名调用方法 `System.out.println()`）\nnew：           创建 Hello 类的实例\ndup：           复制栈顶操作数\ninvokespecial： 调用实例方法\nastore_1：      把创建的 Hello 对象存储到 hello 本地变量\naload_1：       加载 hello 本地变量的对象\ninvokevirtual： 调用实例方法\nreturn：        方法退出\n```\n\n在工具上对字节码直接进行修改`ldc`读取的常量值，保存并重新编译运行（我在想一个疑惑：我修改的字符串之前在常量池中没有，是否在我修改并保存后会把这个字符串纳入常量池）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/76d48e2e9a414d6ec3651e6550891099.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/61b1f79282b2c1a44d998b702f129ae1.png)\n\n\n# 跳跳虎：现在一起想想想\n\n在我们的记忆中，字面量相同的字符串常量在常量池中是仅存一份。如下代码`\"张三\"`字符串在常量池中有且只有一份，但是程序中多处引用，直接修改常量池中的值那么这两个输出的都会改变了，我希望只改变`name`的输出，保持原先`aliasName`的值。\n\n直接修改常量池，确实两个都受影响，不符合期望\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/a49ef4afa4cd0c272c09965ce5d0d947.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/1ca7b5055306fd77c67fd1674eac168d.png)\n\n直接修改常量池不符合我们的期望，那如何操作满足需求呢？如果你有更好的版本欢迎评论。\n\n\n我只好妥协`创建一个新的字符串引用`，通过 jd-gui 把 class文件转换成 java 文件，修改完毕之后再 javac 编译成 class 文件然后运行；如果你有其他方法，欢迎评论。\n\n1、使用 JD-GUI 工具打开 class 文件，并导出为 java 文件\n2、修改完毕，重新使用 javac 编译\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/9f9269cbfec4b34850bee93a0a6b192d.png)\n\n\n## 修改 for 循环次数\n\n\n**1、第一种类型的 for 循环**\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/a76f00397b0fce18876026f6829738f5.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/7b81844c00d775820b56c6f0b9ac1961.png)\n\n```java\niconst_<`n`>：  把值压入操作数堆栈\nistore_<`n`>：  弹出并获取操作数堆栈栈顶顶的值，并将其值存储到本地变量\niload_<`n`>：   从本地变量获取值\nif_icmp：       如果比较成功则执行后续指令\ndup：           复制栈顶操作数\niinc `index` by `value`: 按照 value 自增\n\n```\n\n对于此种方式的 for 循环，我们可以修改自增量`value`来减少循环执行次数\n\n\n**2、第二种类型的 for 循环**\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/d5b54400c909e17de7eeac8fdbcbec4b.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/67ea8692acc97de294a5fd5624d0496a.png)\n\n```java\nbipush：    将值压入到操作数堆栈\n```\n\n对于此种方式的 for 循环，我们可以修改`final int MAX_COUNT（bipush 的值）`来跳过或减少循环执行次数\n\n**3、第三种类型的 for 循环**\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/bea551ae82ec1340deb4802f0d2d26a4.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/8c7203dfd3cd59c3eaefcb2c0f867dd3.png)\n\n```java\nanewarray： 创建数组引用\naastore：   把值存储到数组列表中\n```\n\n对于此种方式的 for 循环，我们可以修改`iinc`自增量`value`来减少循环执行次数\n\n# 修改 smail 某个变量\n\n上述算是实现了如何简单修改 class 文件中的某个常量，十分简单。但是呢？有时候反编译 apk 我们是直接使用 `apktool` 工具，反编译得到的是 `smail` 代码，难不成还想把 `smail` 转换成 class 再修改，可麻烦了。\n\n## 环境、工具准备\n\n> 工欲善其，事必先利其器\n\n1、[apktool 下载](https://ibotpeaches.github.io/Apktool/)\n2、[JADX 反编译利器下载](https://github.com/skylot/jadx)\n3、[VSCode 下载](https://code.visualstudio.com/)\n4、[VSCode smali2Java 插件](https://marketplace.visualstudio.com/items?itemName=ooooonly.smali2java)\n\n在 vscode 为 smali2Java 配置 jadx.bat 路径：`Decompile failed: The jadx executable path has not been configured`\n\n**1、配置 vscode**\n\n1、找到 vscode 插件配置文件：`C:\\Users\\YTS\\.vscode\\extensions`，比如我本地的 smali2java 配置是在：`C:\\Users\\YTS\\.vscode\\extensions\\ooooonly.smali2java-1.0.1\\pachage.json`\n\n2、找到 jadxPath：\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/f55e99d21c69e4130e01c16b9f2bb3a3.png)\n\n**2、获得 smail**\n\n当遇到 dex 反编译错误时候，可以使用参数 `--only-main-classes`\n\n```java\njava -jar apktool_2.6.1.jar d <apk 文件> --only-main-classes\n````\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/0148a4cc70f2c26b68184431306d67b4.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/b1241ca7c38bc50d143ffa67d80c5933.png)\n\n**3、简约分析**\n我们修改一下 sayHello() 延时执行时间，目前是 1000 毫秒，1000 的十六进制是 x03e8，sayHello() 所在类是 GameDemoActivity；在 smail 代码中搜索类名、方法名、x03e8 等可定位代码；如果我想修改成延时 5000 毫秒后执行，那把 5000（x01388） 的十六进制替换掉 x03e8 即可。\n\n```java\nprivate Handler mHandle = new Handler();\n\nprivate void sayHello() {\n    System.out.println(\"invoke sayHello time = \" + System.currentTimeMillis());\n    mHandle.postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            System.out.println(\"execute sayHello time = \" + System.currentTimeMillis());\n            System.out.println(\"你好，村长\");\n        }\n    }, 1000);\n}\n\n输出：\n2022-05-23 18:14:20.134 32431-32431/com.primer.comment I/System.out: invoke sayHello time = 1653300860134\n2022-05-23 18:14:21.135 32431-32431/com.primer.comment I/System.out: execute sayHello time = 1653300861135\n```\n\n> smail 源码\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/c3849a7c84f328e728c7c3ad6b929736.png)\n\n```java\n2022-05-23 18:21:48.473 1333-1333/com.primer.comment I/System.out: invoke sayHello time = 1653301308473\n2022-05-23 18:21:53.478 1333-1333/com.primer.comment I/System.out: execute sayHello time = 1653301313478\n```\n\n> 最后打包、签名\n\n```java\njava -jar apktool_2.6.1.jar b <打包目录> \n\napksigner sign --ks ****.jks --ks-key-alias <别名> --out <新生成 apk> <待签名 apk>\n```\n\n\n","source":"_posts/undefined/你我字节码.md","raw":"---\ntitle: 再探 jclasslib 修改字节码\ncatalog: true\ndate: 2022-09-25 23:11:20\nsubtitle: 夏天的海边，再美不过落日余晖\nheader-img: /img/220923_classmodify/ymclass_bg.png\ntags: 字节码\ncategories:\nsticky: 3\n---\n\n\n# 从 jclasslib 认识 Hello world\n\n那年，再熟悉不过的 Hello world。\n\n可能很多人的第一个 java 程序都从‘你好世界’开始，从此踏上了一条***不归路***，多年以后（大概毕业半年），我以另一种方式重新认识它，这种方式叫**字节码**。\n\n> Test.java\n\n```java\npackage primer;\n\n//比如 Test 类的组成：\n//主版本号 + 常量池 + 访问标识 + 当前类签名 + 父类签名 + 接口集合 + 方法集合 + 字段集合 + 属性集合（仅列举部分）\npublic class Test{\n    //方法一：<init>()V   【默认构造器】\n    \n    //方法二：main([Ljava/lang/String;)V   【main 方法、V 表示 void、L 表示数组、String 变成类的全路径】（仅列举部分；String 作为对象结尾必须是逗号）\n    \n    //比如 main 方法（仅列举部分）\n    // 组成： \n    //    - 方法名 + 方法签名 + 访问标识（main + ([Ljava/lang/String;)V + public static）\n    //    - 异常表\n    //    - 字节码【我们讨论的重点】\n    \n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n```\n\n> `javac Test.java` 编译得到 Test.class 字节码文件\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/6fd777b8a85ec867a59fdb307082595b.png)\n\n也可以直接使用 `java <类全路径>` 直接运行查看效果，类全路径：包名 + 类名\n\n\n**举个例子：**\n\nTest 启动类的包名是 `package primer`，我本地目录是`primer/primer/Test.class`\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/ec87c8988833fd4f5d34a8f9edb76d8c.png)\n\n1、在 class 所在目录下运行 ❌\n\n如果你在 Test.class 同级目录下执行命令运行，可惜报错了，大概意思是你的 Test 类全路径不对，当存在主类存在包名时，不能在当前 class 文件所在路径执行命令，需要在包名所在目录执行，否则报错，java 命令认为在当前目录下找***包名路径***，如果文件夹存在，则继续根据包名往下查找，直到找到主类，否则抛出异常。\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/421255941965168858b22ae04aebe4d6.png)\n\n前面提到，直接执行字节码是这样 **`java <类全路径>`**，全路径是要包含包名在内，比如 `com.tencent.mmkv.MMKV`，如果 MMKV 类有执行入口，想要通过 java 命令执行它必须确保路径正确。**JVM 在加载类过程中是如何确定唯一个类的？**比如，有两个类名相同但包名（全路径）不同的 Test 类，JVM 通过`包名限定符 + 是否同一个虚拟机`唯一确定一个类（一般情况下，我们运行的程序只有一个虚拟机）\n\n2、在 class 启动类最外层包名的上一层目录运行 ☑️\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/ec6fbd643ecb13cd555200dc4ab5fbd2.png)\n\n## 邂逅的 jclasslib\n\n这里开始涉及到具体的 JVM 指令，先奉上官方文档 [ORACLE - JVM 指令集 ](https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-6.html#jvms-6.5.getstatic)，全部指令记住一般不会这么干，通常是用时查阅，熟能生巧；对于 jclasslib 工具可以右击跳转到官方文档特定指令位置`show JVM spec`。以上面的`Hello World`为例子进行操作。\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/160147efe7c8029f9f254df0e0d853e1.png)\n\n**1、修改字符串常量**\n\n先看 main 方法的 java 代码，输出的第一个字符串常量是 `Hello World`\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/cceaaf6bd80b26ff3667900fc47cb4cc.png)\n\n再看 main 方法的 class 字节码，也可以使用 javap 命令查看字节码\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/34699591dd1e5ae793d6b15d803951c0.png)\n\n```java\ngetstatic：     获取静态字段 out（System 类中的 out 声明是 `public final static PrintStream out = null;`）\nldc：           从常量池中获取值并压入操作数栈（此处常量是 `Hello World`）\ninvokevirtual： 类级别的方法调用（可以是通过类名调用方法 `System.out.println()`）\nnew：           创建 Hello 类的实例\ndup：           复制栈顶操作数\ninvokespecial： 调用实例方法\nastore_1：      把创建的 Hello 对象存储到 hello 本地变量\naload_1：       加载 hello 本地变量的对象\ninvokevirtual： 调用实例方法\nreturn：        方法退出\n```\n\n在工具上对字节码直接进行修改`ldc`读取的常量值，保存并重新编译运行（我在想一个疑惑：我修改的字符串之前在常量池中没有，是否在我修改并保存后会把这个字符串纳入常量池）\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/76d48e2e9a414d6ec3651e6550891099.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/61b1f79282b2c1a44d998b702f129ae1.png)\n\n\n# 跳跳虎：现在一起想想想\n\n在我们的记忆中，字面量相同的字符串常量在常量池中是仅存一份。如下代码`\"张三\"`字符串在常量池中有且只有一份，但是程序中多处引用，直接修改常量池中的值那么这两个输出的都会改变了，我希望只改变`name`的输出，保持原先`aliasName`的值。\n\n直接修改常量池，确实两个都受影响，不符合期望\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/a49ef4afa4cd0c272c09965ce5d0d947.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/1ca7b5055306fd77c67fd1674eac168d.png)\n\n直接修改常量池不符合我们的期望，那如何操作满足需求呢？如果你有更好的版本欢迎评论。\n\n\n我只好妥协`创建一个新的字符串引用`，通过 jd-gui 把 class文件转换成 java 文件，修改完毕之后再 javac 编译成 class 文件然后运行；如果你有其他方法，欢迎评论。\n\n1、使用 JD-GUI 工具打开 class 文件，并导出为 java 文件\n2、修改完毕，重新使用 javac 编译\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/9f9269cbfec4b34850bee93a0a6b192d.png)\n\n\n## 修改 for 循环次数\n\n\n**1、第一种类型的 for 循环**\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/a76f00397b0fce18876026f6829738f5.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/7b81844c00d775820b56c6f0b9ac1961.png)\n\n```java\niconst_<`n`>：  把值压入操作数堆栈\nistore_<`n`>：  弹出并获取操作数堆栈栈顶顶的值，并将其值存储到本地变量\niload_<`n`>：   从本地变量获取值\nif_icmp：       如果比较成功则执行后续指令\ndup：           复制栈顶操作数\niinc `index` by `value`: 按照 value 自增\n\n```\n\n对于此种方式的 for 循环，我们可以修改自增量`value`来减少循环执行次数\n\n\n**2、第二种类型的 for 循环**\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/d5b54400c909e17de7eeac8fdbcbec4b.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/67ea8692acc97de294a5fd5624d0496a.png)\n\n```java\nbipush：    将值压入到操作数堆栈\n```\n\n对于此种方式的 for 循环，我们可以修改`final int MAX_COUNT（bipush 的值）`来跳过或减少循环执行次数\n\n**3、第三种类型的 for 循环**\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/bea551ae82ec1340deb4802f0d2d26a4.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/8c7203dfd3cd59c3eaefcb2c0f867dd3.png)\n\n```java\nanewarray： 创建数组引用\naastore：   把值存储到数组列表中\n```\n\n对于此种方式的 for 循环，我们可以修改`iinc`自增量`value`来减少循环执行次数\n\n# 修改 smail 某个变量\n\n上述算是实现了如何简单修改 class 文件中的某个常量，十分简单。但是呢？有时候反编译 apk 我们是直接使用 `apktool` 工具，反编译得到的是 `smail` 代码，难不成还想把 `smail` 转换成 class 再修改，可麻烦了。\n\n## 环境、工具准备\n\n> 工欲善其，事必先利其器\n\n1、[apktool 下载](https://ibotpeaches.github.io/Apktool/)\n2、[JADX 反编译利器下载](https://github.com/skylot/jadx)\n3、[VSCode 下载](https://code.visualstudio.com/)\n4、[VSCode smali2Java 插件](https://marketplace.visualstudio.com/items?itemName=ooooonly.smali2java)\n\n在 vscode 为 smali2Java 配置 jadx.bat 路径：`Decompile failed: The jadx executable path has not been configured`\n\n**1、配置 vscode**\n\n1、找到 vscode 插件配置文件：`C:\\Users\\YTS\\.vscode\\extensions`，比如我本地的 smali2java 配置是在：`C:\\Users\\YTS\\.vscode\\extensions\\ooooonly.smali2java-1.0.1\\pachage.json`\n\n2、找到 jadxPath：\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/f55e99d21c69e4130e01c16b9f2bb3a3.png)\n\n**2、获得 smail**\n\n当遇到 dex 反编译错误时候，可以使用参数 `--only-main-classes`\n\n```java\njava -jar apktool_2.6.1.jar d <apk 文件> --only-main-classes\n````\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/0148a4cc70f2c26b68184431306d67b4.png)\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/b1241ca7c38bc50d143ffa67d80c5933.png)\n\n**3、简约分析**\n我们修改一下 sayHello() 延时执行时间，目前是 1000 毫秒，1000 的十六进制是 x03e8，sayHello() 所在类是 GameDemoActivity；在 smail 代码中搜索类名、方法名、x03e8 等可定位代码；如果我想修改成延时 5000 毫秒后执行，那把 5000（x01388） 的十六进制替换掉 x03e8 即可。\n\n```java\nprivate Handler mHandle = new Handler();\n\nprivate void sayHello() {\n    System.out.println(\"invoke sayHello time = \" + System.currentTimeMillis());\n    mHandle.postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            System.out.println(\"execute sayHello time = \" + System.currentTimeMillis());\n            System.out.println(\"你好，村长\");\n        }\n    }, 1000);\n}\n\n输出：\n2022-05-23 18:14:20.134 32431-32431/com.primer.comment I/System.out: invoke sayHello time = 1653300860134\n2022-05-23 18:14:21.135 32431-32431/com.primer.comment I/System.out: execute sayHello time = 1653300861135\n```\n\n> smail 源码\n\n![image.png](https://img-blog.csdnimg.cn/img_convert/c3849a7c84f328e728c7c3ad6b929736.png)\n\n```java\n2022-05-23 18:21:48.473 1333-1333/com.primer.comment I/System.out: invoke sayHello time = 1653301308473\n2022-05-23 18:21:53.478 1333-1333/com.primer.comment I/System.out: execute sayHello time = 1653301313478\n```\n\n> 最后打包、签名\n\n```java\njava -jar apktool_2.6.1.jar b <打包目录> \n\napksigner sign --ks ****.jks --ks-key-alias <别名> --out <新生成 apk> <待签名 apk>\n```\n\n\n","slug":"你我字节码","published":1,"lang":"undefined","updated":"2022-09-25T15:11:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qb000v7tqp94f9h8z4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>从 jclasslib 认识 Hello world</h1>\n<p>那年，再熟悉不过的 Hello world。</p>\n<p>可能很多人的第一个 java 程序都从‘你好世界’开始，从此踏上了一条<em><strong>不归路</strong></em>，多年以后（大概毕业半年），我以另一种方式重新认识它，这种方式叫<strong>字节码</strong>。</p>\n<blockquote>\n<p>Test.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> primer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比如 Test 类的组成：</span></span><br><span class=\"line\"><span class=\"comment\">//主版本号 + 常量池 + 访问标识 + 当前类签名 + 父类签名 + 接口集合 + 方法集合 + 字段集合 + 属性集合（仅列举部分）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//方法一：&lt;init&gt;()V   【默认构造器】</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方法二：main([Ljava/lang/String;)V   【main 方法、V 表示 void、L 表示数组、String 变成类的全路径】（仅列举部分；String 作为对象结尾必须是逗号）</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//比如 main 方法（仅列举部分）</span></span><br><span class=\"line\">    <span class=\"comment\">// 组成： </span></span><br><span class=\"line\">    <span class=\"comment\">//    - 方法名 + 方法签名 + 访问标识（main + ([Ljava/lang/String;)V + public static）</span></span><br><span class=\"line\">    <span class=\"comment\">//    - 异常表</span></span><br><span class=\"line\">    <span class=\"comment\">//    - 字节码【我们讨论的重点】</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>javac Test.java</code> 编译得到 Test.class 字节码文件</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6fd777b8a85ec867a59fdb307082595b.png\" alt=\"image.png\"></p>\n<p>也可以直接使用 <code>java &lt;类全路径&gt;</code> 直接运行查看效果，类全路径：包名 + 类名</p>\n<p><strong>举个例子：</strong></p>\n<p>Test 启动类的包名是 <code>package primer</code>，我本地目录是<code>primer/primer/Test.class</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ec87c8988833fd4f5d34a8f9edb76d8c.png\" alt=\"image.png\"></p>\n<p>1、在 class 所在目录下运行 ❌</p>\n<p>如果你在 Test.class 同级目录下执行命令运行，可惜报错了，大概意思是你的 Test 类全路径不对，当存在主类存在包名时，不能在当前 class 文件所在路径执行命令，需要在包名所在目录执行，否则报错，java 命令认为在当前目录下找<em><strong>包名路径</strong></em>，如果文件夹存在，则继续根据包名往下查找，直到找到主类，否则抛出异常。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/421255941965168858b22ae04aebe4d6.png\" alt=\"image.png\"></p>\n<p>前面提到，直接执行字节码是这样 <strong><code>java &lt;类全路径&gt;</code></strong>，全路径是要包含包名在内，比如 <code>com.tencent.mmkv.MMKV</code>，如果 MMKV 类有执行入口，想要通过 java 命令执行它必须确保路径正确。**JVM 在加载类过程中是如何确定唯一个类的？**比如，有两个类名相同但包名（全路径）不同的 Test 类，JVM 通过<code>包名限定符 + 是否同一个虚拟机</code>唯一确定一个类（一般情况下，我们运行的程序只有一个虚拟机）</p>\n<p>2、在 class 启动类最外层包名的上一层目录运行 ☑️</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ec6fbd643ecb13cd555200dc4ab5fbd2.png\" alt=\"image.png\"></p>\n<h2 id=\"邂逅的-jclasslib\">邂逅的 jclasslib</h2>\n<p>这里开始涉及到具体的 JVM 指令，先奉上官方文档 <a href=\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-6.html#jvms-6.5.getstatic\">ORACLE - JVM 指令集 </a>，全部指令记住一般不会这么干，通常是用时查阅，熟能生巧；对于 jclasslib 工具可以右击跳转到官方文档特定指令位置<code>show JVM spec</code>。以上面的<code>Hello World</code>为例子进行操作。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/160147efe7c8029f9f254df0e0d853e1.png\" alt=\"image.png\"></p>\n<p><strong>1、修改字符串常量</strong></p>\n<p>先看 main 方法的 java 代码，输出的第一个字符串常量是 <code>Hello World</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cceaaf6bd80b26ff3667900fc47cb4cc.png\" alt=\"image.png\"></p>\n<p>再看 main 方法的 class 字节码，也可以使用 javap 命令查看字节码</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/34699591dd1e5ae793d6b15d803951c0.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic：     获取静态字段 out（System 类中的 out 声明是 `<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> PrintStream out = <span class=\"keyword\">null</span>;`）</span><br><span class=\"line\">ldc：           从常量池中获取值并压入操作数栈（此处常量是 `Hello World`）</span><br><span class=\"line\">invokevirtual： 类级别的方法调用（可以是通过类名调用方法 `System.out.println()`）</span><br><span class=\"line\"><span class=\"keyword\">new</span>：           创建 Hello 类的实例</span><br><span class=\"line\">dup：           复制栈顶操作数</span><br><span class=\"line\">invokespecial： 调用实例方法</span><br><span class=\"line\">astore_1：      把创建的 Hello 对象存储到 hello 本地变量</span><br><span class=\"line\">aload_1：       加载 hello 本地变量的对象</span><br><span class=\"line\">invokevirtual： 调用实例方法</span><br><span class=\"line\"><span class=\"keyword\">return</span>：        方法退出</span><br></pre></td></tr></table></figure>\n<p>在工具上对字节码直接进行修改<code>ldc</code>读取的常量值，保存并重新编译运行（我在想一个疑惑：我修改的字符串之前在常量池中没有，是否在我修改并保存后会把这个字符串纳入常量池）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/76d48e2e9a414d6ec3651e6550891099.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/61b1f79282b2c1a44d998b702f129ae1.png\" alt=\"image.png\"></p>\n<h1>跳跳虎：现在一起想想想</h1>\n<p>在我们的记忆中，字面量相同的字符串常量在常量池中是仅存一份。如下代码<code>&quot;张三&quot;</code>字符串在常量池中有且只有一份，但是程序中多处引用，直接修改常量池中的值那么这两个输出的都会改变了，我希望只改变<code>name</code>的输出，保持原先<code>aliasName</code>的值。</p>\n<p>直接修改常量池，确实两个都受影响，不符合期望</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a49ef4afa4cd0c272c09965ce5d0d947.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ca7b5055306fd77c67fd1674eac168d.png\" alt=\"image.png\"></p>\n<p>直接修改常量池不符合我们的期望，那如何操作满足需求呢？如果你有更好的版本欢迎评论。</p>\n<p>我只好妥协<code>创建一个新的字符串引用</code>，通过 jd-gui 把 class文件转换成 java 文件，修改完毕之后再 javac 编译成 class 文件然后运行；如果你有其他方法，欢迎评论。</p>\n<p>1、使用 JD-GUI 工具打开 class 文件，并导出为 java 文件<br>\n2、修改完毕，重新使用 javac 编译</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9f9269cbfec4b34850bee93a0a6b192d.png\" alt=\"image.png\"></p>\n<h2 id=\"修改-for-循环次数\">修改 for 循环次数</h2>\n<p><strong>1、第一种类型的 for 循环</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a76f00397b0fce18876026f6829738f5.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7b81844c00d775820b56c6f0b9ac1961.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconst_&lt;`n`&gt;：  把值压入操作数堆栈</span><br><span class=\"line\">istore_&lt;`n`&gt;：  弹出并获取操作数堆栈栈顶顶的值，并将其值存储到本地变量</span><br><span class=\"line\">iload_&lt;`n`&gt;：   从本地变量获取值</span><br><span class=\"line\">if_icmp：       如果比较成功则执行后续指令</span><br><span class=\"line\">dup：           复制栈顶操作数</span><br><span class=\"line\">iinc `index` by `value`: 按照 value 自增</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于此种方式的 for 循环，我们可以修改自增量<code>value</code>来减少循环执行次数</p>\n<p><strong>2、第二种类型的 for 循环</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d5b54400c909e17de7eeac8fdbcbec4b.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/67ea8692acc97de294a5fd5624d0496a.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bipush：    将值压入到操作数堆栈</span><br></pre></td></tr></table></figure>\n<p>对于此种方式的 for 循环，我们可以修改<code>final int MAX_COUNT（bipush 的值）</code>来跳过或减少循环执行次数</p>\n<p><strong>3、第三种类型的 for 循环</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bea551ae82ec1340deb4802f0d2d26a4.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8c7203dfd3cd59c3eaefcb2c0f867dd3.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anewarray： 创建数组引用</span><br><span class=\"line\">aastore：   把值存储到数组列表中</span><br></pre></td></tr></table></figure>\n<p>对于此种方式的 for 循环，我们可以修改<code>iinc</code>自增量<code>value</code>来减少循环执行次数</p>\n<h1>修改 smail 某个变量</h1>\n<p>上述算是实现了如何简单修改 class 文件中的某个常量，十分简单。但是呢？有时候反编译 apk 我们是直接使用 <code>apktool</code> 工具，反编译得到的是 <code>smail</code> 代码，难不成还想把 <code>smail</code> 转换成 class 再修改，可麻烦了。</p>\n<h2 id=\"环境、工具准备\">环境、工具准备</h2>\n<blockquote>\n<p>工欲善其，事必先利其器</p>\n</blockquote>\n<p>1、<a href=\"https://ibotpeaches.github.io/Apktool/\">apktool 下载</a><br>\n2、<a href=\"https://github.com/skylot/jadx\">JADX 反编译利器下载</a><br>\n3、<a href=\"https://code.visualstudio.com/\">VSCode 下载</a><br>\n4、<a href=\"https://marketplace.visualstudio.com/items?itemName=ooooonly.smali2java\">VSCode smali2Java 插件</a></p>\n<p>在 vscode 为 smali2Java 配置 jadx.bat 路径：<code>Decompile failed: The jadx executable path has not been configured</code></p>\n<p><strong>1、配置 vscode</strong></p>\n<p>1、找到 vscode 插件配置文件：<code>C:\\Users\\YTS\\.vscode\\extensions</code>，比如我本地的 smali2java 配置是在：<code>C:\\Users\\YTS\\.vscode\\extensions\\ooooonly.smali2java-1.0.1\\pachage.json</code></p>\n<p>2、找到 jadxPath：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f55e99d21c69e4130e01c16b9f2bb3a3.png\" alt=\"image.png\"></p>\n<p><strong>2、获得 smail</strong></p>\n<p>当遇到 dex 反编译错误时候，可以使用参数 <code>--only-main-classes</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apktool_2<span class=\"number\">.6</span><span class=\"number\">.1</span>.jar d &lt;apk 文件&gt; --only-main-classes</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">![image.png](https:<span class=\"comment\">//img-blog.csdnimg.cn/img_convert/0148a4cc70f2c26b68184431306d67b4.png)</span></span><br><span class=\"line\"></span><br><span class=\"line\">![image.png](https:<span class=\"comment\">//img-blog.csdnimg.cn/img_convert/b1241ca7c38bc50d143ffa67d80c5933.png)</span></span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">3</span>、简约分析**</span><br><span class=\"line\">我们修改一下 sayHello() 延时执行时间，目前是 <span class=\"number\">1000</span> 毫秒，<span class=\"number\">1000</span> 的十六进制是 x03e8，sayHello() 所在类是 GameDemoActivity；在 smail 代码中搜索类名、方法名、x03e8 等可定位代码；如果我想修改成延时 <span class=\"number\">5000</span> 毫秒后执行，那把 <span class=\"number\">5000</span>（x01388） 的十六进制替换掉 x03e8 即可。</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">private</span> Handler mHandle = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;invoke sayHello time = &quot;</span> + System.currentTimeMillis());</span><br><span class=\"line\">    mHandle.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;execute sayHello time = &quot;</span> + System.currentTimeMillis());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你好，村长&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">23</span> <span class=\"number\">18</span>:<span class=\"number\">14</span>:<span class=\"number\">20.134</span> <span class=\"number\">32431</span>-<span class=\"number\">32431</span>/com.primer.comment I/System.out: invoke sayHello time = <span class=\"number\">1653300860134</span></span><br><span class=\"line\"><span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">23</span> <span class=\"number\">18</span>:<span class=\"number\">14</span>:<span class=\"number\">21.135</span> <span class=\"number\">32431</span>-<span class=\"number\">32431</span>/com.primer.comment I/System.out: execute sayHello time = <span class=\"number\">1653300861135</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>smail 源码</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3849a7c84f328e728c7c3ad6b929736.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">23</span> <span class=\"number\">18</span>:<span class=\"number\">21</span>:<span class=\"number\">48.473</span> <span class=\"number\">1333</span>-<span class=\"number\">1333</span>/com.primer.comment I/System.out: invoke sayHello time = <span class=\"number\">1653301308473</span></span><br><span class=\"line\"><span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">23</span> <span class=\"number\">18</span>:<span class=\"number\">21</span>:<span class=\"number\">53.478</span> <span class=\"number\">1333</span>-<span class=\"number\">1333</span>/com.primer.comment I/System.out: execute sayHello time = <span class=\"number\">1653301313478</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最后打包、签名</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apktool_2<span class=\"number\">.6</span><span class=\"number\">.1</span>.jar b &lt;打包目录&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">apksigner sign --ks ****.jks --ks-key-alias &lt;别名&gt; --out &lt;新生成 apk&gt; &lt;待签名 apk&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>从 jclasslib 认识 Hello world</h1>\n<p>那年，再熟悉不过的 Hello world。</p>\n<p>可能很多人的第一个 java 程序都从‘你好世界’开始，从此踏上了一条<em><strong>不归路</strong></em>，多年以后（大概毕业半年），我以另一种方式重新认识它，这种方式叫<strong>字节码</strong>。</p>\n<blockquote>\n<p>Test.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> primer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比如 Test 类的组成：</span></span><br><span class=\"line\"><span class=\"comment\">//主版本号 + 常量池 + 访问标识 + 当前类签名 + 父类签名 + 接口集合 + 方法集合 + 字段集合 + 属性集合（仅列举部分）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//方法一：&lt;init&gt;()V   【默认构造器】</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方法二：main([Ljava/lang/String;)V   【main 方法、V 表示 void、L 表示数组、String 变成类的全路径】（仅列举部分；String 作为对象结尾必须是逗号）</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//比如 main 方法（仅列举部分）</span></span><br><span class=\"line\">    <span class=\"comment\">// 组成： </span></span><br><span class=\"line\">    <span class=\"comment\">//    - 方法名 + 方法签名 + 访问标识（main + ([Ljava/lang/String;)V + public static）</span></span><br><span class=\"line\">    <span class=\"comment\">//    - 异常表</span></span><br><span class=\"line\">    <span class=\"comment\">//    - 字节码【我们讨论的重点】</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>javac Test.java</code> 编译得到 Test.class 字节码文件</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6fd777b8a85ec867a59fdb307082595b.png\" alt=\"image.png\"></p>\n<p>也可以直接使用 <code>java &lt;类全路径&gt;</code> 直接运行查看效果，类全路径：包名 + 类名</p>\n<p><strong>举个例子：</strong></p>\n<p>Test 启动类的包名是 <code>package primer</code>，我本地目录是<code>primer/primer/Test.class</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ec87c8988833fd4f5d34a8f9edb76d8c.png\" alt=\"image.png\"></p>\n<p>1、在 class 所在目录下运行 ❌</p>\n<p>如果你在 Test.class 同级目录下执行命令运行，可惜报错了，大概意思是你的 Test 类全路径不对，当存在主类存在包名时，不能在当前 class 文件所在路径执行命令，需要在包名所在目录执行，否则报错，java 命令认为在当前目录下找<em><strong>包名路径</strong></em>，如果文件夹存在，则继续根据包名往下查找，直到找到主类，否则抛出异常。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/421255941965168858b22ae04aebe4d6.png\" alt=\"image.png\"></p>\n<p>前面提到，直接执行字节码是这样 <strong><code>java &lt;类全路径&gt;</code></strong>，全路径是要包含包名在内，比如 <code>com.tencent.mmkv.MMKV</code>，如果 MMKV 类有执行入口，想要通过 java 命令执行它必须确保路径正确。**JVM 在加载类过程中是如何确定唯一个类的？**比如，有两个类名相同但包名（全路径）不同的 Test 类，JVM 通过<code>包名限定符 + 是否同一个虚拟机</code>唯一确定一个类（一般情况下，我们运行的程序只有一个虚拟机）</p>\n<p>2、在 class 启动类最外层包名的上一层目录运行 ☑️</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ec6fbd643ecb13cd555200dc4ab5fbd2.png\" alt=\"image.png\"></p>\n<h2 id=\"邂逅的-jclasslib\">邂逅的 jclasslib</h2>\n<p>这里开始涉及到具体的 JVM 指令，先奉上官方文档 <a href=\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-6.html#jvms-6.5.getstatic\">ORACLE - JVM 指令集 </a>，全部指令记住一般不会这么干，通常是用时查阅，熟能生巧；对于 jclasslib 工具可以右击跳转到官方文档特定指令位置<code>show JVM spec</code>。以上面的<code>Hello World</code>为例子进行操作。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/160147efe7c8029f9f254df0e0d853e1.png\" alt=\"image.png\"></p>\n<p><strong>1、修改字符串常量</strong></p>\n<p>先看 main 方法的 java 代码，输出的第一个字符串常量是 <code>Hello World</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cceaaf6bd80b26ff3667900fc47cb4cc.png\" alt=\"image.png\"></p>\n<p>再看 main 方法的 class 字节码，也可以使用 javap 命令查看字节码</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/34699591dd1e5ae793d6b15d803951c0.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic：     获取静态字段 out（System 类中的 out 声明是 `<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> PrintStream out = <span class=\"keyword\">null</span>;`）</span><br><span class=\"line\">ldc：           从常量池中获取值并压入操作数栈（此处常量是 `Hello World`）</span><br><span class=\"line\">invokevirtual： 类级别的方法调用（可以是通过类名调用方法 `System.out.println()`）</span><br><span class=\"line\"><span class=\"keyword\">new</span>：           创建 Hello 类的实例</span><br><span class=\"line\">dup：           复制栈顶操作数</span><br><span class=\"line\">invokespecial： 调用实例方法</span><br><span class=\"line\">astore_1：      把创建的 Hello 对象存储到 hello 本地变量</span><br><span class=\"line\">aload_1：       加载 hello 本地变量的对象</span><br><span class=\"line\">invokevirtual： 调用实例方法</span><br><span class=\"line\"><span class=\"keyword\">return</span>：        方法退出</span><br></pre></td></tr></table></figure>\n<p>在工具上对字节码直接进行修改<code>ldc</code>读取的常量值，保存并重新编译运行（我在想一个疑惑：我修改的字符串之前在常量池中没有，是否在我修改并保存后会把这个字符串纳入常量池）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/76d48e2e9a414d6ec3651e6550891099.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/61b1f79282b2c1a44d998b702f129ae1.png\" alt=\"image.png\"></p>\n<h1>跳跳虎：现在一起想想想</h1>\n<p>在我们的记忆中，字面量相同的字符串常量在常量池中是仅存一份。如下代码<code>&quot;张三&quot;</code>字符串在常量池中有且只有一份，但是程序中多处引用，直接修改常量池中的值那么这两个输出的都会改变了，我希望只改变<code>name</code>的输出，保持原先<code>aliasName</code>的值。</p>\n<p>直接修改常量池，确实两个都受影响，不符合期望</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a49ef4afa4cd0c272c09965ce5d0d947.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ca7b5055306fd77c67fd1674eac168d.png\" alt=\"image.png\"></p>\n<p>直接修改常量池不符合我们的期望，那如何操作满足需求呢？如果你有更好的版本欢迎评论。</p>\n<p>我只好妥协<code>创建一个新的字符串引用</code>，通过 jd-gui 把 class文件转换成 java 文件，修改完毕之后再 javac 编译成 class 文件然后运行；如果你有其他方法，欢迎评论。</p>\n<p>1、使用 JD-GUI 工具打开 class 文件，并导出为 java 文件<br>\n2、修改完毕，重新使用 javac 编译</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9f9269cbfec4b34850bee93a0a6b192d.png\" alt=\"image.png\"></p>\n<h2 id=\"修改-for-循环次数\">修改 for 循环次数</h2>\n<p><strong>1、第一种类型的 for 循环</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a76f00397b0fce18876026f6829738f5.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7b81844c00d775820b56c6f0b9ac1961.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconst_&lt;`n`&gt;：  把值压入操作数堆栈</span><br><span class=\"line\">istore_&lt;`n`&gt;：  弹出并获取操作数堆栈栈顶顶的值，并将其值存储到本地变量</span><br><span class=\"line\">iload_&lt;`n`&gt;：   从本地变量获取值</span><br><span class=\"line\">if_icmp：       如果比较成功则执行后续指令</span><br><span class=\"line\">dup：           复制栈顶操作数</span><br><span class=\"line\">iinc `index` by `value`: 按照 value 自增</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于此种方式的 for 循环，我们可以修改自增量<code>value</code>来减少循环执行次数</p>\n<p><strong>2、第二种类型的 for 循环</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d5b54400c909e17de7eeac8fdbcbec4b.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/67ea8692acc97de294a5fd5624d0496a.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bipush：    将值压入到操作数堆栈</span><br></pre></td></tr></table></figure>\n<p>对于此种方式的 for 循环，我们可以修改<code>final int MAX_COUNT（bipush 的值）</code>来跳过或减少循环执行次数</p>\n<p><strong>3、第三种类型的 for 循环</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bea551ae82ec1340deb4802f0d2d26a4.png\" alt=\"image.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8c7203dfd3cd59c3eaefcb2c0f867dd3.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anewarray： 创建数组引用</span><br><span class=\"line\">aastore：   把值存储到数组列表中</span><br></pre></td></tr></table></figure>\n<p>对于此种方式的 for 循环，我们可以修改<code>iinc</code>自增量<code>value</code>来减少循环执行次数</p>\n<h1>修改 smail 某个变量</h1>\n<p>上述算是实现了如何简单修改 class 文件中的某个常量，十分简单。但是呢？有时候反编译 apk 我们是直接使用 <code>apktool</code> 工具，反编译得到的是 <code>smail</code> 代码，难不成还想把 <code>smail</code> 转换成 class 再修改，可麻烦了。</p>\n<h2 id=\"环境、工具准备\">环境、工具准备</h2>\n<blockquote>\n<p>工欲善其，事必先利其器</p>\n</blockquote>\n<p>1、<a href=\"https://ibotpeaches.github.io/Apktool/\">apktool 下载</a><br>\n2、<a href=\"https://github.com/skylot/jadx\">JADX 反编译利器下载</a><br>\n3、<a href=\"https://code.visualstudio.com/\">VSCode 下载</a><br>\n4、<a href=\"https://marketplace.visualstudio.com/items?itemName=ooooonly.smali2java\">VSCode smali2Java 插件</a></p>\n<p>在 vscode 为 smali2Java 配置 jadx.bat 路径：<code>Decompile failed: The jadx executable path has not been configured</code></p>\n<p><strong>1、配置 vscode</strong></p>\n<p>1、找到 vscode 插件配置文件：<code>C:\\Users\\YTS\\.vscode\\extensions</code>，比如我本地的 smali2java 配置是在：<code>C:\\Users\\YTS\\.vscode\\extensions\\ooooonly.smali2java-1.0.1\\pachage.json</code></p>\n<p>2、找到 jadxPath：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f55e99d21c69e4130e01c16b9f2bb3a3.png\" alt=\"image.png\"></p>\n<p><strong>2、获得 smail</strong></p>\n<p>当遇到 dex 反编译错误时候，可以使用参数 <code>--only-main-classes</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apktool_2<span class=\"number\">.6</span><span class=\"number\">.1</span>.jar d &lt;apk 文件&gt; --only-main-classes</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">![image.png](https:<span class=\"comment\">//img-blog.csdnimg.cn/img_convert/0148a4cc70f2c26b68184431306d67b4.png)</span></span><br><span class=\"line\"></span><br><span class=\"line\">![image.png](https:<span class=\"comment\">//img-blog.csdnimg.cn/img_convert/b1241ca7c38bc50d143ffa67d80c5933.png)</span></span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">3</span>、简约分析**</span><br><span class=\"line\">我们修改一下 sayHello() 延时执行时间，目前是 <span class=\"number\">1000</span> 毫秒，<span class=\"number\">1000</span> 的十六进制是 x03e8，sayHello() 所在类是 GameDemoActivity；在 smail 代码中搜索类名、方法名、x03e8 等可定位代码；如果我想修改成延时 <span class=\"number\">5000</span> 毫秒后执行，那把 <span class=\"number\">5000</span>（x01388） 的十六进制替换掉 x03e8 即可。</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">private</span> Handler mHandle = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;invoke sayHello time = &quot;</span> + System.currentTimeMillis());</span><br><span class=\"line\">    mHandle.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;execute sayHello time = &quot;</span> + System.currentTimeMillis());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你好，村长&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">23</span> <span class=\"number\">18</span>:<span class=\"number\">14</span>:<span class=\"number\">20.134</span> <span class=\"number\">32431</span>-<span class=\"number\">32431</span>/com.primer.comment I/System.out: invoke sayHello time = <span class=\"number\">1653300860134</span></span><br><span class=\"line\"><span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">23</span> <span class=\"number\">18</span>:<span class=\"number\">14</span>:<span class=\"number\">21.135</span> <span class=\"number\">32431</span>-<span class=\"number\">32431</span>/com.primer.comment I/System.out: execute sayHello time = <span class=\"number\">1653300861135</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>smail 源码</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3849a7c84f328e728c7c3ad6b929736.png\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">23</span> <span class=\"number\">18</span>:<span class=\"number\">21</span>:<span class=\"number\">48.473</span> <span class=\"number\">1333</span>-<span class=\"number\">1333</span>/com.primer.comment I/System.out: invoke sayHello time = <span class=\"number\">1653301308473</span></span><br><span class=\"line\"><span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">23</span> <span class=\"number\">18</span>:<span class=\"number\">21</span>:<span class=\"number\">53.478</span> <span class=\"number\">1333</span>-<span class=\"number\">1333</span>/com.primer.comment I/System.out: execute sayHello time = <span class=\"number\">1653301313478</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最后打包、签名</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apktool_2<span class=\"number\">.6</span><span class=\"number\">.1</span>.jar b &lt;打包目录&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">apksigner sign --ks ****.jks --ks-key-alias &lt;别名&gt; --out &lt;新生成 apk&gt; &lt;待签名 apk&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"Android 源码之签名 Apksign","catalog":true,"date":"2022-10-10T13:40:18.000Z","subtitle":"应用签名 V1、V2、V3、V4","header-img":"/img/220928/wuaipojie.jpeg","sticky":10,"_content":"\n# 预备知识\n- apksig：签名源码工程\n- apksigner：命令行签名工具\n- 签名 SchemeSigner，验证 SchemeVerifier\n- 签名类型：V1～V4\n- 签名算法：\n\n# 错误处理\n- 压缩文件格式异常（安装包本来就是一个压缩包）\n- 安装包格式异常\n- 没有找到安装包签名块异常\n- 签名能够支持的最小 Android 版本异常\n\n# 安装包结构\n","source":"_posts/undefined/吾爱破解.md","raw":"---\ntitle: Android 源码之签名 Apksign\ncatalog: true\ndate: 2022-10-10 21:40:18\nsubtitle: 应用签名 V1、V2、V3、V4\nheader-img: /img/220928/wuaipojie.jpeg\ntags: AOSP\ncategories:\nsticky: 10\n---\n\n# 预备知识\n- apksig：签名源码工程\n- apksigner：命令行签名工具\n- 签名 SchemeSigner，验证 SchemeVerifier\n- 签名类型：V1～V4\n- 签名算法：\n\n# 错误处理\n- 压缩文件格式异常（安装包本来就是一个压缩包）\n- 安装包格式异常\n- 没有找到安装包签名块异常\n- 签名能够支持的最小 Android 版本异常\n\n# 安装包结构\n","slug":"吾爱破解","published":1,"lang":"undefined","updated":"2022-10-10T13:40:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qc000x7tqpccjxe26g","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>预备知识</h1>\n<ul>\n<li>apksig：签名源码工程</li>\n<li>apksigner：命令行签名工具</li>\n<li>签名 SchemeSigner，验证 SchemeVerifier</li>\n<li>签名类型：V1～V4</li>\n<li>签名算法：</li>\n</ul>\n<h1>错误处理</h1>\n<ul>\n<li>压缩文件格式异常（安装包本来就是一个压缩包）</li>\n<li>安装包格式异常</li>\n<li>没有找到安装包签名块异常</li>\n<li>签名能够支持的最小 Android 版本异常</li>\n</ul>\n<h1>安装包结构</h1>\n","site":{"data":{}},"excerpt":"","more":"<h1>预备知识</h1>\n<ul>\n<li>apksig：签名源码工程</li>\n<li>apksigner：命令行签名工具</li>\n<li>签名 SchemeSigner，验证 SchemeVerifier</li>\n<li>签名类型：V1～V4</li>\n<li>签名算法：</li>\n</ul>\n<h1>错误处理</h1>\n<ul>\n<li>压缩文件格式异常（安装包本来就是一个压缩包）</li>\n<li>安装包格式异常</li>\n<li>没有找到安装包签名块异常</li>\n<li>签名能够支持的最小 Android 版本异常</li>\n</ul>\n<h1>安装包结构</h1>\n"},{"title":"我的单词本","catalog":true,"date":"2022-10-15T05:08:46.000Z","subtitle":"讲真，我认识一个人，她每天都会学习、巩固单词","header-img":"/img/2210/mine-englishbook.jpg","_content":"\n# 计算机专业\n\n> 编程入门那会，我们可能都有过这个疑惑：学习编程对英文水平有什么要求？一定要英语很好吗？但我想说的是，多多益善\n\n- sinks：输入器\n- sink：下沉、输入\n- utility：实用程序\n- stamp：类型\n- aka：亦称、又名\n- Trampoline：跳床（跳板）","source":"_posts/undefined/我的单词本.md","raw":"---\ntitle: 我的单词本\ncatalog: true\ndate: 2022-10-15 13:08:46\nsubtitle: 讲真，我认识一个人，她每天都会学习、巩固单词\nheader-img: /img/2210/mine-englishbook.jpg\ntags: 工具\ncategories:\n---\n\n# 计算机专业\n\n> 编程入门那会，我们可能都有过这个疑惑：学习编程对英文水平有什么要求？一定要英语很好吗？但我想说的是，多多益善\n\n- sinks：输入器\n- sink：下沉、输入\n- utility：实用程序\n- stamp：类型\n- aka：亦称、又名\n- Trampoline：跳床（跳板）","slug":"我的单词本","published":1,"lang":"undefined","updated":"2022-10-15T05:08:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qc00107tqp876xgjpc","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>计算机专业</h1>\n<blockquote>\n<p>编程入门那会，我们可能都有过这个疑惑：学习编程对英文水平有什么要求？一定要英语很好吗？但我想说的是，多多益善</p>\n</blockquote>\n<ul>\n<li>sinks：输入器</li>\n<li>sink：下沉、输入</li>\n<li>utility：实用程序</li>\n<li>stamp：类型</li>\n<li>aka：亦称、又名</li>\n<li>Trampoline：跳床（跳板）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>计算机专业</h1>\n<blockquote>\n<p>编程入门那会，我们可能都有过这个疑惑：学习编程对英文水平有什么要求？一定要英语很好吗？但我想说的是，多多益善</p>\n</blockquote>\n<ul>\n<li>sinks：输入器</li>\n<li>sink：下沉、输入</li>\n<li>utility：实用程序</li>\n<li>stamp：类型</li>\n<li>aka：亦称、又名</li>\n<li>Trampoline：跳床（跳板）</li>\n</ul>\n"},{"title":"字节码 Dalvik","catalog":true,"date":"2022-10-17T13:18:07.000Z","subtitle":null,"header-img":"/img/2210/page-native.jpg","_content":"\n\n# 字节码 Dalvik\n\n关于 dalvik 字节码：\n\n> [JVM 官网](https://source.android.com/devices/tech/dalvik/dalvik-bytecode)\n- [Android GitHub](https://github.com/AndroidAdvanceWithGeektime/Chapter27/blob/master/doucments/Dalvik%20and%20ART.pdf)\n- [Android ](https://github.com/AndroidAdvanceWithGeektime/Chapter27/blob/master/doucments/Understanding%20the%20Davlik%20Virtual%20Machine.pdf)","source":"_posts/undefined/字节码Dalvik.md","raw":"---\ntitle: 字节码 Dalvik\ncatalog: true\ndate: 2022-10-17 21:18:07\nsubtitle:\nheader-img: /img/2210/page-native.jpg\ntags: 字节码\ncategories:\n---\n\n\n# 字节码 Dalvik\n\n关于 dalvik 字节码：\n\n> [JVM 官网](https://source.android.com/devices/tech/dalvik/dalvik-bytecode)\n- [Android GitHub](https://github.com/AndroidAdvanceWithGeektime/Chapter27/blob/master/doucments/Dalvik%20and%20ART.pdf)\n- [Android ](https://github.com/AndroidAdvanceWithGeektime/Chapter27/blob/master/doucments/Understanding%20the%20Davlik%20Virtual%20Machine.pdf)","slug":"字节码Dalvik","published":1,"lang":"undefined","updated":"2022-10-17T13:18:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qc00127tqpbwoi7j9e","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>字节码 Dalvik</h1>\n<p>关于 dalvik 字节码：</p>\n<blockquote>\n<p><a href=\"https://source.android.com/devices/tech/dalvik/dalvik-bytecode\">JVM 官网</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter27/blob/master/doucments/Dalvik%20and%20ART.pdf\">Android GitHub</a></li>\n<li><a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter27/blob/master/doucments/Understanding%20the%20Davlik%20Virtual%20Machine.pdf\">Android </a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>字节码 Dalvik</h1>\n<p>关于 dalvik 字节码：</p>\n<blockquote>\n<p><a href=\"https://source.android.com/devices/tech/dalvik/dalvik-bytecode\">JVM 官网</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter27/blob/master/doucments/Dalvik%20and%20ART.pdf\">Android GitHub</a></li>\n<li><a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter27/blob/master/doucments/Understanding%20the%20Davlik%20Virtual%20Machine.pdf\">Android </a></li>\n</ul>\n"},{"title":"了解程序员口中的 - 热修复","catalog":true,"date":"2022-10-15T02:54:15.000Z","subtitle":"收藏从未停止，学习从未开始","header-img":"/img/2210/mine_bookmark.jpg","sticky":11,"_content":"\n\n# 热修复\n\n## 介绍\n\n**背景：** dex 方法个数限制，最大不能超过 65536\n\n**方案：** 将编译好的 class 文件拆分为两个 dex 文件，运行时使用系统类加载器动态加载其他的 dex 文件；dex 文件拆分官方早有方案 multidex。\n\n**原理：** 使用 DexClassLoader 加载字节码元素，（通过反射）把字节码元素追加到 dexElements 数组；对于热修复，同名字节码文件只有第一个元素会被加载，后面的同名文件被舍弃（也就是补丁 dex 文件应该放在比问题元素更靠前的 dexElements 数组位置中）。\n\n类结构：\n—— ClassLoader\n&emsp;—— BaseDexClassLoader\n&emsp;&emsp;—— DexClassLoader&emsp;&emsp; [加载 jar、未安装 apk dex]\n&emsp;&emsp;—— PathClassLoader&emsp;&emsp;[加载系统类、已安装 apk dex]\n\n\n## path 生成\n\n1、修复问题，构建、打包获得 class 文件\n2、利用 jar 命令将 class 文件打包成 jar 文件\n3、利用 dx 命令将 jar 转换成 dex 文件\n\n## path 加载\n1、创建 DexClassLoader 加载补丁文件\n2、使用反射获得 dexElements 数据，补丁数据合并到反射获取到的数组，新合并得到的数组更新到应用内部的 ClassLoader 的 dexElements\n\n是的，对于简单的热修复到这里就算完成了，至于复杂的需求、更好的使用体验还需要不断雕琢。比如可以进一步结合 ASM、Gradle Transfrom 等工具优化使用体验。\n\n## 代码实现","source":"_posts/undefined/毕业一年.md","raw":"---\ntitle: 了解程序员口中的 - 热修复 \ncatalog: true\ndate: 2022-10-15 10:54:15\nsubtitle: 收藏从未停止，学习从未开始\nheader-img: /img/2210/mine_bookmark.jpg\ntags: 笔记\ncategories:\nsticky: 11\n---\n\n\n# 热修复\n\n## 介绍\n\n**背景：** dex 方法个数限制，最大不能超过 65536\n\n**方案：** 将编译好的 class 文件拆分为两个 dex 文件，运行时使用系统类加载器动态加载其他的 dex 文件；dex 文件拆分官方早有方案 multidex。\n\n**原理：** 使用 DexClassLoader 加载字节码元素，（通过反射）把字节码元素追加到 dexElements 数组；对于热修复，同名字节码文件只有第一个元素会被加载，后面的同名文件被舍弃（也就是补丁 dex 文件应该放在比问题元素更靠前的 dexElements 数组位置中）。\n\n类结构：\n—— ClassLoader\n&emsp;—— BaseDexClassLoader\n&emsp;&emsp;—— DexClassLoader&emsp;&emsp; [加载 jar、未安装 apk dex]\n&emsp;&emsp;—— PathClassLoader&emsp;&emsp;[加载系统类、已安装 apk dex]\n\n\n## path 生成\n\n1、修复问题，构建、打包获得 class 文件\n2、利用 jar 命令将 class 文件打包成 jar 文件\n3、利用 dx 命令将 jar 转换成 dex 文件\n\n## path 加载\n1、创建 DexClassLoader 加载补丁文件\n2、使用反射获得 dexElements 数据，补丁数据合并到反射获取到的数组，新合并得到的数组更新到应用内部的 ClassLoader 的 dexElements\n\n是的，对于简单的热修复到这里就算完成了，至于复杂的需求、更好的使用体验还需要不断雕琢。比如可以进一步结合 ASM、Gradle Transfrom 等工具优化使用体验。\n\n## 代码实现","slug":"毕业一年","published":1,"lang":"undefined","updated":"2022-10-15T02:54:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qd00157tqpek7g382c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>热修复</h1>\n<h2 id=\"介绍\">介绍</h2>\n<p><strong>背景：</strong> dex 方法个数限制，最大不能超过 65536</p>\n<p><strong>方案：</strong> 将编译好的 class 文件拆分为两个 dex 文件，运行时使用系统类加载器动态加载其他的 dex 文件；dex 文件拆分官方早有方案 multidex。</p>\n<p><strong>原理：</strong> 使用 DexClassLoader 加载字节码元素，（通过反射）把字节码元素追加到 dexElements 数组；对于热修复，同名字节码文件只有第一个元素会被加载，后面的同名文件被舍弃（也就是补丁 dex 文件应该放在比问题元素更靠前的 dexElements 数组位置中）。</p>\n<p>类结构：<br>\n—— ClassLoader<br>\n —— BaseDexClassLoader<br>\n  —— DexClassLoader   [加载 jar、未安装 apk dex]<br>\n  —— PathClassLoader  [加载系统类、已安装 apk dex]</p>\n<h2 id=\"path-生成\">path 生成</h2>\n<p>1、修复问题，构建、打包获得 class 文件<br>\n2、利用 jar 命令将 class 文件打包成 jar 文件<br>\n3、利用 dx 命令将 jar 转换成 dex 文件</p>\n<h2 id=\"path-加载\">path 加载</h2>\n<p>1、创建 DexClassLoader 加载补丁文件<br>\n2、使用反射获得 dexElements 数据，补丁数据合并到反射获取到的数组，新合并得到的数组更新到应用内部的 ClassLoader 的 dexElements</p>\n<p>是的，对于简单的热修复到这里就算完成了，至于复杂的需求、更好的使用体验还需要不断雕琢。比如可以进一步结合 ASM、Gradle Transfrom 等工具优化使用体验。</p>\n<h2 id=\"代码实现\">代码实现</h2>\n","site":{"data":{}},"excerpt":"","more":"<h1>热修复</h1>\n<h2 id=\"介绍\">介绍</h2>\n<p><strong>背景：</strong> dex 方法个数限制，最大不能超过 65536</p>\n<p><strong>方案：</strong> 将编译好的 class 文件拆分为两个 dex 文件，运行时使用系统类加载器动态加载其他的 dex 文件；dex 文件拆分官方早有方案 multidex。</p>\n<p><strong>原理：</strong> 使用 DexClassLoader 加载字节码元素，（通过反射）把字节码元素追加到 dexElements 数组；对于热修复，同名字节码文件只有第一个元素会被加载，后面的同名文件被舍弃（也就是补丁 dex 文件应该放在比问题元素更靠前的 dexElements 数组位置中）。</p>\n<p>类结构：<br>\n—— ClassLoader<br>\n —— BaseDexClassLoader<br>\n  —— DexClassLoader   [加载 jar、未安装 apk dex]<br>\n  —— PathClassLoader  [加载系统类、已安装 apk dex]</p>\n<h2 id=\"path-生成\">path 生成</h2>\n<p>1、修复问题，构建、打包获得 class 文件<br>\n2、利用 jar 命令将 class 文件打包成 jar 文件<br>\n3、利用 dx 命令将 jar 转换成 dex 文件</p>\n<h2 id=\"path-加载\">path 加载</h2>\n<p>1、创建 DexClassLoader 加载补丁文件<br>\n2、使用反射获得 dexElements 数据，补丁数据合并到反射获取到的数组，新合并得到的数组更新到应用内部的 ClassLoader 的 dexElements</p>\n<p>是的，对于简单的热修复到这里就算完成了，至于复杂的需求、更好的使用体验还需要不断雕琢。比如可以进一步结合 ASM、Gradle Transfrom 等工具优化使用体验。</p>\n<h2 id=\"代码实现\">代码实现</h2>\n"},{"title":"Xposted 检测获取设备信息","catalog":true,"date":"2022-09-29T14:59:00.000Z","subtitle":"拒绝应用不合理获取个人信息的行为","header-img":"/img/220928/xposted_bg.png","sticky":4,"_content":"\n\n# 前言 \n\n设备的个人信息（例如：联系人信息、短信内容等）属于用户隐私，违规获取个人信息被视为侵犯用户权益；在设备上获取个人信息一般需先获取到相应的权限才能进行获取，例如想获取相册图片，那么需要申请读写权限，用户同意权限申请之后可读取相册图片。应用存在违规获取个人信息的行为，不为罕见，何为违规行为？\n\n个人理解：\n- 在用户不知情下获取个人信息。比如，在用户同意隐私政策前获取个人信息\n- 未向用户明确个人信息使用意图。比如，隐私政策或说明未向用户明确个人信息使用意图\n- 超范围获取个人信息。比如，一个壁纸 App 申请录音权限\n\n此前，部分应用存在对用户个人信息违规获取的行为，个人隐私权益保护意识薄弱，违规获取的行为未得到有效解决，直到 2019 年低，工信部发布关于印发《App违法违规收集使用个人信息行为认定方法》通知，应用商店逐渐开始对违规获取行为要求整改。\n\n```java\n- 未公开收集使用规则的行为\n- 未明示收集使用个人信息的目的、方式和范围的行为\n- 未经用户同意收集个人信息的行为【该点为本文讨论和解决的重点】\n- 收集与其提供服务无关的个人信息的行为\n- 未经同意向他人提供个人信息的行为\n- 未按法律规定提供删除或更正个人信息功能的\n\n除此之外，国内商店渠道还有其他要求，比如：\n- 不允许频繁获取设备信息（IMEI、SSID、AndroidID 等）\n```\n\n![origin_img_v2_640fd02b-1194-4342-9ed9-200b1e9bf7ag.jpg](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb0f36e7ad9b4293b24fc5afcc4bc7a8~tplv-k3u1fbpfcp-watermark.image?)\n\n以下围绕如何检测应用是否存在**未经用户同意收集个人信息或设备信息**的行为，以及**是否存在频繁获取个人信息或设备信息**的行为。\n\n\n# Xposted 模块\n\n## 介绍 ☕️\n\n该模板编写主要是 Hook 知识点，Hook 作为‘钩子’可以粗略理解为拦截某段代码的执行，并在代码段前后插入监控事件，程序执行此代码段同时也将触发监控事件，将监控事件返回给外层用于进一步处理。个人理解，使用 Hook 工具较为关键的一点就是找到较为准确的 Hook 点。\n\n## Hook 框架 🤔\n\nAndroid 上的 Hook 框架，想必很多人都略有耳闻，当年狂热的 **Xposted**，后面编写的检测工具便是基于 Xposted 库，Xposted 模块编写教程在网上是满天飞，这篇文章我觉得描述得比较清晰：[新手不要再被误导！这是一篇最新的Xposed模块编写教程](https://www.freebuf.com/articles/terminal/189021.html)。看完引用的文章，我们便知道 xposted 库使用的 hook 模板，检测工具根据模板编写代码，整合多个检测点就可以（比如我需要检测 AndroidId、MAC、IMEI 等的获取）。\n\n```java\n//模板\nXposedHelpers.findAndHookMethod(\nclassName,      //需要 hook 的类名，因为使用反射，需要类的全限定名\nmethondName,    //需要 hook 的方法签名\nparams1.class,  //需要 hook 的方法的参数（参数存在多个，因此这是一个可变参数，参数类型需和方法签名保持一致）\nparams2.class,\n...\nnew XC_MethodHook() {\n\n    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {\n      //hook before\n    }\n    protected void afterHookedMethod(MethodHookParam param) throws Throwable {\n      //hook after\n    }});\n\n```\n\n## 举个栗子🌰\n\nAndroid Java 层获取 AndroidID 的代码通常是：\n\n```java\nSettings.Secure.getString(context.getContentResolver(), \nSettings.Secure.ANDROID_ID);\n```\n\n那么，根据上述的 hook 模版，找到以下参数只值：\n\n- className：android.provider.Settings\n- methodName：getString （有参方法，注意区分第二个参数可根据不同的传值获取不同的设备信息）\n- params1：ContentResolver.class\n- params2：String.class\n\n由此可得 androidId 获取检测代码：\n\n```java\n// 检测 AndroidID 获取\nXposedHelpers.findAndHookMethod(\n\"android.provider.Settings\",\n\"getString\",\nContentResolver.class,\nString.class,\nnew XC_MethodHook() {\n\n    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {\n      //hook before\n    }\n    protected void afterHookedMethod(MethodHookParam param) throws Throwable {\n      //hook after\n      if(param == null)return;\n      //方法参数是一个可变参数，也就是一个列表\n      Object[] args = param.args;\n      if(args == null || args.lenght <= 0)return;\n      //getString 方法我们需要知道第二个参数值才有意义，才能继续判断是获取 androidid 还是别的信息\n      if(args.lenght >= 2){\n          String params2 = (String)args[1];\n          //注意：public static final String ANDROID_ID = \"android_id\";\n          if(\"android_id\".equal(params2)){\n              Log.d(\"TAG\",\"检测到获取 androidid\")\n          }\n      }\n    }});\n\n```\n\n就这样，检测 androidid 获取的代码就写好了，简单吧。如果你对 xposted 实现感兴趣可以看源码[：android-hacker-VirtualXposted](https://github.com/android-hacker/VirtualXposed)。查看 android 源码可知，获取 androidid 的 getString 方法第二个参数可选值\n\n```java\n//所以，当你 Hook 这个方法时候，不仅仅可以 Hook AndroidID 的获取，也可以检测其他信息的获取情况\n//public static final String ANDROID_ID = \"android_id\";\nstatic {\n    MOVED_TO_SECURE = new HashSet<>(30);\n    MOVED_TO_SECURE.add(Secure.ADAPTIVE_SLEEP);\n    MOVED_TO_SECURE.add(Secure.ANDROID_ID);\n    MOVED_TO_SECURE.add(Secure.HTTP_PROXY);\n    MOVED_TO_SECURE.add(Secure.LOCATION_PROVIDERS_ALLOWED);\n    MOVED_TO_SECURE.add(Secure.LOCK_BIOMETRIC_WEAK_FLAGS);\n    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_ENABLED);\n    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_VISIBLE);\n    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED);\n    MOVED_TO_SECURE.add(Secure.LOGGING_ID);\n    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_ENABLED);\n    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_LAST_UPDATE);\n    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_REDIRECT_URL);\n    MOVED_TO_SECURE.add(Secure.SETTINGS_CLASSNAME);\n    MOVED_TO_SECURE.add(Secure.USE_GOOGLE_MAIL);\n    MOVED_TO_SECURE.add(Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON);\n    MOVED_TO_SECURE.add(Secure.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY);\n    MOVED_TO_SECURE.add(Secure.WIFI_NUM_OPEN_NETWORKS_KEPT);\n    MOVED_TO_SECURE.add(Secure.WIFI_ON);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_AP_COUNT);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_MAX_AP_CHECKS);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_ON);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_COUNT);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_DELAY_MS);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS);\n\n    // At one time in System, then Global, but now back in Secure\n    MOVED_TO_SECURE.add(Secure.INSTALL_NON_MARKET_APPS);\n}\n```\n\n## 有没有现成的代码 🤔️\n\n读到这里，根据上面的 xposted hook 模板，思维发散，你已经具备写一个合规检 Xposted 插件的能力。通常，合规检测插件应该 hook 哪些地方？应该检测哪些信息的获取行为？其实你可以参考渠道审核要求综合考虑，归纳总结，包括但不局限于以下几点：\n- androidID 检测\n- IMEI 检测\n- SSID 检测\n- IMSI 检测\n- MAC 检测\n- OAID 检测【因为获取 IMEI 的问题，现在国内很多都在使用 OAID】\n- 定位信息读取检测\n- 联系人列表读取检测\n- 短信内容检测\n- 相册读取检测\n- 软件安装列表读取检测\n- 应用信息读取检测\n\n\n编写合规检测插件可能遇到或需要考虑的问题有哪些？\n- 应用的多进程环境。避免某些操作重复执行，检测数据重复\n- 信息获取获取行为数据处理。是否需引入数据持久化框架，对数据存储后统一处理\n- Android 平台数据库框架初始化依赖 context。是否需要 hook application 获取 context\n- 等等（需求驱动开发）\n\n\n# Use VirtualXposted 💔\n\n**方案可行但不推荐，存在一定的局限**\n\n为什么不推荐？有什么局限？需检查应用运行环境以来 VirtualXpostedApp，侵入性强，易被第三方检测到存在 xposted 环境，xposted hook 特征明显，容易被检测。比如某些应用或第三方 SDK 有做 xposted 防护，运行过程中检测到运行环境存在 xposted，可能会做相应处理————终止程序继续运行，不利于检测应用个人信息获取情况。优点是环境准备简单。\n\n## 如何使用\n\n1、下载安装 virtualXposted\n\n[android-hacker-VirtualXposted](https://github.com/android-hacker/VirtualXposed)\n\n2、激活 xposted \n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca83e472c58447ce84f6eb4f1aad5b2e~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b53d5cd381f419ba50e4eea9f9f8a39~tplv-k3u1fbpfcp-watermark.image?)\n\n3、添加模板和待检测应用\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e93823fe3fe14092a287bb6ac95c3310~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39273c5ee0534cc4b705ee3de92d9fc0~tplv-k3u1fbpfcp-watermark.image?)\n\n4、启动模块\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5bc1c3afd294c378d5cb57d7f7dda1b~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/798cac0dc3e2428699a16d74bfab6d44~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7748fbdc0e24f12bc2148383117e9b8~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5622c01867c64155a5cae84c6a57be57~tplv-k3u1fbpfcp-watermark.image?)\n\n最后就是运行应用，查看自定义输出日志。由于 xposted 防护的局限，若不能满足当前需求，还需另寻他法。\n\n# Use Taichi 💔\n\n**方案不可行但不推荐，写好的模板无法使用（也可能是我不会用）**\n\n为什么不推荐？写好的检测模板被限制使用，官网：https://github.com/taichi-framework/TaiChi\n\n如何使用太极就不过多解释了，这里提下遇到的问题：\n\n**问题一：暂不支持**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ef794ca6102471bb11b702f6f062a1f~tplv-k3u1fbpfcp-watermark.image?)\n\n**看下官网有对‘暂时不支持’的描述，有以下两种可能：**\n\n- 当前太极是太极阴模式（有阴、阳两种模式，自行官网了解）\n- 当前模块不存在白名单中\n\n暂时没办法，试试把太极激活为‘太极阳’模式，然而呢还是显示暂不支持；猜测是另一种可能，模板不存在白名单中，要加入白名单要联系作者，比较麻烦，还是另寻他法吧。后来发现了另一个框架 LSP 。（如何开启太极阳，官网有教程，需要借助 Magisk，下文会用到这个工具）\n\n# Use Lsposted ❤️\n\n**方案可行，推荐使用**\n为什么推荐？LSP 侵入性弱，不易被第三方检测，一定程度上能够避免 xposted 防护。\n\n## 注意事项\n\n- BootLoader 解锁将清除设备数据，重要数据请注意备份\n- 此操作需要设备解锁 Bootloader （刷机），若BootLoader 解锁失败，其他操作已无意义，没有继续操作的必要，建议更换设备。\n- 各厂商设备 BootLoader 解锁方式可能不尽相同。\n    - 小米官网仍然开放 BL 解锁工具（建议使用小米手机测试）\n    - 购买第三方解锁工具 UAndroid\n    - OPPO 官方也有‘深度测试’解锁工具，但申请名额有限，审核时间长，不推荐\n\n## 如何使用\n\n以小米手机为例（因为 BL 解锁方便）\n\n**1、设备 Bootloader 解锁**\n\n[官方：申请解锁小米手机](http://www.miui.com/unlock/download.html)\n\n小米的 BL 解锁对设备的以及账号绑定也有要求，比如账号与设备绑定时间等。官网下载得到的可能不是最新版本，请使用最新版本。\n\n**2、下载安装 Magisk**\n\n官网：https://github.com/topjohnwu/Magisk\n\n**3、下载备用 adb-fastboot**\n\n链接：https://mrzzoxo.lanzouw.com/iMbPYz63p6f\n\n**4、准备对应设备型号的刷机包**\n\n小米刷机包：https://mirom.ezbox.idv.tw/phone/\n\n一般建议下载大陆稳定版（若是其他厂商刷机包，自行寻找）\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87a8268965d648df8775781e37f77679~tplv-k3u1fbpfcp-watermark.image?)\n\n**5、刷入 Magisk**\n\n尽量按顺序操作\n\n5.1 从刷机包中解压获取  **boot.img** 文件（若无此文件建议更换刷机包，也可以另寻他法从刷机包中解析获得此文件）\n5.2 打开 Magisk 选择 boot.img 安装补丁，等待刷入完成（此截图是已安装完成的，以实际为准）\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c6b1f76ad8845d98bf1f2c901286ed9~tplv-k3u1fbpfcp-watermark.image?)\n\n5.3 刷入完成，查看日志获得生成的 img 文件\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0d9d3a707544199a1b8e5f5518b4e4f~tplv-k3u1fbpfcp-zoom-1.image)\n\n5.4 复制生成的 img 文件和 boot.img 文件到 adb-fastboot 目录下，打开 打开CMD命令行.bat（若 boot.img 不存在此目录下，刷入 magisk 无效）\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c3c9d8aa38426294d85cfdd38255a4~tplv-k3u1fbpfcp-zoom-1.image)\n\n5.5 设备进入 BootLoader 模式\n    方式一：执行 adb reboot bootloader\n    方式二：关机状态下，同时按住 音量— + 电源键\n\n执行以下命令等待完成，使用命令重启设备；重启后重新打开 magisk 显示版本号表示成功。 \n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0cf7cae60c44815b1127984face396c~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffe997317c794ad08d6c1242a54bf9a5~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b35d48af81574b27bfba0c5eca5cfdc0~tplv-k3u1fbpfcp-zoom-1.image)\n\n**6、刷入 LSPosted**\n\n官网：https://github.com/LSPosed/LSPosed、https://github.com/RikkaApps/Riru/tags\n\n6.1 开启 Zygisk，按提示重启设备\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c329e61e1fc48e5945863ce1a1f8cda~tplv-k3u1fbpfcp-zoom-1.image)\n\n6.2 开启 Zygisk，按提示重启设备\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d948643a1a3f4bf79cb1ee7dd8075ea1~tplv-k3u1fbpfcp-zoom-1.image)\n\n6.3 下载**LSPosted-zygisk**备用（必选）\n\n如果设备支持 Zygisk，ritu、LSPosted-ritu 模块可不需要，建议使用支持 Zygisk 的设备\n\n6.4 打开 Magisk 开始刷入必选模块，按照提示重启设备后显示 Zygisk 是，桌面出现 LSPosted\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8e39c410d444628be03c7f83adaf92a~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b73cb22078b4610a4fac35e369b8eea~tplv-k3u1fbpfcp-zoom-1.image)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ae1ca939964ce68b0e56331bd50b63~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baffbe16b1d04a1899ba2c4caee9b37b~tplv-k3u1fbpfcp-watermark.image?)\n\n**7、安装检测模块**\n\n如果之前没有安装我们的 **合规检测模块**，那么现在要安装啦！！！启动模块，勾选要检测的应用，返回桌面执行应用就可以看日志\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5196bdc80d84b64b8fd752e47285651~tplv-k3u1fbpfcp-watermark.image?)\n\n# 其他\n\n- ⚠️ Android 9 及其以下设备才支持 IMEI 获取，在测试设备选择上需注意\n- [学习网站：XDA Forums](https://forum.xda-developers.com/) 该网站的主要讨论手机系统，并提供相关设备的技术信息、[ROM](https://zh.m.wikipedia.org/wiki/ROM)升级、技术支持、Q＆A\n- [搞机网站：UA手机维修交流 - Powered by Discuz!](https://bbs.gsmua.cn/)\n    可提供 UAndroid 工具，用于各厂商设备 BootLoader 解锁\n    付费工具、也可以账号租用方式使用（专业搞机，某宝也有相关技术服务）\n","source":"_posts/undefined/设备信息获取检测.md","raw":"---\ntitle: Xposted 检测获取设备信息\ncatalog: true\ndate: 2022-09-29 22:59:00\nsubtitle: 拒绝应用不合理获取个人信息的行为\nheader-img: /img/220928/xposted_bg.png\ntags: 刷机\nsticky: 4\ncategories:\n---\n\n\n# 前言 \n\n设备的个人信息（例如：联系人信息、短信内容等）属于用户隐私，违规获取个人信息被视为侵犯用户权益；在设备上获取个人信息一般需先获取到相应的权限才能进行获取，例如想获取相册图片，那么需要申请读写权限，用户同意权限申请之后可读取相册图片。应用存在违规获取个人信息的行为，不为罕见，何为违规行为？\n\n个人理解：\n- 在用户不知情下获取个人信息。比如，在用户同意隐私政策前获取个人信息\n- 未向用户明确个人信息使用意图。比如，隐私政策或说明未向用户明确个人信息使用意图\n- 超范围获取个人信息。比如，一个壁纸 App 申请录音权限\n\n此前，部分应用存在对用户个人信息违规获取的行为，个人隐私权益保护意识薄弱，违规获取的行为未得到有效解决，直到 2019 年低，工信部发布关于印发《App违法违规收集使用个人信息行为认定方法》通知，应用商店逐渐开始对违规获取行为要求整改。\n\n```java\n- 未公开收集使用规则的行为\n- 未明示收集使用个人信息的目的、方式和范围的行为\n- 未经用户同意收集个人信息的行为【该点为本文讨论和解决的重点】\n- 收集与其提供服务无关的个人信息的行为\n- 未经同意向他人提供个人信息的行为\n- 未按法律规定提供删除或更正个人信息功能的\n\n除此之外，国内商店渠道还有其他要求，比如：\n- 不允许频繁获取设备信息（IMEI、SSID、AndroidID 等）\n```\n\n![origin_img_v2_640fd02b-1194-4342-9ed9-200b1e9bf7ag.jpg](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb0f36e7ad9b4293b24fc5afcc4bc7a8~tplv-k3u1fbpfcp-watermark.image?)\n\n以下围绕如何检测应用是否存在**未经用户同意收集个人信息或设备信息**的行为，以及**是否存在频繁获取个人信息或设备信息**的行为。\n\n\n# Xposted 模块\n\n## 介绍 ☕️\n\n该模板编写主要是 Hook 知识点，Hook 作为‘钩子’可以粗略理解为拦截某段代码的执行，并在代码段前后插入监控事件，程序执行此代码段同时也将触发监控事件，将监控事件返回给外层用于进一步处理。个人理解，使用 Hook 工具较为关键的一点就是找到较为准确的 Hook 点。\n\n## Hook 框架 🤔\n\nAndroid 上的 Hook 框架，想必很多人都略有耳闻，当年狂热的 **Xposted**，后面编写的检测工具便是基于 Xposted 库，Xposted 模块编写教程在网上是满天飞，这篇文章我觉得描述得比较清晰：[新手不要再被误导！这是一篇最新的Xposed模块编写教程](https://www.freebuf.com/articles/terminal/189021.html)。看完引用的文章，我们便知道 xposted 库使用的 hook 模板，检测工具根据模板编写代码，整合多个检测点就可以（比如我需要检测 AndroidId、MAC、IMEI 等的获取）。\n\n```java\n//模板\nXposedHelpers.findAndHookMethod(\nclassName,      //需要 hook 的类名，因为使用反射，需要类的全限定名\nmethondName,    //需要 hook 的方法签名\nparams1.class,  //需要 hook 的方法的参数（参数存在多个，因此这是一个可变参数，参数类型需和方法签名保持一致）\nparams2.class,\n...\nnew XC_MethodHook() {\n\n    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {\n      //hook before\n    }\n    protected void afterHookedMethod(MethodHookParam param) throws Throwable {\n      //hook after\n    }});\n\n```\n\n## 举个栗子🌰\n\nAndroid Java 层获取 AndroidID 的代码通常是：\n\n```java\nSettings.Secure.getString(context.getContentResolver(), \nSettings.Secure.ANDROID_ID);\n```\n\n那么，根据上述的 hook 模版，找到以下参数只值：\n\n- className：android.provider.Settings\n- methodName：getString （有参方法，注意区分第二个参数可根据不同的传值获取不同的设备信息）\n- params1：ContentResolver.class\n- params2：String.class\n\n由此可得 androidId 获取检测代码：\n\n```java\n// 检测 AndroidID 获取\nXposedHelpers.findAndHookMethod(\n\"android.provider.Settings\",\n\"getString\",\nContentResolver.class,\nString.class,\nnew XC_MethodHook() {\n\n    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {\n      //hook before\n    }\n    protected void afterHookedMethod(MethodHookParam param) throws Throwable {\n      //hook after\n      if(param == null)return;\n      //方法参数是一个可变参数，也就是一个列表\n      Object[] args = param.args;\n      if(args == null || args.lenght <= 0)return;\n      //getString 方法我们需要知道第二个参数值才有意义，才能继续判断是获取 androidid 还是别的信息\n      if(args.lenght >= 2){\n          String params2 = (String)args[1];\n          //注意：public static final String ANDROID_ID = \"android_id\";\n          if(\"android_id\".equal(params2)){\n              Log.d(\"TAG\",\"检测到获取 androidid\")\n          }\n      }\n    }});\n\n```\n\n就这样，检测 androidid 获取的代码就写好了，简单吧。如果你对 xposted 实现感兴趣可以看源码[：android-hacker-VirtualXposted](https://github.com/android-hacker/VirtualXposed)。查看 android 源码可知，获取 androidid 的 getString 方法第二个参数可选值\n\n```java\n//所以，当你 Hook 这个方法时候，不仅仅可以 Hook AndroidID 的获取，也可以检测其他信息的获取情况\n//public static final String ANDROID_ID = \"android_id\";\nstatic {\n    MOVED_TO_SECURE = new HashSet<>(30);\n    MOVED_TO_SECURE.add(Secure.ADAPTIVE_SLEEP);\n    MOVED_TO_SECURE.add(Secure.ANDROID_ID);\n    MOVED_TO_SECURE.add(Secure.HTTP_PROXY);\n    MOVED_TO_SECURE.add(Secure.LOCATION_PROVIDERS_ALLOWED);\n    MOVED_TO_SECURE.add(Secure.LOCK_BIOMETRIC_WEAK_FLAGS);\n    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_ENABLED);\n    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_VISIBLE);\n    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED);\n    MOVED_TO_SECURE.add(Secure.LOGGING_ID);\n    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_ENABLED);\n    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_LAST_UPDATE);\n    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_REDIRECT_URL);\n    MOVED_TO_SECURE.add(Secure.SETTINGS_CLASSNAME);\n    MOVED_TO_SECURE.add(Secure.USE_GOOGLE_MAIL);\n    MOVED_TO_SECURE.add(Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON);\n    MOVED_TO_SECURE.add(Secure.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY);\n    MOVED_TO_SECURE.add(Secure.WIFI_NUM_OPEN_NETWORKS_KEPT);\n    MOVED_TO_SECURE.add(Secure.WIFI_ON);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_AP_COUNT);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_MAX_AP_CHECKS);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_ON);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_COUNT);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_DELAY_MS);\n    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS);\n\n    // At one time in System, then Global, but now back in Secure\n    MOVED_TO_SECURE.add(Secure.INSTALL_NON_MARKET_APPS);\n}\n```\n\n## 有没有现成的代码 🤔️\n\n读到这里，根据上面的 xposted hook 模板，思维发散，你已经具备写一个合规检 Xposted 插件的能力。通常，合规检测插件应该 hook 哪些地方？应该检测哪些信息的获取行为？其实你可以参考渠道审核要求综合考虑，归纳总结，包括但不局限于以下几点：\n- androidID 检测\n- IMEI 检测\n- SSID 检测\n- IMSI 检测\n- MAC 检测\n- OAID 检测【因为获取 IMEI 的问题，现在国内很多都在使用 OAID】\n- 定位信息读取检测\n- 联系人列表读取检测\n- 短信内容检测\n- 相册读取检测\n- 软件安装列表读取检测\n- 应用信息读取检测\n\n\n编写合规检测插件可能遇到或需要考虑的问题有哪些？\n- 应用的多进程环境。避免某些操作重复执行，检测数据重复\n- 信息获取获取行为数据处理。是否需引入数据持久化框架，对数据存储后统一处理\n- Android 平台数据库框架初始化依赖 context。是否需要 hook application 获取 context\n- 等等（需求驱动开发）\n\n\n# Use VirtualXposted 💔\n\n**方案可行但不推荐，存在一定的局限**\n\n为什么不推荐？有什么局限？需检查应用运行环境以来 VirtualXpostedApp，侵入性强，易被第三方检测到存在 xposted 环境，xposted hook 特征明显，容易被检测。比如某些应用或第三方 SDK 有做 xposted 防护，运行过程中检测到运行环境存在 xposted，可能会做相应处理————终止程序继续运行，不利于检测应用个人信息获取情况。优点是环境准备简单。\n\n## 如何使用\n\n1、下载安装 virtualXposted\n\n[android-hacker-VirtualXposted](https://github.com/android-hacker/VirtualXposed)\n\n2、激活 xposted \n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca83e472c58447ce84f6eb4f1aad5b2e~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b53d5cd381f419ba50e4eea9f9f8a39~tplv-k3u1fbpfcp-watermark.image?)\n\n3、添加模板和待检测应用\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e93823fe3fe14092a287bb6ac95c3310~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39273c5ee0534cc4b705ee3de92d9fc0~tplv-k3u1fbpfcp-watermark.image?)\n\n4、启动模块\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5bc1c3afd294c378d5cb57d7f7dda1b~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/798cac0dc3e2428699a16d74bfab6d44~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7748fbdc0e24f12bc2148383117e9b8~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5622c01867c64155a5cae84c6a57be57~tplv-k3u1fbpfcp-watermark.image?)\n\n最后就是运行应用，查看自定义输出日志。由于 xposted 防护的局限，若不能满足当前需求，还需另寻他法。\n\n# Use Taichi 💔\n\n**方案不可行但不推荐，写好的模板无法使用（也可能是我不会用）**\n\n为什么不推荐？写好的检测模板被限制使用，官网：https://github.com/taichi-framework/TaiChi\n\n如何使用太极就不过多解释了，这里提下遇到的问题：\n\n**问题一：暂不支持**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ef794ca6102471bb11b702f6f062a1f~tplv-k3u1fbpfcp-watermark.image?)\n\n**看下官网有对‘暂时不支持’的描述，有以下两种可能：**\n\n- 当前太极是太极阴模式（有阴、阳两种模式，自行官网了解）\n- 当前模块不存在白名单中\n\n暂时没办法，试试把太极激活为‘太极阳’模式，然而呢还是显示暂不支持；猜测是另一种可能，模板不存在白名单中，要加入白名单要联系作者，比较麻烦，还是另寻他法吧。后来发现了另一个框架 LSP 。（如何开启太极阳，官网有教程，需要借助 Magisk，下文会用到这个工具）\n\n# Use Lsposted ❤️\n\n**方案可行，推荐使用**\n为什么推荐？LSP 侵入性弱，不易被第三方检测，一定程度上能够避免 xposted 防护。\n\n## 注意事项\n\n- BootLoader 解锁将清除设备数据，重要数据请注意备份\n- 此操作需要设备解锁 Bootloader （刷机），若BootLoader 解锁失败，其他操作已无意义，没有继续操作的必要，建议更换设备。\n- 各厂商设备 BootLoader 解锁方式可能不尽相同。\n    - 小米官网仍然开放 BL 解锁工具（建议使用小米手机测试）\n    - 购买第三方解锁工具 UAndroid\n    - OPPO 官方也有‘深度测试’解锁工具，但申请名额有限，审核时间长，不推荐\n\n## 如何使用\n\n以小米手机为例（因为 BL 解锁方便）\n\n**1、设备 Bootloader 解锁**\n\n[官方：申请解锁小米手机](http://www.miui.com/unlock/download.html)\n\n小米的 BL 解锁对设备的以及账号绑定也有要求，比如账号与设备绑定时间等。官网下载得到的可能不是最新版本，请使用最新版本。\n\n**2、下载安装 Magisk**\n\n官网：https://github.com/topjohnwu/Magisk\n\n**3、下载备用 adb-fastboot**\n\n链接：https://mrzzoxo.lanzouw.com/iMbPYz63p6f\n\n**4、准备对应设备型号的刷机包**\n\n小米刷机包：https://mirom.ezbox.idv.tw/phone/\n\n一般建议下载大陆稳定版（若是其他厂商刷机包，自行寻找）\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87a8268965d648df8775781e37f77679~tplv-k3u1fbpfcp-watermark.image?)\n\n**5、刷入 Magisk**\n\n尽量按顺序操作\n\n5.1 从刷机包中解压获取  **boot.img** 文件（若无此文件建议更换刷机包，也可以另寻他法从刷机包中解析获得此文件）\n5.2 打开 Magisk 选择 boot.img 安装补丁，等待刷入完成（此截图是已安装完成的，以实际为准）\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c6b1f76ad8845d98bf1f2c901286ed9~tplv-k3u1fbpfcp-watermark.image?)\n\n5.3 刷入完成，查看日志获得生成的 img 文件\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0d9d3a707544199a1b8e5f5518b4e4f~tplv-k3u1fbpfcp-zoom-1.image)\n\n5.4 复制生成的 img 文件和 boot.img 文件到 adb-fastboot 目录下，打开 打开CMD命令行.bat（若 boot.img 不存在此目录下，刷入 magisk 无效）\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c3c9d8aa38426294d85cfdd38255a4~tplv-k3u1fbpfcp-zoom-1.image)\n\n5.5 设备进入 BootLoader 模式\n    方式一：执行 adb reboot bootloader\n    方式二：关机状态下，同时按住 音量— + 电源键\n\n执行以下命令等待完成，使用命令重启设备；重启后重新打开 magisk 显示版本号表示成功。 \n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0cf7cae60c44815b1127984face396c~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffe997317c794ad08d6c1242a54bf9a5~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b35d48af81574b27bfba0c5eca5cfdc0~tplv-k3u1fbpfcp-zoom-1.image)\n\n**6、刷入 LSPosted**\n\n官网：https://github.com/LSPosed/LSPosed、https://github.com/RikkaApps/Riru/tags\n\n6.1 开启 Zygisk，按提示重启设备\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c329e61e1fc48e5945863ce1a1f8cda~tplv-k3u1fbpfcp-zoom-1.image)\n\n6.2 开启 Zygisk，按提示重启设备\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d948643a1a3f4bf79cb1ee7dd8075ea1~tplv-k3u1fbpfcp-zoom-1.image)\n\n6.3 下载**LSPosted-zygisk**备用（必选）\n\n如果设备支持 Zygisk，ritu、LSPosted-ritu 模块可不需要，建议使用支持 Zygisk 的设备\n\n6.4 打开 Magisk 开始刷入必选模块，按照提示重启设备后显示 Zygisk 是，桌面出现 LSPosted\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8e39c410d444628be03c7f83adaf92a~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b73cb22078b4610a4fac35e369b8eea~tplv-k3u1fbpfcp-zoom-1.image)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ae1ca939964ce68b0e56331bd50b63~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baffbe16b1d04a1899ba2c4caee9b37b~tplv-k3u1fbpfcp-watermark.image?)\n\n**7、安装检测模块**\n\n如果之前没有安装我们的 **合规检测模块**，那么现在要安装啦！！！启动模块，勾选要检测的应用，返回桌面执行应用就可以看日志\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5196bdc80d84b64b8fd752e47285651~tplv-k3u1fbpfcp-watermark.image?)\n\n# 其他\n\n- ⚠️ Android 9 及其以下设备才支持 IMEI 获取，在测试设备选择上需注意\n- [学习网站：XDA Forums](https://forum.xda-developers.com/) 该网站的主要讨论手机系统，并提供相关设备的技术信息、[ROM](https://zh.m.wikipedia.org/wiki/ROM)升级、技术支持、Q＆A\n- [搞机网站：UA手机维修交流 - Powered by Discuz!](https://bbs.gsmua.cn/)\n    可提供 UAndroid 工具，用于各厂商设备 BootLoader 解锁\n    付费工具、也可以账号租用方式使用（专业搞机，某宝也有相关技术服务）\n","slug":"设备信息获取检测","published":1,"lang":"undefined","updated":"2022-09-29T14:59:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qd00177tqp25bcfkjy","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>前言</h1>\n<p>设备的个人信息（例如：联系人信息、短信内容等）属于用户隐私，违规获取个人信息被视为侵犯用户权益；在设备上获取个人信息一般需先获取到相应的权限才能进行获取，例如想获取相册图片，那么需要申请读写权限，用户同意权限申请之后可读取相册图片。应用存在违规获取个人信息的行为，不为罕见，何为违规行为？</p>\n<p>个人理解：</p>\n<ul>\n<li>在用户不知情下获取个人信息。比如，在用户同意隐私政策前获取个人信息</li>\n<li>未向用户明确个人信息使用意图。比如，隐私政策或说明未向用户明确个人信息使用意图</li>\n<li>超范围获取个人信息。比如，一个壁纸 App 申请录音权限</li>\n</ul>\n<p>此前，部分应用存在对用户个人信息违规获取的行为，个人隐私权益保护意识薄弱，违规获取的行为未得到有效解决，直到 2019 年低，工信部发布关于印发《App违法违规收集使用个人信息行为认定方法》通知，应用商店逐渐开始对违规获取行为要求整改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 未公开收集使用规则的行为</span><br><span class=\"line\">- 未明示收集使用个人信息的目的、方式和范围的行为</span><br><span class=\"line\">- 未经用户同意收集个人信息的行为【该点为本文讨论和解决的重点】</span><br><span class=\"line\">- 收集与其提供服务无关的个人信息的行为</span><br><span class=\"line\">- 未经同意向他人提供个人信息的行为</span><br><span class=\"line\">- 未按法律规定提供删除或更正个人信息功能的</span><br><span class=\"line\"></span><br><span class=\"line\">除此之外，国内商店渠道还有其他要求，比如：</span><br><span class=\"line\">- 不允许频繁获取设备信息（IMEI、SSID、AndroidID 等）</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb0f36e7ad9b4293b24fc5afcc4bc7a8~tplv-k3u1fbpfcp-watermark.image?\" alt=\"origin_img_v2_640fd02b-1194-4342-9ed9-200b1e9bf7ag.jpg\"></p>\n<p>以下围绕如何检测应用是否存在<strong>未经用户同意收集个人信息或设备信息</strong>的行为，以及<strong>是否存在频繁获取个人信息或设备信息</strong>的行为。</p>\n<h1>Xposted 模块</h1>\n<h2 id=\"介绍-☕️\">介绍 ☕️</h2>\n<p>该模板编写主要是 Hook 知识点，Hook 作为‘钩子’可以粗略理解为拦截某段代码的执行，并在代码段前后插入监控事件，程序执行此代码段同时也将触发监控事件，将监控事件返回给外层用于进一步处理。个人理解，使用 Hook 工具较为关键的一点就是找到较为准确的 Hook 点。</p>\n<h2 id=\"Hook-框架-🤔\">Hook 框架 🤔</h2>\n<p>Android 上的 Hook 框架，想必很多人都略有耳闻，当年狂热的 <strong>Xposted</strong>，后面编写的检测工具便是基于 Xposted 库，Xposted 模块编写教程在网上是满天飞，这篇文章我觉得描述得比较清晰：<a href=\"https://www.freebuf.com/articles/terminal/189021.html\">新手不要再被误导！这是一篇最新的Xposed模块编写教程</a>。看完引用的文章，我们便知道 xposted 库使用的 hook 模板，检测工具根据模板编写代码，整合多个检测点就可以（比如我需要检测 AndroidId、MAC、IMEI 等的获取）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板</span></span><br><span class=\"line\">XposedHelpers.findAndHookMethod(</span><br><span class=\"line\">className,      <span class=\"comment\">//需要 hook 的类名，因为使用反射，需要类的全限定名</span></span><br><span class=\"line\">methondName,    <span class=\"comment\">//需要 hook 的方法签名</span></span><br><span class=\"line\">params1.class,  <span class=\"comment\">//需要 hook 的方法的参数（参数存在多个，因此这是一个可变参数，参数类型需和方法签名保持一致）</span></span><br><span class=\"line\">params2.class,</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">new</span> XC_MethodHook() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//hook before</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//hook after</span></span><br><span class=\"line\">    &#125;&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"举个栗子🌰\">举个栗子🌰</h2>\n<p>Android Java 层获取 AndroidID 的代码通常是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings.Secure.getString(context.getContentResolver(), </span><br><span class=\"line\">Settings.Secure.ANDROID_ID);</span><br></pre></td></tr></table></figure>\n<p>那么，根据上述的 hook 模版，找到以下参数只值：</p>\n<ul>\n<li>className：android.provider.Settings</li>\n<li>methodName：getString （有参方法，注意区分第二个参数可根据不同的传值获取不同的设备信息）</li>\n<li>params1：ContentResolver.class</li>\n<li>params2：String.class</li>\n</ul>\n<p>由此可得 androidId 获取检测代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测 AndroidID 获取</span></span><br><span class=\"line\">XposedHelpers.findAndHookMethod(</span><br><span class=\"line\"><span class=\"string\">&quot;android.provider.Settings&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;getString&quot;</span>,</span><br><span class=\"line\">ContentResolver.class,</span><br><span class=\"line\">String.class,</span><br><span class=\"line\"><span class=\"keyword\">new</span> XC_MethodHook() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//hook before</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//hook after</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(param == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">//方法参数是一个可变参数，也就是一个列表</span></span><br><span class=\"line\">      Object[] args = param.args;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(args == <span class=\"keyword\">null</span> || args.lenght &lt;= <span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">//getString 方法我们需要知道第二个参数值才有意义，才能继续判断是获取 androidid 还是别的信息</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(args.lenght &gt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">          String params2 = (String)args[<span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"comment\">//注意：public static final String ANDROID_ID = &quot;android_id&quot;;</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"string\">&quot;android_id&quot;</span>.equal(params2))&#123;</span><br><span class=\"line\">              Log.d(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;检测到获取 androidid&quot;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>就这样，检测 androidid 获取的代码就写好了，简单吧。如果你对 xposted 实现感兴趣可以看源码<a href=\"https://github.com/android-hacker/VirtualXposed\">：android-hacker-VirtualXposted</a>。查看 android 源码可知，获取 androidid 的 getString 方法第二个参数可选值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所以，当你 Hook 这个方法时候，不仅仅可以 Hook AndroidID 的获取，也可以检测其他信息的获取情况</span></span><br><span class=\"line\"><span class=\"comment\">//public static final String ANDROID_ID = &quot;android_id&quot;;</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    MOVED_TO_SECURE = <span class=\"keyword\">new</span> HashSet&lt;&gt;(<span class=\"number\">30</span>);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.ADAPTIVE_SLEEP);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.ANDROID_ID);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.HTTP_PROXY);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCATION_PROVIDERS_ALLOWED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCK_BIOMETRIC_WEAK_FLAGS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_ENABLED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_VISIBLE);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOGGING_ID);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_ENABLED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_LAST_UPDATE);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_REDIRECT_URL);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.SETTINGS_CLASSNAME);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.USE_GOOGLE_MAIL);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_NUM_OPEN_NETWORKS_KEPT);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_ON);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_AP_COUNT);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_MAX_AP_CHECKS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_ON);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_COUNT);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_DELAY_MS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// At one time in System, then Global, but now back in Secure</span></span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.INSTALL_NON_MARKET_APPS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"有没有现成的代码-🤔️\">有没有现成的代码 🤔️</h2>\n<p>读到这里，根据上面的 xposted hook 模板，思维发散，你已经具备写一个合规检 Xposted 插件的能力。通常，合规检测插件应该 hook 哪些地方？应该检测哪些信息的获取行为？其实你可以参考渠道审核要求综合考虑，归纳总结，包括但不局限于以下几点：</p>\n<ul>\n<li>androidID 检测</li>\n<li>IMEI 检测</li>\n<li>SSID 检测</li>\n<li>IMSI 检测</li>\n<li>MAC 检测</li>\n<li>OAID 检测【因为获取 IMEI 的问题，现在国内很多都在使用 OAID】</li>\n<li>定位信息读取检测</li>\n<li>联系人列表读取检测</li>\n<li>短信内容检测</li>\n<li>相册读取检测</li>\n<li>软件安装列表读取检测</li>\n<li>应用信息读取检测</li>\n</ul>\n<p>编写合规检测插件可能遇到或需要考虑的问题有哪些？</p>\n<ul>\n<li>应用的多进程环境。避免某些操作重复执行，检测数据重复</li>\n<li>信息获取获取行为数据处理。是否需引入数据持久化框架，对数据存储后统一处理</li>\n<li>Android 平台数据库框架初始化依赖 context。是否需要 hook application 获取 context</li>\n<li>等等（需求驱动开发）</li>\n</ul>\n<h1>Use VirtualXposted 💔</h1>\n<p><strong>方案可行但不推荐，存在一定的局限</strong></p>\n<p>为什么不推荐？有什么局限？需检查应用运行环境以来 VirtualXpostedApp，侵入性强，易被第三方检测到存在 xposted 环境，xposted hook 特征明显，容易被检测。比如某些应用或第三方 SDK 有做 xposted 防护，运行过程中检测到运行环境存在 xposted，可能会做相应处理————终止程序继续运行，不利于检测应用个人信息获取情况。优点是环境准备简单。</p>\n<h2 id=\"如何使用\">如何使用</h2>\n<p>1、下载安装 virtualXposted</p>\n<p><a href=\"https://github.com/android-hacker/VirtualXposed\">android-hacker-VirtualXposted</a></p>\n<p>2、激活 xposted</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca83e472c58447ce84f6eb4f1aad5b2e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b53d5cd381f419ba50e4eea9f9f8a39~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>3、添加模板和待检测应用</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e93823fe3fe14092a287bb6ac95c3310~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39273c5ee0534cc4b705ee3de92d9fc0~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>4、启动模块</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5bc1c3afd294c378d5cb57d7f7dda1b~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/798cac0dc3e2428699a16d74bfab6d44~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7748fbdc0e24f12bc2148383117e9b8~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5622c01867c64155a5cae84c6a57be57~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>最后就是运行应用，查看自定义输出日志。由于 xposted 防护的局限，若不能满足当前需求，还需另寻他法。</p>\n<h1>Use Taichi 💔</h1>\n<p><strong>方案不可行但不推荐，写好的模板无法使用（也可能是我不会用）</strong></p>\n<p>为什么不推荐？写好的检测模板被限制使用，官网：<a href=\"https://github.com/taichi-framework/TaiChi\">https://github.com/taichi-framework/TaiChi</a></p>\n<p>如何使用太极就不过多解释了，这里提下遇到的问题：</p>\n<p><strong>问题一：暂不支持</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ef794ca6102471bb11b702f6f062a1f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><strong>看下官网有对‘暂时不支持’的描述，有以下两种可能：</strong></p>\n<ul>\n<li>当前太极是太极阴模式（有阴、阳两种模式，自行官网了解）</li>\n<li>当前模块不存在白名单中</li>\n</ul>\n<p>暂时没办法，试试把太极激活为‘太极阳’模式，然而呢还是显示暂不支持；猜测是另一种可能，模板不存在白名单中，要加入白名单要联系作者，比较麻烦，还是另寻他法吧。后来发现了另一个框架 LSP 。（如何开启太极阳，官网有教程，需要借助 Magisk，下文会用到这个工具）</p>\n<h1>Use Lsposted ❤️</h1>\n<p><strong>方案可行，推荐使用</strong><br>\n为什么推荐？LSP 侵入性弱，不易被第三方检测，一定程度上能够避免 xposted 防护。</p>\n<h2 id=\"注意事项\">注意事项</h2>\n<ul>\n<li>BootLoader 解锁将清除设备数据，重要数据请注意备份</li>\n<li>此操作需要设备解锁 Bootloader （刷机），若BootLoader 解锁失败，其他操作已无意义，没有继续操作的必要，建议更换设备。</li>\n<li>各厂商设备 BootLoader 解锁方式可能不尽相同。\n<ul>\n<li>小米官网仍然开放 BL 解锁工具（建议使用小米手机测试）</li>\n<li>购买第三方解锁工具 UAndroid</li>\n<li>OPPO 官方也有‘深度测试’解锁工具，但申请名额有限，审核时间长，不推荐</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何使用-2\">如何使用</h2>\n<p>以小米手机为例（因为 BL 解锁方便）</p>\n<p><strong>1、设备 Bootloader 解锁</strong></p>\n<p><a href=\"http://www.miui.com/unlock/download.html\">官方：申请解锁小米手机</a></p>\n<p>小米的 BL 解锁对设备的以及账号绑定也有要求，比如账号与设备绑定时间等。官网下载得到的可能不是最新版本，请使用最新版本。</p>\n<p><strong>2、下载安装 Magisk</strong></p>\n<p>官网：<a href=\"https://github.com/topjohnwu/Magisk\">https://github.com/topjohnwu/Magisk</a></p>\n<p><strong>3、下载备用 adb-fastboot</strong></p>\n<p>链接：<a href=\"https://mrzzoxo.lanzouw.com/iMbPYz63p6f\">https://mrzzoxo.lanzouw.com/iMbPYz63p6f</a></p>\n<p><strong>4、准备对应设备型号的刷机包</strong></p>\n<p>小米刷机包：<a href=\"https://mirom.ezbox.idv.tw/phone/\">https://mirom.ezbox.idv.tw/phone/</a></p>\n<p>一般建议下载大陆稳定版（若是其他厂商刷机包，自行寻找）</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87a8268965d648df8775781e37f77679~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><strong>5、刷入 Magisk</strong></p>\n<p>尽量按顺序操作</p>\n<p>5.1 从刷机包中解压获取  <strong>boot.img</strong> 文件（若无此文件建议更换刷机包，也可以另寻他法从刷机包中解析获得此文件）<br>\n5.2 打开 Magisk 选择 boot.img 安装补丁，等待刷入完成（此截图是已安装完成的，以实际为准）</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c6b1f76ad8845d98bf1f2c901286ed9~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>5.3 刷入完成，查看日志获得生成的 img 文件</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0d9d3a707544199a1b8e5f5518b4e4f~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>5.4 复制生成的 img 文件和 boot.img 文件到 adb-fastboot 目录下，打开 打开CMD命令行.bat（若 boot.img 不存在此目录下，刷入 magisk 无效）</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c3c9d8aa38426294d85cfdd38255a4~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>5.5 设备进入 BootLoader 模式<br>\n方式一：执行 adb reboot bootloader<br>\n方式二：关机状态下，同时按住 音量— + 电源键</p>\n<p>执行以下命令等待完成，使用命令重启设备；重启后重新打开 magisk 显示版本号表示成功。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0cf7cae60c44815b1127984face396c~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffe997317c794ad08d6c1242a54bf9a5~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b35d48af81574b27bfba0c5eca5cfdc0~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><strong>6、刷入 LSPosted</strong></p>\n<p>官网：<a href=\"https://github.com/LSPosed/LSPosed%E3%80%81https://github.com/RikkaApps/Riru/tags\">https://github.com/LSPosed/LSPosed、https://github.com/RikkaApps/Riru/tags</a></p>\n<p>6.1 开启 Zygisk，按提示重启设备</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c329e61e1fc48e5945863ce1a1f8cda~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>6.2 开启 Zygisk，按提示重启设备</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d948643a1a3f4bf79cb1ee7dd8075ea1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>6.3 下载<strong>LSPosted-zygisk</strong>备用（必选）</p>\n<p>如果设备支持 Zygisk，ritu、LSPosted-ritu 模块可不需要，建议使用支持 Zygisk 的设备</p>\n<p>6.4 打开 Magisk 开始刷入必选模块，按照提示重启设备后显示 Zygisk 是，桌面出现 LSPosted</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8e39c410d444628be03c7f83adaf92a~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b73cb22078b4610a4fac35e369b8eea~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ae1ca939964ce68b0e56331bd50b63~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baffbe16b1d04a1899ba2c4caee9b37b~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><strong>7、安装检测模块</strong></p>\n<p>如果之前没有安装我们的 <strong>合规检测模块</strong>，那么现在要安装啦！！！启动模块，勾选要检测的应用，返回桌面执行应用就可以看日志</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5196bdc80d84b64b8fd752e47285651~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h1>其他</h1>\n<ul>\n<li>⚠️ Android 9 及其以下设备才支持 IMEI 获取，在测试设备选择上需注意</li>\n<li><a href=\"https://forum.xda-developers.com/\">学习网站：XDA Forums</a> 该网站的主要讨论手机系统，并提供相关设备的技术信息、<a href=\"https://zh.m.wikipedia.org/wiki/ROM\">ROM</a>升级、技术支持、Q＆A</li>\n<li><a href=\"https://bbs.gsmua.cn/\">搞机网站：UA手机维修交流 - Powered by Discuz!</a><br>\n可提供 UAndroid 工具，用于各厂商设备 BootLoader 解锁<br>\n付费工具、也可以账号租用方式使用（专业搞机，某宝也有相关技术服务）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>前言</h1>\n<p>设备的个人信息（例如：联系人信息、短信内容等）属于用户隐私，违规获取个人信息被视为侵犯用户权益；在设备上获取个人信息一般需先获取到相应的权限才能进行获取，例如想获取相册图片，那么需要申请读写权限，用户同意权限申请之后可读取相册图片。应用存在违规获取个人信息的行为，不为罕见，何为违规行为？</p>\n<p>个人理解：</p>\n<ul>\n<li>在用户不知情下获取个人信息。比如，在用户同意隐私政策前获取个人信息</li>\n<li>未向用户明确个人信息使用意图。比如，隐私政策或说明未向用户明确个人信息使用意图</li>\n<li>超范围获取个人信息。比如，一个壁纸 App 申请录音权限</li>\n</ul>\n<p>此前，部分应用存在对用户个人信息违规获取的行为，个人隐私权益保护意识薄弱，违规获取的行为未得到有效解决，直到 2019 年低，工信部发布关于印发《App违法违规收集使用个人信息行为认定方法》通知，应用商店逐渐开始对违规获取行为要求整改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 未公开收集使用规则的行为</span><br><span class=\"line\">- 未明示收集使用个人信息的目的、方式和范围的行为</span><br><span class=\"line\">- 未经用户同意收集个人信息的行为【该点为本文讨论和解决的重点】</span><br><span class=\"line\">- 收集与其提供服务无关的个人信息的行为</span><br><span class=\"line\">- 未经同意向他人提供个人信息的行为</span><br><span class=\"line\">- 未按法律规定提供删除或更正个人信息功能的</span><br><span class=\"line\"></span><br><span class=\"line\">除此之外，国内商店渠道还有其他要求，比如：</span><br><span class=\"line\">- 不允许频繁获取设备信息（IMEI、SSID、AndroidID 等）</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb0f36e7ad9b4293b24fc5afcc4bc7a8~tplv-k3u1fbpfcp-watermark.image?\" alt=\"origin_img_v2_640fd02b-1194-4342-9ed9-200b1e9bf7ag.jpg\"></p>\n<p>以下围绕如何检测应用是否存在<strong>未经用户同意收集个人信息或设备信息</strong>的行为，以及<strong>是否存在频繁获取个人信息或设备信息</strong>的行为。</p>\n<h1>Xposted 模块</h1>\n<h2 id=\"介绍-☕️\">介绍 ☕️</h2>\n<p>该模板编写主要是 Hook 知识点，Hook 作为‘钩子’可以粗略理解为拦截某段代码的执行，并在代码段前后插入监控事件，程序执行此代码段同时也将触发监控事件，将监控事件返回给外层用于进一步处理。个人理解，使用 Hook 工具较为关键的一点就是找到较为准确的 Hook 点。</p>\n<h2 id=\"Hook-框架-🤔\">Hook 框架 🤔</h2>\n<p>Android 上的 Hook 框架，想必很多人都略有耳闻，当年狂热的 <strong>Xposted</strong>，后面编写的检测工具便是基于 Xposted 库，Xposted 模块编写教程在网上是满天飞，这篇文章我觉得描述得比较清晰：<a href=\"https://www.freebuf.com/articles/terminal/189021.html\">新手不要再被误导！这是一篇最新的Xposed模块编写教程</a>。看完引用的文章，我们便知道 xposted 库使用的 hook 模板，检测工具根据模板编写代码，整合多个检测点就可以（比如我需要检测 AndroidId、MAC、IMEI 等的获取）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板</span></span><br><span class=\"line\">XposedHelpers.findAndHookMethod(</span><br><span class=\"line\">className,      <span class=\"comment\">//需要 hook 的类名，因为使用反射，需要类的全限定名</span></span><br><span class=\"line\">methondName,    <span class=\"comment\">//需要 hook 的方法签名</span></span><br><span class=\"line\">params1.class,  <span class=\"comment\">//需要 hook 的方法的参数（参数存在多个，因此这是一个可变参数，参数类型需和方法签名保持一致）</span></span><br><span class=\"line\">params2.class,</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">new</span> XC_MethodHook() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//hook before</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//hook after</span></span><br><span class=\"line\">    &#125;&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"举个栗子🌰\">举个栗子🌰</h2>\n<p>Android Java 层获取 AndroidID 的代码通常是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings.Secure.getString(context.getContentResolver(), </span><br><span class=\"line\">Settings.Secure.ANDROID_ID);</span><br></pre></td></tr></table></figure>\n<p>那么，根据上述的 hook 模版，找到以下参数只值：</p>\n<ul>\n<li>className：android.provider.Settings</li>\n<li>methodName：getString （有参方法，注意区分第二个参数可根据不同的传值获取不同的设备信息）</li>\n<li>params1：ContentResolver.class</li>\n<li>params2：String.class</li>\n</ul>\n<p>由此可得 androidId 获取检测代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测 AndroidID 获取</span></span><br><span class=\"line\">XposedHelpers.findAndHookMethod(</span><br><span class=\"line\"><span class=\"string\">&quot;android.provider.Settings&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;getString&quot;</span>,</span><br><span class=\"line\">ContentResolver.class,</span><br><span class=\"line\">String.class,</span><br><span class=\"line\"><span class=\"keyword\">new</span> XC_MethodHook() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//hook before</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//hook after</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(param == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">//方法参数是一个可变参数，也就是一个列表</span></span><br><span class=\"line\">      Object[] args = param.args;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(args == <span class=\"keyword\">null</span> || args.lenght &lt;= <span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">//getString 方法我们需要知道第二个参数值才有意义，才能继续判断是获取 androidid 还是别的信息</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(args.lenght &gt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">          String params2 = (String)args[<span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"comment\">//注意：public static final String ANDROID_ID = &quot;android_id&quot;;</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"string\">&quot;android_id&quot;</span>.equal(params2))&#123;</span><br><span class=\"line\">              Log.d(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;检测到获取 androidid&quot;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>就这样，检测 androidid 获取的代码就写好了，简单吧。如果你对 xposted 实现感兴趣可以看源码<a href=\"https://github.com/android-hacker/VirtualXposed\">：android-hacker-VirtualXposted</a>。查看 android 源码可知，获取 androidid 的 getString 方法第二个参数可选值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所以，当你 Hook 这个方法时候，不仅仅可以 Hook AndroidID 的获取，也可以检测其他信息的获取情况</span></span><br><span class=\"line\"><span class=\"comment\">//public static final String ANDROID_ID = &quot;android_id&quot;;</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    MOVED_TO_SECURE = <span class=\"keyword\">new</span> HashSet&lt;&gt;(<span class=\"number\">30</span>);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.ADAPTIVE_SLEEP);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.ANDROID_ID);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.HTTP_PROXY);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCATION_PROVIDERS_ALLOWED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCK_BIOMETRIC_WEAK_FLAGS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_ENABLED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_VISIBLE);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.LOGGING_ID);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_ENABLED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_LAST_UPDATE);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.PARENTAL_CONTROL_REDIRECT_URL);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.SETTINGS_CLASSNAME);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.USE_GOOGLE_MAIL);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_NUM_OPEN_NETWORKS_KEPT);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_ON);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_AP_COUNT);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_MAX_AP_CHECKS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_ON);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_COUNT);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_DELAY_MS);</span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// At one time in System, then Global, but now back in Secure</span></span><br><span class=\"line\">    MOVED_TO_SECURE.add(Secure.INSTALL_NON_MARKET_APPS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"有没有现成的代码-🤔️\">有没有现成的代码 🤔️</h2>\n<p>读到这里，根据上面的 xposted hook 模板，思维发散，你已经具备写一个合规检 Xposted 插件的能力。通常，合规检测插件应该 hook 哪些地方？应该检测哪些信息的获取行为？其实你可以参考渠道审核要求综合考虑，归纳总结，包括但不局限于以下几点：</p>\n<ul>\n<li>androidID 检测</li>\n<li>IMEI 检测</li>\n<li>SSID 检测</li>\n<li>IMSI 检测</li>\n<li>MAC 检测</li>\n<li>OAID 检测【因为获取 IMEI 的问题，现在国内很多都在使用 OAID】</li>\n<li>定位信息读取检测</li>\n<li>联系人列表读取检测</li>\n<li>短信内容检测</li>\n<li>相册读取检测</li>\n<li>软件安装列表读取检测</li>\n<li>应用信息读取检测</li>\n</ul>\n<p>编写合规检测插件可能遇到或需要考虑的问题有哪些？</p>\n<ul>\n<li>应用的多进程环境。避免某些操作重复执行，检测数据重复</li>\n<li>信息获取获取行为数据处理。是否需引入数据持久化框架，对数据存储后统一处理</li>\n<li>Android 平台数据库框架初始化依赖 context。是否需要 hook application 获取 context</li>\n<li>等等（需求驱动开发）</li>\n</ul>\n<h1>Use VirtualXposted 💔</h1>\n<p><strong>方案可行但不推荐，存在一定的局限</strong></p>\n<p>为什么不推荐？有什么局限？需检查应用运行环境以来 VirtualXpostedApp，侵入性强，易被第三方检测到存在 xposted 环境，xposted hook 特征明显，容易被检测。比如某些应用或第三方 SDK 有做 xposted 防护，运行过程中检测到运行环境存在 xposted，可能会做相应处理————终止程序继续运行，不利于检测应用个人信息获取情况。优点是环境准备简单。</p>\n<h2 id=\"如何使用\">如何使用</h2>\n<p>1、下载安装 virtualXposted</p>\n<p><a href=\"https://github.com/android-hacker/VirtualXposed\">android-hacker-VirtualXposted</a></p>\n<p>2、激活 xposted</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca83e472c58447ce84f6eb4f1aad5b2e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b53d5cd381f419ba50e4eea9f9f8a39~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>3、添加模板和待检测应用</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e93823fe3fe14092a287bb6ac95c3310~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39273c5ee0534cc4b705ee3de92d9fc0~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>4、启动模块</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5bc1c3afd294c378d5cb57d7f7dda1b~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/798cac0dc3e2428699a16d74bfab6d44~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7748fbdc0e24f12bc2148383117e9b8~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5622c01867c64155a5cae84c6a57be57~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>最后就是运行应用，查看自定义输出日志。由于 xposted 防护的局限，若不能满足当前需求，还需另寻他法。</p>\n<h1>Use Taichi 💔</h1>\n<p><strong>方案不可行但不推荐，写好的模板无法使用（也可能是我不会用）</strong></p>\n<p>为什么不推荐？写好的检测模板被限制使用，官网：<a href=\"https://github.com/taichi-framework/TaiChi\">https://github.com/taichi-framework/TaiChi</a></p>\n<p>如何使用太极就不过多解释了，这里提下遇到的问题：</p>\n<p><strong>问题一：暂不支持</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ef794ca6102471bb11b702f6f062a1f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><strong>看下官网有对‘暂时不支持’的描述，有以下两种可能：</strong></p>\n<ul>\n<li>当前太极是太极阴模式（有阴、阳两种模式，自行官网了解）</li>\n<li>当前模块不存在白名单中</li>\n</ul>\n<p>暂时没办法，试试把太极激活为‘太极阳’模式，然而呢还是显示暂不支持；猜测是另一种可能，模板不存在白名单中，要加入白名单要联系作者，比较麻烦，还是另寻他法吧。后来发现了另一个框架 LSP 。（如何开启太极阳，官网有教程，需要借助 Magisk，下文会用到这个工具）</p>\n<h1>Use Lsposted ❤️</h1>\n<p><strong>方案可行，推荐使用</strong><br>\n为什么推荐？LSP 侵入性弱，不易被第三方检测，一定程度上能够避免 xposted 防护。</p>\n<h2 id=\"注意事项\">注意事项</h2>\n<ul>\n<li>BootLoader 解锁将清除设备数据，重要数据请注意备份</li>\n<li>此操作需要设备解锁 Bootloader （刷机），若BootLoader 解锁失败，其他操作已无意义，没有继续操作的必要，建议更换设备。</li>\n<li>各厂商设备 BootLoader 解锁方式可能不尽相同。\n<ul>\n<li>小米官网仍然开放 BL 解锁工具（建议使用小米手机测试）</li>\n<li>购买第三方解锁工具 UAndroid</li>\n<li>OPPO 官方也有‘深度测试’解锁工具，但申请名额有限，审核时间长，不推荐</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何使用-2\">如何使用</h2>\n<p>以小米手机为例（因为 BL 解锁方便）</p>\n<p><strong>1、设备 Bootloader 解锁</strong></p>\n<p><a href=\"http://www.miui.com/unlock/download.html\">官方：申请解锁小米手机</a></p>\n<p>小米的 BL 解锁对设备的以及账号绑定也有要求，比如账号与设备绑定时间等。官网下载得到的可能不是最新版本，请使用最新版本。</p>\n<p><strong>2、下载安装 Magisk</strong></p>\n<p>官网：<a href=\"https://github.com/topjohnwu/Magisk\">https://github.com/topjohnwu/Magisk</a></p>\n<p><strong>3、下载备用 adb-fastboot</strong></p>\n<p>链接：<a href=\"https://mrzzoxo.lanzouw.com/iMbPYz63p6f\">https://mrzzoxo.lanzouw.com/iMbPYz63p6f</a></p>\n<p><strong>4、准备对应设备型号的刷机包</strong></p>\n<p>小米刷机包：<a href=\"https://mirom.ezbox.idv.tw/phone/\">https://mirom.ezbox.idv.tw/phone/</a></p>\n<p>一般建议下载大陆稳定版（若是其他厂商刷机包，自行寻找）</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87a8268965d648df8775781e37f77679~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><strong>5、刷入 Magisk</strong></p>\n<p>尽量按顺序操作</p>\n<p>5.1 从刷机包中解压获取  <strong>boot.img</strong> 文件（若无此文件建议更换刷机包，也可以另寻他法从刷机包中解析获得此文件）<br>\n5.2 打开 Magisk 选择 boot.img 安装补丁，等待刷入完成（此截图是已安装完成的，以实际为准）</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c6b1f76ad8845d98bf1f2c901286ed9~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>5.3 刷入完成，查看日志获得生成的 img 文件</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0d9d3a707544199a1b8e5f5518b4e4f~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>5.4 复制生成的 img 文件和 boot.img 文件到 adb-fastboot 目录下，打开 打开CMD命令行.bat（若 boot.img 不存在此目录下，刷入 magisk 无效）</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c3c9d8aa38426294d85cfdd38255a4~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>5.5 设备进入 BootLoader 模式<br>\n方式一：执行 adb reboot bootloader<br>\n方式二：关机状态下，同时按住 音量— + 电源键</p>\n<p>执行以下命令等待完成，使用命令重启设备；重启后重新打开 magisk 显示版本号表示成功。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0cf7cae60c44815b1127984face396c~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffe997317c794ad08d6c1242a54bf9a5~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b35d48af81574b27bfba0c5eca5cfdc0~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><strong>6、刷入 LSPosted</strong></p>\n<p>官网：<a href=\"https://github.com/LSPosed/LSPosed%E3%80%81https://github.com/RikkaApps/Riru/tags\">https://github.com/LSPosed/LSPosed、https://github.com/RikkaApps/Riru/tags</a></p>\n<p>6.1 开启 Zygisk，按提示重启设备</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c329e61e1fc48e5945863ce1a1f8cda~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>6.2 开启 Zygisk，按提示重启设备</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d948643a1a3f4bf79cb1ee7dd8075ea1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>6.3 下载<strong>LSPosted-zygisk</strong>备用（必选）</p>\n<p>如果设备支持 Zygisk，ritu、LSPosted-ritu 模块可不需要，建议使用支持 Zygisk 的设备</p>\n<p>6.4 打开 Magisk 开始刷入必选模块，按照提示重启设备后显示 Zygisk 是，桌面出现 LSPosted</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8e39c410d444628be03c7f83adaf92a~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b73cb22078b4610a4fac35e369b8eea~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ae1ca939964ce68b0e56331bd50b63~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baffbe16b1d04a1899ba2c4caee9b37b~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><strong>7、安装检测模块</strong></p>\n<p>如果之前没有安装我们的 <strong>合规检测模块</strong>，那么现在要安装啦！！！启动模块，勾选要检测的应用，返回桌面执行应用就可以看日志</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5196bdc80d84b64b8fd752e47285651~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h1>其他</h1>\n<ul>\n<li>⚠️ Android 9 及其以下设备才支持 IMEI 获取，在测试设备选择上需注意</li>\n<li><a href=\"https://forum.xda-developers.com/\">学习网站：XDA Forums</a> 该网站的主要讨论手机系统，并提供相关设备的技术信息、<a href=\"https://zh.m.wikipedia.org/wiki/ROM\">ROM</a>升级、技术支持、Q＆A</li>\n<li><a href=\"https://bbs.gsmua.cn/\">搞机网站：UA手机维修交流 - Powered by Discuz!</a><br>\n可提供 UAndroid 工具，用于各厂商设备 BootLoader 解锁<br>\n付费工具、也可以账号租用方式使用（专业搞机，某宝也有相关技术服务）</li>\n</ul>\n"},{"title":"了解令人抓挠的 Native 崩溃","catalog":true,"date":"2022-10-16T03:57:27.000Z","subtitle":"Java 崩溃调用栈等很清晰易解决，但是遇到 Native 崩溃时呢","header-img":"/img/2210/page-native.jpg","sticky":14,"_content":"\n\n# 关于崩溃\n\nAndroid 崩溃大致分为两个部分，一是 Java 崩溃，其二是 Native 崩溃。\nJava 崩溃还是比较好解决的，但要是遇到 native 崩溃就没那么容易，像我遇到非法地址访问（空指针）、触发相应 signal 信号杀死进程。\n\n为啥 native 崩溃不易解决呢？\n- 崩溃上下文不全\n- 出错信息模糊，较难分析\n- 难以捕获\n\n我们发现，在日常开发中常常遇到的 native 崩溃是信号机制发出的杀死进程现象，比如 signal 9、signal 11 等。那么我们了解下信号机制是怎么样的？\n\n## 信号处理\n**1、信号接受：**\n内核代理接收信号，内核收到信号之后会将其放入进程的队列，同时向进程发送中断陷入内核态。\n\n**2、信号检测：**\n陷入内核态后，何时会触发信号检测？\n- 进程从内核态切换到用户态时\n- 进程在内核态中从睡眠状态被唤醒时\n\n**3、信号处理：**\n信号处理函数处于用户态，调用处理函数前内核会将当前内核栈备份拷贝到用户栈，接着进程在用户态执行相应信号处理函数。\n处理函数执行完后，进程返回内核态检查是否还有信号需处理？\n- 若所有信号都处理完毕：恢复内核栈（把用户栈的备份拷贝回来），进程返回用户态\n- 否则重复步骤，继续处理信号\n\n> 常见信号类型：略\n\n--- \n\n为了能更好地分析 native 崩溃需要注意什么？`保留编译时符号信息`\nc/cpp 代码编译时，保留符号信息（符号表）供后续使用，客户端收集崩溃信息并上传服务器，服务器读取上报崩溃数据并查找符号信息（符号解析）进一步处理数据并生成清晰易懂的崩溃调用栈。\n\n## 分析崩溃\n\n**1、基本信息：**\n发生崩溃时，通常根据 logcat 能够知道崩溃相关的基本信息，进程名称、崩溃所在线程、系统信息、崩溃栈、内存信息、信号（如果有）等。\n\n**2、重点分析：**\n崩溃分析无非是分析崩溃现场的相关日志，如果没有现场比较完整的日志，可以通过复现、复现、复现获取崩溃现场日志。native 崩溃可以注意 logcat 是否存在相关常见关键词`signal、code、process name、fault addr、kill、tracker 等`。\n\n有时候崩溃现场不易复现，很难获取到崩溃现场调用栈，我知道如果是 Java 层崩溃可以通过 hook（xposted） 然后通过自动化测试运行程序一段时间当再次触发崩溃时可以获取，但如果是 native 崩溃是否也有成熟可用的 hook 技术可以实现呢？","source":"_posts/undefined/解决不完的Native崩溃.md","raw":"---\ntitle: 了解令人抓挠的 Native 崩溃\ncatalog: true\ndate: 2022-10-16 11:57:27\nsubtitle: Java 崩溃调用栈等很清晰易解决，但是遇到 Native 崩溃时呢\nheader-img: /img/2210/page-native.jpg\ntags: Native\ncategories:\nsticky: 14\n---\n\n\n# 关于崩溃\n\nAndroid 崩溃大致分为两个部分，一是 Java 崩溃，其二是 Native 崩溃。\nJava 崩溃还是比较好解决的，但要是遇到 native 崩溃就没那么容易，像我遇到非法地址访问（空指针）、触发相应 signal 信号杀死进程。\n\n为啥 native 崩溃不易解决呢？\n- 崩溃上下文不全\n- 出错信息模糊，较难分析\n- 难以捕获\n\n我们发现，在日常开发中常常遇到的 native 崩溃是信号机制发出的杀死进程现象，比如 signal 9、signal 11 等。那么我们了解下信号机制是怎么样的？\n\n## 信号处理\n**1、信号接受：**\n内核代理接收信号，内核收到信号之后会将其放入进程的队列，同时向进程发送中断陷入内核态。\n\n**2、信号检测：**\n陷入内核态后，何时会触发信号检测？\n- 进程从内核态切换到用户态时\n- 进程在内核态中从睡眠状态被唤醒时\n\n**3、信号处理：**\n信号处理函数处于用户态，调用处理函数前内核会将当前内核栈备份拷贝到用户栈，接着进程在用户态执行相应信号处理函数。\n处理函数执行完后，进程返回内核态检查是否还有信号需处理？\n- 若所有信号都处理完毕：恢复内核栈（把用户栈的备份拷贝回来），进程返回用户态\n- 否则重复步骤，继续处理信号\n\n> 常见信号类型：略\n\n--- \n\n为了能更好地分析 native 崩溃需要注意什么？`保留编译时符号信息`\nc/cpp 代码编译时，保留符号信息（符号表）供后续使用，客户端收集崩溃信息并上传服务器，服务器读取上报崩溃数据并查找符号信息（符号解析）进一步处理数据并生成清晰易懂的崩溃调用栈。\n\n## 分析崩溃\n\n**1、基本信息：**\n发生崩溃时，通常根据 logcat 能够知道崩溃相关的基本信息，进程名称、崩溃所在线程、系统信息、崩溃栈、内存信息、信号（如果有）等。\n\n**2、重点分析：**\n崩溃分析无非是分析崩溃现场的相关日志，如果没有现场比较完整的日志，可以通过复现、复现、复现获取崩溃现场日志。native 崩溃可以注意 logcat 是否存在相关常见关键词`signal、code、process name、fault addr、kill、tracker 等`。\n\n有时候崩溃现场不易复现，很难获取到崩溃现场调用栈，我知道如果是 Java 层崩溃可以通过 hook（xposted） 然后通过自动化测试运行程序一段时间当再次触发崩溃时可以获取，但如果是 native 崩溃是否也有成熟可用的 hook 技术可以实现呢？","slug":"解决不完的Native崩溃","published":1,"lang":"undefined","updated":"2022-10-16T03:57:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qd001a7tqp36t51ej5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>关于崩溃</h1>\n<p>Android 崩溃大致分为两个部分，一是 Java 崩溃，其二是 Native 崩溃。<br>\nJava 崩溃还是比较好解决的，但要是遇到 native 崩溃就没那么容易，像我遇到非法地址访问（空指针）、触发相应 signal 信号杀死进程。</p>\n<p>为啥 native 崩溃不易解决呢？</p>\n<ul>\n<li>崩溃上下文不全</li>\n<li>出错信息模糊，较难分析</li>\n<li>难以捕获</li>\n</ul>\n<p>我们发现，在日常开发中常常遇到的 native 崩溃是信号机制发出的杀死进程现象，比如 signal 9、signal 11 等。那么我们了解下信号机制是怎么样的？</p>\n<h2 id=\"信号处理\">信号处理</h2>\n<p><strong>1、信号接受：</strong><br>\n内核代理接收信号，内核收到信号之后会将其放入进程的队列，同时向进程发送中断陷入内核态。</p>\n<p><strong>2、信号检测：</strong><br>\n陷入内核态后，何时会触发信号检测？</p>\n<ul>\n<li>进程从内核态切换到用户态时</li>\n<li>进程在内核态中从睡眠状态被唤醒时</li>\n</ul>\n<p><strong>3、信号处理：</strong><br>\n信号处理函数处于用户态，调用处理函数前内核会将当前内核栈备份拷贝到用户栈，接着进程在用户态执行相应信号处理函数。<br>\n处理函数执行完后，进程返回内核态检查是否还有信号需处理？</p>\n<ul>\n<li>若所有信号都处理完毕：恢复内核栈（把用户栈的备份拷贝回来），进程返回用户态</li>\n<li>否则重复步骤，继续处理信号</li>\n</ul>\n<blockquote>\n<p>常见信号类型：略</p>\n</blockquote>\n<hr>\n<p>为了能更好地分析 native 崩溃需要注意什么？<code>保留编译时符号信息</code><br>\nc/cpp 代码编译时，保留符号信息（符号表）供后续使用，客户端收集崩溃信息并上传服务器，服务器读取上报崩溃数据并查找符号信息（符号解析）进一步处理数据并生成清晰易懂的崩溃调用栈。</p>\n<h2 id=\"分析崩溃\">分析崩溃</h2>\n<p><strong>1、基本信息：</strong><br>\n发生崩溃时，通常根据 logcat 能够知道崩溃相关的基本信息，进程名称、崩溃所在线程、系统信息、崩溃栈、内存信息、信号（如果有）等。</p>\n<p><strong>2、重点分析：</strong><br>\n崩溃分析无非是分析崩溃现场的相关日志，如果没有现场比较完整的日志，可以通过复现、复现、复现获取崩溃现场日志。native 崩溃可以注意 logcat 是否存在相关常见关键词<code>signal、code、process name、fault addr、kill、tracker 等</code>。</p>\n<p>有时候崩溃现场不易复现，很难获取到崩溃现场调用栈，我知道如果是 Java 层崩溃可以通过 hook（xposted） 然后通过自动化测试运行程序一段时间当再次触发崩溃时可以获取，但如果是 native 崩溃是否也有成熟可用的 hook 技术可以实现呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>关于崩溃</h1>\n<p>Android 崩溃大致分为两个部分，一是 Java 崩溃，其二是 Native 崩溃。<br>\nJava 崩溃还是比较好解决的，但要是遇到 native 崩溃就没那么容易，像我遇到非法地址访问（空指针）、触发相应 signal 信号杀死进程。</p>\n<p>为啥 native 崩溃不易解决呢？</p>\n<ul>\n<li>崩溃上下文不全</li>\n<li>出错信息模糊，较难分析</li>\n<li>难以捕获</li>\n</ul>\n<p>我们发现，在日常开发中常常遇到的 native 崩溃是信号机制发出的杀死进程现象，比如 signal 9、signal 11 等。那么我们了解下信号机制是怎么样的？</p>\n<h2 id=\"信号处理\">信号处理</h2>\n<p><strong>1、信号接受：</strong><br>\n内核代理接收信号，内核收到信号之后会将其放入进程的队列，同时向进程发送中断陷入内核态。</p>\n<p><strong>2、信号检测：</strong><br>\n陷入内核态后，何时会触发信号检测？</p>\n<ul>\n<li>进程从内核态切换到用户态时</li>\n<li>进程在内核态中从睡眠状态被唤醒时</li>\n</ul>\n<p><strong>3、信号处理：</strong><br>\n信号处理函数处于用户态，调用处理函数前内核会将当前内核栈备份拷贝到用户栈，接着进程在用户态执行相应信号处理函数。<br>\n处理函数执行完后，进程返回内核态检查是否还有信号需处理？</p>\n<ul>\n<li>若所有信号都处理完毕：恢复内核栈（把用户栈的备份拷贝回来），进程返回用户态</li>\n<li>否则重复步骤，继续处理信号</li>\n</ul>\n<blockquote>\n<p>常见信号类型：略</p>\n</blockquote>\n<hr>\n<p>为了能更好地分析 native 崩溃需要注意什么？<code>保留编译时符号信息</code><br>\nc/cpp 代码编译时，保留符号信息（符号表）供后续使用，客户端收集崩溃信息并上传服务器，服务器读取上报崩溃数据并查找符号信息（符号解析）进一步处理数据并生成清晰易懂的崩溃调用栈。</p>\n<h2 id=\"分析崩溃\">分析崩溃</h2>\n<p><strong>1、基本信息：</strong><br>\n发生崩溃时，通常根据 logcat 能够知道崩溃相关的基本信息，进程名称、崩溃所在线程、系统信息、崩溃栈、内存信息、信号（如果有）等。</p>\n<p><strong>2、重点分析：</strong><br>\n崩溃分析无非是分析崩溃现场的相关日志，如果没有现场比较完整的日志，可以通过复现、复现、复现获取崩溃现场日志。native 崩溃可以注意 logcat 是否存在相关常见关键词<code>signal、code、process name、fault addr、kill、tracker 等</code>。</p>\n<p>有时候崩溃现场不易复现，很难获取到崩溃现场调用栈，我知道如果是 Java 层崩溃可以通过 hook（xposted） 然后通过自动化测试运行程序一段时间当再次触发崩溃时可以获取，但如果是 native 崩溃是否也有成熟可用的 hook 技术可以实现呢？</p>\n"},{"title":"我的 Google 记录","catalog":true,"date":"2022-10-15T04:27:58.000Z","subtitle":"工欲善其事，必先利其器","header-img":"/img/2210/mine_bookmark.jpg","sticky":12,"_content":"\n最近更新时间：2022/10/15  20:34\n\n\n# Source code\n> Android 进阶也好，看看源码真的很好，虽然它有时是枯燥的\n\n- [官方 Android 源码](https://android.googlesource.com/platform/)\n- [Android 源码 - AospXref ](http://aospxref.com)\n\n\n# Github pages \n> 我不会造轮子，但希望对此有点了解\n\n- [工具类 AndroidUtilCode](https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md)\n- [字节码编辑工具 Recaf](https://github.com/Col-E/Recaf)\n- [工具 smali](https://github.com/JesusFreke/smali)\n- [搭建本地 Json Server](https://github.com/typicode/json-server)\n- [超级权限 Magisk](https://github.com/topjohnwu/Magisk)\n- [字节码操作库 ASM](https://gitlab.ow2.org/asm/asm)\n- [你也可编写 hook Xposted](https://github.com/asLody/SandHook)\n- [超级权限 VitualXposted](https://github.com/android-hacker/VirtualXposed)\n- [Unity 资源修改 UABE](https://github.com/SeriousCache/UABE)\n- [文字识别 Android tess-tow](https://github.com/rmtheis/tess-two)\n- [动画 Android lottie](https://lottiefiles.com/search?q=file%20conversion&category=animations&type=free)\n- [dex2jar 转换](https://github.com/pxb1988/dex2jar)\n- [jadx](https://github.com/skylot/jadx)\n- [内核 epic](https://github.com/tiann/epic/blob/master/README_cn.md)\n- [你也可以 hook LSPosted](https://github.com/LSPosed/LSPosed)\n- [dex 控制流混淆 - BlackObfuscator](https://github.com/Familyye/BlackObfuscator)\n\n\n# Android base\n> 万丈高楼平地起，辉煌只能靠自己\n\n- [Android 基础知识](https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode)\n- [玩 Android](https://www.wanandroid.com)\n- [官网知识点](https://developer.android.com/training/system-ui/immersive?hl=zh-cn)\n- [Android 相关章节](https://github.com/AndroidAdvanceWithGeektime)\n\n\n# Big guy blogs\n> 阅读不仅可以增长知识，也能开阔视野\n\n- [Gityuan](http://gityuan.com)：Android 源码\n- [Weishu](https://weishu.me)：Android xposted\n- [Vane](http://vanelst.site)：Android 源码\n- [Yorek](https://blog.yorek.xyz)：Android\n- [JAKE](https://jakewharton.com/blog/) ：纯英文\n\n# Java base\n> 要学的不仅仅是 Java 吧\n\n- [官网文档 JVM 指令](https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-2.html)\n- [zip 文件格式](https://thismj.cn/2019/02/14/qian-xi-zip-ge-shi/)\n- [官网 JVM](https://docs.oracle.com/javase/specs/jvms/se11/html/index.html)\n\n\n# Reverse knowledge\n> 逆行者，也可以很美\n\n- [吾爱破解](https://www.52pojie.cn)\n- [安装包分析 - 魔盾安全](https://www.maldun.com)\n- [安装包报毒分析 - Virustotal](https://www.virustotal.com/gui/home/upload)\n- [安装包反编译分析 - 摸瓜](https://mogua.co)\n- [逆向基础知识](https://github.com/crifan/android_app_security_crack)\n- [安装包反编译成 Android 工程 - Faker](https://github.com/Efaker/FakerAndroid)\n\n\n# Others\n> 知识的深度是要的，但请你也不要忘记了知识广度的重要性\n\n## Image\n- [免费正版高清图片](https://pixabay.com/zh/)\n- [4K 彼岸图网](http://pic.netbian.com)\n- [消除图片背景](https://www.remove.bg/zh/upload)\n\n## Log\n- [在线字符个数统计](https://www.eteste.com)\n- [在线日志过滤](https://tilipa.zlsam.com/#/tool?id=199&name=日志分析工具)\n","source":"_posts/undefined/我的工具.md","raw":"---\ntitle: 我的 Google 记录\ncatalog: true\ndate: 2022-10-15 12:27:58\nsubtitle: 工欲善其事，必先利其器\nheader-img: /img/2210/mine_bookmark.jpg\ntags: 工具\ncategories:\nsticky: 12\n---\n\n最近更新时间：2022/10/15  20:34\n\n\n# Source code\n> Android 进阶也好，看看源码真的很好，虽然它有时是枯燥的\n\n- [官方 Android 源码](https://android.googlesource.com/platform/)\n- [Android 源码 - AospXref ](http://aospxref.com)\n\n\n# Github pages \n> 我不会造轮子，但希望对此有点了解\n\n- [工具类 AndroidUtilCode](https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md)\n- [字节码编辑工具 Recaf](https://github.com/Col-E/Recaf)\n- [工具 smali](https://github.com/JesusFreke/smali)\n- [搭建本地 Json Server](https://github.com/typicode/json-server)\n- [超级权限 Magisk](https://github.com/topjohnwu/Magisk)\n- [字节码操作库 ASM](https://gitlab.ow2.org/asm/asm)\n- [你也可编写 hook Xposted](https://github.com/asLody/SandHook)\n- [超级权限 VitualXposted](https://github.com/android-hacker/VirtualXposed)\n- [Unity 资源修改 UABE](https://github.com/SeriousCache/UABE)\n- [文字识别 Android tess-tow](https://github.com/rmtheis/tess-two)\n- [动画 Android lottie](https://lottiefiles.com/search?q=file%20conversion&category=animations&type=free)\n- [dex2jar 转换](https://github.com/pxb1988/dex2jar)\n- [jadx](https://github.com/skylot/jadx)\n- [内核 epic](https://github.com/tiann/epic/blob/master/README_cn.md)\n- [你也可以 hook LSPosted](https://github.com/LSPosed/LSPosed)\n- [dex 控制流混淆 - BlackObfuscator](https://github.com/Familyye/BlackObfuscator)\n\n\n# Android base\n> 万丈高楼平地起，辉煌只能靠自己\n\n- [Android 基础知识](https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode)\n- [玩 Android](https://www.wanandroid.com)\n- [官网知识点](https://developer.android.com/training/system-ui/immersive?hl=zh-cn)\n- [Android 相关章节](https://github.com/AndroidAdvanceWithGeektime)\n\n\n# Big guy blogs\n> 阅读不仅可以增长知识，也能开阔视野\n\n- [Gityuan](http://gityuan.com)：Android 源码\n- [Weishu](https://weishu.me)：Android xposted\n- [Vane](http://vanelst.site)：Android 源码\n- [Yorek](https://blog.yorek.xyz)：Android\n- [JAKE](https://jakewharton.com/blog/) ：纯英文\n\n# Java base\n> 要学的不仅仅是 Java 吧\n\n- [官网文档 JVM 指令](https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-2.html)\n- [zip 文件格式](https://thismj.cn/2019/02/14/qian-xi-zip-ge-shi/)\n- [官网 JVM](https://docs.oracle.com/javase/specs/jvms/se11/html/index.html)\n\n\n# Reverse knowledge\n> 逆行者，也可以很美\n\n- [吾爱破解](https://www.52pojie.cn)\n- [安装包分析 - 魔盾安全](https://www.maldun.com)\n- [安装包报毒分析 - Virustotal](https://www.virustotal.com/gui/home/upload)\n- [安装包反编译分析 - 摸瓜](https://mogua.co)\n- [逆向基础知识](https://github.com/crifan/android_app_security_crack)\n- [安装包反编译成 Android 工程 - Faker](https://github.com/Efaker/FakerAndroid)\n\n\n# Others\n> 知识的深度是要的，但请你也不要忘记了知识广度的重要性\n\n## Image\n- [免费正版高清图片](https://pixabay.com/zh/)\n- [4K 彼岸图网](http://pic.netbian.com)\n- [消除图片背景](https://www.remove.bg/zh/upload)\n\n## Log\n- [在线字符个数统计](https://www.eteste.com)\n- [在线日志过滤](https://tilipa.zlsam.com/#/tool?id=199&name=日志分析工具)\n","slug":"我的工具","published":1,"lang":"undefined","updated":"2022-10-15T04:27:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9lf56qe001c7tqp7efs4zmn","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>最近更新时间：2022/10/15  20:34</p>\n<h1>Source code</h1>\n<blockquote>\n<p>Android 进阶也好，看看源码真的很好，虽然它有时是枯燥的</p>\n</blockquote>\n<ul>\n<li><a href=\"https://android.googlesource.com/platform/\">官方 Android 源码</a></li>\n<li><a href=\"http://aospxref.com\">Android 源码 - AospXref </a></li>\n</ul>\n<h1>Github pages</h1>\n<blockquote>\n<p>我不会造轮子，但希望对此有点了解</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md\">工具类 AndroidUtilCode</a></li>\n<li><a href=\"https://github.com/Col-E/Recaf\">字节码编辑工具 Recaf</a></li>\n<li><a href=\"https://github.com/JesusFreke/smali\">工具 smali</a></li>\n<li><a href=\"https://github.com/typicode/json-server\">搭建本地 Json Server</a></li>\n<li><a href=\"https://github.com/topjohnwu/Magisk\">超级权限 Magisk</a></li>\n<li><a href=\"https://gitlab.ow2.org/asm/asm\">字节码操作库 ASM</a></li>\n<li><a href=\"https://github.com/asLody/SandHook\">你也可编写 hook Xposted</a></li>\n<li><a href=\"https://github.com/android-hacker/VirtualXposed\">超级权限 VitualXposted</a></li>\n<li><a href=\"https://github.com/SeriousCache/UABE\">Unity 资源修改 UABE</a></li>\n<li><a href=\"https://github.com/rmtheis/tess-two\">文字识别 Android tess-tow</a></li>\n<li><a href=\"https://lottiefiles.com/search?q=file%20conversion&amp;category=animations&amp;type=free\">动画 Android lottie</a></li>\n<li><a href=\"https://github.com/pxb1988/dex2jar\">dex2jar 转换</a></li>\n<li><a href=\"https://github.com/skylot/jadx\">jadx</a></li>\n<li><a href=\"https://github.com/tiann/epic/blob/master/README_cn.md\">内核 epic</a></li>\n<li><a href=\"https://github.com/LSPosed/LSPosed\">你也可以 hook LSPosted</a></li>\n<li><a href=\"https://github.com/Familyye/BlackObfuscator\">dex 控制流混淆 - BlackObfuscator</a></li>\n</ul>\n<h1>Android base</h1>\n<blockquote>\n<p>万丈高楼平地起，辉煌只能靠自己</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode\">Android 基础知识</a></li>\n<li><a href=\"https://www.wanandroid.com\">玩 Android</a></li>\n<li><a href=\"https://developer.android.com/training/system-ui/immersive?hl=zh-cn\">官网知识点</a></li>\n<li><a href=\"https://github.com/AndroidAdvanceWithGeektime\">Android 相关章节</a></li>\n</ul>\n<h1>Big guy blogs</h1>\n<blockquote>\n<p>阅读不仅可以增长知识，也能开阔视野</p>\n</blockquote>\n<ul>\n<li><a href=\"http://gityuan.com\">Gityuan</a>：Android 源码</li>\n<li><a href=\"https://weishu.me\">Weishu</a>：Android xposted</li>\n<li><a href=\"http://vanelst.site\">Vane</a>：Android 源码</li>\n<li><a href=\"https://blog.yorek.xyz\">Yorek</a>：Android</li>\n<li><a href=\"https://jakewharton.com/blog/\">JAKE</a> ：纯英文</li>\n</ul>\n<h1>Java base</h1>\n<blockquote>\n<p>要学的不仅仅是 Java 吧</p>\n</blockquote>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-2.html\">官网文档 JVM 指令</a></li>\n<li><a href=\"https://thismj.cn/2019/02/14/qian-xi-zip-ge-shi/\">zip 文件格式</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jvms/se11/html/index.html\">官网 JVM</a></li>\n</ul>\n<h1>Reverse knowledge</h1>\n<blockquote>\n<p>逆行者，也可以很美</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.52pojie.cn\">吾爱破解</a></li>\n<li><a href=\"https://www.maldun.com\">安装包分析 - 魔盾安全</a></li>\n<li><a href=\"https://www.virustotal.com/gui/home/upload\">安装包报毒分析 - Virustotal</a></li>\n<li><a href=\"https://mogua.co\">安装包反编译分析 - 摸瓜</a></li>\n<li><a href=\"https://github.com/crifan/android_app_security_crack\">逆向基础知识</a></li>\n<li><a href=\"https://github.com/Efaker/FakerAndroid\">安装包反编译成 Android 工程 - Faker</a></li>\n</ul>\n<h1>Others</h1>\n<blockquote>\n<p>知识的深度是要的，但请你也不要忘记了知识广度的重要性</p>\n</blockquote>\n<h2 id=\"Image\">Image</h2>\n<ul>\n<li><a href=\"https://pixabay.com/zh/\">免费正版高清图片</a></li>\n<li><a href=\"http://pic.netbian.com\">4K 彼岸图网</a></li>\n<li><a href=\"https://www.remove.bg/zh/upload\">消除图片背景</a></li>\n</ul>\n<h2 id=\"Log\">Log</h2>\n<ul>\n<li><a href=\"https://www.eteste.com\">在线字符个数统计</a></li>\n<li><a href=\"https://tilipa.zlsam.com/#/tool?id=199&amp;name=%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7\">在线日志过滤</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>最近更新时间：2022/10/15  20:34</p>\n<h1>Source code</h1>\n<blockquote>\n<p>Android 进阶也好，看看源码真的很好，虽然它有时是枯燥的</p>\n</blockquote>\n<ul>\n<li><a href=\"https://android.googlesource.com/platform/\">官方 Android 源码</a></li>\n<li><a href=\"http://aospxref.com\">Android 源码 - AospXref </a></li>\n</ul>\n<h1>Github pages</h1>\n<blockquote>\n<p>我不会造轮子，但希望对此有点了解</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md\">工具类 AndroidUtilCode</a></li>\n<li><a href=\"https://github.com/Col-E/Recaf\">字节码编辑工具 Recaf</a></li>\n<li><a href=\"https://github.com/JesusFreke/smali\">工具 smali</a></li>\n<li><a href=\"https://github.com/typicode/json-server\">搭建本地 Json Server</a></li>\n<li><a href=\"https://github.com/topjohnwu/Magisk\">超级权限 Magisk</a></li>\n<li><a href=\"https://gitlab.ow2.org/asm/asm\">字节码操作库 ASM</a></li>\n<li><a href=\"https://github.com/asLody/SandHook\">你也可编写 hook Xposted</a></li>\n<li><a href=\"https://github.com/android-hacker/VirtualXposed\">超级权限 VitualXposted</a></li>\n<li><a href=\"https://github.com/SeriousCache/UABE\">Unity 资源修改 UABE</a></li>\n<li><a href=\"https://github.com/rmtheis/tess-two\">文字识别 Android tess-tow</a></li>\n<li><a href=\"https://lottiefiles.com/search?q=file%20conversion&amp;category=animations&amp;type=free\">动画 Android lottie</a></li>\n<li><a href=\"https://github.com/pxb1988/dex2jar\">dex2jar 转换</a></li>\n<li><a href=\"https://github.com/skylot/jadx\">jadx</a></li>\n<li><a href=\"https://github.com/tiann/epic/blob/master/README_cn.md\">内核 epic</a></li>\n<li><a href=\"https://github.com/LSPosed/LSPosed\">你也可以 hook LSPosted</a></li>\n<li><a href=\"https://github.com/Familyye/BlackObfuscator\">dex 控制流混淆 - BlackObfuscator</a></li>\n</ul>\n<h1>Android base</h1>\n<blockquote>\n<p>万丈高楼平地起，辉煌只能靠自己</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode\">Android 基础知识</a></li>\n<li><a href=\"https://www.wanandroid.com\">玩 Android</a></li>\n<li><a href=\"https://developer.android.com/training/system-ui/immersive?hl=zh-cn\">官网知识点</a></li>\n<li><a href=\"https://github.com/AndroidAdvanceWithGeektime\">Android 相关章节</a></li>\n</ul>\n<h1>Big guy blogs</h1>\n<blockquote>\n<p>阅读不仅可以增长知识，也能开阔视野</p>\n</blockquote>\n<ul>\n<li><a href=\"http://gityuan.com\">Gityuan</a>：Android 源码</li>\n<li><a href=\"https://weishu.me\">Weishu</a>：Android xposted</li>\n<li><a href=\"http://vanelst.site\">Vane</a>：Android 源码</li>\n<li><a href=\"https://blog.yorek.xyz\">Yorek</a>：Android</li>\n<li><a href=\"https://jakewharton.com/blog/\">JAKE</a> ：纯英文</li>\n</ul>\n<h1>Java base</h1>\n<blockquote>\n<p>要学的不仅仅是 Java 吧</p>\n</blockquote>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-2.html\">官网文档 JVM 指令</a></li>\n<li><a href=\"https://thismj.cn/2019/02/14/qian-xi-zip-ge-shi/\">zip 文件格式</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jvms/se11/html/index.html\">官网 JVM</a></li>\n</ul>\n<h1>Reverse knowledge</h1>\n<blockquote>\n<p>逆行者，也可以很美</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.52pojie.cn\">吾爱破解</a></li>\n<li><a href=\"https://www.maldun.com\">安装包分析 - 魔盾安全</a></li>\n<li><a href=\"https://www.virustotal.com/gui/home/upload\">安装包报毒分析 - Virustotal</a></li>\n<li><a href=\"https://mogua.co\">安装包反编译分析 - 摸瓜</a></li>\n<li><a href=\"https://github.com/crifan/android_app_security_crack\">逆向基础知识</a></li>\n<li><a href=\"https://github.com/Efaker/FakerAndroid\">安装包反编译成 Android 工程 - Faker</a></li>\n</ul>\n<h1>Others</h1>\n<blockquote>\n<p>知识的深度是要的，但请你也不要忘记了知识广度的重要性</p>\n</blockquote>\n<h2 id=\"Image\">Image</h2>\n<ul>\n<li><a href=\"https://pixabay.com/zh/\">免费正版高清图片</a></li>\n<li><a href=\"http://pic.netbian.com\">4K 彼岸图网</a></li>\n<li><a href=\"https://www.remove.bg/zh/upload\">消除图片背景</a></li>\n</ul>\n<h2 id=\"Log\">Log</h2>\n<ul>\n<li><a href=\"https://www.eteste.com\">在线字符个数统计</a></li>\n<li><a href=\"https://tilipa.zlsam.com/#/tool?id=199&amp;name=%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7\">在线日志过滤</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl9lf56q100017tqpb3wjg5ry","tag_id":"cl9lf56q400047tqpbksff9ov","_id":"cl9lf56q6000c7tqp6wa3gxsk"},{"post_id":"cl9lf56q300037tqp9zc449a9","tag_id":"cl9lf56q6000b7tqp9ccyat2d","_id":"cl9lf56q8000h7tqp35mhdtzk"},{"post_id":"cl9lf56q7000g7tqpc5l266uj","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56q9000k7tqp4q21bl6x"},{"post_id":"cl9lf56q500067tqp4acp48se","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56qa000m7tqpa2j578wa"},{"post_id":"cl9lf56q8000i7tqpbz1odzy2","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56qa000p7tqpejlifctd"},{"post_id":"cl9lf56q9000l7tqp45kac1u9","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56qb000r7tqpb7ez4p0p"},{"post_id":"cl9lf56q500087tqp4kvffhm4","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56qb000u7tqpd4c989h5"},{"post_id":"cl9lf56qa000n7tqp44jd0v8o","tag_id":"cl9lf56q400047tqpbksff9ov","_id":"cl9lf56qb000w7tqpaqc2ax2d"},{"post_id":"cl9lf56qa000q7tqp3v2jh6s8","tag_id":"cl9lf56q400047tqpbksff9ov","_id":"cl9lf56qc000z7tqpfbyce4ux"},{"post_id":"cl9lf56q6000a7tqph9fg7har","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56qc00117tqp0stehkpe"},{"post_id":"cl9lf56qb000v7tqp94f9h8z4","tag_id":"cl9lf56q400047tqpbksff9ov","_id":"cl9lf56qc00147tqp3fol0mqe"},{"post_id":"cl9lf56q7000d7tqp9iezefwo","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56qd00167tqpef33d011"},{"post_id":"cl9lf56qc000x7tqpccjxe26g","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56qd00187tqpfon0deqp"},{"post_id":"cl9lf56q7000e7tqphmxcfk18","tag_id":"cl9lf56q7000f7tqp4uuuc6ot","_id":"cl9lf56qe001b7tqpg4yyajbe"},{"post_id":"cl9lf56qc00127tqpbwoi7j9e","tag_id":"cl9lf56q400047tqpbksff9ov","_id":"cl9lf56qe001d7tqpcqmz0a28"},{"post_id":"cl9lf56qd00157tqpek7g382c","tag_id":"cl9lf56q6000b7tqp9ccyat2d","_id":"cl9lf56qe001f7tqp0jie2nh1"},{"post_id":"cl9lf56qb000s7tqp9g3f519j","tag_id":"cl9lf56qc00137tqp24go3e32","_id":"cl9lf56qe001g7tqpd773b9zf"},{"post_id":"cl9lf56qe001c7tqp7efs4zmn","tag_id":"cl9lf56qd00197tqp66kj2bsr","_id":"cl9lf56qf001i7tqpfysc9ydq"},{"post_id":"cl9lf56qc00107tqp876xgjpc","tag_id":"cl9lf56qd00197tqp66kj2bsr","_id":"cl9lf56qf001j7tqpbtkmde6d"},{"post_id":"cl9lf56qd00177tqp25bcfkjy","tag_id":"cl9lf56qe001e7tqpg7nzhrf7","_id":"cl9lf56qf001k7tqphd376dw9"},{"post_id":"cl9lf56qd001a7tqp36t51ej5","tag_id":"cl9lf56qe001h7tqpgswgep9b","_id":"cl9lf56qf001l7tqpa0z2cnur"}],"Tag":[{"name":"字节码","_id":"cl9lf56q400047tqpbksff9ov"},{"name":"笔记","_id":"cl9lf56q6000b7tqp9ccyat2d"},{"name":"AOSP","_id":"cl9lf56q7000f7tqp4uuuc6ot"},{"name":"SDK","_id":"cl9lf56qc00137tqp24go3e32"},{"name":"工具","_id":"cl9lf56qd00197tqp66kj2bsr"},{"name":"刷机","_id":"cl9lf56qe001e7tqpg7nzhrf7"},{"name":"Native","_id":"cl9lf56qe001h7tqpgswgep9b"}]}}